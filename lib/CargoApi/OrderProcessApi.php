<?php
/**
 * OrderProcessApi
 * PHP version 7.2
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\CargoApi;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use MagDv\Cargomart\ApiException;
use MagDv\Cargomart\Configuration;
use MagDv\Cargomart\DebugPlugin;
use MagDv\Cargomart\HeaderSelector;
use MagDv\Cargomart\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * OrderProcessApi Class Doc Comment
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderProcessApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://cargomart.ru');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2OrderOrderIdCarrierContactPatch
     *
     * Отправить список кураторов перевозчика для добавления.
     *
     * @param  string $order_id Идентификатор заказа. (required)
     * @param  \MagDv\Cargomart\Dto\CarrierContactRequest $carrier_contact_request carrier_contact_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderCardResponse
     */
    public function apiV2OrderOrderIdCarrierContactPatch($order_id, $carrier_contact_request)
    {
        list($response) = $this->apiV2OrderOrderIdCarrierContactPatchWithHttpInfo($order_id, $carrier_contact_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdCarrierContactPatchWithHttpInfo
     *
     * Отправить список кураторов перевозчика для добавления.
     *
     * @param  string $order_id Идентификатор заказа. (required)
     * @param  \MagDv\Cargomart\Dto\CarrierContactRequest $carrier_contact_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderCardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdCarrierContactPatchWithHttpInfo($order_id, $carrier_contact_request)
    {
        $request = $this->apiV2OrderOrderIdCarrierContactPatchRequest($order_id, $carrier_contact_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderCardResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderCardResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdCarrierContactPatchAsync
     *
     * Отправить список кураторов перевозчика для добавления.
     *
     * @param  string $order_id Идентификатор заказа. (required)
     * @param  \MagDv\Cargomart\Dto\CarrierContactRequest $carrier_contact_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdCarrierContactPatchAsync($order_id, $carrier_contact_request)
    {
        return $this->apiV2OrderOrderIdCarrierContactPatchAsyncWithHttpInfo($order_id, $carrier_contact_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdCarrierContactPatchAsyncWithHttpInfo
     *
     * Отправить список кураторов перевозчика для добавления.
     *
     * @param  string $order_id Идентификатор заказа. (required)
     * @param  \MagDv\Cargomart\Dto\CarrierContactRequest $carrier_contact_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdCarrierContactPatchAsyncWithHttpInfo($order_id, $carrier_contact_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
        $request = $this->apiV2OrderOrderIdCarrierContactPatchRequest($order_id, $carrier_contact_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdCarrierContactPatch'
     *
     * @param  string $order_id Идентификатор заказа. (required)
     * @param  \MagDv\Cargomart\Dto\CarrierContactRequest $carrier_contact_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdCarrierContactPatchRequest($order_id, $carrier_contact_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdCarrierContactPatch'
            );
        }
        // verify the required parameter 'carrier_contact_request' is set
        if ($carrier_contact_request === null || (is_array($carrier_contact_request) && count($carrier_contact_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_contact_request when calling apiV2OrderOrderIdCarrierContactPatch'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/carrier-contact';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($carrier_contact_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($carrier_contact_request));
            } else {
                $httpBody = $carrier_contact_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PATCH', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdCarrierRefusePost
     *
     * Оформить отказ перевозчика.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\ReasonRequest $reason_request reason_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderCardResponse
     */
    public function apiV2OrderOrderIdCarrierRefusePost($order_id, $reason_request)
    {
        list($response) = $this->apiV2OrderOrderIdCarrierRefusePostWithHttpInfo($order_id, $reason_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdCarrierRefusePostWithHttpInfo
     *
     * Оформить отказ перевозчика.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\ReasonRequest $reason_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderCardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdCarrierRefusePostWithHttpInfo($order_id, $reason_request)
    {
        $request = $this->apiV2OrderOrderIdCarrierRefusePostRequest($order_id, $reason_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderCardResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderCardResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdCarrierRefusePostAsync
     *
     * Оформить отказ перевозчика.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\ReasonRequest $reason_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdCarrierRefusePostAsync($order_id, $reason_request)
    {
        return $this->apiV2OrderOrderIdCarrierRefusePostAsyncWithHttpInfo($order_id, $reason_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdCarrierRefusePostAsyncWithHttpInfo
     *
     * Оформить отказ перевозчика.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\ReasonRequest $reason_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdCarrierRefusePostAsyncWithHttpInfo($order_id, $reason_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
        $request = $this->apiV2OrderOrderIdCarrierRefusePostRequest($order_id, $reason_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdCarrierRefusePost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\ReasonRequest $reason_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdCarrierRefusePostRequest($order_id, $reason_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdCarrierRefusePost'
            );
        }
        // verify the required parameter 'reason_request' is set
        if ($reason_request === null || (is_array($reason_request) && count($reason_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reason_request when calling apiV2OrderOrderIdCarrierRefusePost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/carrier-refuse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($reason_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($reason_request));
            } else {
                $httpBody = $reason_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdConsignorContactPut
     *
     * Заменить список кураторов заказчика.
     *
     * @param  string $order_id Идентификатор заказа. (required)
     * @param  \MagDv\Cargomart\Dto\ConsignorContactRequest $consignor_contact_request consignor_contact_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderCardResponse
     */
    public function apiV2OrderOrderIdConsignorContactPut($order_id, $consignor_contact_request)
    {
        list($response) = $this->apiV2OrderOrderIdConsignorContactPutWithHttpInfo($order_id, $consignor_contact_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdConsignorContactPutWithHttpInfo
     *
     * Заменить список кураторов заказчика.
     *
     * @param  string $order_id Идентификатор заказа. (required)
     * @param  \MagDv\Cargomart\Dto\ConsignorContactRequest $consignor_contact_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderCardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdConsignorContactPutWithHttpInfo($order_id, $consignor_contact_request)
    {
        $request = $this->apiV2OrderOrderIdConsignorContactPutRequest($order_id, $consignor_contact_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderCardResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderCardResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdConsignorContactPutAsync
     *
     * Заменить список кураторов заказчика.
     *
     * @param  string $order_id Идентификатор заказа. (required)
     * @param  \MagDv\Cargomart\Dto\ConsignorContactRequest $consignor_contact_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdConsignorContactPutAsync($order_id, $consignor_contact_request)
    {
        return $this->apiV2OrderOrderIdConsignorContactPutAsyncWithHttpInfo($order_id, $consignor_contact_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdConsignorContactPutAsyncWithHttpInfo
     *
     * Заменить список кураторов заказчика.
     *
     * @param  string $order_id Идентификатор заказа. (required)
     * @param  \MagDv\Cargomart\Dto\ConsignorContactRequest $consignor_contact_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdConsignorContactPutAsyncWithHttpInfo($order_id, $consignor_contact_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
        $request = $this->apiV2OrderOrderIdConsignorContactPutRequest($order_id, $consignor_contact_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdConsignorContactPut'
     *
     * @param  string $order_id Идентификатор заказа. (required)
     * @param  \MagDv\Cargomart\Dto\ConsignorContactRequest $consignor_contact_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdConsignorContactPutRequest($order_id, $consignor_contact_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdConsignorContactPut'
            );
        }
        // verify the required parameter 'consignor_contact_request' is set
        if ($consignor_contact_request === null || (is_array($consignor_contact_request) && count($consignor_contact_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consignor_contact_request when calling apiV2OrderOrderIdConsignorContactPut'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/consignor-contact';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($consignor_contact_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($consignor_contact_request));
            } else {
                $httpBody = $consignor_contact_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdConsignorDocumentPost
     *
     * Загрузить документы отправителя.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDocumentFileIdRequest $order_document_file_id_request order_document_file_id_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderCardResponse
     */
    public function apiV2OrderOrderIdConsignorDocumentPost($order_id, $order_document_file_id_request)
    {
        list($response) = $this->apiV2OrderOrderIdConsignorDocumentPostWithHttpInfo($order_id, $order_document_file_id_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdConsignorDocumentPostWithHttpInfo
     *
     * Загрузить документы отправителя.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDocumentFileIdRequest $order_document_file_id_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderCardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdConsignorDocumentPostWithHttpInfo($order_id, $order_document_file_id_request)
    {
        $request = $this->apiV2OrderOrderIdConsignorDocumentPostRequest($order_id, $order_document_file_id_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderCardResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderCardResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdConsignorDocumentPostAsync
     *
     * Загрузить документы отправителя.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDocumentFileIdRequest $order_document_file_id_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdConsignorDocumentPostAsync($order_id, $order_document_file_id_request)
    {
        return $this->apiV2OrderOrderIdConsignorDocumentPostAsyncWithHttpInfo($order_id, $order_document_file_id_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdConsignorDocumentPostAsyncWithHttpInfo
     *
     * Загрузить документы отправителя.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDocumentFileIdRequest $order_document_file_id_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdConsignorDocumentPostAsyncWithHttpInfo($order_id, $order_document_file_id_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
        $request = $this->apiV2OrderOrderIdConsignorDocumentPostRequest($order_id, $order_document_file_id_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdConsignorDocumentPost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDocumentFileIdRequest $order_document_file_id_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdConsignorDocumentPostRequest($order_id, $order_document_file_id_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdConsignorDocumentPost'
            );
        }
        // verify the required parameter 'order_document_file_id_request' is set
        if ($order_document_file_id_request === null || (is_array($order_document_file_id_request) && count($order_document_file_id_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_document_file_id_request when calling apiV2OrderOrderIdConsignorDocumentPost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/consignor-document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_document_file_id_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_document_file_id_request));
            } else {
                $httpBody = $order_document_file_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdConsignorRefusePost
     *
     * Оформить отказ отправителя.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\ReasonRequest $reason_request reason_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderCardResponse
     */
    public function apiV2OrderOrderIdConsignorRefusePost($order_id, $reason_request)
    {
        list($response) = $this->apiV2OrderOrderIdConsignorRefusePostWithHttpInfo($order_id, $reason_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdConsignorRefusePostWithHttpInfo
     *
     * Оформить отказ отправителя.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\ReasonRequest $reason_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderCardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdConsignorRefusePostWithHttpInfo($order_id, $reason_request)
    {
        $request = $this->apiV2OrderOrderIdConsignorRefusePostRequest($order_id, $reason_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderCardResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderCardResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdConsignorRefusePostAsync
     *
     * Оформить отказ отправителя.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\ReasonRequest $reason_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdConsignorRefusePostAsync($order_id, $reason_request)
    {
        return $this->apiV2OrderOrderIdConsignorRefusePostAsyncWithHttpInfo($order_id, $reason_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdConsignorRefusePostAsyncWithHttpInfo
     *
     * Оформить отказ отправителя.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\ReasonRequest $reason_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdConsignorRefusePostAsyncWithHttpInfo($order_id, $reason_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
        $request = $this->apiV2OrderOrderIdConsignorRefusePostRequest($order_id, $reason_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdConsignorRefusePost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\ReasonRequest $reason_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdConsignorRefusePostRequest($order_id, $reason_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdConsignorRefusePost'
            );
        }
        // verify the required parameter 'reason_request' is set
        if ($reason_request === null || (is_array($reason_request) && count($reason_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reason_request when calling apiV2OrderOrderIdConsignorRefusePost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/consignor-refuse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($reason_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($reason_request));
            } else {
                $httpBody = $reason_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdDocumentPost
     *
     * Загрузить документы перевозчика.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDocumentFileIdRequest $order_document_file_id_request order_document_file_id_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderCardResponse
     */
    public function apiV2OrderOrderIdDocumentPost($order_id, $order_document_file_id_request)
    {
        list($response) = $this->apiV2OrderOrderIdDocumentPostWithHttpInfo($order_id, $order_document_file_id_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdDocumentPostWithHttpInfo
     *
     * Загрузить документы перевозчика.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDocumentFileIdRequest $order_document_file_id_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderCardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdDocumentPostWithHttpInfo($order_id, $order_document_file_id_request)
    {
        $request = $this->apiV2OrderOrderIdDocumentPostRequest($order_id, $order_document_file_id_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderCardResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderCardResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdDocumentPostAsync
     *
     * Загрузить документы перевозчика.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDocumentFileIdRequest $order_document_file_id_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdDocumentPostAsync($order_id, $order_document_file_id_request)
    {
        return $this->apiV2OrderOrderIdDocumentPostAsyncWithHttpInfo($order_id, $order_document_file_id_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdDocumentPostAsyncWithHttpInfo
     *
     * Загрузить документы перевозчика.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDocumentFileIdRequest $order_document_file_id_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdDocumentPostAsyncWithHttpInfo($order_id, $order_document_file_id_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
        $request = $this->apiV2OrderOrderIdDocumentPostRequest($order_id, $order_document_file_id_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdDocumentPost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDocumentFileIdRequest $order_document_file_id_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdDocumentPostRequest($order_id, $order_document_file_id_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdDocumentPost'
            );
        }
        // verify the required parameter 'order_document_file_id_request' is set
        if ($order_document_file_id_request === null || (is_array($order_document_file_id_request) && count($order_document_file_id_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_document_file_id_request when calling apiV2OrderOrderIdDocumentPost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_document_file_id_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_document_file_id_request));
            } else {
                $httpBody = $order_document_file_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdExpeditorAssignmentGet
     *
     * Скачать поручение экспедитору.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\FileLinkResponse
     */
    public function apiV2OrderOrderIdExpeditorAssignmentGet($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdExpeditorAssignmentGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdExpeditorAssignmentGetWithHttpInfo
     *
     * Скачать поручение экспедитору.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\FileLinkResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdExpeditorAssignmentGetWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdExpeditorAssignmentGetRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\FileLinkResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\FileLinkResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\FileLinkResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\FileLinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdExpeditorAssignmentGetAsync
     *
     * Скачать поручение экспедитору.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdExpeditorAssignmentGetAsync($order_id)
    {
        return $this->apiV2OrderOrderIdExpeditorAssignmentGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdExpeditorAssignmentGetAsyncWithHttpInfo
     *
     * Скачать поручение экспедитору.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdExpeditorAssignmentGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\FileLinkResponse';
        $request = $this->apiV2OrderOrderIdExpeditorAssignmentGetRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdExpeditorAssignmentGet'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdExpeditorAssignmentGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdExpeditorAssignmentGet'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/expeditor-assignment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdFinishPost
     *
     * Ручное завершение заказа
     *
     * @param  string $order_id Идентификатор заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderCardResponse
     */
    public function apiV2OrderOrderIdFinishPost($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdFinishPostWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdFinishPostWithHttpInfo
     *
     * Ручное завершение заказа
     *
     * @param  string $order_id Идентификатор заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderCardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdFinishPostWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdFinishPostRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderCardResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderCardResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdFinishPostAsync
     *
     * Ручное завершение заказа
     *
     * @param  string $order_id Идентификатор заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdFinishPostAsync($order_id)
    {
        return $this->apiV2OrderOrderIdFinishPostAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdFinishPostAsyncWithHttpInfo
     *
     * Ручное завершение заказа
     *
     * @param  string $order_id Идентификатор заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdFinishPostAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
        $request = $this->apiV2OrderOrderIdFinishPostRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdFinishPost'
     *
     * @param  string $order_id Идентификатор заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdFinishPostRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdFinishPost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/finish';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdGeneralPartnerDocumentPost
     *
     * Генеральный партнер прикрепляет документы.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDocumentFileIdRequest $order_document_file_id_request order_document_file_id_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderCardResponse
     */
    public function apiV2OrderOrderIdGeneralPartnerDocumentPost($order_id, $order_document_file_id_request)
    {
        list($response) = $this->apiV2OrderOrderIdGeneralPartnerDocumentPostWithHttpInfo($order_id, $order_document_file_id_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdGeneralPartnerDocumentPostWithHttpInfo
     *
     * Генеральный партнер прикрепляет документы.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDocumentFileIdRequest $order_document_file_id_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderCardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdGeneralPartnerDocumentPostWithHttpInfo($order_id, $order_document_file_id_request)
    {
        $request = $this->apiV2OrderOrderIdGeneralPartnerDocumentPostRequest($order_id, $order_document_file_id_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderCardResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderCardResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdGeneralPartnerDocumentPostAsync
     *
     * Генеральный партнер прикрепляет документы.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDocumentFileIdRequest $order_document_file_id_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdGeneralPartnerDocumentPostAsync($order_id, $order_document_file_id_request)
    {
        return $this->apiV2OrderOrderIdGeneralPartnerDocumentPostAsyncWithHttpInfo($order_id, $order_document_file_id_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdGeneralPartnerDocumentPostAsyncWithHttpInfo
     *
     * Генеральный партнер прикрепляет документы.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDocumentFileIdRequest $order_document_file_id_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdGeneralPartnerDocumentPostAsyncWithHttpInfo($order_id, $order_document_file_id_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
        $request = $this->apiV2OrderOrderIdGeneralPartnerDocumentPostRequest($order_id, $order_document_file_id_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdGeneralPartnerDocumentPost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDocumentFileIdRequest $order_document_file_id_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdGeneralPartnerDocumentPostRequest($order_id, $order_document_file_id_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdGeneralPartnerDocumentPost'
            );
        }
        // verify the required parameter 'order_document_file_id_request' is set
        if ($order_document_file_id_request === null || (is_array($order_document_file_id_request) && count($order_document_file_id_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_document_file_id_request when calling apiV2OrderOrderIdGeneralPartnerDocumentPost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/general-partner-document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_document_file_id_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_document_file_id_request));
            } else {
                $httpBody = $order_document_file_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdGeneralPartnerProposalTemplateGet
     *
     * Генеральный партнер. Скачать заяку на заказ для ГП.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\FilterStringBooleanEnum $remove_facsimile Убрать печать из заявки (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\FileLinkResponse
     */
    public function apiV2OrderOrderIdGeneralPartnerProposalTemplateGet($order_id, $remove_facsimile = null)
    {
        list($response) = $this->apiV2OrderOrderIdGeneralPartnerProposalTemplateGetWithHttpInfo($order_id, $remove_facsimile);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdGeneralPartnerProposalTemplateGetWithHttpInfo
     *
     * Генеральный партнер. Скачать заяку на заказ для ГП.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\FilterStringBooleanEnum $remove_facsimile Убрать печать из заявки (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\FileLinkResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdGeneralPartnerProposalTemplateGetWithHttpInfo($order_id, $remove_facsimile = null)
    {
        $request = $this->apiV2OrderOrderIdGeneralPartnerProposalTemplateGetRequest($order_id, $remove_facsimile);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\FileLinkResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\FileLinkResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\FileLinkResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\FileLinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdGeneralPartnerProposalTemplateGetAsync
     *
     * Генеральный партнер. Скачать заяку на заказ для ГП.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\FilterStringBooleanEnum $remove_facsimile Убрать печать из заявки (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdGeneralPartnerProposalTemplateGetAsync($order_id, $remove_facsimile = null)
    {
        return $this->apiV2OrderOrderIdGeneralPartnerProposalTemplateGetAsyncWithHttpInfo($order_id, $remove_facsimile)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdGeneralPartnerProposalTemplateGetAsyncWithHttpInfo
     *
     * Генеральный партнер. Скачать заяку на заказ для ГП.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\FilterStringBooleanEnum $remove_facsimile Убрать печать из заявки (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdGeneralPartnerProposalTemplateGetAsyncWithHttpInfo($order_id, $remove_facsimile = null)
    {
        $returnType = '\MagDv\Cargomart\Dto\FileLinkResponse';
        $request = $this->apiV2OrderOrderIdGeneralPartnerProposalTemplateGetRequest($order_id, $remove_facsimile);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdGeneralPartnerProposalTemplateGet'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\FilterStringBooleanEnum $remove_facsimile Убрать печать из заявки (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdGeneralPartnerProposalTemplateGetRequest($order_id, $remove_facsimile = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdGeneralPartnerProposalTemplateGet'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/general-partner-proposal-template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($remove_facsimile !== null) {
            if('form' === 'form' && is_array($remove_facsimile)) {
                foreach($remove_facsimile as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['removeFacsimile'] = $remove_facsimile;
            }
        }


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdGeneralPartnerProxyTemplateGet
     *
     * Генеральный партнер. Скачать доверенность на заказ для ГП.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\FilterStringBooleanEnum $remove_facsimile Убрать печать из заявки (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\FileLinkResponse
     */
    public function apiV2OrderOrderIdGeneralPartnerProxyTemplateGet($order_id, $remove_facsimile = null)
    {
        list($response) = $this->apiV2OrderOrderIdGeneralPartnerProxyTemplateGetWithHttpInfo($order_id, $remove_facsimile);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdGeneralPartnerProxyTemplateGetWithHttpInfo
     *
     * Генеральный партнер. Скачать доверенность на заказ для ГП.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\FilterStringBooleanEnum $remove_facsimile Убрать печать из заявки (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\FileLinkResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdGeneralPartnerProxyTemplateGetWithHttpInfo($order_id, $remove_facsimile = null)
    {
        $request = $this->apiV2OrderOrderIdGeneralPartnerProxyTemplateGetRequest($order_id, $remove_facsimile);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\FileLinkResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\FileLinkResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\FileLinkResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\FileLinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdGeneralPartnerProxyTemplateGetAsync
     *
     * Генеральный партнер. Скачать доверенность на заказ для ГП.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\FilterStringBooleanEnum $remove_facsimile Убрать печать из заявки (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdGeneralPartnerProxyTemplateGetAsync($order_id, $remove_facsimile = null)
    {
        return $this->apiV2OrderOrderIdGeneralPartnerProxyTemplateGetAsyncWithHttpInfo($order_id, $remove_facsimile)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdGeneralPartnerProxyTemplateGetAsyncWithHttpInfo
     *
     * Генеральный партнер. Скачать доверенность на заказ для ГП.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\FilterStringBooleanEnum $remove_facsimile Убрать печать из заявки (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdGeneralPartnerProxyTemplateGetAsyncWithHttpInfo($order_id, $remove_facsimile = null)
    {
        $returnType = '\MagDv\Cargomart\Dto\FileLinkResponse';
        $request = $this->apiV2OrderOrderIdGeneralPartnerProxyTemplateGetRequest($order_id, $remove_facsimile);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdGeneralPartnerProxyTemplateGet'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\FilterStringBooleanEnum $remove_facsimile Убрать печать из заявки (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdGeneralPartnerProxyTemplateGetRequest($order_id, $remove_facsimile = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdGeneralPartnerProxyTemplateGet'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/general-partner-proxy-template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($remove_facsimile !== null) {
            if('form' === 'form' && is_array($remove_facsimile)) {
                foreach($remove_facsimile as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['removeFacsimile'] = $remove_facsimile;
            }
        }


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdGeneralPartnerTemplateApprovePost
     *
     * Генеральный партнер создает документы из шаблонов.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderCardResponse
     */
    public function apiV2OrderOrderIdGeneralPartnerTemplateApprovePost($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdGeneralPartnerTemplateApprovePostWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdGeneralPartnerTemplateApprovePostWithHttpInfo
     *
     * Генеральный партнер создает документы из шаблонов.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderCardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdGeneralPartnerTemplateApprovePostWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdGeneralPartnerTemplateApprovePostRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderCardResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderCardResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdGeneralPartnerTemplateApprovePostAsync
     *
     * Генеральный партнер создает документы из шаблонов.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdGeneralPartnerTemplateApprovePostAsync($order_id)
    {
        return $this->apiV2OrderOrderIdGeneralPartnerTemplateApprovePostAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdGeneralPartnerTemplateApprovePostAsyncWithHttpInfo
     *
     * Генеральный партнер создает документы из шаблонов.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdGeneralPartnerTemplateApprovePostAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
        $request = $this->apiV2OrderOrderIdGeneralPartnerTemplateApprovePostRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdGeneralPartnerTemplateApprovePost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdGeneralPartnerTemplateApprovePostRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdGeneralPartnerTemplateApprovePost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/general-partner-template-approve';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdInvoiceGpCarrierGet
     *
     * Получение данных о платежах генерального партнера для перевозчика
     *
     * @param  string $order_id Идентификатор заказа (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderInvoiceResponse
     */
    public function apiV2OrderOrderIdInvoiceGpCarrierGet($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdInvoiceGpCarrierGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdInvoiceGpCarrierGetWithHttpInfo
     *
     * Получение данных о платежах генерального партнера для перевозчика
     *
     * @param  string $order_id Идентификатор заказа (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderInvoiceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdInvoiceGpCarrierGetWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdInvoiceGpCarrierGetRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderInvoiceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderInvoiceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderInvoiceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderInvoiceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdInvoiceGpCarrierGetAsync
     *
     * Получение данных о платежах генерального партнера для перевозчика
     *
     * @param  string $order_id Идентификатор заказа (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdInvoiceGpCarrierGetAsync($order_id)
    {
        return $this->apiV2OrderOrderIdInvoiceGpCarrierGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdInvoiceGpCarrierGetAsyncWithHttpInfo
     *
     * Получение данных о платежах генерального партнера для перевозчика
     *
     * @param  string $order_id Идентификатор заказа (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdInvoiceGpCarrierGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderInvoiceResponse';
        $request = $this->apiV2OrderOrderIdInvoiceGpCarrierGetRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdInvoiceGpCarrierGet'
     *
     * @param  string $order_id Идентификатор заказа (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdInvoiceGpCarrierGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdInvoiceGpCarrierGet'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/invoice-gp-carrier';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdInvoiceGpCarrierPut
     *
     * Добавление данных о платежах генерального партнера для перевозчика
     *
     * @param  string $order_id Идентификатор заказа (required)
     * @param  \MagDv\Cargomart\Dto\OrderInvoiceRequest $order_invoice_request order_invoice_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderInvoiceResponse
     */
    public function apiV2OrderOrderIdInvoiceGpCarrierPut($order_id, $order_invoice_request)
    {
        list($response) = $this->apiV2OrderOrderIdInvoiceGpCarrierPutWithHttpInfo($order_id, $order_invoice_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdInvoiceGpCarrierPutWithHttpInfo
     *
     * Добавление данных о платежах генерального партнера для перевозчика
     *
     * @param  string $order_id Идентификатор заказа (required)
     * @param  \MagDv\Cargomart\Dto\OrderInvoiceRequest $order_invoice_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderInvoiceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdInvoiceGpCarrierPutWithHttpInfo($order_id, $order_invoice_request)
    {
        $request = $this->apiV2OrderOrderIdInvoiceGpCarrierPutRequest($order_id, $order_invoice_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderInvoiceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderInvoiceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderInvoiceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderInvoiceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdInvoiceGpCarrierPutAsync
     *
     * Добавление данных о платежах генерального партнера для перевозчика
     *
     * @param  string $order_id Идентификатор заказа (required)
     * @param  \MagDv\Cargomart\Dto\OrderInvoiceRequest $order_invoice_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdInvoiceGpCarrierPutAsync($order_id, $order_invoice_request)
    {
        return $this->apiV2OrderOrderIdInvoiceGpCarrierPutAsyncWithHttpInfo($order_id, $order_invoice_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdInvoiceGpCarrierPutAsyncWithHttpInfo
     *
     * Добавление данных о платежах генерального партнера для перевозчика
     *
     * @param  string $order_id Идентификатор заказа (required)
     * @param  \MagDv\Cargomart\Dto\OrderInvoiceRequest $order_invoice_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdInvoiceGpCarrierPutAsyncWithHttpInfo($order_id, $order_invoice_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderInvoiceResponse';
        $request = $this->apiV2OrderOrderIdInvoiceGpCarrierPutRequest($order_id, $order_invoice_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdInvoiceGpCarrierPut'
     *
     * @param  string $order_id Идентификатор заказа (required)
     * @param  \MagDv\Cargomart\Dto\OrderInvoiceRequest $order_invoice_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdInvoiceGpCarrierPutRequest($order_id, $order_invoice_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdInvoiceGpCarrierPut'
            );
        }
        // verify the required parameter 'order_invoice_request' is set
        if ($order_invoice_request === null || (is_array($order_invoice_request) && count($order_invoice_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_invoice_request when calling apiV2OrderOrderIdInvoiceGpCarrierPut'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/invoice-gp-carrier';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_invoice_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_invoice_request));
            } else {
                $httpBody = $order_invoice_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdMonitoringPost
     *
     * Добавить ссылку на отслеживание.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\MonitoringRequest $monitoring_request monitoring_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderCardResponse
     */
    public function apiV2OrderOrderIdMonitoringPost($order_id, $monitoring_request)
    {
        list($response) = $this->apiV2OrderOrderIdMonitoringPostWithHttpInfo($order_id, $monitoring_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdMonitoringPostWithHttpInfo
     *
     * Добавить ссылку на отслеживание.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\MonitoringRequest $monitoring_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderCardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdMonitoringPostWithHttpInfo($order_id, $monitoring_request)
    {
        $request = $this->apiV2OrderOrderIdMonitoringPostRequest($order_id, $monitoring_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 201:
                    if ('\MagDv\Cargomart\Dto\OrderCardResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderCardResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdMonitoringPostAsync
     *
     * Добавить ссылку на отслеживание.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\MonitoringRequest $monitoring_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdMonitoringPostAsync($order_id, $monitoring_request)
    {
        return $this->apiV2OrderOrderIdMonitoringPostAsyncWithHttpInfo($order_id, $monitoring_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdMonitoringPostAsyncWithHttpInfo
     *
     * Добавить ссылку на отслеживание.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\MonitoringRequest $monitoring_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdMonitoringPostAsyncWithHttpInfo($order_id, $monitoring_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
        $request = $this->apiV2OrderOrderIdMonitoringPostRequest($order_id, $monitoring_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdMonitoringPost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\MonitoringRequest $monitoring_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdMonitoringPostRequest($order_id, $monitoring_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdMonitoringPost'
            );
        }
        // verify the required parameter 'monitoring_request' is set
        if ($monitoring_request === null || (is_array($monitoring_request) && count($monitoring_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $monitoring_request when calling apiV2OrderOrderIdMonitoringPost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/monitoring';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($monitoring_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($monitoring_request));
            } else {
                $httpBody = $monitoring_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdProposalGet
     *
     * Скачать заявку на заказ.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\FileLinkResponse
     */
    public function apiV2OrderOrderIdProposalGet($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdProposalGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdProposalGetWithHttpInfo
     *
     * Скачать заявку на заказ.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\FileLinkResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdProposalGetWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdProposalGetRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\FileLinkResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\FileLinkResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\FileLinkResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\FileLinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdProposalGetAsync
     *
     * Скачать заявку на заказ.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProposalGetAsync($order_id)
    {
        return $this->apiV2OrderOrderIdProposalGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdProposalGetAsyncWithHttpInfo
     *
     * Скачать заявку на заказ.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProposalGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\FileLinkResponse';
        $request = $this->apiV2OrderOrderIdProposalGetRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdProposalGet'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdProposalGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdProposalGet'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/proposal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorAdditionalInfoGet
     *
     * Получить добавочные данные, или проверить их наличие.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderProxyInfoResponse
     */
    public function apiV2OrderOrderIdProxyConsignorAdditionalInfoGet($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdProxyConsignorAdditionalInfoGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorAdditionalInfoGetWithHttpInfo
     *
     * Получить добавочные данные, или проверить их наличие.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderProxyInfoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdProxyConsignorAdditionalInfoGetWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdProxyConsignorAdditionalInfoGetRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderProxyInfoResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderProxyInfoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderProxyInfoResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderProxyInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorAdditionalInfoGetAsync
     *
     * Получить добавочные данные, или проверить их наличие.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyConsignorAdditionalInfoGetAsync($order_id)
    {
        return $this->apiV2OrderOrderIdProxyConsignorAdditionalInfoGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorAdditionalInfoGetAsyncWithHttpInfo
     *
     * Получить добавочные данные, или проверить их наличие.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyConsignorAdditionalInfoGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderProxyInfoResponse';
        $request = $this->apiV2OrderOrderIdProxyConsignorAdditionalInfoGetRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdProxyConsignorAdditionalInfoGet'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdProxyConsignorAdditionalInfoGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdProxyConsignorAdditionalInfoGet'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/proxy-consignor-additional-info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorAdditionalInfoPost
     *
     * Заполнить или изменить добавочные данные в будущую довереность на самовывоз c\\без факсимиле.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderProxyInfoRequest $order_proxy_info_request order_proxy_info_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderProxyInfoResponse
     */
    public function apiV2OrderOrderIdProxyConsignorAdditionalInfoPost($order_id, $order_proxy_info_request)
    {
        list($response) = $this->apiV2OrderOrderIdProxyConsignorAdditionalInfoPostWithHttpInfo($order_id, $order_proxy_info_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorAdditionalInfoPostWithHttpInfo
     *
     * Заполнить или изменить добавочные данные в будущую довереность на самовывоз c\\без факсимиле.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderProxyInfoRequest $order_proxy_info_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderProxyInfoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdProxyConsignorAdditionalInfoPostWithHttpInfo($order_id, $order_proxy_info_request)
    {
        $request = $this->apiV2OrderOrderIdProxyConsignorAdditionalInfoPostRequest($order_id, $order_proxy_info_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderProxyInfoResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderProxyInfoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderProxyInfoResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderProxyInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorAdditionalInfoPostAsync
     *
     * Заполнить или изменить добавочные данные в будущую довереность на самовывоз c\\без факсимиле.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderProxyInfoRequest $order_proxy_info_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyConsignorAdditionalInfoPostAsync($order_id, $order_proxy_info_request)
    {
        return $this->apiV2OrderOrderIdProxyConsignorAdditionalInfoPostAsyncWithHttpInfo($order_id, $order_proxy_info_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorAdditionalInfoPostAsyncWithHttpInfo
     *
     * Заполнить или изменить добавочные данные в будущую довереность на самовывоз c\\без факсимиле.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderProxyInfoRequest $order_proxy_info_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyConsignorAdditionalInfoPostAsyncWithHttpInfo($order_id, $order_proxy_info_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderProxyInfoResponse';
        $request = $this->apiV2OrderOrderIdProxyConsignorAdditionalInfoPostRequest($order_id, $order_proxy_info_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdProxyConsignorAdditionalInfoPost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderProxyInfoRequest $order_proxy_info_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdProxyConsignorAdditionalInfoPostRequest($order_id, $order_proxy_info_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdProxyConsignorAdditionalInfoPost'
            );
        }
        // verify the required parameter 'order_proxy_info_request' is set
        if ($order_proxy_info_request === null || (is_array($order_proxy_info_request) && count($order_proxy_info_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_proxy_info_request when calling apiV2OrderOrderIdProxyConsignorAdditionalInfoPost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/proxy-consignor-additional-info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_proxy_info_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_proxy_info_request));
            } else {
                $httpBody = $order_proxy_info_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoGet
     *
     * Получить добавочные данные, или проверить их наличие.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderAdditionalInfoResponse
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoGet($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoGetWithHttpInfo
     *
     * Получить добавочные данные, или проверить их наличие.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderAdditionalInfoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoGetWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoGetRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderAdditionalInfoResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderAdditionalInfoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderAdditionalInfoResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderAdditionalInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoGetAsync
     *
     * Получить добавочные данные, или проверить их наличие.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoGetAsync($order_id)
    {
        return $this->apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoGetAsyncWithHttpInfo
     *
     * Получить добавочные данные, или проверить их наличие.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderAdditionalInfoResponse';
        $request = $this->apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoGetRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoGet'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoGet'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/proxy-consignor-carrier-additional-info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoPatch
     *
     * Заполнить или изменить добавочные данные в будущую довереность на самовывоз c\\без факсимиле.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderAdditionalInfoRequest $order_additional_info_request order_additional_info_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderAdditionalInfoResponse
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoPatch($order_id, $order_additional_info_request)
    {
        list($response) = $this->apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoPatchWithHttpInfo($order_id, $order_additional_info_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoPatchWithHttpInfo
     *
     * Заполнить или изменить добавочные данные в будущую довереность на самовывоз c\\без факсимиле.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderAdditionalInfoRequest $order_additional_info_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderAdditionalInfoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoPatchWithHttpInfo($order_id, $order_additional_info_request)
    {
        $request = $this->apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoPatchRequest($order_id, $order_additional_info_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderAdditionalInfoResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderAdditionalInfoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderAdditionalInfoResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderAdditionalInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoPatchAsync
     *
     * Заполнить или изменить добавочные данные в будущую довереность на самовывоз c\\без факсимиле.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderAdditionalInfoRequest $order_additional_info_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoPatchAsync($order_id, $order_additional_info_request)
    {
        return $this->apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoPatchAsyncWithHttpInfo($order_id, $order_additional_info_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoPatchAsyncWithHttpInfo
     *
     * Заполнить или изменить добавочные данные в будущую довереность на самовывоз c\\без факсимиле.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderAdditionalInfoRequest $order_additional_info_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoPatchAsyncWithHttpInfo($order_id, $order_additional_info_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderAdditionalInfoResponse';
        $request = $this->apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoPatchRequest($order_id, $order_additional_info_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoPatch'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderAdditionalInfoRequest $order_additional_info_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoPatchRequest($order_id, $order_additional_info_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoPatch'
            );
        }
        // verify the required parameter 'order_additional_info_request' is set
        if ($order_additional_info_request === null || (is_array($order_additional_info_request) && count($order_additional_info_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_additional_info_request when calling apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoPatch'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/proxy-consignor-carrier-additional-info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_additional_info_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_additional_info_request));
            } else {
                $httpBody = $order_additional_info_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PATCH', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorCarrierGet
     *
     * Скачать доверенность на заказ для заказчика.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $with_additional Cформировать доверенности на самовывоз с заполненными добавочными данными (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\FileLinkResponse
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierGet($order_id, $with_additional = null)
    {
        list($response) = $this->apiV2OrderOrderIdProxyConsignorCarrierGetWithHttpInfo($order_id, $with_additional);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorCarrierGetWithHttpInfo
     *
     * Скачать доверенность на заказ для заказчика.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $with_additional Cформировать доверенности на самовывоз с заполненными добавочными данными (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\FileLinkResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierGetWithHttpInfo($order_id, $with_additional = null)
    {
        $request = $this->apiV2OrderOrderIdProxyConsignorCarrierGetRequest($order_id, $with_additional);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\FileLinkResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\FileLinkResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\FileLinkResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\FileLinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorCarrierGetAsync
     *
     * Скачать доверенность на заказ для заказчика.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $with_additional Cформировать доверенности на самовывоз с заполненными добавочными данными (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierGetAsync($order_id, $with_additional = null)
    {
        return $this->apiV2OrderOrderIdProxyConsignorCarrierGetAsyncWithHttpInfo($order_id, $with_additional)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorCarrierGetAsyncWithHttpInfo
     *
     * Скачать доверенность на заказ для заказчика.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $with_additional Cформировать доверенности на самовывоз с заполненными добавочными данными (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierGetAsyncWithHttpInfo($order_id, $with_additional = null)
    {
        $returnType = '\MagDv\Cargomart\Dto\FileLinkResponse';
        $request = $this->apiV2OrderOrderIdProxyConsignorCarrierGetRequest($order_id, $with_additional);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdProxyConsignorCarrierGet'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $with_additional Cформировать доверенности на самовывоз с заполненными добавочными данными (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierGetRequest($order_id, $with_additional = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdProxyConsignorCarrierGet'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/proxy-consignor-carrier';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($with_additional !== null) {
            if('form' === 'form' && is_array($with_additional)) {
                foreach($with_additional as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withAdditional'] = $with_additional;
            }
        }


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorCarrierSendPost
     *
     * Отправить ссылку доверенности на самовывоз по email.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\ProxyPublicLinkDataRequest $proxy_public_link_data_request proxy_public_link_data_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierSendPost($order_id, $proxy_public_link_data_request)
    {
        $this->apiV2OrderOrderIdProxyConsignorCarrierSendPostWithHttpInfo($order_id, $proxy_public_link_data_request);
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorCarrierSendPostWithHttpInfo
     *
     * Отправить ссылку доверенности на самовывоз по email.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\ProxyPublicLinkDataRequest $proxy_public_link_data_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierSendPostWithHttpInfo($order_id, $proxy_public_link_data_request)
    {
        $request = $this->apiV2OrderOrderIdProxyConsignorCarrierSendPostRequest($order_id, $proxy_public_link_data_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorCarrierSendPostAsync
     *
     * Отправить ссылку доверенности на самовывоз по email.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\ProxyPublicLinkDataRequest $proxy_public_link_data_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierSendPostAsync($order_id, $proxy_public_link_data_request)
    {
        return $this->apiV2OrderOrderIdProxyConsignorCarrierSendPostAsyncWithHttpInfo($order_id, $proxy_public_link_data_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorCarrierSendPostAsyncWithHttpInfo
     *
     * Отправить ссылку доверенности на самовывоз по email.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\ProxyPublicLinkDataRequest $proxy_public_link_data_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierSendPostAsyncWithHttpInfo($order_id, $proxy_public_link_data_request)
    {
        $returnType = '';
        $request = $this->apiV2OrderOrderIdProxyConsignorCarrierSendPostRequest($order_id, $proxy_public_link_data_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdProxyConsignorCarrierSendPost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\ProxyPublicLinkDataRequest $proxy_public_link_data_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierSendPostRequest($order_id, $proxy_public_link_data_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdProxyConsignorCarrierSendPost'
            );
        }
        // verify the required parameter 'proxy_public_link_data_request' is set
        if ($proxy_public_link_data_request === null || (is_array($proxy_public_link_data_request) && count($proxy_public_link_data_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proxy_public_link_data_request when calling apiV2OrderOrderIdProxyConsignorCarrierSendPost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/proxy-consignor-carrier-send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($proxy_public_link_data_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($proxy_public_link_data_request));
            } else {
                $httpBody = $proxy_public_link_data_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorCarrierWithFacsimileGet
     *
     * Скачать доверенность на заказ для заказчика с факсимиле.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $with_additional Cформировать доверенность на самовывоз с факсимиле с заполненными добавочными данными (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\FileLinkResponse
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierWithFacsimileGet($order_id, $with_additional = null)
    {
        list($response) = $this->apiV2OrderOrderIdProxyConsignorCarrierWithFacsimileGetWithHttpInfo($order_id, $with_additional);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorCarrierWithFacsimileGetWithHttpInfo
     *
     * Скачать доверенность на заказ для заказчика с факсимиле.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $with_additional Cформировать доверенность на самовывоз с факсимиле с заполненными добавочными данными (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\FileLinkResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierWithFacsimileGetWithHttpInfo($order_id, $with_additional = null)
    {
        $request = $this->apiV2OrderOrderIdProxyConsignorCarrierWithFacsimileGetRequest($order_id, $with_additional);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\FileLinkResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\FileLinkResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\FileLinkResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\FileLinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorCarrierWithFacsimileGetAsync
     *
     * Скачать доверенность на заказ для заказчика с факсимиле.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $with_additional Cформировать доверенность на самовывоз с факсимиле с заполненными добавочными данными (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierWithFacsimileGetAsync($order_id, $with_additional = null)
    {
        return $this->apiV2OrderOrderIdProxyConsignorCarrierWithFacsimileGetAsyncWithHttpInfo($order_id, $with_additional)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorCarrierWithFacsimileGetAsyncWithHttpInfo
     *
     * Скачать доверенность на заказ для заказчика с факсимиле.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $with_additional Cформировать доверенность на самовывоз с факсимиле с заполненными добавочными данными (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierWithFacsimileGetAsyncWithHttpInfo($order_id, $with_additional = null)
    {
        $returnType = '\MagDv\Cargomart\Dto\FileLinkResponse';
        $request = $this->apiV2OrderOrderIdProxyConsignorCarrierWithFacsimileGetRequest($order_id, $with_additional);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdProxyConsignorCarrierWithFacsimileGet'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $with_additional Cформировать доверенность на самовывоз с факсимиле с заполненными добавочными данными (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdProxyConsignorCarrierWithFacsimileGetRequest($order_id, $with_additional = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdProxyConsignorCarrierWithFacsimileGet'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/proxy-consignor-carrier-with-facsimile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($with_additional !== null) {
            if('form' === 'form' && is_array($with_additional)) {
                foreach($with_additional as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withAdditional'] = $with_additional;
            }
        }


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorEmailGet
     *
     * Получить список email для точки погрузки, для плеча.
     *
     * @param  string $order_id Идентификатор базового заказа, который служит шаблоном. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderProxyEmailResponse
     */
    public function apiV2OrderOrderIdProxyConsignorEmailGet($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdProxyConsignorEmailGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorEmailGetWithHttpInfo
     *
     * Получить список email для точки погрузки, для плеча.
     *
     * @param  string $order_id Идентификатор базового заказа, который служит шаблоном. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderProxyEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdProxyConsignorEmailGetWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdProxyConsignorEmailGetRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderProxyEmailResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderProxyEmailResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderProxyEmailResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderProxyEmailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorEmailGetAsync
     *
     * Получить список email для точки погрузки, для плеча.
     *
     * @param  string $order_id Идентификатор базового заказа, который служит шаблоном. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyConsignorEmailGetAsync($order_id)
    {
        return $this->apiV2OrderOrderIdProxyConsignorEmailGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorEmailGetAsyncWithHttpInfo
     *
     * Получить список email для точки погрузки, для плеча.
     *
     * @param  string $order_id Идентификатор базового заказа, который служит шаблоном. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyConsignorEmailGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderProxyEmailResponse';
        $request = $this->apiV2OrderOrderIdProxyConsignorEmailGetRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdProxyConsignorEmailGet'
     *
     * @param  string $order_id Идентификатор базового заказа, который служит шаблоном. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdProxyConsignorEmailGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdProxyConsignorEmailGet'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/proxy-consignor-email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorEmailPost
     *
     * Отправка доверенности на список email
     *
     * @param  string $order_id Идентификатор базового заказа, который служит шаблоном. (required)
     * @param  \MagDv\Cargomart\Dto\OrderProxyEmailRequest $order_proxy_email_request order_proxy_email_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderProxyEmailResponse
     */
    public function apiV2OrderOrderIdProxyConsignorEmailPost($order_id, $order_proxy_email_request)
    {
        list($response) = $this->apiV2OrderOrderIdProxyConsignorEmailPostWithHttpInfo($order_id, $order_proxy_email_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorEmailPostWithHttpInfo
     *
     * Отправка доверенности на список email
     *
     * @param  string $order_id Идентификатор базового заказа, который служит шаблоном. (required)
     * @param  \MagDv\Cargomart\Dto\OrderProxyEmailRequest $order_proxy_email_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderProxyEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdProxyConsignorEmailPostWithHttpInfo($order_id, $order_proxy_email_request)
    {
        $request = $this->apiV2OrderOrderIdProxyConsignorEmailPostRequest($order_id, $order_proxy_email_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderProxyEmailResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderProxyEmailResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderProxyEmailResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderProxyEmailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorEmailPostAsync
     *
     * Отправка доверенности на список email
     *
     * @param  string $order_id Идентификатор базового заказа, который служит шаблоном. (required)
     * @param  \MagDv\Cargomart\Dto\OrderProxyEmailRequest $order_proxy_email_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyConsignorEmailPostAsync($order_id, $order_proxy_email_request)
    {
        return $this->apiV2OrderOrderIdProxyConsignorEmailPostAsyncWithHttpInfo($order_id, $order_proxy_email_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdProxyConsignorEmailPostAsyncWithHttpInfo
     *
     * Отправка доверенности на список email
     *
     * @param  string $order_id Идентификатор базового заказа, который служит шаблоном. (required)
     * @param  \MagDv\Cargomart\Dto\OrderProxyEmailRequest $order_proxy_email_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyConsignorEmailPostAsyncWithHttpInfo($order_id, $order_proxy_email_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderProxyEmailResponse';
        $request = $this->apiV2OrderOrderIdProxyConsignorEmailPostRequest($order_id, $order_proxy_email_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdProxyConsignorEmailPost'
     *
     * @param  string $order_id Идентификатор базового заказа, который служит шаблоном. (required)
     * @param  \MagDv\Cargomart\Dto\OrderProxyEmailRequest $order_proxy_email_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdProxyConsignorEmailPostRequest($order_id, $order_proxy_email_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdProxyConsignorEmailPost'
            );
        }
        // verify the required parameter 'order_proxy_email_request' is set
        if ($order_proxy_email_request === null || (is_array($order_proxy_email_request) && count($order_proxy_email_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_proxy_email_request when calling apiV2OrderOrderIdProxyConsignorEmailPost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/proxy-consignor-email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_proxy_email_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_proxy_email_request));
            } else {
                $httpBody = $order_proxy_email_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdProxyPost
     *
     * Загрузить доверенность.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDocumentIdRequest $order_document_id_request order_document_id_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderCardResponse
     */
    public function apiV2OrderOrderIdProxyPost($order_id, $order_document_id_request)
    {
        list($response) = $this->apiV2OrderOrderIdProxyPostWithHttpInfo($order_id, $order_document_id_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdProxyPostWithHttpInfo
     *
     * Загрузить доверенность.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDocumentIdRequest $order_document_id_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderCardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdProxyPostWithHttpInfo($order_id, $order_document_id_request)
    {
        $request = $this->apiV2OrderOrderIdProxyPostRequest($order_id, $order_document_id_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderCardResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderCardResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdProxyPostAsync
     *
     * Загрузить доверенность.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDocumentIdRequest $order_document_id_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyPostAsync($order_id, $order_document_id_request)
    {
        return $this->apiV2OrderOrderIdProxyPostAsyncWithHttpInfo($order_id, $order_document_id_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdProxyPostAsyncWithHttpInfo
     *
     * Загрузить доверенность.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDocumentIdRequest $order_document_id_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyPostAsyncWithHttpInfo($order_id, $order_document_id_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
        $request = $this->apiV2OrderOrderIdProxyPostRequest($order_id, $order_document_id_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdProxyPost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDocumentIdRequest $order_document_id_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdProxyPostRequest($order_id, $order_document_id_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdProxyPost'
            );
        }
        // verify the required parameter 'order_document_id_request' is set
        if ($order_document_id_request === null || (is_array($order_document_id_request) && count($order_document_id_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_document_id_request when calling apiV2OrderOrderIdProxyPost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/proxy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_document_id_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_document_id_request));
            } else {
                $httpBody = $order_document_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdProxyTemplateGet
     *
     * Скачать шаблон доверенности.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\FileLinkResponse
     */
    public function apiV2OrderOrderIdProxyTemplateGet($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdProxyTemplateGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdProxyTemplateGetWithHttpInfo
     *
     * Скачать шаблон доверенности.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\FileLinkResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdProxyTemplateGetWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdProxyTemplateGetRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\FileLinkResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\FileLinkResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\FileLinkResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\FileLinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdProxyTemplateGetAsync
     *
     * Скачать шаблон доверенности.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyTemplateGetAsync($order_id)
    {
        return $this->apiV2OrderOrderIdProxyTemplateGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdProxyTemplateGetAsyncWithHttpInfo
     *
     * Скачать шаблон доверенности.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdProxyTemplateGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\FileLinkResponse';
        $request = $this->apiV2OrderOrderIdProxyTemplateGetRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdProxyTemplateGet'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdProxyTemplateGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdProxyTemplateGet'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/proxy-template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdRefreshDriverPatch
     *
     * Обновить данные водителя в заказе
     *
     * @param  string $order_id Идентификатор заказа (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderDriverResponse
     */
    public function apiV2OrderOrderIdRefreshDriverPatch($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdRefreshDriverPatchWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdRefreshDriverPatchWithHttpInfo
     *
     * Обновить данные водителя в заказе
     *
     * @param  string $order_id Идентификатор заказа (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderDriverResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdRefreshDriverPatchWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdRefreshDriverPatchRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderDriverResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderDriverResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderDriverResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderDriverResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdRefreshDriverPatchAsync
     *
     * Обновить данные водителя в заказе
     *
     * @param  string $order_id Идентификатор заказа (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdRefreshDriverPatchAsync($order_id)
    {
        return $this->apiV2OrderOrderIdRefreshDriverPatchAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdRefreshDriverPatchAsyncWithHttpInfo
     *
     * Обновить данные водителя в заказе
     *
     * @param  string $order_id Идентификатор заказа (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdRefreshDriverPatchAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderDriverResponse';
        $request = $this->apiV2OrderOrderIdRefreshDriverPatchRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdRefreshDriverPatch'
     *
     * @param  string $order_id Идентификатор заказа (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdRefreshDriverPatchRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdRefreshDriverPatch'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/refresh-driver';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PATCH', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdRefreshTruckPatch
     *
     * Обновить данные транспортного средства в заказе
     *
     * @param  string $order_id Идентификатор заказа (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderTruckResponse
     */
    public function apiV2OrderOrderIdRefreshTruckPatch($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdRefreshTruckPatchWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdRefreshTruckPatchWithHttpInfo
     *
     * Обновить данные транспортного средства в заказе
     *
     * @param  string $order_id Идентификатор заказа (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderTruckResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdRefreshTruckPatchWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdRefreshTruckPatchRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderTruckResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderTruckResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderTruckResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderTruckResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdRefreshTruckPatchAsync
     *
     * Обновить данные транспортного средства в заказе
     *
     * @param  string $order_id Идентификатор заказа (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdRefreshTruckPatchAsync($order_id)
    {
        return $this->apiV2OrderOrderIdRefreshTruckPatchAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdRefreshTruckPatchAsyncWithHttpInfo
     *
     * Обновить данные транспортного средства в заказе
     *
     * @param  string $order_id Идентификатор заказа (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdRefreshTruckPatchAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderTruckResponse';
        $request = $this->apiV2OrderOrderIdRefreshTruckPatchRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdRefreshTruckPatch'
     *
     * @param  string $order_id Идентификатор заказа (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdRefreshTruckPatchRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdRefreshTruckPatch'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/refresh-truck';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PATCH', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdRefuseAppealPost
     *
     * Жалоба на отказ.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\MessageRequest $message_request message_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderCardResponse
     */
    public function apiV2OrderOrderIdRefuseAppealPost($order_id, $message_request)
    {
        list($response) = $this->apiV2OrderOrderIdRefuseAppealPostWithHttpInfo($order_id, $message_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdRefuseAppealPostWithHttpInfo
     *
     * Жалоба на отказ.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\MessageRequest $message_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderCardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdRefuseAppealPostWithHttpInfo($order_id, $message_request)
    {
        $request = $this->apiV2OrderOrderIdRefuseAppealPostRequest($order_id, $message_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderCardResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderCardResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdRefuseAppealPostAsync
     *
     * Жалоба на отказ.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\MessageRequest $message_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdRefuseAppealPostAsync($order_id, $message_request)
    {
        return $this->apiV2OrderOrderIdRefuseAppealPostAsyncWithHttpInfo($order_id, $message_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdRefuseAppealPostAsyncWithHttpInfo
     *
     * Жалоба на отказ.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\MessageRequest $message_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdRefuseAppealPostAsyncWithHttpInfo($order_id, $message_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
        $request = $this->apiV2OrderOrderIdRefuseAppealPostRequest($order_id, $message_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdRefuseAppealPost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\MessageRequest $message_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdRefuseAppealPostRequest($order_id, $message_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdRefuseAppealPost'
            );
        }
        // verify the required parameter 'message_request' is set
        if ($message_request === null || (is_array($message_request) && count($message_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_request when calling apiV2OrderOrderIdRefuseAppealPost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/refuse-appeal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($message_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($message_request));
            } else {
                $httpBody = $message_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdRefuseCancelPost
     *
     * Отменить отказ от заказа.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderCardResponse
     */
    public function apiV2OrderOrderIdRefuseCancelPost($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdRefuseCancelPostWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdRefuseCancelPostWithHttpInfo
     *
     * Отменить отказ от заказа.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderCardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdRefuseCancelPostWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdRefuseCancelPostRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderCardResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderCardResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdRefuseCancelPostAsync
     *
     * Отменить отказ от заказа.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdRefuseCancelPostAsync($order_id)
    {
        return $this->apiV2OrderOrderIdRefuseCancelPostAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdRefuseCancelPostAsyncWithHttpInfo
     *
     * Отменить отказ от заказа.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdRefuseCancelPostAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
        $request = $this->apiV2OrderOrderIdRefuseCancelPostRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdRefuseCancelPost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdRefuseCancelPostRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdRefuseCancelPost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/refuse-cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdRefusePost
     *
     * Оформить отказ заказа Экспедитора.
     *
     * @param  string $order_id Идентификатор заказа Экспедитора. (required)
     * @param  \MagDv\Cargomart\Dto\ReasonRequest $reason_request reason_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderCardResponse
     */
    public function apiV2OrderOrderIdRefusePost($order_id, $reason_request)
    {
        list($response) = $this->apiV2OrderOrderIdRefusePostWithHttpInfo($order_id, $reason_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdRefusePostWithHttpInfo
     *
     * Оформить отказ заказа Экспедитора.
     *
     * @param  string $order_id Идентификатор заказа Экспедитора. (required)
     * @param  \MagDv\Cargomart\Dto\ReasonRequest $reason_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderCardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdRefusePostWithHttpInfo($order_id, $reason_request)
    {
        $request = $this->apiV2OrderOrderIdRefusePostRequest($order_id, $reason_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderCardResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderCardResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdRefusePostAsync
     *
     * Оформить отказ заказа Экспедитора.
     *
     * @param  string $order_id Идентификатор заказа Экспедитора. (required)
     * @param  \MagDv\Cargomart\Dto\ReasonRequest $reason_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdRefusePostAsync($order_id, $reason_request)
    {
        return $this->apiV2OrderOrderIdRefusePostAsyncWithHttpInfo($order_id, $reason_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdRefusePostAsyncWithHttpInfo
     *
     * Оформить отказ заказа Экспедитора.
     *
     * @param  string $order_id Идентификатор заказа Экспедитора. (required)
     * @param  \MagDv\Cargomart\Dto\ReasonRequest $reason_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdRefusePostAsyncWithHttpInfo($order_id, $reason_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
        $request = $this->apiV2OrderOrderIdRefusePostRequest($order_id, $reason_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdRefusePost'
     *
     * @param  string $order_id Идентификатор заказа Экспедитора. (required)
     * @param  \MagDv\Cargomart\Dto\ReasonRequest $reason_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdRefusePostRequest($order_id, $reason_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdRefusePost'
            );
        }
        // verify the required parameter 'reason_request' is set
        if ($reason_request === null || (is_array($reason_request) && count($reason_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reason_request when calling apiV2OrderOrderIdRefusePost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/refuse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($reason_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($reason_request));
            } else {
                $httpBody = $reason_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdRepeatPost
     *
     * Переразместить заказ.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderEditResponse
     */
    public function apiV2OrderOrderIdRepeatPost($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdRepeatPostWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdRepeatPostWithHttpInfo
     *
     * Переразместить заказ.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderEditResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdRepeatPostWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdRepeatPostRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderEditResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderEditResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderEditResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderEditResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdRepeatPostAsync
     *
     * Переразместить заказ.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdRepeatPostAsync($order_id)
    {
        return $this->apiV2OrderOrderIdRepeatPostAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdRepeatPostAsyncWithHttpInfo
     *
     * Переразместить заказ.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdRepeatPostAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderEditResponse';
        $request = $this->apiV2OrderOrderIdRepeatPostRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdRepeatPost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdRepeatPostRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdRepeatPost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/repeat';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdReusePost
     *
     * Переразместить экспедиторский заказ.
     *
     * @param  string $order_id Идентификатор заказа отправителя. (required)
     * @param  \MagDv\Cargomart\Dto\OrderReuseRequest $order_reuse_request order_reuse_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderCardResponse
     */
    public function apiV2OrderOrderIdReusePost($order_id, $order_reuse_request)
    {
        list($response) = $this->apiV2OrderOrderIdReusePostWithHttpInfo($order_id, $order_reuse_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdReusePostWithHttpInfo
     *
     * Переразместить экспедиторский заказ.
     *
     * @param  string $order_id Идентификатор заказа отправителя. (required)
     * @param  \MagDv\Cargomart\Dto\OrderReuseRequest $order_reuse_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderCardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdReusePostWithHttpInfo($order_id, $order_reuse_request)
    {
        $request = $this->apiV2OrderOrderIdReusePostRequest($order_id, $order_reuse_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderCardResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderCardResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdReusePostAsync
     *
     * Переразместить экспедиторский заказ.
     *
     * @param  string $order_id Идентификатор заказа отправителя. (required)
     * @param  \MagDv\Cargomart\Dto\OrderReuseRequest $order_reuse_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdReusePostAsync($order_id, $order_reuse_request)
    {
        return $this->apiV2OrderOrderIdReusePostAsyncWithHttpInfo($order_id, $order_reuse_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdReusePostAsyncWithHttpInfo
     *
     * Переразместить экспедиторский заказ.
     *
     * @param  string $order_id Идентификатор заказа отправителя. (required)
     * @param  \MagDv\Cargomart\Dto\OrderReuseRequest $order_reuse_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdReusePostAsyncWithHttpInfo($order_id, $order_reuse_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
        $request = $this->apiV2OrderOrderIdReusePostRequest($order_id, $order_reuse_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdReusePost'
     *
     * @param  string $order_id Идентификатор заказа отправителя. (required)
     * @param  \MagDv\Cargomart\Dto\OrderReuseRequest $order_reuse_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdReusePostRequest($order_id, $order_reuse_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdReusePost'
            );
        }
        // verify the required parameter 'order_reuse_request' is set
        if ($order_reuse_request === null || (is_array($order_reuse_request) && count($order_reuse_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_reuse_request when calling apiV2OrderOrderIdReusePost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/reuse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_reuse_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_reuse_request));
            } else {
                $httpBody = $order_reuse_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdTruckDriverPatch
     *
     * Прикрепить к заказу водителя и машину.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\TruckDriver $truck_driver truck_driver (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2OrderOrderIdTruckDriverPatch($order_id, $truck_driver)
    {
        $this->apiV2OrderOrderIdTruckDriverPatchWithHttpInfo($order_id, $truck_driver);
    }

    /**
     * Operation apiV2OrderOrderIdTruckDriverPatchWithHttpInfo
     *
     * Прикрепить к заказу водителя и машину.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\TruckDriver $truck_driver (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdTruckDriverPatchWithHttpInfo($order_id, $truck_driver)
    {
        $request = $this->apiV2OrderOrderIdTruckDriverPatchRequest($order_id, $truck_driver);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdTruckDriverPatchAsync
     *
     * Прикрепить к заказу водителя и машину.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\TruckDriver $truck_driver (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdTruckDriverPatchAsync($order_id, $truck_driver)
    {
        return $this->apiV2OrderOrderIdTruckDriverPatchAsyncWithHttpInfo($order_id, $truck_driver)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdTruckDriverPatchAsyncWithHttpInfo
     *
     * Прикрепить к заказу водителя и машину.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\TruckDriver $truck_driver (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdTruckDriverPatchAsyncWithHttpInfo($order_id, $truck_driver)
    {
        $returnType = '';
        $request = $this->apiV2OrderOrderIdTruckDriverPatchRequest($order_id, $truck_driver);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdTruckDriverPatch'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\TruckDriver $truck_driver (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdTruckDriverPatchRequest($order_id, $truck_driver)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdTruckDriverPatch'
            );
        }
        // verify the required parameter 'truck_driver' is set
        if ($truck_driver === null || (is_array($truck_driver) && count($truck_driver) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $truck_driver when calling apiV2OrderOrderIdTruckDriverPatch'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/truck-driver';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($truck_driver)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($truck_driver));
            } else {
                $httpBody = $truck_driver;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PATCH', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
