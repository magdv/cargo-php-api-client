<?php
/**
 * OrderPortApi
 * PHP version 7.2
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\CargoApi;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use MagDv\Cargomart\ApiException;
use MagDv\Cargomart\Configuration;
use MagDv\Cargomart\DebugPlugin;
use MagDv\Cargomart\HeaderSelector;
use MagDv\Cargomart\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * OrderPortApi Class Doc Comment
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderPortApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://cargomart.ru');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2OrderExcelGet
     *
     * Получение ссылки на excel файл отчета.
     *
     * @param  int $x_modify_from_event Идентификатор события для получения заказов которые измененились после этого события (optional)
     * @param  \MagDv\Cargomart\Dto\OrderFilterPortStateEnum $filter_type Тип показываемого заказа. (optional)
     * @param  \MagDv\Cargomart\Dto\OrderFilterPortOrderTypeEnum[] $filter_order_type Тип заказа. (optional)
     * @param  \MagDv\Cargomart\Dto\OrderFilterBelongEnum $filter_belong Вкладка списка по принадлежности заказа. (optional)
     * @param  string $filter_serial Порядковый номер заказа. (optional)
     * @param  string $filter_departure Код кладр пункта отправления. (optional)
     * @param  int $filter_departure_radius Радиус точки отправления. (optional)
     * @param  string $filter_destination Код кладр пункта назначения. (optional)
     * @param  int $filter_destination_radius Радиус точки назначения. (optional)
     * @param  string[] $filter_tag Массив тэгов, только для отправителя. (optional)
     * @param  \DateTime $filter_loading_from Дата погрузки ОТ. (optional)
     * @param  \DateTime $filter_loading_to Дата погрузки ДО. (optional)
     * @param  \DateTime $filter_start_from Дата начала розыгрыша ОТ. (optional)
     * @param  \DateTime $filter_start_to Дата начала розыгрыша ДО. (optional)
     * @param  int $filter_worker Идентификатор сотрудника создателя для отправителя и сотрудника закрепителя для перевозчика. (optional)
     * @param  int[] $filter_truck_type Список идентификаторов типов ТС. (optional)
     * @param  int $filter_weight_from Вес груза в ОТ, кг. (optional)
     * @param  int $filter_weight_to Вес груза в ДО, кг. (optional)
     * @param  int $filter_capacity_from Объём груза в ОТ, м3. (optional)
     * @param  int $filter_capacity_to Объём груза в ДО, м3. (optional)
     * @param  int $filter_price_from Текущая цена заказа ОТ. (optional)
     * @param  int $filter_price_to Текущая цена заказа ДО. (optional)
     * @param  int[] $filter_status Массив id cтатусов заказов. 100 - нет ставок, 250 - не подтвержден, 240 - подтвержден, 110 - отказ перевозчика, 120 - отказ отправителя, 6 - в рейсе, 7 - исполнен, 21 - на модерации, 22 - отклонен с модерации. (optional)
     * @param  string $filter_carrier Хэш код компании победителя (optional)
     * @param  string $filter_consignor Хэш код компании отправителя (optional)
     * @param  string[] $filter_order Массив id хэшей заказов (optional)
     * @param  \DateTime $filter_create_from Дата создания заказа ОТ (optional)
     * @param  \DateTime $filter_create_to Дата создания заказа ДО (optional)
     * @param  bool $filter_available Только доступные мне заказы. Только для перевозчика. (optional)
     * @param  \MagDv\Cargomart\Dto\OrderFilterPortKindEnum[] $filter_kind Тип заказа. (optional)
     * @param  bool $filter_is_general_partner Фильтр по статусу генерального партнера. (optional)
     * @param  bool $filter_is_truck Только заказы в которых прикреплен водитель/машина (optional)
     * @param  bool $filter_is_carrier_document Только заказы в которых перевозчик прикрепил документы (optional)
     * @param  bool $filter_is_general_partner_document Только заказы в которых ГП прикрепил документы (optional)
     * @param  int $filter_branch_id Заказы дочерней компании (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\FileLinkResponse
     */
    public function apiV2OrderExcelGet($x_modify_from_event = null, $filter_type = null, $filter_order_type = null, $filter_belong = null, $filter_serial = null, $filter_departure = null, $filter_departure_radius = null, $filter_destination = null, $filter_destination_radius = null, $filter_tag = null, $filter_loading_from = null, $filter_loading_to = null, $filter_start_from = null, $filter_start_to = null, $filter_worker = null, $filter_truck_type = null, $filter_weight_from = null, $filter_weight_to = null, $filter_capacity_from = null, $filter_capacity_to = null, $filter_price_from = null, $filter_price_to = null, $filter_status = null, $filter_carrier = null, $filter_consignor = null, $filter_order = null, $filter_create_from = null, $filter_create_to = null, $filter_available = null, $filter_kind = null, $filter_is_general_partner = null, $filter_is_truck = null, $filter_is_carrier_document = null, $filter_is_general_partner_document = null, $filter_branch_id = null)
    {
        list($response) = $this->apiV2OrderExcelGetWithHttpInfo($x_modify_from_event, $filter_type, $filter_order_type, $filter_belong, $filter_serial, $filter_departure, $filter_departure_radius, $filter_destination, $filter_destination_radius, $filter_tag, $filter_loading_from, $filter_loading_to, $filter_start_from, $filter_start_to, $filter_worker, $filter_truck_type, $filter_weight_from, $filter_weight_to, $filter_capacity_from, $filter_capacity_to, $filter_price_from, $filter_price_to, $filter_status, $filter_carrier, $filter_consignor, $filter_order, $filter_create_from, $filter_create_to, $filter_available, $filter_kind, $filter_is_general_partner, $filter_is_truck, $filter_is_carrier_document, $filter_is_general_partner_document, $filter_branch_id);
        return $response;
    }

    /**
     * Operation apiV2OrderExcelGetWithHttpInfo
     *
     * Получение ссылки на excel файл отчета.
     *
     * @param  int $x_modify_from_event Идентификатор события для получения заказов которые измененились после этого события (optional)
     * @param  \MagDv\Cargomart\Dto\OrderFilterPortStateEnum $filter_type Тип показываемого заказа. (optional)
     * @param  \MagDv\Cargomart\Dto\OrderFilterPortOrderTypeEnum[] $filter_order_type Тип заказа. (optional)
     * @param  \MagDv\Cargomart\Dto\OrderFilterBelongEnum $filter_belong Вкладка списка по принадлежности заказа. (optional)
     * @param  string $filter_serial Порядковый номер заказа. (optional)
     * @param  string $filter_departure Код кладр пункта отправления. (optional)
     * @param  int $filter_departure_radius Радиус точки отправления. (optional)
     * @param  string $filter_destination Код кладр пункта назначения. (optional)
     * @param  int $filter_destination_radius Радиус точки назначения. (optional)
     * @param  string[] $filter_tag Массив тэгов, только для отправителя. (optional)
     * @param  \DateTime $filter_loading_from Дата погрузки ОТ. (optional)
     * @param  \DateTime $filter_loading_to Дата погрузки ДО. (optional)
     * @param  \DateTime $filter_start_from Дата начала розыгрыша ОТ. (optional)
     * @param  \DateTime $filter_start_to Дата начала розыгрыша ДО. (optional)
     * @param  int $filter_worker Идентификатор сотрудника создателя для отправителя и сотрудника закрепителя для перевозчика. (optional)
     * @param  int[] $filter_truck_type Список идентификаторов типов ТС. (optional)
     * @param  int $filter_weight_from Вес груза в ОТ, кг. (optional)
     * @param  int $filter_weight_to Вес груза в ДО, кг. (optional)
     * @param  int $filter_capacity_from Объём груза в ОТ, м3. (optional)
     * @param  int $filter_capacity_to Объём груза в ДО, м3. (optional)
     * @param  int $filter_price_from Текущая цена заказа ОТ. (optional)
     * @param  int $filter_price_to Текущая цена заказа ДО. (optional)
     * @param  int[] $filter_status Массив id cтатусов заказов. 100 - нет ставок, 250 - не подтвержден, 240 - подтвержден, 110 - отказ перевозчика, 120 - отказ отправителя, 6 - в рейсе, 7 - исполнен, 21 - на модерации, 22 - отклонен с модерации. (optional)
     * @param  string $filter_carrier Хэш код компании победителя (optional)
     * @param  string $filter_consignor Хэш код компании отправителя (optional)
     * @param  string[] $filter_order Массив id хэшей заказов (optional)
     * @param  \DateTime $filter_create_from Дата создания заказа ОТ (optional)
     * @param  \DateTime $filter_create_to Дата создания заказа ДО (optional)
     * @param  bool $filter_available Только доступные мне заказы. Только для перевозчика. (optional)
     * @param  \MagDv\Cargomart\Dto\OrderFilterPortKindEnum[] $filter_kind Тип заказа. (optional)
     * @param  bool $filter_is_general_partner Фильтр по статусу генерального партнера. (optional)
     * @param  bool $filter_is_truck Только заказы в которых прикреплен водитель/машина (optional)
     * @param  bool $filter_is_carrier_document Только заказы в которых перевозчик прикрепил документы (optional)
     * @param  bool $filter_is_general_partner_document Только заказы в которых ГП прикрепил документы (optional)
     * @param  int $filter_branch_id Заказы дочерней компании (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\FileLinkResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderExcelGetWithHttpInfo($x_modify_from_event = null, $filter_type = null, $filter_order_type = null, $filter_belong = null, $filter_serial = null, $filter_departure = null, $filter_departure_radius = null, $filter_destination = null, $filter_destination_radius = null, $filter_tag = null, $filter_loading_from = null, $filter_loading_to = null, $filter_start_from = null, $filter_start_to = null, $filter_worker = null, $filter_truck_type = null, $filter_weight_from = null, $filter_weight_to = null, $filter_capacity_from = null, $filter_capacity_to = null, $filter_price_from = null, $filter_price_to = null, $filter_status = null, $filter_carrier = null, $filter_consignor = null, $filter_order = null, $filter_create_from = null, $filter_create_to = null, $filter_available = null, $filter_kind = null, $filter_is_general_partner = null, $filter_is_truck = null, $filter_is_carrier_document = null, $filter_is_general_partner_document = null, $filter_branch_id = null)
    {
        $request = $this->apiV2OrderExcelGetRequest($x_modify_from_event, $filter_type, $filter_order_type, $filter_belong, $filter_serial, $filter_departure, $filter_departure_radius, $filter_destination, $filter_destination_radius, $filter_tag, $filter_loading_from, $filter_loading_to, $filter_start_from, $filter_start_to, $filter_worker, $filter_truck_type, $filter_weight_from, $filter_weight_to, $filter_capacity_from, $filter_capacity_to, $filter_price_from, $filter_price_to, $filter_status, $filter_carrier, $filter_consignor, $filter_order, $filter_create_from, $filter_create_to, $filter_available, $filter_kind, $filter_is_general_partner, $filter_is_truck, $filter_is_carrier_document, $filter_is_general_partner_document, $filter_branch_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\FileLinkResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\FileLinkResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\FileLinkResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\FileLinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderExcelGetAsync
     *
     * Получение ссылки на excel файл отчета.
     *
     * @param  int $x_modify_from_event Идентификатор события для получения заказов которые измененились после этого события (optional)
     * @param  \MagDv\Cargomart\Dto\OrderFilterPortStateEnum $filter_type Тип показываемого заказа. (optional)
     * @param  \MagDv\Cargomart\Dto\OrderFilterPortOrderTypeEnum[] $filter_order_type Тип заказа. (optional)
     * @param  \MagDv\Cargomart\Dto\OrderFilterBelongEnum $filter_belong Вкладка списка по принадлежности заказа. (optional)
     * @param  string $filter_serial Порядковый номер заказа. (optional)
     * @param  string $filter_departure Код кладр пункта отправления. (optional)
     * @param  int $filter_departure_radius Радиус точки отправления. (optional)
     * @param  string $filter_destination Код кладр пункта назначения. (optional)
     * @param  int $filter_destination_radius Радиус точки назначения. (optional)
     * @param  string[] $filter_tag Массив тэгов, только для отправителя. (optional)
     * @param  \DateTime $filter_loading_from Дата погрузки ОТ. (optional)
     * @param  \DateTime $filter_loading_to Дата погрузки ДО. (optional)
     * @param  \DateTime $filter_start_from Дата начала розыгрыша ОТ. (optional)
     * @param  \DateTime $filter_start_to Дата начала розыгрыша ДО. (optional)
     * @param  int $filter_worker Идентификатор сотрудника создателя для отправителя и сотрудника закрепителя для перевозчика. (optional)
     * @param  int[] $filter_truck_type Список идентификаторов типов ТС. (optional)
     * @param  int $filter_weight_from Вес груза в ОТ, кг. (optional)
     * @param  int $filter_weight_to Вес груза в ДО, кг. (optional)
     * @param  int $filter_capacity_from Объём груза в ОТ, м3. (optional)
     * @param  int $filter_capacity_to Объём груза в ДО, м3. (optional)
     * @param  int $filter_price_from Текущая цена заказа ОТ. (optional)
     * @param  int $filter_price_to Текущая цена заказа ДО. (optional)
     * @param  int[] $filter_status Массив id cтатусов заказов. 100 - нет ставок, 250 - не подтвержден, 240 - подтвержден, 110 - отказ перевозчика, 120 - отказ отправителя, 6 - в рейсе, 7 - исполнен, 21 - на модерации, 22 - отклонен с модерации. (optional)
     * @param  string $filter_carrier Хэш код компании победителя (optional)
     * @param  string $filter_consignor Хэш код компании отправителя (optional)
     * @param  string[] $filter_order Массив id хэшей заказов (optional)
     * @param  \DateTime $filter_create_from Дата создания заказа ОТ (optional)
     * @param  \DateTime $filter_create_to Дата создания заказа ДО (optional)
     * @param  bool $filter_available Только доступные мне заказы. Только для перевозчика. (optional)
     * @param  \MagDv\Cargomart\Dto\OrderFilterPortKindEnum[] $filter_kind Тип заказа. (optional)
     * @param  bool $filter_is_general_partner Фильтр по статусу генерального партнера. (optional)
     * @param  bool $filter_is_truck Только заказы в которых прикреплен водитель/машина (optional)
     * @param  bool $filter_is_carrier_document Только заказы в которых перевозчик прикрепил документы (optional)
     * @param  bool $filter_is_general_partner_document Только заказы в которых ГП прикрепил документы (optional)
     * @param  int $filter_branch_id Заказы дочерней компании (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderExcelGetAsync($x_modify_from_event = null, $filter_type = null, $filter_order_type = null, $filter_belong = null, $filter_serial = null, $filter_departure = null, $filter_departure_radius = null, $filter_destination = null, $filter_destination_radius = null, $filter_tag = null, $filter_loading_from = null, $filter_loading_to = null, $filter_start_from = null, $filter_start_to = null, $filter_worker = null, $filter_truck_type = null, $filter_weight_from = null, $filter_weight_to = null, $filter_capacity_from = null, $filter_capacity_to = null, $filter_price_from = null, $filter_price_to = null, $filter_status = null, $filter_carrier = null, $filter_consignor = null, $filter_order = null, $filter_create_from = null, $filter_create_to = null, $filter_available = null, $filter_kind = null, $filter_is_general_partner = null, $filter_is_truck = null, $filter_is_carrier_document = null, $filter_is_general_partner_document = null, $filter_branch_id = null)
    {
        return $this->apiV2OrderExcelGetAsyncWithHttpInfo($x_modify_from_event, $filter_type, $filter_order_type, $filter_belong, $filter_serial, $filter_departure, $filter_departure_radius, $filter_destination, $filter_destination_radius, $filter_tag, $filter_loading_from, $filter_loading_to, $filter_start_from, $filter_start_to, $filter_worker, $filter_truck_type, $filter_weight_from, $filter_weight_to, $filter_capacity_from, $filter_capacity_to, $filter_price_from, $filter_price_to, $filter_status, $filter_carrier, $filter_consignor, $filter_order, $filter_create_from, $filter_create_to, $filter_available, $filter_kind, $filter_is_general_partner, $filter_is_truck, $filter_is_carrier_document, $filter_is_general_partner_document, $filter_branch_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderExcelGetAsyncWithHttpInfo
     *
     * Получение ссылки на excel файл отчета.
     *
     * @param  int $x_modify_from_event Идентификатор события для получения заказов которые измененились после этого события (optional)
     * @param  \MagDv\Cargomart\Dto\OrderFilterPortStateEnum $filter_type Тип показываемого заказа. (optional)
     * @param  \MagDv\Cargomart\Dto\OrderFilterPortOrderTypeEnum[] $filter_order_type Тип заказа. (optional)
     * @param  \MagDv\Cargomart\Dto\OrderFilterBelongEnum $filter_belong Вкладка списка по принадлежности заказа. (optional)
     * @param  string $filter_serial Порядковый номер заказа. (optional)
     * @param  string $filter_departure Код кладр пункта отправления. (optional)
     * @param  int $filter_departure_radius Радиус точки отправления. (optional)
     * @param  string $filter_destination Код кладр пункта назначения. (optional)
     * @param  int $filter_destination_radius Радиус точки назначения. (optional)
     * @param  string[] $filter_tag Массив тэгов, только для отправителя. (optional)
     * @param  \DateTime $filter_loading_from Дата погрузки ОТ. (optional)
     * @param  \DateTime $filter_loading_to Дата погрузки ДО. (optional)
     * @param  \DateTime $filter_start_from Дата начала розыгрыша ОТ. (optional)
     * @param  \DateTime $filter_start_to Дата начала розыгрыша ДО. (optional)
     * @param  int $filter_worker Идентификатор сотрудника создателя для отправителя и сотрудника закрепителя для перевозчика. (optional)
     * @param  int[] $filter_truck_type Список идентификаторов типов ТС. (optional)
     * @param  int $filter_weight_from Вес груза в ОТ, кг. (optional)
     * @param  int $filter_weight_to Вес груза в ДО, кг. (optional)
     * @param  int $filter_capacity_from Объём груза в ОТ, м3. (optional)
     * @param  int $filter_capacity_to Объём груза в ДО, м3. (optional)
     * @param  int $filter_price_from Текущая цена заказа ОТ. (optional)
     * @param  int $filter_price_to Текущая цена заказа ДО. (optional)
     * @param  int[] $filter_status Массив id cтатусов заказов. 100 - нет ставок, 250 - не подтвержден, 240 - подтвержден, 110 - отказ перевозчика, 120 - отказ отправителя, 6 - в рейсе, 7 - исполнен, 21 - на модерации, 22 - отклонен с модерации. (optional)
     * @param  string $filter_carrier Хэш код компании победителя (optional)
     * @param  string $filter_consignor Хэш код компании отправителя (optional)
     * @param  string[] $filter_order Массив id хэшей заказов (optional)
     * @param  \DateTime $filter_create_from Дата создания заказа ОТ (optional)
     * @param  \DateTime $filter_create_to Дата создания заказа ДО (optional)
     * @param  bool $filter_available Только доступные мне заказы. Только для перевозчика. (optional)
     * @param  \MagDv\Cargomart\Dto\OrderFilterPortKindEnum[] $filter_kind Тип заказа. (optional)
     * @param  bool $filter_is_general_partner Фильтр по статусу генерального партнера. (optional)
     * @param  bool $filter_is_truck Только заказы в которых прикреплен водитель/машина (optional)
     * @param  bool $filter_is_carrier_document Только заказы в которых перевозчик прикрепил документы (optional)
     * @param  bool $filter_is_general_partner_document Только заказы в которых ГП прикрепил документы (optional)
     * @param  int $filter_branch_id Заказы дочерней компании (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderExcelGetAsyncWithHttpInfo($x_modify_from_event = null, $filter_type = null, $filter_order_type = null, $filter_belong = null, $filter_serial = null, $filter_departure = null, $filter_departure_radius = null, $filter_destination = null, $filter_destination_radius = null, $filter_tag = null, $filter_loading_from = null, $filter_loading_to = null, $filter_start_from = null, $filter_start_to = null, $filter_worker = null, $filter_truck_type = null, $filter_weight_from = null, $filter_weight_to = null, $filter_capacity_from = null, $filter_capacity_to = null, $filter_price_from = null, $filter_price_to = null, $filter_status = null, $filter_carrier = null, $filter_consignor = null, $filter_order = null, $filter_create_from = null, $filter_create_to = null, $filter_available = null, $filter_kind = null, $filter_is_general_partner = null, $filter_is_truck = null, $filter_is_carrier_document = null, $filter_is_general_partner_document = null, $filter_branch_id = null)
    {
        $returnType = '\MagDv\Cargomart\Dto\FileLinkResponse';
        $request = $this->apiV2OrderExcelGetRequest($x_modify_from_event, $filter_type, $filter_order_type, $filter_belong, $filter_serial, $filter_departure, $filter_departure_radius, $filter_destination, $filter_destination_radius, $filter_tag, $filter_loading_from, $filter_loading_to, $filter_start_from, $filter_start_to, $filter_worker, $filter_truck_type, $filter_weight_from, $filter_weight_to, $filter_capacity_from, $filter_capacity_to, $filter_price_from, $filter_price_to, $filter_status, $filter_carrier, $filter_consignor, $filter_order, $filter_create_from, $filter_create_to, $filter_available, $filter_kind, $filter_is_general_partner, $filter_is_truck, $filter_is_carrier_document, $filter_is_general_partner_document, $filter_branch_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderExcelGet'
     *
     * @param  int $x_modify_from_event Идентификатор события для получения заказов которые измененились после этого события (optional)
     * @param  \MagDv\Cargomart\Dto\OrderFilterPortStateEnum $filter_type Тип показываемого заказа. (optional)
     * @param  \MagDv\Cargomart\Dto\OrderFilterPortOrderTypeEnum[] $filter_order_type Тип заказа. (optional)
     * @param  \MagDv\Cargomart\Dto\OrderFilterBelongEnum $filter_belong Вкладка списка по принадлежности заказа. (optional)
     * @param  string $filter_serial Порядковый номер заказа. (optional)
     * @param  string $filter_departure Код кладр пункта отправления. (optional)
     * @param  int $filter_departure_radius Радиус точки отправления. (optional)
     * @param  string $filter_destination Код кладр пункта назначения. (optional)
     * @param  int $filter_destination_radius Радиус точки назначения. (optional)
     * @param  string[] $filter_tag Массив тэгов, только для отправителя. (optional)
     * @param  \DateTime $filter_loading_from Дата погрузки ОТ. (optional)
     * @param  \DateTime $filter_loading_to Дата погрузки ДО. (optional)
     * @param  \DateTime $filter_start_from Дата начала розыгрыша ОТ. (optional)
     * @param  \DateTime $filter_start_to Дата начала розыгрыша ДО. (optional)
     * @param  int $filter_worker Идентификатор сотрудника создателя для отправителя и сотрудника закрепителя для перевозчика. (optional)
     * @param  int[] $filter_truck_type Список идентификаторов типов ТС. (optional)
     * @param  int $filter_weight_from Вес груза в ОТ, кг. (optional)
     * @param  int $filter_weight_to Вес груза в ДО, кг. (optional)
     * @param  int $filter_capacity_from Объём груза в ОТ, м3. (optional)
     * @param  int $filter_capacity_to Объём груза в ДО, м3. (optional)
     * @param  int $filter_price_from Текущая цена заказа ОТ. (optional)
     * @param  int $filter_price_to Текущая цена заказа ДО. (optional)
     * @param  int[] $filter_status Массив id cтатусов заказов. 100 - нет ставок, 250 - не подтвержден, 240 - подтвержден, 110 - отказ перевозчика, 120 - отказ отправителя, 6 - в рейсе, 7 - исполнен, 21 - на модерации, 22 - отклонен с модерации. (optional)
     * @param  string $filter_carrier Хэш код компании победителя (optional)
     * @param  string $filter_consignor Хэш код компании отправителя (optional)
     * @param  string[] $filter_order Массив id хэшей заказов (optional)
     * @param  \DateTime $filter_create_from Дата создания заказа ОТ (optional)
     * @param  \DateTime $filter_create_to Дата создания заказа ДО (optional)
     * @param  bool $filter_available Только доступные мне заказы. Только для перевозчика. (optional)
     * @param  \MagDv\Cargomart\Dto\OrderFilterPortKindEnum[] $filter_kind Тип заказа. (optional)
     * @param  bool $filter_is_general_partner Фильтр по статусу генерального партнера. (optional)
     * @param  bool $filter_is_truck Только заказы в которых прикреплен водитель/машина (optional)
     * @param  bool $filter_is_carrier_document Только заказы в которых перевозчик прикрепил документы (optional)
     * @param  bool $filter_is_general_partner_document Только заказы в которых ГП прикрепил документы (optional)
     * @param  int $filter_branch_id Заказы дочерней компании (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderExcelGetRequest($x_modify_from_event = null, $filter_type = null, $filter_order_type = null, $filter_belong = null, $filter_serial = null, $filter_departure = null, $filter_departure_radius = null, $filter_destination = null, $filter_destination_radius = null, $filter_tag = null, $filter_loading_from = null, $filter_loading_to = null, $filter_start_from = null, $filter_start_to = null, $filter_worker = null, $filter_truck_type = null, $filter_weight_from = null, $filter_weight_to = null, $filter_capacity_from = null, $filter_capacity_to = null, $filter_price_from = null, $filter_price_to = null, $filter_status = null, $filter_carrier = null, $filter_consignor = null, $filter_order = null, $filter_create_from = null, $filter_create_to = null, $filter_available = null, $filter_kind = null, $filter_is_general_partner = null, $filter_is_truck = null, $filter_is_carrier_document = null, $filter_is_general_partner_document = null, $filter_branch_id = null)
    {

        $resourcePath = '/api/v2/order/excel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($filter_type !== null) {
            if('form' === 'form' && is_array($filter_type)) {
                foreach($filter_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[type]'] = $filter_type;
            }
        }
        // query params
        if ($filter_order_type !== null) {
            if('form' === 'form' && is_array($filter_order_type)) {
                foreach($filter_order_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[orderType][]'] = $filter_order_type;
            }
        }
        // query params
        if ($filter_belong !== null) {
            if('form' === 'form' && is_array($filter_belong)) {
                foreach($filter_belong as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[belong]'] = $filter_belong;
            }
        }
        // query params
        if ($filter_serial !== null) {
            if('form' === 'form' && is_array($filter_serial)) {
                foreach($filter_serial as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[serial]'] = $filter_serial;
            }
        }
        // query params
        if ($filter_departure !== null) {
            if('form' === 'form' && is_array($filter_departure)) {
                foreach($filter_departure as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[departure]'] = $filter_departure;
            }
        }
        // query params
        if ($filter_departure_radius !== null) {
            if('form' === 'form' && is_array($filter_departure_radius)) {
                foreach($filter_departure_radius as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[departureRadius]'] = $filter_departure_radius;
            }
        }
        // query params
        if ($filter_destination !== null) {
            if('form' === 'form' && is_array($filter_destination)) {
                foreach($filter_destination as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[destination]'] = $filter_destination;
            }
        }
        // query params
        if ($filter_destination_radius !== null) {
            if('form' === 'form' && is_array($filter_destination_radius)) {
                foreach($filter_destination_radius as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[destinationRadius]'] = $filter_destination_radius;
            }
        }
        // query params
        if ($filter_tag !== null) {
            if('form' === 'form' && is_array($filter_tag)) {
                foreach($filter_tag as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[tag][]'] = $filter_tag;
            }
        }
        // query params
        if ($filter_loading_from !== null) {
            if('form' === 'form' && is_array($filter_loading_from)) {
                foreach($filter_loading_from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[loadingFrom]'] = $filter_loading_from;
            }
        }
        // query params
        if ($filter_loading_to !== null) {
            if('form' === 'form' && is_array($filter_loading_to)) {
                foreach($filter_loading_to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[loadingTo]'] = $filter_loading_to;
            }
        }
        // query params
        if ($filter_start_from !== null) {
            if('form' === 'form' && is_array($filter_start_from)) {
                foreach($filter_start_from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[startFrom]'] = $filter_start_from;
            }
        }
        // query params
        if ($filter_start_to !== null) {
            if('form' === 'form' && is_array($filter_start_to)) {
                foreach($filter_start_to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[startTo]'] = $filter_start_to;
            }
        }
        // query params
        if ($filter_worker !== null) {
            if('form' === 'form' && is_array($filter_worker)) {
                foreach($filter_worker as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[worker]'] = $filter_worker;
            }
        }
        // query params
        if ($filter_truck_type !== null) {
            if('form' === 'form' && is_array($filter_truck_type)) {
                foreach($filter_truck_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[truckType][]'] = $filter_truck_type;
            }
        }
        // query params
        if ($filter_weight_from !== null) {
            if('form' === 'form' && is_array($filter_weight_from)) {
                foreach($filter_weight_from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[weightFrom]'] = $filter_weight_from;
            }
        }
        // query params
        if ($filter_weight_to !== null) {
            if('form' === 'form' && is_array($filter_weight_to)) {
                foreach($filter_weight_to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[weightTo]'] = $filter_weight_to;
            }
        }
        // query params
        if ($filter_capacity_from !== null) {
            if('form' === 'form' && is_array($filter_capacity_from)) {
                foreach($filter_capacity_from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[capacityFrom]'] = $filter_capacity_from;
            }
        }
        // query params
        if ($filter_capacity_to !== null) {
            if('form' === 'form' && is_array($filter_capacity_to)) {
                foreach($filter_capacity_to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[capacityTo]'] = $filter_capacity_to;
            }
        }
        // query params
        if ($filter_price_from !== null) {
            if('form' === 'form' && is_array($filter_price_from)) {
                foreach($filter_price_from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[priceFrom]'] = $filter_price_from;
            }
        }
        // query params
        if ($filter_price_to !== null) {
            if('form' === 'form' && is_array($filter_price_to)) {
                foreach($filter_price_to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[priceTo]'] = $filter_price_to;
            }
        }
        // query params
        if ($filter_status !== null) {
            if('form' === 'form' && is_array($filter_status)) {
                foreach($filter_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[status][]'] = $filter_status;
            }
        }
        // query params
        if ($filter_carrier !== null) {
            if('form' === 'form' && is_array($filter_carrier)) {
                foreach($filter_carrier as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[carrier]'] = $filter_carrier;
            }
        }
        // query params
        if ($filter_consignor !== null) {
            if('form' === 'form' && is_array($filter_consignor)) {
                foreach($filter_consignor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[consignor]'] = $filter_consignor;
            }
        }
        // query params
        if ($filter_order !== null) {
            if('form' === 'form' && is_array($filter_order)) {
                foreach($filter_order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[order][]'] = $filter_order;
            }
        }
        // query params
        if ($filter_create_from !== null) {
            if('form' === 'form' && is_array($filter_create_from)) {
                foreach($filter_create_from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[createFrom]'] = $filter_create_from;
            }
        }
        // query params
        if ($filter_create_to !== null) {
            if('form' === 'form' && is_array($filter_create_to)) {
                foreach($filter_create_to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[createTo]'] = $filter_create_to;
            }
        }
        // query params
        if ($filter_available !== null) {
            if('form' === 'form' && is_array($filter_available)) {
                foreach($filter_available as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[available]'] = $filter_available;
            }
        }
        // query params
        if ($filter_kind !== null) {
            if('form' === 'form' && is_array($filter_kind)) {
                foreach($filter_kind as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[kind][]'] = $filter_kind;
            }
        }
        // query params
        if ($filter_is_general_partner !== null) {
            if('form' === 'form' && is_array($filter_is_general_partner)) {
                foreach($filter_is_general_partner as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[isGeneralPartner]'] = $filter_is_general_partner;
            }
        }
        // query params
        if ($filter_is_truck !== null) {
            if('form' === 'form' && is_array($filter_is_truck)) {
                foreach($filter_is_truck as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[isTruck]'] = $filter_is_truck;
            }
        }
        // query params
        if ($filter_is_carrier_document !== null) {
            if('form' === 'form' && is_array($filter_is_carrier_document)) {
                foreach($filter_is_carrier_document as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[isCarrierDocument]'] = $filter_is_carrier_document;
            }
        }
        // query params
        if ($filter_is_general_partner_document !== null) {
            if('form' === 'form' && is_array($filter_is_general_partner_document)) {
                foreach($filter_is_general_partner_document as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[isGeneralPartnerDocument]'] = $filter_is_general_partner_document;
            }
        }
        // query params
        if ($filter_branch_id !== null) {
            if('form' === 'form' && is_array($filter_branch_id)) {
                foreach($filter_branch_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[branchId]'] = $filter_branch_id;
            }
        }

        // header params
        if ($x_modify_from_event !== null) {
            $headerParams['X-Modify-From-Event'] = ObjectSerializer::toHeaderValue($x_modify_from_event);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderExcelOfferReportGet
     *
     * выгрузка xlsx с отчетом по запросам цен.
     *
     * @param  \DateTime $from Дата от. (required)
     * @param  \DateTime $to Дата до. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function apiV2OrderExcelOfferReportGet($from, $to)
    {
        list($response) = $this->apiV2OrderExcelOfferReportGetWithHttpInfo($from, $to);
        return $response;
    }

    /**
     * Operation apiV2OrderExcelOfferReportGetWithHttpInfo
     *
     * выгрузка xlsx с отчетом по запросам цен.
     *
     * @param  \DateTime $from Дата от. (required)
     * @param  \DateTime $to Дата до. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderExcelOfferReportGetWithHttpInfo($from, $to)
    {
        $request = $this->apiV2OrderExcelOfferReportGetRequest($from, $to);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderExcelOfferReportGetAsync
     *
     * выгрузка xlsx с отчетом по запросам цен.
     *
     * @param  \DateTime $from Дата от. (required)
     * @param  \DateTime $to Дата до. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderExcelOfferReportGetAsync($from, $to)
    {
        return $this->apiV2OrderExcelOfferReportGetAsyncWithHttpInfo($from, $to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderExcelOfferReportGetAsyncWithHttpInfo
     *
     * выгрузка xlsx с отчетом по запросам цен.
     *
     * @param  \DateTime $from Дата от. (required)
     * @param  \DateTime $to Дата до. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderExcelOfferReportGetAsyncWithHttpInfo($from, $to)
    {
        $returnType = '\SplFileObject';
        $request = $this->apiV2OrderExcelOfferReportGetRequest($from, $to);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderExcelOfferReportGet'
     *
     * @param  \DateTime $from Дата от. (required)
     * @param  \DateTime $to Дата до. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderExcelOfferReportGetRequest($from, $to)
    {
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling apiV2OrderExcelOfferReportGet'
            );
        }
        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling apiV2OrderExcelOfferReportGet'
            );
        }

        $resourcePath = '/api/v2/order/excel/offer-report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($from !== null) {
            if('form' === 'form' && is_array($from)) {
                foreach($from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from'] = $from;
            }
        }
        // query params
        if ($to !== null) {
            if('form' === 'form' && is_array($to)) {
                foreach($to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['to'] = $to;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderImportGet
     *
     * Получение шаблона.
     *
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function apiV2OrderImportGet()
    {
        list($response) = $this->apiV2OrderImportGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation apiV2OrderImportGetWithHttpInfo
     *
     * Получение шаблона.
     *
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderImportGetWithHttpInfo()
    {
        $request = $this->apiV2OrderImportGetRequest();

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderImportGetAsync
     *
     * Получение шаблона.
     *
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderImportGetAsync()
    {
        return $this->apiV2OrderImportGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderImportGetAsyncWithHttpInfo
     *
     * Получение шаблона.
     *
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderImportGetAsyncWithHttpInfo()
    {
        $returnType = '\SplFileObject';
        $request = $this->apiV2OrderImportGetRequest();

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderImportGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderImportGetRequest()
    {

        $resourcePath = '/api/v2/order/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderImportPost
     *
     * Импорт заказа из xlsx.
     *
     * @param  \SplFileObject $file file (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderImport|\MagDv\Cargomart\Dto\OrderImport
     */
    public function apiV2OrderImportPost($file = null)
    {
        list($response) = $this->apiV2OrderImportPostWithHttpInfo($file);
        return $response;
    }

    /**
     * Operation apiV2OrderImportPostWithHttpInfo
     *
     * Импорт заказа из xlsx.
     *
     * @param  \SplFileObject $file (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderImport|\MagDv\Cargomart\Dto\OrderImport, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderImportPostWithHttpInfo($file = null)
    {
        $request = $this->apiV2OrderImportPostRequest($file);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderImport' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderImport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MagDv\Cargomart\Dto\OrderImport' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderImport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderImport';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderImport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderImport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderImportPostAsync
     *
     * Импорт заказа из xlsx.
     *
     * @param  \SplFileObject $file (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderImportPostAsync($file = null)
    {
        return $this->apiV2OrderImportPostAsyncWithHttpInfo($file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderImportPostAsyncWithHttpInfo
     *
     * Импорт заказа из xlsx.
     *
     * @param  \SplFileObject $file (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderImportPostAsyncWithHttpInfo($file = null)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderImport';
        $request = $this->apiV2OrderImportPostRequest($file);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderImportPost'
     *
     * @param  \SplFileObject $file (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderImportPostRequest($file = null)
    {

        $resourcePath = '/api/v2/order/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;




        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\try_fopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'multipart/form-data',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdOfferExcelGet
     *
     * выгрузка xlsx файла со списком предложений.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function apiV2OrderOrderIdOfferExcelGet($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdOfferExcelGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdOfferExcelGetWithHttpInfo
     *
     * выгрузка xlsx файла со списком предложений.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdOfferExcelGetWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdOfferExcelGetRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdOfferExcelGetAsync
     *
     * выгрузка xlsx файла со списком предложений.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdOfferExcelGetAsync($order_id)
    {
        return $this->apiV2OrderOrderIdOfferExcelGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdOfferExcelGetAsyncWithHttpInfo
     *
     * выгрузка xlsx файла со списком предложений.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdOfferExcelGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\SplFileObject';
        $request = $this->apiV2OrderOrderIdOfferExcelGetRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdOfferExcelGet'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdOfferExcelGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdOfferExcelGet'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/offer/excel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
