<?php
/**
 * ExpeditorDraftApi
 * PHP version 7.2
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\CargoApi;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use MagDv\Cargomart\ApiException;
use MagDv\Cargomart\Configuration;
use MagDv\Cargomart\DebugPlugin;
use MagDv\Cargomart\HeaderSelector;
use MagDv\Cargomart\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * ExpeditorDraftApi Class Doc Comment
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ExpeditorDraftApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://cargomart.ru');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2OrderDraftExpeditorConditionsGet
     *
     * Получить условия перевозки
     *
     * @param  string[] $route_points Список КЛАДР кодов пунктов (required)
     * @param  int[] $storage_point_ids Список id пунктов погрузки (optional)
     * @param  int $company_branch_id Идентификатор дочерней компании (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderDraftExpeditorConditionsResponse
     */
    public function apiV2OrderDraftExpeditorConditionsGet($route_points, $storage_point_ids = null, $company_branch_id = null)
    {
        list($response) = $this->apiV2OrderDraftExpeditorConditionsGetWithHttpInfo($route_points, $storage_point_ids, $company_branch_id);
        return $response;
    }

    /**
     * Operation apiV2OrderDraftExpeditorConditionsGetWithHttpInfo
     *
     * Получить условия перевозки
     *
     * @param  string[] $route_points Список КЛАДР кодов пунктов (required)
     * @param  int[] $storage_point_ids Список id пунктов погрузки (optional)
     * @param  int $company_branch_id Идентификатор дочерней компании (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderDraftExpeditorConditionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderDraftExpeditorConditionsGetWithHttpInfo($route_points, $storage_point_ids = null, $company_branch_id = null)
    {
        $request = $this->apiV2OrderDraftExpeditorConditionsGetRequest($route_points, $storage_point_ids, $company_branch_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderDraftExpeditorConditionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderDraftExpeditorConditionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderDraftExpeditorConditionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderDraftExpeditorConditionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderDraftExpeditorConditionsGetAsync
     *
     * Получить условия перевозки
     *
     * @param  string[] $route_points Список КЛАДР кодов пунктов (required)
     * @param  int[] $storage_point_ids Список id пунктов погрузки (optional)
     * @param  int $company_branch_id Идентификатор дочерней компании (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorConditionsGetAsync($route_points, $storage_point_ids = null, $company_branch_id = null)
    {
        return $this->apiV2OrderDraftExpeditorConditionsGetAsyncWithHttpInfo($route_points, $storage_point_ids, $company_branch_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderDraftExpeditorConditionsGetAsyncWithHttpInfo
     *
     * Получить условия перевозки
     *
     * @param  string[] $route_points Список КЛАДР кодов пунктов (required)
     * @param  int[] $storage_point_ids Список id пунктов погрузки (optional)
     * @param  int $company_branch_id Идентификатор дочерней компании (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorConditionsGetAsyncWithHttpInfo($route_points, $storage_point_ids = null, $company_branch_id = null)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderDraftExpeditorConditionsResponse';
        $request = $this->apiV2OrderDraftExpeditorConditionsGetRequest($route_points, $storage_point_ids, $company_branch_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderDraftExpeditorConditionsGet'
     *
     * @param  string[] $route_points Список КЛАДР кодов пунктов (required)
     * @param  int[] $storage_point_ids Список id пунктов погрузки (optional)
     * @param  int $company_branch_id Идентификатор дочерней компании (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderDraftExpeditorConditionsGetRequest($route_points, $storage_point_ids = null, $company_branch_id = null)
    {
        // verify the required parameter 'route_points' is set
        if ($route_points === null || (is_array($route_points) && count($route_points) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $route_points when calling apiV2OrderDraftExpeditorConditionsGet'
            );
        }

        $resourcePath = '/api/v2/order-draft-expeditor/conditions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($route_points !== null) {
            if('form' === 'form' && is_array($route_points)) {
                foreach($route_points as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['routePoints[]'] = $route_points;
            }
        }
        // query params
        if ($storage_point_ids !== null) {
            if('form' === 'form' && is_array($storage_point_ids)) {
                foreach($storage_point_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['storagePointIds[]'] = $storage_point_ids;
            }
        }
        // query params
        if ($company_branch_id !== null) {
            if('form' === 'form' && is_array($company_branch_id)) {
                foreach($company_branch_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['companyBranchId'] = $company_branch_id;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderDraftExpeditorDraftIdDelete
     *
     * Пометить черновик заказа удалённым
     *
     * @param  string $draft_id Идентификатор черновика заказа (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2OrderDraftExpeditorDraftIdDelete($draft_id)
    {
        $this->apiV2OrderDraftExpeditorDraftIdDeleteWithHttpInfo($draft_id);
    }

    /**
     * Operation apiV2OrderDraftExpeditorDraftIdDeleteWithHttpInfo
     *
     * Пометить черновик заказа удалённым
     *
     * @param  string $draft_id Идентификатор черновика заказа (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderDraftExpeditorDraftIdDeleteWithHttpInfo($draft_id)
    {
        $request = $this->apiV2OrderDraftExpeditorDraftIdDeleteRequest($draft_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderDraftExpeditorDraftIdDeleteAsync
     *
     * Пометить черновик заказа удалённым
     *
     * @param  string $draft_id Идентификатор черновика заказа (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorDraftIdDeleteAsync($draft_id)
    {
        return $this->apiV2OrderDraftExpeditorDraftIdDeleteAsyncWithHttpInfo($draft_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderDraftExpeditorDraftIdDeleteAsyncWithHttpInfo
     *
     * Пометить черновик заказа удалённым
     *
     * @param  string $draft_id Идентификатор черновика заказа (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorDraftIdDeleteAsyncWithHttpInfo($draft_id)
    {
        $returnType = '';
        $request = $this->apiV2OrderDraftExpeditorDraftIdDeleteRequest($draft_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderDraftExpeditorDraftIdDelete'
     *
     * @param  string $draft_id Идентификатор черновика заказа (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderDraftExpeditorDraftIdDeleteRequest($draft_id)
    {
        // verify the required parameter 'draft_id' is set
        if ($draft_id === null || (is_array($draft_id) && count($draft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $draft_id when calling apiV2OrderDraftExpeditorDraftIdDelete'
            );
        }

        $resourcePath = '/api/v2/order-draft-expeditor/{draftId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($draft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'draftId' . '}',
                ObjectSerializer::toPathValue($draft_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderDraftExpeditorDraftIdGet
     *
     * Просмотр черновика заказа
     *
     * @param  string $draft_id Идентификатор черновика заказа (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse
     */
    public function apiV2OrderDraftExpeditorDraftIdGet($draft_id)
    {
        list($response) = $this->apiV2OrderDraftExpeditorDraftIdGetWithHttpInfo($draft_id);
        return $response;
    }

    /**
     * Operation apiV2OrderDraftExpeditorDraftIdGetWithHttpInfo
     *
     * Просмотр черновика заказа
     *
     * @param  string $draft_id Идентификатор черновика заказа (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderDraftExpeditorDraftIdGetWithHttpInfo($draft_id)
    {
        $request = $this->apiV2OrderDraftExpeditorDraftIdGetRequest($draft_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderDraftExpeditorDraftIdGetAsync
     *
     * Просмотр черновика заказа
     *
     * @param  string $draft_id Идентификатор черновика заказа (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorDraftIdGetAsync($draft_id)
    {
        return $this->apiV2OrderDraftExpeditorDraftIdGetAsyncWithHttpInfo($draft_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderDraftExpeditorDraftIdGetAsyncWithHttpInfo
     *
     * Просмотр черновика заказа
     *
     * @param  string $draft_id Идентификатор черновика заказа (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorDraftIdGetAsyncWithHttpInfo($draft_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse';
        $request = $this->apiV2OrderDraftExpeditorDraftIdGetRequest($draft_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderDraftExpeditorDraftIdGet'
     *
     * @param  string $draft_id Идентификатор черновика заказа (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderDraftExpeditorDraftIdGetRequest($draft_id)
    {
        // verify the required parameter 'draft_id' is set
        if ($draft_id === null || (is_array($draft_id) && count($draft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $draft_id when calling apiV2OrderDraftExpeditorDraftIdGet'
            );
        }

        $resourcePath = '/api/v2/order-draft-expeditor/{draftId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($draft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'draftId' . '}',
                ObjectSerializer::toPathValue($draft_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderDraftExpeditorDraftIdPublishPost
     *
     * Публикация черновика заказа.
     *
     * @param  string $draft_id Идентификатор черновика. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDraftExpeditorUpdateRequest $order_draft_expeditor_update_request order_draft_expeditor_update_request (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse
     */
    public function apiV2OrderDraftExpeditorDraftIdPublishPost($draft_id, $order_draft_expeditor_update_request = null)
    {
        list($response) = $this->apiV2OrderDraftExpeditorDraftIdPublishPostWithHttpInfo($draft_id, $order_draft_expeditor_update_request);
        return $response;
    }

    /**
     * Operation apiV2OrderDraftExpeditorDraftIdPublishPostWithHttpInfo
     *
     * Публикация черновика заказа.
     *
     * @param  string $draft_id Идентификатор черновика. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDraftExpeditorUpdateRequest $order_draft_expeditor_update_request (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderDraftExpeditorDraftIdPublishPostWithHttpInfo($draft_id, $order_draft_expeditor_update_request = null)
    {
        $request = $this->apiV2OrderDraftExpeditorDraftIdPublishPostRequest($draft_id, $order_draft_expeditor_update_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderDraftExpeditorDraftIdPublishPostAsync
     *
     * Публикация черновика заказа.
     *
     * @param  string $draft_id Идентификатор черновика. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDraftExpeditorUpdateRequest $order_draft_expeditor_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorDraftIdPublishPostAsync($draft_id, $order_draft_expeditor_update_request = null)
    {
        return $this->apiV2OrderDraftExpeditorDraftIdPublishPostAsyncWithHttpInfo($draft_id, $order_draft_expeditor_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderDraftExpeditorDraftIdPublishPostAsyncWithHttpInfo
     *
     * Публикация черновика заказа.
     *
     * @param  string $draft_id Идентификатор черновика. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDraftExpeditorUpdateRequest $order_draft_expeditor_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorDraftIdPublishPostAsyncWithHttpInfo($draft_id, $order_draft_expeditor_update_request = null)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse';
        $request = $this->apiV2OrderDraftExpeditorDraftIdPublishPostRequest($draft_id, $order_draft_expeditor_update_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderDraftExpeditorDraftIdPublishPost'
     *
     * @param  string $draft_id Идентификатор черновика. (required)
     * @param  \MagDv\Cargomart\Dto\OrderDraftExpeditorUpdateRequest $order_draft_expeditor_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderDraftExpeditorDraftIdPublishPostRequest($draft_id, $order_draft_expeditor_update_request = null)
    {
        // verify the required parameter 'draft_id' is set
        if ($draft_id === null || (is_array($draft_id) && count($draft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $draft_id when calling apiV2OrderDraftExpeditorDraftIdPublishPost'
            );
        }

        $resourcePath = '/api/v2/order-draft-expeditor/{draftId}/publish';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($draft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'draftId' . '}',
                ObjectSerializer::toPathValue($draft_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_draft_expeditor_update_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_draft_expeditor_update_request));
            } else {
                $httpBody = $order_draft_expeditor_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderDraftExpeditorDraftIdPut
     *
     * Редактирование черновика заказа
     *
     * @param  string $draft_id Идентификатор черновика заказа (required)
     * @param  \MagDv\Cargomart\Dto\OrderDraftExpeditorUpdateRequest $order_draft_expeditor_update_request order_draft_expeditor_update_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse
     */
    public function apiV2OrderDraftExpeditorDraftIdPut($draft_id, $order_draft_expeditor_update_request)
    {
        list($response) = $this->apiV2OrderDraftExpeditorDraftIdPutWithHttpInfo($draft_id, $order_draft_expeditor_update_request);
        return $response;
    }

    /**
     * Operation apiV2OrderDraftExpeditorDraftIdPutWithHttpInfo
     *
     * Редактирование черновика заказа
     *
     * @param  string $draft_id Идентификатор черновика заказа (required)
     * @param  \MagDv\Cargomart\Dto\OrderDraftExpeditorUpdateRequest $order_draft_expeditor_update_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderDraftExpeditorDraftIdPutWithHttpInfo($draft_id, $order_draft_expeditor_update_request)
    {
        $request = $this->apiV2OrderDraftExpeditorDraftIdPutRequest($draft_id, $order_draft_expeditor_update_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderDraftExpeditorDraftIdPutAsync
     *
     * Редактирование черновика заказа
     *
     * @param  string $draft_id Идентификатор черновика заказа (required)
     * @param  \MagDv\Cargomart\Dto\OrderDraftExpeditorUpdateRequest $order_draft_expeditor_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorDraftIdPutAsync($draft_id, $order_draft_expeditor_update_request)
    {
        return $this->apiV2OrderDraftExpeditorDraftIdPutAsyncWithHttpInfo($draft_id, $order_draft_expeditor_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderDraftExpeditorDraftIdPutAsyncWithHttpInfo
     *
     * Редактирование черновика заказа
     *
     * @param  string $draft_id Идентификатор черновика заказа (required)
     * @param  \MagDv\Cargomart\Dto\OrderDraftExpeditorUpdateRequest $order_draft_expeditor_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorDraftIdPutAsyncWithHttpInfo($draft_id, $order_draft_expeditor_update_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse';
        $request = $this->apiV2OrderDraftExpeditorDraftIdPutRequest($draft_id, $order_draft_expeditor_update_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderDraftExpeditorDraftIdPut'
     *
     * @param  string $draft_id Идентификатор черновика заказа (required)
     * @param  \MagDv\Cargomart\Dto\OrderDraftExpeditorUpdateRequest $order_draft_expeditor_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderDraftExpeditorDraftIdPutRequest($draft_id, $order_draft_expeditor_update_request)
    {
        // verify the required parameter 'draft_id' is set
        if ($draft_id === null || (is_array($draft_id) && count($draft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $draft_id when calling apiV2OrderDraftExpeditorDraftIdPut'
            );
        }
        // verify the required parameter 'order_draft_expeditor_update_request' is set
        if ($order_draft_expeditor_update_request === null || (is_array($order_draft_expeditor_update_request) && count($order_draft_expeditor_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_draft_expeditor_update_request when calling apiV2OrderDraftExpeditorDraftIdPut'
            );
        }

        $resourcePath = '/api/v2/order-draft-expeditor/{draftId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($draft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'draftId' . '}',
                ObjectSerializer::toPathValue($draft_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_draft_expeditor_update_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_draft_expeditor_update_request));
            } else {
                $httpBody = $order_draft_expeditor_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderDraftExpeditorPost
     *
     * Создать черновик заказа
     *
     * @param  \MagDv\Cargomart\Dto\OrderDraftExpeditorUpdateRequest $order_draft_expeditor_update_request order_draft_expeditor_update_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse
     */
    public function apiV2OrderDraftExpeditorPost($order_draft_expeditor_update_request)
    {
        list($response) = $this->apiV2OrderDraftExpeditorPostWithHttpInfo($order_draft_expeditor_update_request);
        return $response;
    }

    /**
     * Operation apiV2OrderDraftExpeditorPostWithHttpInfo
     *
     * Создать черновик заказа
     *
     * @param  \MagDv\Cargomart\Dto\OrderDraftExpeditorUpdateRequest $order_draft_expeditor_update_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderDraftExpeditorPostWithHttpInfo($order_draft_expeditor_update_request)
    {
        $request = $this->apiV2OrderDraftExpeditorPostRequest($order_draft_expeditor_update_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderDraftExpeditorPostAsync
     *
     * Создать черновик заказа
     *
     * @param  \MagDv\Cargomart\Dto\OrderDraftExpeditorUpdateRequest $order_draft_expeditor_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorPostAsync($order_draft_expeditor_update_request)
    {
        return $this->apiV2OrderDraftExpeditorPostAsyncWithHttpInfo($order_draft_expeditor_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderDraftExpeditorPostAsyncWithHttpInfo
     *
     * Создать черновик заказа
     *
     * @param  \MagDv\Cargomart\Dto\OrderDraftExpeditorUpdateRequest $order_draft_expeditor_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorPostAsyncWithHttpInfo($order_draft_expeditor_update_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderDraftExpeditorCruResponse';
        $request = $this->apiV2OrderDraftExpeditorPostRequest($order_draft_expeditor_update_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderDraftExpeditorPost'
     *
     * @param  \MagDv\Cargomart\Dto\OrderDraftExpeditorUpdateRequest $order_draft_expeditor_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderDraftExpeditorPostRequest($order_draft_expeditor_update_request)
    {
        // verify the required parameter 'order_draft_expeditor_update_request' is set
        if ($order_draft_expeditor_update_request === null || (is_array($order_draft_expeditor_update_request) && count($order_draft_expeditor_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_draft_expeditor_update_request when calling apiV2OrderDraftExpeditorPost'
            );
        }

        $resourcePath = '/api/v2/order-draft-expeditor';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_draft_expeditor_update_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_draft_expeditor_update_request));
            } else {
                $httpBody = $order_draft_expeditor_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderDraftExpeditorPriceGet
     *
     * Получить цену по маршруту
     *
     * @param  int $truck_type_id Тип грузовика (required)
     * @param  string[] $route_points Список КЛАДР кодов пунктов (optional)
     * @param  int[] $storage_point_ids Список идентификаторов пунктов погрузки (optional)
     * @param  \DateTime $loading_point_from_date Дата работы на пункте погрузки. YYYY-MM-DD (optional)
     * @param  string $loading_point_from_time Время работы ОТ на пункте погрузки. HH:mm::ss (optional)
     * @param  \DateTime $unloading_point_from_date Дата работы на пункте выгрузки. YYYY-MM-DD (optional)
     * @param  string $unloading_point_from_time Время работы ОТ на пункте выгрузки. HH:mm::ss (optional)
     * @param  int $company_branch_id Идентификатор дочерней компании (optional)
     * @param  float $load_weight Вес груза(в тоннах) (optional)
     * @param  int $load_capacity Объём груза(в м3) (optional)
     * @param  float $vat_rate Ставка НДС (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderDraftExpeditorPriceResponse
     */
    public function apiV2OrderDraftExpeditorPriceGet($truck_type_id, $route_points = null, $storage_point_ids = null, $loading_point_from_date = null, $loading_point_from_time = null, $unloading_point_from_date = null, $unloading_point_from_time = null, $company_branch_id = null, $load_weight = null, $load_capacity = null, $vat_rate = null)
    {
        list($response) = $this->apiV2OrderDraftExpeditorPriceGetWithHttpInfo($truck_type_id, $route_points, $storage_point_ids, $loading_point_from_date, $loading_point_from_time, $unloading_point_from_date, $unloading_point_from_time, $company_branch_id, $load_weight, $load_capacity, $vat_rate);
        return $response;
    }

    /**
     * Operation apiV2OrderDraftExpeditorPriceGetWithHttpInfo
     *
     * Получить цену по маршруту
     *
     * @param  int $truck_type_id Тип грузовика (required)
     * @param  string[] $route_points Список КЛАДР кодов пунктов (optional)
     * @param  int[] $storage_point_ids Список идентификаторов пунктов погрузки (optional)
     * @param  \DateTime $loading_point_from_date Дата работы на пункте погрузки. YYYY-MM-DD (optional)
     * @param  string $loading_point_from_time Время работы ОТ на пункте погрузки. HH:mm::ss (optional)
     * @param  \DateTime $unloading_point_from_date Дата работы на пункте выгрузки. YYYY-MM-DD (optional)
     * @param  string $unloading_point_from_time Время работы ОТ на пункте выгрузки. HH:mm::ss (optional)
     * @param  int $company_branch_id Идентификатор дочерней компании (optional)
     * @param  float $load_weight Вес груза(в тоннах) (optional)
     * @param  int $load_capacity Объём груза(в м3) (optional)
     * @param  float $vat_rate Ставка НДС (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderDraftExpeditorPriceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderDraftExpeditorPriceGetWithHttpInfo($truck_type_id, $route_points = null, $storage_point_ids = null, $loading_point_from_date = null, $loading_point_from_time = null, $unloading_point_from_date = null, $unloading_point_from_time = null, $company_branch_id = null, $load_weight = null, $load_capacity = null, $vat_rate = null)
    {
        $request = $this->apiV2OrderDraftExpeditorPriceGetRequest($truck_type_id, $route_points, $storage_point_ids, $loading_point_from_date, $loading_point_from_time, $unloading_point_from_date, $unloading_point_from_time, $company_branch_id, $load_weight, $load_capacity, $vat_rate);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderDraftExpeditorPriceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderDraftExpeditorPriceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderDraftExpeditorPriceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderDraftExpeditorPriceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderDraftExpeditorPriceGetAsync
     *
     * Получить цену по маршруту
     *
     * @param  int $truck_type_id Тип грузовика (required)
     * @param  string[] $route_points Список КЛАДР кодов пунктов (optional)
     * @param  int[] $storage_point_ids Список идентификаторов пунктов погрузки (optional)
     * @param  \DateTime $loading_point_from_date Дата работы на пункте погрузки. YYYY-MM-DD (optional)
     * @param  string $loading_point_from_time Время работы ОТ на пункте погрузки. HH:mm::ss (optional)
     * @param  \DateTime $unloading_point_from_date Дата работы на пункте выгрузки. YYYY-MM-DD (optional)
     * @param  string $unloading_point_from_time Время работы ОТ на пункте выгрузки. HH:mm::ss (optional)
     * @param  int $company_branch_id Идентификатор дочерней компании (optional)
     * @param  float $load_weight Вес груза(в тоннах) (optional)
     * @param  int $load_capacity Объём груза(в м3) (optional)
     * @param  float $vat_rate Ставка НДС (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorPriceGetAsync($truck_type_id, $route_points = null, $storage_point_ids = null, $loading_point_from_date = null, $loading_point_from_time = null, $unloading_point_from_date = null, $unloading_point_from_time = null, $company_branch_id = null, $load_weight = null, $load_capacity = null, $vat_rate = null)
    {
        return $this->apiV2OrderDraftExpeditorPriceGetAsyncWithHttpInfo($truck_type_id, $route_points, $storage_point_ids, $loading_point_from_date, $loading_point_from_time, $unloading_point_from_date, $unloading_point_from_time, $company_branch_id, $load_weight, $load_capacity, $vat_rate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderDraftExpeditorPriceGetAsyncWithHttpInfo
     *
     * Получить цену по маршруту
     *
     * @param  int $truck_type_id Тип грузовика (required)
     * @param  string[] $route_points Список КЛАДР кодов пунктов (optional)
     * @param  int[] $storage_point_ids Список идентификаторов пунктов погрузки (optional)
     * @param  \DateTime $loading_point_from_date Дата работы на пункте погрузки. YYYY-MM-DD (optional)
     * @param  string $loading_point_from_time Время работы ОТ на пункте погрузки. HH:mm::ss (optional)
     * @param  \DateTime $unloading_point_from_date Дата работы на пункте выгрузки. YYYY-MM-DD (optional)
     * @param  string $unloading_point_from_time Время работы ОТ на пункте выгрузки. HH:mm::ss (optional)
     * @param  int $company_branch_id Идентификатор дочерней компании (optional)
     * @param  float $load_weight Вес груза(в тоннах) (optional)
     * @param  int $load_capacity Объём груза(в м3) (optional)
     * @param  float $vat_rate Ставка НДС (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorPriceGetAsyncWithHttpInfo($truck_type_id, $route_points = null, $storage_point_ids = null, $loading_point_from_date = null, $loading_point_from_time = null, $unloading_point_from_date = null, $unloading_point_from_time = null, $company_branch_id = null, $load_weight = null, $load_capacity = null, $vat_rate = null)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderDraftExpeditorPriceResponse';
        $request = $this->apiV2OrderDraftExpeditorPriceGetRequest($truck_type_id, $route_points, $storage_point_ids, $loading_point_from_date, $loading_point_from_time, $unloading_point_from_date, $unloading_point_from_time, $company_branch_id, $load_weight, $load_capacity, $vat_rate);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderDraftExpeditorPriceGet'
     *
     * @param  int $truck_type_id Тип грузовика (required)
     * @param  string[] $route_points Список КЛАДР кодов пунктов (optional)
     * @param  int[] $storage_point_ids Список идентификаторов пунктов погрузки (optional)
     * @param  \DateTime $loading_point_from_date Дата работы на пункте погрузки. YYYY-MM-DD (optional)
     * @param  string $loading_point_from_time Время работы ОТ на пункте погрузки. HH:mm::ss (optional)
     * @param  \DateTime $unloading_point_from_date Дата работы на пункте выгрузки. YYYY-MM-DD (optional)
     * @param  string $unloading_point_from_time Время работы ОТ на пункте выгрузки. HH:mm::ss (optional)
     * @param  int $company_branch_id Идентификатор дочерней компании (optional)
     * @param  float $load_weight Вес груза(в тоннах) (optional)
     * @param  int $load_capacity Объём груза(в м3) (optional)
     * @param  float $vat_rate Ставка НДС (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderDraftExpeditorPriceGetRequest($truck_type_id, $route_points = null, $storage_point_ids = null, $loading_point_from_date = null, $loading_point_from_time = null, $unloading_point_from_date = null, $unloading_point_from_time = null, $company_branch_id = null, $load_weight = null, $load_capacity = null, $vat_rate = null)
    {
        // verify the required parameter 'truck_type_id' is set
        if ($truck_type_id === null || (is_array($truck_type_id) && count($truck_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $truck_type_id when calling apiV2OrderDraftExpeditorPriceGet'
            );
        }
        if ($loading_point_from_time !== null && !preg_match("/^(([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?|24:00(:00)?|)$/", $loading_point_from_time)) {
            throw new \InvalidArgumentException("invalid value for \"loading_point_from_time\" when calling ExpeditorDraftApi.apiV2OrderDraftExpeditorPriceGet, must conform to the pattern /^(([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?|24:00(:00)?|)$/.");
        }

        if ($unloading_point_from_time !== null && !preg_match("/^(([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?|24:00(:00)?|)$/", $unloading_point_from_time)) {
            throw new \InvalidArgumentException("invalid value for \"unloading_point_from_time\" when calling ExpeditorDraftApi.apiV2OrderDraftExpeditorPriceGet, must conform to the pattern /^(([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?|24:00(:00)?|)$/.");
        }


        $resourcePath = '/api/v2/order-draft-expeditor/price';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($route_points !== null) {
            if('form' === 'form' && is_array($route_points)) {
                foreach($route_points as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['routePoints[]'] = $route_points;
            }
        }
        // query params
        if ($storage_point_ids !== null) {
            if('form' === 'form' && is_array($storage_point_ids)) {
                foreach($storage_point_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['storagePointIds[]'] = $storage_point_ids;
            }
        }
        // query params
        if ($loading_point_from_date !== null) {
            if('form' === 'form' && is_array($loading_point_from_date)) {
                foreach($loading_point_from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loadingPointFromDate'] = $loading_point_from_date;
            }
        }
        // query params
        if ($loading_point_from_time !== null) {
            if('form' === 'form' && is_array($loading_point_from_time)) {
                foreach($loading_point_from_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loadingPointFromTime'] = $loading_point_from_time;
            }
        }
        // query params
        if ($unloading_point_from_date !== null) {
            if('form' === 'form' && is_array($unloading_point_from_date)) {
                foreach($unloading_point_from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unloadingPointFromDate'] = $unloading_point_from_date;
            }
        }
        // query params
        if ($unloading_point_from_time !== null) {
            if('form' === 'form' && is_array($unloading_point_from_time)) {
                foreach($unloading_point_from_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unloadingPointFromTime'] = $unloading_point_from_time;
            }
        }
        // query params
        if ($company_branch_id !== null) {
            if('form' === 'form' && is_array($company_branch_id)) {
                foreach($company_branch_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['companyBranchId'] = $company_branch_id;
            }
        }
        // query params
        if ($truck_type_id !== null) {
            if('form' === 'form' && is_array($truck_type_id)) {
                foreach($truck_type_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['truckTypeId'] = $truck_type_id;
            }
        }
        // query params
        if ($load_weight !== null) {
            if('form' === 'form' && is_array($load_weight)) {
                foreach($load_weight as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loadWeight'] = $load_weight;
            }
        }
        // query params
        if ($load_capacity !== null) {
            if('form' === 'form' && is_array($load_capacity)) {
                foreach($load_capacity as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loadCapacity'] = $load_capacity;
            }
        }
        // query params
        if ($vat_rate !== null) {
            if('form' === 'form' && is_array($vat_rate)) {
                foreach($vat_rate as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['vatRate'] = $vat_rate;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderDraftExpeditorPriceV2Get
     *
     * Получить цену по маршруту
     *
     * @param  int $truck_type_id Тип грузовика (required)
     * @param  string[] $route_points Список КЛАДР кодов пунктов (optional)
     * @param  int[] $storage_point_ids Список идентификаторов пунктов погрузки (optional)
     * @param  \DateTime $loading_point_from_date Дата работы на пункте погрузки. YYYY-MM-DD (optional)
     * @param  string $loading_point_from_time Время работы ОТ на пункте погрузки. HH:mm::ss (optional)
     * @param  \DateTime $unloading_point_from_date Дата работы на пункте выгрузки. YYYY-MM-DD (optional)
     * @param  string $unloading_point_from_time Время работы ОТ на пункте выгрузки. HH:mm::ss (optional)
     * @param  int $company_branch_id Идентификатор дочерней компании (optional)
     * @param  float $cargo_weight Тоннаж авто из условий заказа(в тоннах) (optional)
     * @param  int $cargo_capacity Кубатура авто из условий заказа(в м3) (optional)
     * @param  float $load_weight Вес груза(в тоннах) (optional)
     * @param  int $load_capacity Объём груза(в м3) (optional)
     * @param  float $vat_rate Ставка НДС (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderDraftExpeditorPriceV2Response
     */
    public function apiV2OrderDraftExpeditorPriceV2Get($truck_type_id, $route_points = null, $storage_point_ids = null, $loading_point_from_date = null, $loading_point_from_time = null, $unloading_point_from_date = null, $unloading_point_from_time = null, $company_branch_id = null, $cargo_weight = null, $cargo_capacity = null, $load_weight = null, $load_capacity = null, $vat_rate = null)
    {
        list($response) = $this->apiV2OrderDraftExpeditorPriceV2GetWithHttpInfo($truck_type_id, $route_points, $storage_point_ids, $loading_point_from_date, $loading_point_from_time, $unloading_point_from_date, $unloading_point_from_time, $company_branch_id, $cargo_weight, $cargo_capacity, $load_weight, $load_capacity, $vat_rate);
        return $response;
    }

    /**
     * Operation apiV2OrderDraftExpeditorPriceV2GetWithHttpInfo
     *
     * Получить цену по маршруту
     *
     * @param  int $truck_type_id Тип грузовика (required)
     * @param  string[] $route_points Список КЛАДР кодов пунктов (optional)
     * @param  int[] $storage_point_ids Список идентификаторов пунктов погрузки (optional)
     * @param  \DateTime $loading_point_from_date Дата работы на пункте погрузки. YYYY-MM-DD (optional)
     * @param  string $loading_point_from_time Время работы ОТ на пункте погрузки. HH:mm::ss (optional)
     * @param  \DateTime $unloading_point_from_date Дата работы на пункте выгрузки. YYYY-MM-DD (optional)
     * @param  string $unloading_point_from_time Время работы ОТ на пункте выгрузки. HH:mm::ss (optional)
     * @param  int $company_branch_id Идентификатор дочерней компании (optional)
     * @param  float $cargo_weight Тоннаж авто из условий заказа(в тоннах) (optional)
     * @param  int $cargo_capacity Кубатура авто из условий заказа(в м3) (optional)
     * @param  float $load_weight Вес груза(в тоннах) (optional)
     * @param  int $load_capacity Объём груза(в м3) (optional)
     * @param  float $vat_rate Ставка НДС (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderDraftExpeditorPriceV2Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderDraftExpeditorPriceV2GetWithHttpInfo($truck_type_id, $route_points = null, $storage_point_ids = null, $loading_point_from_date = null, $loading_point_from_time = null, $unloading_point_from_date = null, $unloading_point_from_time = null, $company_branch_id = null, $cargo_weight = null, $cargo_capacity = null, $load_weight = null, $load_capacity = null, $vat_rate = null)
    {
        $request = $this->apiV2OrderDraftExpeditorPriceV2GetRequest($truck_type_id, $route_points, $storage_point_ids, $loading_point_from_date, $loading_point_from_time, $unloading_point_from_date, $unloading_point_from_time, $company_branch_id, $cargo_weight, $cargo_capacity, $load_weight, $load_capacity, $vat_rate);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderDraftExpeditorPriceV2Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderDraftExpeditorPriceV2Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderDraftExpeditorPriceV2Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderDraftExpeditorPriceV2Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderDraftExpeditorPriceV2GetAsync
     *
     * Получить цену по маршруту
     *
     * @param  int $truck_type_id Тип грузовика (required)
     * @param  string[] $route_points Список КЛАДР кодов пунктов (optional)
     * @param  int[] $storage_point_ids Список идентификаторов пунктов погрузки (optional)
     * @param  \DateTime $loading_point_from_date Дата работы на пункте погрузки. YYYY-MM-DD (optional)
     * @param  string $loading_point_from_time Время работы ОТ на пункте погрузки. HH:mm::ss (optional)
     * @param  \DateTime $unloading_point_from_date Дата работы на пункте выгрузки. YYYY-MM-DD (optional)
     * @param  string $unloading_point_from_time Время работы ОТ на пункте выгрузки. HH:mm::ss (optional)
     * @param  int $company_branch_id Идентификатор дочерней компании (optional)
     * @param  float $cargo_weight Тоннаж авто из условий заказа(в тоннах) (optional)
     * @param  int $cargo_capacity Кубатура авто из условий заказа(в м3) (optional)
     * @param  float $load_weight Вес груза(в тоннах) (optional)
     * @param  int $load_capacity Объём груза(в м3) (optional)
     * @param  float $vat_rate Ставка НДС (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorPriceV2GetAsync($truck_type_id, $route_points = null, $storage_point_ids = null, $loading_point_from_date = null, $loading_point_from_time = null, $unloading_point_from_date = null, $unloading_point_from_time = null, $company_branch_id = null, $cargo_weight = null, $cargo_capacity = null, $load_weight = null, $load_capacity = null, $vat_rate = null)
    {
        return $this->apiV2OrderDraftExpeditorPriceV2GetAsyncWithHttpInfo($truck_type_id, $route_points, $storage_point_ids, $loading_point_from_date, $loading_point_from_time, $unloading_point_from_date, $unloading_point_from_time, $company_branch_id, $cargo_weight, $cargo_capacity, $load_weight, $load_capacity, $vat_rate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderDraftExpeditorPriceV2GetAsyncWithHttpInfo
     *
     * Получить цену по маршруту
     *
     * @param  int $truck_type_id Тип грузовика (required)
     * @param  string[] $route_points Список КЛАДР кодов пунктов (optional)
     * @param  int[] $storage_point_ids Список идентификаторов пунктов погрузки (optional)
     * @param  \DateTime $loading_point_from_date Дата работы на пункте погрузки. YYYY-MM-DD (optional)
     * @param  string $loading_point_from_time Время работы ОТ на пункте погрузки. HH:mm::ss (optional)
     * @param  \DateTime $unloading_point_from_date Дата работы на пункте выгрузки. YYYY-MM-DD (optional)
     * @param  string $unloading_point_from_time Время работы ОТ на пункте выгрузки. HH:mm::ss (optional)
     * @param  int $company_branch_id Идентификатор дочерней компании (optional)
     * @param  float $cargo_weight Тоннаж авто из условий заказа(в тоннах) (optional)
     * @param  int $cargo_capacity Кубатура авто из условий заказа(в м3) (optional)
     * @param  float $load_weight Вес груза(в тоннах) (optional)
     * @param  int $load_capacity Объём груза(в м3) (optional)
     * @param  float $vat_rate Ставка НДС (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorPriceV2GetAsyncWithHttpInfo($truck_type_id, $route_points = null, $storage_point_ids = null, $loading_point_from_date = null, $loading_point_from_time = null, $unloading_point_from_date = null, $unloading_point_from_time = null, $company_branch_id = null, $cargo_weight = null, $cargo_capacity = null, $load_weight = null, $load_capacity = null, $vat_rate = null)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderDraftExpeditorPriceV2Response';
        $request = $this->apiV2OrderDraftExpeditorPriceV2GetRequest($truck_type_id, $route_points, $storage_point_ids, $loading_point_from_date, $loading_point_from_time, $unloading_point_from_date, $unloading_point_from_time, $company_branch_id, $cargo_weight, $cargo_capacity, $load_weight, $load_capacity, $vat_rate);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderDraftExpeditorPriceV2Get'
     *
     * @param  int $truck_type_id Тип грузовика (required)
     * @param  string[] $route_points Список КЛАДР кодов пунктов (optional)
     * @param  int[] $storage_point_ids Список идентификаторов пунктов погрузки (optional)
     * @param  \DateTime $loading_point_from_date Дата работы на пункте погрузки. YYYY-MM-DD (optional)
     * @param  string $loading_point_from_time Время работы ОТ на пункте погрузки. HH:mm::ss (optional)
     * @param  \DateTime $unloading_point_from_date Дата работы на пункте выгрузки. YYYY-MM-DD (optional)
     * @param  string $unloading_point_from_time Время работы ОТ на пункте выгрузки. HH:mm::ss (optional)
     * @param  int $company_branch_id Идентификатор дочерней компании (optional)
     * @param  float $cargo_weight Тоннаж авто из условий заказа(в тоннах) (optional)
     * @param  int $cargo_capacity Кубатура авто из условий заказа(в м3) (optional)
     * @param  float $load_weight Вес груза(в тоннах) (optional)
     * @param  int $load_capacity Объём груза(в м3) (optional)
     * @param  float $vat_rate Ставка НДС (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderDraftExpeditorPriceV2GetRequest($truck_type_id, $route_points = null, $storage_point_ids = null, $loading_point_from_date = null, $loading_point_from_time = null, $unloading_point_from_date = null, $unloading_point_from_time = null, $company_branch_id = null, $cargo_weight = null, $cargo_capacity = null, $load_weight = null, $load_capacity = null, $vat_rate = null)
    {
        // verify the required parameter 'truck_type_id' is set
        if ($truck_type_id === null || (is_array($truck_type_id) && count($truck_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $truck_type_id when calling apiV2OrderDraftExpeditorPriceV2Get'
            );
        }
        if ($loading_point_from_time !== null && !preg_match("/^(([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?|24:00(:00)?|)$/", $loading_point_from_time)) {
            throw new \InvalidArgumentException("invalid value for \"loading_point_from_time\" when calling ExpeditorDraftApi.apiV2OrderDraftExpeditorPriceV2Get, must conform to the pattern /^(([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?|24:00(:00)?|)$/.");
        }

        if ($unloading_point_from_time !== null && !preg_match("/^(([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?|24:00(:00)?|)$/", $unloading_point_from_time)) {
            throw new \InvalidArgumentException("invalid value for \"unloading_point_from_time\" when calling ExpeditorDraftApi.apiV2OrderDraftExpeditorPriceV2Get, must conform to the pattern /^(([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?|24:00(:00)?|)$/.");
        }


        $resourcePath = '/api/v2/order-draft-expeditor/price-v2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($route_points !== null) {
            if('form' === 'form' && is_array($route_points)) {
                foreach($route_points as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['routePoints[]'] = $route_points;
            }
        }
        // query params
        if ($storage_point_ids !== null) {
            if('form' === 'form' && is_array($storage_point_ids)) {
                foreach($storage_point_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['storagePointIds[]'] = $storage_point_ids;
            }
        }
        // query params
        if ($loading_point_from_date !== null) {
            if('form' === 'form' && is_array($loading_point_from_date)) {
                foreach($loading_point_from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loadingPointFromDate'] = $loading_point_from_date;
            }
        }
        // query params
        if ($loading_point_from_time !== null) {
            if('form' === 'form' && is_array($loading_point_from_time)) {
                foreach($loading_point_from_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loadingPointFromTime'] = $loading_point_from_time;
            }
        }
        // query params
        if ($unloading_point_from_date !== null) {
            if('form' === 'form' && is_array($unloading_point_from_date)) {
                foreach($unloading_point_from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unloadingPointFromDate'] = $unloading_point_from_date;
            }
        }
        // query params
        if ($unloading_point_from_time !== null) {
            if('form' === 'form' && is_array($unloading_point_from_time)) {
                foreach($unloading_point_from_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unloadingPointFromTime'] = $unloading_point_from_time;
            }
        }
        // query params
        if ($company_branch_id !== null) {
            if('form' === 'form' && is_array($company_branch_id)) {
                foreach($company_branch_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['companyBranchId'] = $company_branch_id;
            }
        }
        // query params
        if ($truck_type_id !== null) {
            if('form' === 'form' && is_array($truck_type_id)) {
                foreach($truck_type_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['truckTypeId'] = $truck_type_id;
            }
        }
        // query params
        if ($cargo_weight !== null) {
            if('form' === 'form' && is_array($cargo_weight)) {
                foreach($cargo_weight as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['cargoWeight'] = $cargo_weight;
            }
        }
        // query params
        if ($cargo_capacity !== null) {
            if('form' === 'form' && is_array($cargo_capacity)) {
                foreach($cargo_capacity as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['cargoCapacity'] = $cargo_capacity;
            }
        }
        // query params
        if ($load_weight !== null) {
            if('form' === 'form' && is_array($load_weight)) {
                foreach($load_weight as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loadWeight'] = $load_weight;
            }
        }
        // query params
        if ($load_capacity !== null) {
            if('form' === 'form' && is_array($load_capacity)) {
                foreach($load_capacity as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loadCapacity'] = $load_capacity;
            }
        }
        // query params
        if ($vat_rate !== null) {
            if('form' === 'form' && is_array($vat_rate)) {
                foreach($vat_rate as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['vatRate'] = $vat_rate;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderDraftExpeditorRecommendedPriceGet
     *
     * Получить рекомендованную цену по маршруту
     *
     * @param  int $company_branch_id Идентификатор дочерней компании заказчика (required)
     * @param  int $truck_type_id Тип грузовика (required)
     * @param  string $departure_code Код города отправки (required)
     * @param  string $destination_code Код города назначения (required)
     * @param  string $order_type Тип заказа (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderDraftExpeditorRecommendedPriceResponse
     */
    public function apiV2OrderDraftExpeditorRecommendedPriceGet($company_branch_id, $truck_type_id, $departure_code, $destination_code, $order_type)
    {
        list($response) = $this->apiV2OrderDraftExpeditorRecommendedPriceGetWithHttpInfo($company_branch_id, $truck_type_id, $departure_code, $destination_code, $order_type);
        return $response;
    }

    /**
     * Operation apiV2OrderDraftExpeditorRecommendedPriceGetWithHttpInfo
     *
     * Получить рекомендованную цену по маршруту
     *
     * @param  int $company_branch_id Идентификатор дочерней компании заказчика (required)
     * @param  int $truck_type_id Тип грузовика (required)
     * @param  string $departure_code Код города отправки (required)
     * @param  string $destination_code Код города назначения (required)
     * @param  string $order_type Тип заказа (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderDraftExpeditorRecommendedPriceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderDraftExpeditorRecommendedPriceGetWithHttpInfo($company_branch_id, $truck_type_id, $departure_code, $destination_code, $order_type)
    {
        $request = $this->apiV2OrderDraftExpeditorRecommendedPriceGetRequest($company_branch_id, $truck_type_id, $departure_code, $destination_code, $order_type);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderDraftExpeditorRecommendedPriceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderDraftExpeditorRecommendedPriceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderDraftExpeditorRecommendedPriceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderDraftExpeditorRecommendedPriceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderDraftExpeditorRecommendedPriceGetAsync
     *
     * Получить рекомендованную цену по маршруту
     *
     * @param  int $company_branch_id Идентификатор дочерней компании заказчика (required)
     * @param  int $truck_type_id Тип грузовика (required)
     * @param  string $departure_code Код города отправки (required)
     * @param  string $destination_code Код города назначения (required)
     * @param  string $order_type Тип заказа (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorRecommendedPriceGetAsync($company_branch_id, $truck_type_id, $departure_code, $destination_code, $order_type)
    {
        return $this->apiV2OrderDraftExpeditorRecommendedPriceGetAsyncWithHttpInfo($company_branch_id, $truck_type_id, $departure_code, $destination_code, $order_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderDraftExpeditorRecommendedPriceGetAsyncWithHttpInfo
     *
     * Получить рекомендованную цену по маршруту
     *
     * @param  int $company_branch_id Идентификатор дочерней компании заказчика (required)
     * @param  int $truck_type_id Тип грузовика (required)
     * @param  string $departure_code Код города отправки (required)
     * @param  string $destination_code Код города назначения (required)
     * @param  string $order_type Тип заказа (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorRecommendedPriceGetAsyncWithHttpInfo($company_branch_id, $truck_type_id, $departure_code, $destination_code, $order_type)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderDraftExpeditorRecommendedPriceResponse';
        $request = $this->apiV2OrderDraftExpeditorRecommendedPriceGetRequest($company_branch_id, $truck_type_id, $departure_code, $destination_code, $order_type);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderDraftExpeditorRecommendedPriceGet'
     *
     * @param  int $company_branch_id Идентификатор дочерней компании заказчика (required)
     * @param  int $truck_type_id Тип грузовика (required)
     * @param  string $departure_code Код города отправки (required)
     * @param  string $destination_code Код города назначения (required)
     * @param  string $order_type Тип заказа (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderDraftExpeditorRecommendedPriceGetRequest($company_branch_id, $truck_type_id, $departure_code, $destination_code, $order_type)
    {
        // verify the required parameter 'company_branch_id' is set
        if ($company_branch_id === null || (is_array($company_branch_id) && count($company_branch_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_branch_id when calling apiV2OrderDraftExpeditorRecommendedPriceGet'
            );
        }
        // verify the required parameter 'truck_type_id' is set
        if ($truck_type_id === null || (is_array($truck_type_id) && count($truck_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $truck_type_id when calling apiV2OrderDraftExpeditorRecommendedPriceGet'
            );
        }
        // verify the required parameter 'departure_code' is set
        if ($departure_code === null || (is_array($departure_code) && count($departure_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $departure_code when calling apiV2OrderDraftExpeditorRecommendedPriceGet'
            );
        }
        // verify the required parameter 'destination_code' is set
        if ($destination_code === null || (is_array($destination_code) && count($destination_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destination_code when calling apiV2OrderDraftExpeditorRecommendedPriceGet'
            );
        }
        // verify the required parameter 'order_type' is set
        if ($order_type === null || (is_array($order_type) && count($order_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_type when calling apiV2OrderDraftExpeditorRecommendedPriceGet'
            );
        }

        $resourcePath = '/api/v2/order-draft-expeditor/recommended-price';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($company_branch_id !== null) {
            if('form' === 'form' && is_array($company_branch_id)) {
                foreach($company_branch_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['companyBranchId'] = $company_branch_id;
            }
        }
        // query params
        if ($truck_type_id !== null) {
            if('form' === 'form' && is_array($truck_type_id)) {
                foreach($truck_type_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['truckTypeId'] = $truck_type_id;
            }
        }
        // query params
        if ($departure_code !== null) {
            if('form' === 'form' && is_array($departure_code)) {
                foreach($departure_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['departureCode'] = $departure_code;
            }
        }
        // query params
        if ($destination_code !== null) {
            if('form' === 'form' && is_array($destination_code)) {
                foreach($destination_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['destinationCode'] = $destination_code;
            }
        }
        // query params
        if ($order_type !== null) {
            if('form' === 'form' && is_array($order_type)) {
                foreach($order_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['orderType'] = $order_type;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderDraftExpeditorStepBidGet
     *
     * Получить шаг ставки по цене
     *
     * @param  string $price Цена для которой нужно рассчитать шаг ставки (required)
     * @param  string $currency_code Код валюты в которой указана цена (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderDraftStepBidResponse
     */
    public function apiV2OrderDraftExpeditorStepBidGet($price, $currency_code)
    {
        list($response) = $this->apiV2OrderDraftExpeditorStepBidGetWithHttpInfo($price, $currency_code);
        return $response;
    }

    /**
     * Operation apiV2OrderDraftExpeditorStepBidGetWithHttpInfo
     *
     * Получить шаг ставки по цене
     *
     * @param  string $price Цена для которой нужно рассчитать шаг ставки (required)
     * @param  string $currency_code Код валюты в которой указана цена (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderDraftStepBidResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderDraftExpeditorStepBidGetWithHttpInfo($price, $currency_code)
    {
        $request = $this->apiV2OrderDraftExpeditorStepBidGetRequest($price, $currency_code);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderDraftStepBidResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderDraftStepBidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderDraftStepBidResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderDraftStepBidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderDraftExpeditorStepBidGetAsync
     *
     * Получить шаг ставки по цене
     *
     * @param  string $price Цена для которой нужно рассчитать шаг ставки (required)
     * @param  string $currency_code Код валюты в которой указана цена (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorStepBidGetAsync($price, $currency_code)
    {
        return $this->apiV2OrderDraftExpeditorStepBidGetAsyncWithHttpInfo($price, $currency_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderDraftExpeditorStepBidGetAsyncWithHttpInfo
     *
     * Получить шаг ставки по цене
     *
     * @param  string $price Цена для которой нужно рассчитать шаг ставки (required)
     * @param  string $currency_code Код валюты в которой указана цена (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorStepBidGetAsyncWithHttpInfo($price, $currency_code)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderDraftStepBidResponse';
        $request = $this->apiV2OrderDraftExpeditorStepBidGetRequest($price, $currency_code);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderDraftExpeditorStepBidGet'
     *
     * @param  string $price Цена для которой нужно рассчитать шаг ставки (required)
     * @param  string $currency_code Код валюты в которой указана цена (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderDraftExpeditorStepBidGetRequest($price, $currency_code)
    {
        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling apiV2OrderDraftExpeditorStepBidGet'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling apiV2OrderDraftExpeditorStepBidGet'
            );
        }

        $resourcePath = '/api/v2/order-draft-expeditor/step-bid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($price !== null) {
            if('form' === 'form' && is_array($price)) {
                foreach($price as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['price'] = $price;
            }
        }
        // query params
        if ($currency_code !== null) {
            if('form' === 'form' && is_array($currency_code)) {
                foreach($currency_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['currencyCode'] = $currency_code;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderDraftExpeditorValidatePost
     *
     * Бизнес валидация черновика.
     *
     * @param  \MagDv\Cargomart\Dto\OrderDraftExpeditorUpdateRequest $order_draft_expeditor_update_request order_draft_expeditor_update_request (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderDraftExpeditorValidateResponse
     */
    public function apiV2OrderDraftExpeditorValidatePost($order_draft_expeditor_update_request = null)
    {
        list($response) = $this->apiV2OrderDraftExpeditorValidatePostWithHttpInfo($order_draft_expeditor_update_request);
        return $response;
    }

    /**
     * Operation apiV2OrderDraftExpeditorValidatePostWithHttpInfo
     *
     * Бизнес валидация черновика.
     *
     * @param  \MagDv\Cargomart\Dto\OrderDraftExpeditorUpdateRequest $order_draft_expeditor_update_request (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderDraftExpeditorValidateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderDraftExpeditorValidatePostWithHttpInfo($order_draft_expeditor_update_request = null)
    {
        $request = $this->apiV2OrderDraftExpeditorValidatePostRequest($order_draft_expeditor_update_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderDraftExpeditorValidateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderDraftExpeditorValidateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\BaseMessageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderDraftExpeditorValidateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderDraftExpeditorValidatePostAsync
     *
     * Бизнес валидация черновика.
     *
     * @param  \MagDv\Cargomart\Dto\OrderDraftExpeditorUpdateRequest $order_draft_expeditor_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorValidatePostAsync($order_draft_expeditor_update_request = null)
    {
        return $this->apiV2OrderDraftExpeditorValidatePostAsyncWithHttpInfo($order_draft_expeditor_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderDraftExpeditorValidatePostAsyncWithHttpInfo
     *
     * Бизнес валидация черновика.
     *
     * @param  \MagDv\Cargomart\Dto\OrderDraftExpeditorUpdateRequest $order_draft_expeditor_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderDraftExpeditorValidatePostAsyncWithHttpInfo($order_draft_expeditor_update_request = null)
    {
        $returnType = '\MagDv\Cargomart\Dto\BaseMessageResponse';
        $request = $this->apiV2OrderDraftExpeditorValidatePostRequest($order_draft_expeditor_update_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderDraftExpeditorValidatePost'
     *
     * @param  \MagDv\Cargomart\Dto\OrderDraftExpeditorUpdateRequest $order_draft_expeditor_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderDraftExpeditorValidatePostRequest($order_draft_expeditor_update_request = null)
    {

        $resourcePath = '/api/v2/order-draft-expeditor/validate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_draft_expeditor_update_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_draft_expeditor_update_request));
            } else {
                $httpBody = $order_draft_expeditor_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
