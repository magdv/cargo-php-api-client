<?php
/**
 * PriceLocalApi
 * PHP version 7.2
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\CargoApi;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use MagDv\Cargomart\ApiException;
use MagDv\Cargomart\Configuration;
use MagDv\Cargomart\DebugPlugin;
use MagDv\Cargomart\HeaderSelector;
use MagDv\Cargomart\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * PriceLocalApi Class Doc Comment
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PriceLocalApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://cargomart.ru');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2AcPriceLocalPoolGet
     *
     * Поиск пулов.
     *
     * @param  string $filter_search Поисковая строка (optional)
     * @param  int[] $selected_ids Дополнительные id для поиска (на первое место) (optional)
     * @param  int $page Страница выдачи. (optional)
     * @param  int $per_page лимит выдачи. (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\PriceLocalPoolListResponse
     */
    public function apiV2AcPriceLocalPoolGet($filter_search = null, $selected_ids = null, $page = null, $per_page = null)
    {
        list($response) = $this->apiV2AcPriceLocalPoolGetWithHttpInfo($filter_search, $selected_ids, $page, $per_page);
        return $response;
    }

    /**
     * Operation apiV2AcPriceLocalPoolGetWithHttpInfo
     *
     * Поиск пулов.
     *
     * @param  string $filter_search Поисковая строка (optional)
     * @param  int[] $selected_ids Дополнительные id для поиска (на первое место) (optional)
     * @param  int $page Страница выдачи. (optional)
     * @param  int $per_page лимит выдачи. (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\PriceLocalPoolListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2AcPriceLocalPoolGetWithHttpInfo($filter_search = null, $selected_ids = null, $page = null, $per_page = null)
    {
        $request = $this->apiV2AcPriceLocalPoolGetRequest($filter_search, $selected_ids, $page, $per_page);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\PriceLocalPoolListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\PriceLocalPoolListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\PriceLocalPoolListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\PriceLocalPoolListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2AcPriceLocalPoolGetAsync
     *
     * Поиск пулов.
     *
     * @param  string $filter_search Поисковая строка (optional)
     * @param  int[] $selected_ids Дополнительные id для поиска (на первое место) (optional)
     * @param  int $page Страница выдачи. (optional)
     * @param  int $per_page лимит выдачи. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2AcPriceLocalPoolGetAsync($filter_search = null, $selected_ids = null, $page = null, $per_page = null)
    {
        return $this->apiV2AcPriceLocalPoolGetAsyncWithHttpInfo($filter_search, $selected_ids, $page, $per_page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2AcPriceLocalPoolGetAsyncWithHttpInfo
     *
     * Поиск пулов.
     *
     * @param  string $filter_search Поисковая строка (optional)
     * @param  int[] $selected_ids Дополнительные id для поиска (на первое место) (optional)
     * @param  int $page Страница выдачи. (optional)
     * @param  int $per_page лимит выдачи. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2AcPriceLocalPoolGetAsyncWithHttpInfo($filter_search = null, $selected_ids = null, $page = null, $per_page = null)
    {
        $returnType = '\MagDv\Cargomart\Dto\PriceLocalPoolListResponse';
        $request = $this->apiV2AcPriceLocalPoolGetRequest($filter_search, $selected_ids, $page, $per_page);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2AcPriceLocalPoolGet'
     *
     * @param  string $filter_search Поисковая строка (optional)
     * @param  int[] $selected_ids Дополнительные id для поиска (на первое место) (optional)
     * @param  int $page Страница выдачи. (optional)
     * @param  int $per_page лимит выдачи. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2AcPriceLocalPoolGetRequest($filter_search = null, $selected_ids = null, $page = null, $per_page = null)
    {

        $resourcePath = '/api/v2/ac/price-local-pool';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($filter_search !== null) {
            if('form' === 'form' && is_array($filter_search)) {
                foreach($filter_search as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[search]'] = $filter_search;
            }
        }
        // query params
        if ($selected_ids !== null) {
            if('form' === 'form' && is_array($selected_ids)) {
                foreach($selected_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['selectedIds[]'] = $selected_ids;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($per_page !== null) {
            if('form' === 'form' && is_array($per_page)) {
                foreach($per_page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['perPage'] = $per_page;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolGet
     *
     * Получение списка пулов направлений и цен.
     *
     * @param  string $filter_is_active Фильтр по активности записи (optional)
     * @param  int $filter_id Фильтр по id пула (optional)
     * @param  string $filter_departure_code Фильтр по коду точки отправления (optional)
     * @param  string $filter_destination_code Фильтр по коду точки назначения (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\PriceLocalPoolListResponse
     */
    public function apiV2ExpeditorPriceLocalPoolGet($filter_is_active = null, $filter_id = null, $filter_departure_code = null, $filter_destination_code = null)
    {
        list($response) = $this->apiV2ExpeditorPriceLocalPoolGetWithHttpInfo($filter_is_active, $filter_id, $filter_departure_code, $filter_destination_code);
        return $response;
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolGetWithHttpInfo
     *
     * Получение списка пулов направлений и цен.
     *
     * @param  string $filter_is_active Фильтр по активности записи (optional)
     * @param  int $filter_id Фильтр по id пула (optional)
     * @param  string $filter_departure_code Фильтр по коду точки отправления (optional)
     * @param  string $filter_destination_code Фильтр по коду точки назначения (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\PriceLocalPoolListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ExpeditorPriceLocalPoolGetWithHttpInfo($filter_is_active = null, $filter_id = null, $filter_departure_code = null, $filter_destination_code = null)
    {
        $request = $this->apiV2ExpeditorPriceLocalPoolGetRequest($filter_is_active, $filter_id, $filter_departure_code, $filter_destination_code);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\PriceLocalPoolListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\PriceLocalPoolListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\PriceLocalPoolListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\PriceLocalPoolListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolGetAsync
     *
     * Получение списка пулов направлений и цен.
     *
     * @param  string $filter_is_active Фильтр по активности записи (optional)
     * @param  int $filter_id Фильтр по id пула (optional)
     * @param  string $filter_departure_code Фильтр по коду точки отправления (optional)
     * @param  string $filter_destination_code Фильтр по коду точки назначения (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPoolGetAsync($filter_is_active = null, $filter_id = null, $filter_departure_code = null, $filter_destination_code = null)
    {
        return $this->apiV2ExpeditorPriceLocalPoolGetAsyncWithHttpInfo($filter_is_active, $filter_id, $filter_departure_code, $filter_destination_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolGetAsyncWithHttpInfo
     *
     * Получение списка пулов направлений и цен.
     *
     * @param  string $filter_is_active Фильтр по активности записи (optional)
     * @param  int $filter_id Фильтр по id пула (optional)
     * @param  string $filter_departure_code Фильтр по коду точки отправления (optional)
     * @param  string $filter_destination_code Фильтр по коду точки назначения (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPoolGetAsyncWithHttpInfo($filter_is_active = null, $filter_id = null, $filter_departure_code = null, $filter_destination_code = null)
    {
        $returnType = '\MagDv\Cargomart\Dto\PriceLocalPoolListResponse';
        $request = $this->apiV2ExpeditorPriceLocalPoolGetRequest($filter_is_active, $filter_id, $filter_departure_code, $filter_destination_code);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ExpeditorPriceLocalPoolGet'
     *
     * @param  string $filter_is_active Фильтр по активности записи (optional)
     * @param  int $filter_id Фильтр по id пула (optional)
     * @param  string $filter_departure_code Фильтр по коду точки отправления (optional)
     * @param  string $filter_destination_code Фильтр по коду точки назначения (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2ExpeditorPriceLocalPoolGetRequest($filter_is_active = null, $filter_id = null, $filter_departure_code = null, $filter_destination_code = null)
    {

        $resourcePath = '/api/v2/expeditor/price-local/pool';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($filter_is_active !== null) {
            if('form' === 'form' && is_array($filter_is_active)) {
                foreach($filter_is_active as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[isActive]'] = $filter_is_active;
            }
        }
        // query params
        if ($filter_id !== null) {
            if('form' === 'form' && is_array($filter_id)) {
                foreach($filter_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[id]'] = $filter_id;
            }
        }
        // query params
        if ($filter_departure_code !== null) {
            if('form' === 'form' && is_array($filter_departure_code)) {
                foreach($filter_departure_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[departureCode]'] = $filter_departure_code;
            }
        }
        // query params
        if ($filter_destination_code !== null) {
            if('form' === 'form' && is_array($filter_destination_code)) {
                foreach($filter_destination_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[destinationCode]'] = $filter_destination_code;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPoolIdDirectionDirectionIdDelete
     *
     * Открепление направления от данного пула.
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     * @param  int $direction_id Идентификатор направления. (required)
     * @param  object $body body (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\EmptyDataResponse
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdDirectionDirectionIdDelete($pool_id, $direction_id, $body)
    {
        list($response) = $this->apiV2ExpeditorPriceLocalPoolPoolIdDirectionDirectionIdDeleteWithHttpInfo($pool_id, $direction_id, $body);
        return $response;
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPoolIdDirectionDirectionIdDeleteWithHttpInfo
     *
     * Открепление направления от данного пула.
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     * @param  int $direction_id Идентификатор направления. (required)
     * @param  object $body (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\EmptyDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdDirectionDirectionIdDeleteWithHttpInfo($pool_id, $direction_id, $body)
    {
        $request = $this->apiV2ExpeditorPriceLocalPoolPoolIdDirectionDirectionIdDeleteRequest($pool_id, $direction_id, $body);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\EmptyDataResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\EmptyDataResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\EmptyDataResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\EmptyDataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPoolIdDirectionDirectionIdDeleteAsync
     *
     * Открепление направления от данного пула.
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     * @param  int $direction_id Идентификатор направления. (required)
     * @param  object $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdDirectionDirectionIdDeleteAsync($pool_id, $direction_id, $body)
    {
        return $this->apiV2ExpeditorPriceLocalPoolPoolIdDirectionDirectionIdDeleteAsyncWithHttpInfo($pool_id, $direction_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPoolIdDirectionDirectionIdDeleteAsyncWithHttpInfo
     *
     * Открепление направления от данного пула.
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     * @param  int $direction_id Идентификатор направления. (required)
     * @param  object $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdDirectionDirectionIdDeleteAsyncWithHttpInfo($pool_id, $direction_id, $body)
    {
        $returnType = '\MagDv\Cargomart\Dto\EmptyDataResponse';
        $request = $this->apiV2ExpeditorPriceLocalPoolPoolIdDirectionDirectionIdDeleteRequest($pool_id, $direction_id, $body);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ExpeditorPriceLocalPoolPoolIdDirectionDirectionIdDelete'
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     * @param  int $direction_id Идентификатор направления. (required)
     * @param  object $body (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdDirectionDirectionIdDeleteRequest($pool_id, $direction_id, $body)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null || (is_array($pool_id) && count($pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pool_id when calling apiV2ExpeditorPriceLocalPoolPoolIdDirectionDirectionIdDelete'
            );
        }
        // verify the required parameter 'direction_id' is set
        if ($direction_id === null || (is_array($direction_id) && count($direction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $direction_id when calling apiV2ExpeditorPriceLocalPoolPoolIdDirectionDirectionIdDelete'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiV2ExpeditorPriceLocalPoolPoolIdDirectionDirectionIdDelete'
            );
        }

        $resourcePath = '/api/v2/expeditor/price-local/pool/{poolId}/direction/{directionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'poolId' . '}',
                ObjectSerializer::toPathValue($pool_id),
                $resourcePath
            );
        }
        // path params
        if ($direction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'directionId' . '}',
                ObjectSerializer::toPathValue($direction_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPoolIdDirectionGet
     *
     * Получение списка направлений данного пула.
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\PriceLocalDirectionListResponse
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdDirectionGet($pool_id)
    {
        list($response) = $this->apiV2ExpeditorPriceLocalPoolPoolIdDirectionGetWithHttpInfo($pool_id);
        return $response;
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPoolIdDirectionGetWithHttpInfo
     *
     * Получение списка направлений данного пула.
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\PriceLocalDirectionListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdDirectionGetWithHttpInfo($pool_id)
    {
        $request = $this->apiV2ExpeditorPriceLocalPoolPoolIdDirectionGetRequest($pool_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\PriceLocalDirectionListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\PriceLocalDirectionListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\PriceLocalDirectionListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\PriceLocalDirectionListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPoolIdDirectionGetAsync
     *
     * Получение списка направлений данного пула.
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdDirectionGetAsync($pool_id)
    {
        return $this->apiV2ExpeditorPriceLocalPoolPoolIdDirectionGetAsyncWithHttpInfo($pool_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPoolIdDirectionGetAsyncWithHttpInfo
     *
     * Получение списка направлений данного пула.
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdDirectionGetAsyncWithHttpInfo($pool_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\PriceLocalDirectionListResponse';
        $request = $this->apiV2ExpeditorPriceLocalPoolPoolIdDirectionGetRequest($pool_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ExpeditorPriceLocalPoolPoolIdDirectionGet'
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdDirectionGetRequest($pool_id)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null || (is_array($pool_id) && count($pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pool_id when calling apiV2ExpeditorPriceLocalPoolPoolIdDirectionGet'
            );
        }

        $resourcePath = '/api/v2/expeditor/price-local/pool/{poolId}/direction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'poolId' . '}',
                ObjectSerializer::toPathValue($pool_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPoolIdDirectionPost
     *
     * Прикрепление направления к данному пулу направлений и цен.
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     * @param  \MagDv\Cargomart\Dto\PriceLocalDirectionCreateRequest $price_local_direction_create_request price_local_direction_create_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\PriceLocalDirectionItemResponse
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdDirectionPost($pool_id, $price_local_direction_create_request)
    {
        list($response) = $this->apiV2ExpeditorPriceLocalPoolPoolIdDirectionPostWithHttpInfo($pool_id, $price_local_direction_create_request);
        return $response;
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPoolIdDirectionPostWithHttpInfo
     *
     * Прикрепление направления к данному пулу направлений и цен.
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     * @param  \MagDv\Cargomart\Dto\PriceLocalDirectionCreateRequest $price_local_direction_create_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\PriceLocalDirectionItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdDirectionPostWithHttpInfo($pool_id, $price_local_direction_create_request)
    {
        $request = $this->apiV2ExpeditorPriceLocalPoolPoolIdDirectionPostRequest($pool_id, $price_local_direction_create_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\PriceLocalDirectionItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\PriceLocalDirectionItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\PriceLocalDirectionItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\PriceLocalDirectionItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPoolIdDirectionPostAsync
     *
     * Прикрепление направления к данному пулу направлений и цен.
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     * @param  \MagDv\Cargomart\Dto\PriceLocalDirectionCreateRequest $price_local_direction_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdDirectionPostAsync($pool_id, $price_local_direction_create_request)
    {
        return $this->apiV2ExpeditorPriceLocalPoolPoolIdDirectionPostAsyncWithHttpInfo($pool_id, $price_local_direction_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPoolIdDirectionPostAsyncWithHttpInfo
     *
     * Прикрепление направления к данному пулу направлений и цен.
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     * @param  \MagDv\Cargomart\Dto\PriceLocalDirectionCreateRequest $price_local_direction_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdDirectionPostAsyncWithHttpInfo($pool_id, $price_local_direction_create_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\PriceLocalDirectionItemResponse';
        $request = $this->apiV2ExpeditorPriceLocalPoolPoolIdDirectionPostRequest($pool_id, $price_local_direction_create_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ExpeditorPriceLocalPoolPoolIdDirectionPost'
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     * @param  \MagDv\Cargomart\Dto\PriceLocalDirectionCreateRequest $price_local_direction_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdDirectionPostRequest($pool_id, $price_local_direction_create_request)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null || (is_array($pool_id) && count($pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pool_id when calling apiV2ExpeditorPriceLocalPoolPoolIdDirectionPost'
            );
        }
        // verify the required parameter 'price_local_direction_create_request' is set
        if ($price_local_direction_create_request === null || (is_array($price_local_direction_create_request) && count($price_local_direction_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_local_direction_create_request when calling apiV2ExpeditorPriceLocalPoolPoolIdDirectionPost'
            );
        }

        $resourcePath = '/api/v2/expeditor/price-local/pool/{poolId}/direction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'poolId' . '}',
                ObjectSerializer::toPathValue($pool_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($price_local_direction_create_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($price_local_direction_create_request));
            } else {
                $httpBody = $price_local_direction_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPoolIdGet
     *
     * Получение данных конкретного пула направлений и цен.
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\PriceLocalPoolItemResponse
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdGet($pool_id)
    {
        list($response) = $this->apiV2ExpeditorPriceLocalPoolPoolIdGetWithHttpInfo($pool_id);
        return $response;
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPoolIdGetWithHttpInfo
     *
     * Получение данных конкретного пула направлений и цен.
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\PriceLocalPoolItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdGetWithHttpInfo($pool_id)
    {
        $request = $this->apiV2ExpeditorPriceLocalPoolPoolIdGetRequest($pool_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\PriceLocalPoolItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\PriceLocalPoolItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\PriceLocalPoolItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\PriceLocalPoolItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPoolIdGetAsync
     *
     * Получение данных конкретного пула направлений и цен.
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdGetAsync($pool_id)
    {
        return $this->apiV2ExpeditorPriceLocalPoolPoolIdGetAsyncWithHttpInfo($pool_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPoolIdGetAsyncWithHttpInfo
     *
     * Получение данных конкретного пула направлений и цен.
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdGetAsyncWithHttpInfo($pool_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\PriceLocalPoolItemResponse';
        $request = $this->apiV2ExpeditorPriceLocalPoolPoolIdGetRequest($pool_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ExpeditorPriceLocalPoolPoolIdGet'
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdGetRequest($pool_id)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null || (is_array($pool_id) && count($pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pool_id when calling apiV2ExpeditorPriceLocalPoolPoolIdGet'
            );
        }

        $resourcePath = '/api/v2/expeditor/price-local/pool/{poolId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'poolId' . '}',
                ObjectSerializer::toPathValue($pool_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPoolIdPatch
     *
     * Редактирование конкретного пула направлений и цен.
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     * @param  \MagDv\Cargomart\Dto\PriceLocalPoolEditRequest $price_local_pool_edit_request price_local_pool_edit_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\PriceLocalPoolItemResponse
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdPatch($pool_id, $price_local_pool_edit_request)
    {
        list($response) = $this->apiV2ExpeditorPriceLocalPoolPoolIdPatchWithHttpInfo($pool_id, $price_local_pool_edit_request);
        return $response;
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPoolIdPatchWithHttpInfo
     *
     * Редактирование конкретного пула направлений и цен.
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     * @param  \MagDv\Cargomart\Dto\PriceLocalPoolEditRequest $price_local_pool_edit_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\PriceLocalPoolItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdPatchWithHttpInfo($pool_id, $price_local_pool_edit_request)
    {
        $request = $this->apiV2ExpeditorPriceLocalPoolPoolIdPatchRequest($pool_id, $price_local_pool_edit_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\PriceLocalPoolItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\PriceLocalPoolItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\PriceLocalPoolItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\PriceLocalPoolItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPoolIdPatchAsync
     *
     * Редактирование конкретного пула направлений и цен.
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     * @param  \MagDv\Cargomart\Dto\PriceLocalPoolEditRequest $price_local_pool_edit_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdPatchAsync($pool_id, $price_local_pool_edit_request)
    {
        return $this->apiV2ExpeditorPriceLocalPoolPoolIdPatchAsyncWithHttpInfo($pool_id, $price_local_pool_edit_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPoolIdPatchAsyncWithHttpInfo
     *
     * Редактирование конкретного пула направлений и цен.
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     * @param  \MagDv\Cargomart\Dto\PriceLocalPoolEditRequest $price_local_pool_edit_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdPatchAsyncWithHttpInfo($pool_id, $price_local_pool_edit_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\PriceLocalPoolItemResponse';
        $request = $this->apiV2ExpeditorPriceLocalPoolPoolIdPatchRequest($pool_id, $price_local_pool_edit_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ExpeditorPriceLocalPoolPoolIdPatch'
     *
     * @param  int $pool_id Идентификатор пула направлений и цен. (required)
     * @param  \MagDv\Cargomart\Dto\PriceLocalPoolEditRequest $price_local_pool_edit_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2ExpeditorPriceLocalPoolPoolIdPatchRequest($pool_id, $price_local_pool_edit_request)
    {
        // verify the required parameter 'pool_id' is set
        if ($pool_id === null || (is_array($pool_id) && count($pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pool_id when calling apiV2ExpeditorPriceLocalPoolPoolIdPatch'
            );
        }
        // verify the required parameter 'price_local_pool_edit_request' is set
        if ($price_local_pool_edit_request === null || (is_array($price_local_pool_edit_request) && count($price_local_pool_edit_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_local_pool_edit_request when calling apiV2ExpeditorPriceLocalPoolPoolIdPatch'
            );
        }

        $resourcePath = '/api/v2/expeditor/price-local/pool/{poolId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'poolId' . '}',
                ObjectSerializer::toPathValue($pool_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($price_local_pool_edit_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($price_local_pool_edit_request));
            } else {
                $httpBody = $price_local_pool_edit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PATCH', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPost
     *
     * Создание пула направлений и цен.
     *
     * @param  \MagDv\Cargomart\Dto\PriceLocalPoolCreateRequest $price_local_pool_create_request price_local_pool_create_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\PriceLocalPoolItemResponse
     */
    public function apiV2ExpeditorPriceLocalPoolPost($price_local_pool_create_request)
    {
        list($response) = $this->apiV2ExpeditorPriceLocalPoolPostWithHttpInfo($price_local_pool_create_request);
        return $response;
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPostWithHttpInfo
     *
     * Создание пула направлений и цен.
     *
     * @param  \MagDv\Cargomart\Dto\PriceLocalPoolCreateRequest $price_local_pool_create_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\PriceLocalPoolItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ExpeditorPriceLocalPoolPostWithHttpInfo($price_local_pool_create_request)
    {
        $request = $this->apiV2ExpeditorPriceLocalPoolPostRequest($price_local_pool_create_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\PriceLocalPoolItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\PriceLocalPoolItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\PriceLocalPoolItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\PriceLocalPoolItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPostAsync
     *
     * Создание пула направлений и цен.
     *
     * @param  \MagDv\Cargomart\Dto\PriceLocalPoolCreateRequest $price_local_pool_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPoolPostAsync($price_local_pool_create_request)
    {
        return $this->apiV2ExpeditorPriceLocalPoolPostAsyncWithHttpInfo($price_local_pool_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPoolPostAsyncWithHttpInfo
     *
     * Создание пула направлений и цен.
     *
     * @param  \MagDv\Cargomart\Dto\PriceLocalPoolCreateRequest $price_local_pool_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPoolPostAsyncWithHttpInfo($price_local_pool_create_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\PriceLocalPoolItemResponse';
        $request = $this->apiV2ExpeditorPriceLocalPoolPostRequest($price_local_pool_create_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ExpeditorPriceLocalPoolPost'
     *
     * @param  \MagDv\Cargomart\Dto\PriceLocalPoolCreateRequest $price_local_pool_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2ExpeditorPriceLocalPoolPostRequest($price_local_pool_create_request)
    {
        // verify the required parameter 'price_local_pool_create_request' is set
        if ($price_local_pool_create_request === null || (is_array($price_local_pool_create_request) && count($price_local_pool_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_local_pool_create_request when calling apiV2ExpeditorPriceLocalPoolPost'
            );
        }

        $resourcePath = '/api/v2/expeditor/price-local/pool';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($price_local_pool_create_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($price_local_pool_create_request));
            } else {
                $httpBody = $price_local_pool_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPriceGet
     *
     * Получения списка элементов справочника цен
     *
     * @param  int $filter_pool_id Фильтр по идентификатору пула направлений и цен. (optional)
     * @param  int $filter_truck_type_id Фильтр по идентификатору типа кузова (optional)
     * @param  string $filter_is_active Фильтр по активности записи (optional)
     * @param  string $filter_departure_code Фильтр по коду точки отправления (optional)
     * @param  string $filter_destination_code Фильтр по коду точки назначения (optional)
     * @param  int $page Номер страницы для постраничной навигации (optional)
     * @param  int $per_page Количество элементов на страницу (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\PriceLocalListResponse
     */
    public function apiV2ExpeditorPriceLocalPriceGet($filter_pool_id = null, $filter_truck_type_id = null, $filter_is_active = null, $filter_departure_code = null, $filter_destination_code = null, $page = null, $per_page = null)
    {
        list($response) = $this->apiV2ExpeditorPriceLocalPriceGetWithHttpInfo($filter_pool_id, $filter_truck_type_id, $filter_is_active, $filter_departure_code, $filter_destination_code, $page, $per_page);
        return $response;
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPriceGetWithHttpInfo
     *
     * Получения списка элементов справочника цен
     *
     * @param  int $filter_pool_id Фильтр по идентификатору пула направлений и цен. (optional)
     * @param  int $filter_truck_type_id Фильтр по идентификатору типа кузова (optional)
     * @param  string $filter_is_active Фильтр по активности записи (optional)
     * @param  string $filter_departure_code Фильтр по коду точки отправления (optional)
     * @param  string $filter_destination_code Фильтр по коду точки назначения (optional)
     * @param  int $page Номер страницы для постраничной навигации (optional)
     * @param  int $per_page Количество элементов на страницу (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\PriceLocalListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ExpeditorPriceLocalPriceGetWithHttpInfo($filter_pool_id = null, $filter_truck_type_id = null, $filter_is_active = null, $filter_departure_code = null, $filter_destination_code = null, $page = null, $per_page = null)
    {
        $request = $this->apiV2ExpeditorPriceLocalPriceGetRequest($filter_pool_id, $filter_truck_type_id, $filter_is_active, $filter_departure_code, $filter_destination_code, $page, $per_page);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\PriceLocalListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\PriceLocalListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\PriceLocalListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\PriceLocalListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPriceGetAsync
     *
     * Получения списка элементов справочника цен
     *
     * @param  int $filter_pool_id Фильтр по идентификатору пула направлений и цен. (optional)
     * @param  int $filter_truck_type_id Фильтр по идентификатору типа кузова (optional)
     * @param  string $filter_is_active Фильтр по активности записи (optional)
     * @param  string $filter_departure_code Фильтр по коду точки отправления (optional)
     * @param  string $filter_destination_code Фильтр по коду точки назначения (optional)
     * @param  int $page Номер страницы для постраничной навигации (optional)
     * @param  int $per_page Количество элементов на страницу (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPriceGetAsync($filter_pool_id = null, $filter_truck_type_id = null, $filter_is_active = null, $filter_departure_code = null, $filter_destination_code = null, $page = null, $per_page = null)
    {
        return $this->apiV2ExpeditorPriceLocalPriceGetAsyncWithHttpInfo($filter_pool_id, $filter_truck_type_id, $filter_is_active, $filter_departure_code, $filter_destination_code, $page, $per_page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPriceGetAsyncWithHttpInfo
     *
     * Получения списка элементов справочника цен
     *
     * @param  int $filter_pool_id Фильтр по идентификатору пула направлений и цен. (optional)
     * @param  int $filter_truck_type_id Фильтр по идентификатору типа кузова (optional)
     * @param  string $filter_is_active Фильтр по активности записи (optional)
     * @param  string $filter_departure_code Фильтр по коду точки отправления (optional)
     * @param  string $filter_destination_code Фильтр по коду точки назначения (optional)
     * @param  int $page Номер страницы для постраничной навигации (optional)
     * @param  int $per_page Количество элементов на страницу (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPriceGetAsyncWithHttpInfo($filter_pool_id = null, $filter_truck_type_id = null, $filter_is_active = null, $filter_departure_code = null, $filter_destination_code = null, $page = null, $per_page = null)
    {
        $returnType = '\MagDv\Cargomart\Dto\PriceLocalListResponse';
        $request = $this->apiV2ExpeditorPriceLocalPriceGetRequest($filter_pool_id, $filter_truck_type_id, $filter_is_active, $filter_departure_code, $filter_destination_code, $page, $per_page);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ExpeditorPriceLocalPriceGet'
     *
     * @param  int $filter_pool_id Фильтр по идентификатору пула направлений и цен. (optional)
     * @param  int $filter_truck_type_id Фильтр по идентификатору типа кузова (optional)
     * @param  string $filter_is_active Фильтр по активности записи (optional)
     * @param  string $filter_departure_code Фильтр по коду точки отправления (optional)
     * @param  string $filter_destination_code Фильтр по коду точки назначения (optional)
     * @param  int $page Номер страницы для постраничной навигации (optional)
     * @param  int $per_page Количество элементов на страницу (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2ExpeditorPriceLocalPriceGetRequest($filter_pool_id = null, $filter_truck_type_id = null, $filter_is_active = null, $filter_departure_code = null, $filter_destination_code = null, $page = null, $per_page = null)
    {

        $resourcePath = '/api/v2/expeditor/price-local/price';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($filter_pool_id !== null) {
            if('form' === 'form' && is_array($filter_pool_id)) {
                foreach($filter_pool_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[poolId]'] = $filter_pool_id;
            }
        }
        // query params
        if ($filter_truck_type_id !== null) {
            if('form' === 'form' && is_array($filter_truck_type_id)) {
                foreach($filter_truck_type_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[truckTypeId]'] = $filter_truck_type_id;
            }
        }
        // query params
        if ($filter_is_active !== null) {
            if('form' === 'form' && is_array($filter_is_active)) {
                foreach($filter_is_active as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[isActive]'] = $filter_is_active;
            }
        }
        // query params
        if ($filter_departure_code !== null) {
            if('form' === 'form' && is_array($filter_departure_code)) {
                foreach($filter_departure_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[departureCode]'] = $filter_departure_code;
            }
        }
        // query params
        if ($filter_destination_code !== null) {
            if('form' === 'form' && is_array($filter_destination_code)) {
                foreach($filter_destination_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[destinationCode]'] = $filter_destination_code;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($per_page !== null) {
            if('form' === 'form' && is_array($per_page)) {
                foreach($per_page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['perPage'] = $per_page;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPricePost
     *
     * Создание нового элемента в справочнике цен.
     *
     * @param  \MagDv\Cargomart\Dto\PriceLocalCreateRequest $price_local_create_request price_local_create_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\PriceLocalItemResponse
     */
    public function apiV2ExpeditorPriceLocalPricePost($price_local_create_request)
    {
        list($response) = $this->apiV2ExpeditorPriceLocalPricePostWithHttpInfo($price_local_create_request);
        return $response;
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPricePostWithHttpInfo
     *
     * Создание нового элемента в справочнике цен.
     *
     * @param  \MagDv\Cargomart\Dto\PriceLocalCreateRequest $price_local_create_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\PriceLocalItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ExpeditorPriceLocalPricePostWithHttpInfo($price_local_create_request)
    {
        $request = $this->apiV2ExpeditorPriceLocalPricePostRequest($price_local_create_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\PriceLocalItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\PriceLocalItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\PriceLocalItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\PriceLocalItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPricePostAsync
     *
     * Создание нового элемента в справочнике цен.
     *
     * @param  \MagDv\Cargomart\Dto\PriceLocalCreateRequest $price_local_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPricePostAsync($price_local_create_request)
    {
        return $this->apiV2ExpeditorPriceLocalPricePostAsyncWithHttpInfo($price_local_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPricePostAsyncWithHttpInfo
     *
     * Создание нового элемента в справочнике цен.
     *
     * @param  \MagDv\Cargomart\Dto\PriceLocalCreateRequest $price_local_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPricePostAsyncWithHttpInfo($price_local_create_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\PriceLocalItemResponse';
        $request = $this->apiV2ExpeditorPriceLocalPricePostRequest($price_local_create_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ExpeditorPriceLocalPricePost'
     *
     * @param  \MagDv\Cargomart\Dto\PriceLocalCreateRequest $price_local_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2ExpeditorPriceLocalPricePostRequest($price_local_create_request)
    {
        // verify the required parameter 'price_local_create_request' is set
        if ($price_local_create_request === null || (is_array($price_local_create_request) && count($price_local_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_local_create_request when calling apiV2ExpeditorPriceLocalPricePost'
            );
        }

        $resourcePath = '/api/v2/expeditor/price-local/price';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($price_local_create_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($price_local_create_request));
            } else {
                $httpBody = $price_local_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPricePriceIdDelete
     *
     * Деактивация направления.
     *
     * @param  int $price_id Идентификатор элемента справочника цен. (required)
     * @param  object $body body (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\PriceLocalItemResponse
     */
    public function apiV2ExpeditorPriceLocalPricePriceIdDelete($price_id, $body)
    {
        list($response) = $this->apiV2ExpeditorPriceLocalPricePriceIdDeleteWithHttpInfo($price_id, $body);
        return $response;
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPricePriceIdDeleteWithHttpInfo
     *
     * Деактивация направления.
     *
     * @param  int $price_id Идентификатор элемента справочника цен. (required)
     * @param  object $body (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\PriceLocalItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ExpeditorPriceLocalPricePriceIdDeleteWithHttpInfo($price_id, $body)
    {
        $request = $this->apiV2ExpeditorPriceLocalPricePriceIdDeleteRequest($price_id, $body);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\PriceLocalItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\PriceLocalItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\PriceLocalItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\PriceLocalItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPricePriceIdDeleteAsync
     *
     * Деактивация направления.
     *
     * @param  int $price_id Идентификатор элемента справочника цен. (required)
     * @param  object $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPricePriceIdDeleteAsync($price_id, $body)
    {
        return $this->apiV2ExpeditorPriceLocalPricePriceIdDeleteAsyncWithHttpInfo($price_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPricePriceIdDeleteAsyncWithHttpInfo
     *
     * Деактивация направления.
     *
     * @param  int $price_id Идентификатор элемента справочника цен. (required)
     * @param  object $body (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPricePriceIdDeleteAsyncWithHttpInfo($price_id, $body)
    {
        $returnType = '\MagDv\Cargomart\Dto\PriceLocalItemResponse';
        $request = $this->apiV2ExpeditorPriceLocalPricePriceIdDeleteRequest($price_id, $body);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ExpeditorPriceLocalPricePriceIdDelete'
     *
     * @param  int $price_id Идентификатор элемента справочника цен. (required)
     * @param  object $body (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2ExpeditorPriceLocalPricePriceIdDeleteRequest($price_id, $body)
    {
        // verify the required parameter 'price_id' is set
        if ($price_id === null || (is_array($price_id) && count($price_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_id when calling apiV2ExpeditorPriceLocalPricePriceIdDelete'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiV2ExpeditorPriceLocalPricePriceIdDelete'
            );
        }

        $resourcePath = '/api/v2/expeditor/price-local/price/{priceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($price_id !== null) {
            $resourcePath = str_replace(
                '{' . 'priceId' . '}',
                ObjectSerializer::toPathValue($price_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPricePriceIdGet
     *
     * Получение данных конкретного элемента справочника цен.
     *
     * @param  int $price_id Идентификатор элемента справочника цен. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\PriceLocalItemResponse
     */
    public function apiV2ExpeditorPriceLocalPricePriceIdGet($price_id)
    {
        list($response) = $this->apiV2ExpeditorPriceLocalPricePriceIdGetWithHttpInfo($price_id);
        return $response;
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPricePriceIdGetWithHttpInfo
     *
     * Получение данных конкретного элемента справочника цен.
     *
     * @param  int $price_id Идентификатор элемента справочника цен. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\PriceLocalItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ExpeditorPriceLocalPricePriceIdGetWithHttpInfo($price_id)
    {
        $request = $this->apiV2ExpeditorPriceLocalPricePriceIdGetRequest($price_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\PriceLocalItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\PriceLocalItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\PriceLocalItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\PriceLocalItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPricePriceIdGetAsync
     *
     * Получение данных конкретного элемента справочника цен.
     *
     * @param  int $price_id Идентификатор элемента справочника цен. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPricePriceIdGetAsync($price_id)
    {
        return $this->apiV2ExpeditorPriceLocalPricePriceIdGetAsyncWithHttpInfo($price_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPricePriceIdGetAsyncWithHttpInfo
     *
     * Получение данных конкретного элемента справочника цен.
     *
     * @param  int $price_id Идентификатор элемента справочника цен. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPricePriceIdGetAsyncWithHttpInfo($price_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\PriceLocalItemResponse';
        $request = $this->apiV2ExpeditorPriceLocalPricePriceIdGetRequest($price_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ExpeditorPriceLocalPricePriceIdGet'
     *
     * @param  int $price_id Идентификатор элемента справочника цен. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2ExpeditorPriceLocalPricePriceIdGetRequest($price_id)
    {
        // verify the required parameter 'price_id' is set
        if ($price_id === null || (is_array($price_id) && count($price_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_id when calling apiV2ExpeditorPriceLocalPricePriceIdGet'
            );
        }

        $resourcePath = '/api/v2/expeditor/price-local/price/{priceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($price_id !== null) {
            $resourcePath = str_replace(
                '{' . 'priceId' . '}',
                ObjectSerializer::toPathValue($price_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPricePriceIdPut
     *
     * Редактирование конкретного элемента справочника цен.
     *
     * @param  int $price_id Идентификатор элемента справочника цен. (required)
     * @param  \MagDv\Cargomart\Dto\PriceLocalEditRequest $price_local_edit_request price_local_edit_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\PriceLocalItemResponse
     */
    public function apiV2ExpeditorPriceLocalPricePriceIdPut($price_id, $price_local_edit_request)
    {
        list($response) = $this->apiV2ExpeditorPriceLocalPricePriceIdPutWithHttpInfo($price_id, $price_local_edit_request);
        return $response;
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPricePriceIdPutWithHttpInfo
     *
     * Редактирование конкретного элемента справочника цен.
     *
     * @param  int $price_id Идентификатор элемента справочника цен. (required)
     * @param  \MagDv\Cargomart\Dto\PriceLocalEditRequest $price_local_edit_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\PriceLocalItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ExpeditorPriceLocalPricePriceIdPutWithHttpInfo($price_id, $price_local_edit_request)
    {
        $request = $this->apiV2ExpeditorPriceLocalPricePriceIdPutRequest($price_id, $price_local_edit_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\PriceLocalItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\PriceLocalItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\PriceLocalItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\PriceLocalItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPricePriceIdPutAsync
     *
     * Редактирование конкретного элемента справочника цен.
     *
     * @param  int $price_id Идентификатор элемента справочника цен. (required)
     * @param  \MagDv\Cargomart\Dto\PriceLocalEditRequest $price_local_edit_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPricePriceIdPutAsync($price_id, $price_local_edit_request)
    {
        return $this->apiV2ExpeditorPriceLocalPricePriceIdPutAsyncWithHttpInfo($price_id, $price_local_edit_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ExpeditorPriceLocalPricePriceIdPutAsyncWithHttpInfo
     *
     * Редактирование конкретного элемента справочника цен.
     *
     * @param  int $price_id Идентификатор элемента справочника цен. (required)
     * @param  \MagDv\Cargomart\Dto\PriceLocalEditRequest $price_local_edit_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorPriceLocalPricePriceIdPutAsyncWithHttpInfo($price_id, $price_local_edit_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\PriceLocalItemResponse';
        $request = $this->apiV2ExpeditorPriceLocalPricePriceIdPutRequest($price_id, $price_local_edit_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ExpeditorPriceLocalPricePriceIdPut'
     *
     * @param  int $price_id Идентификатор элемента справочника цен. (required)
     * @param  \MagDv\Cargomart\Dto\PriceLocalEditRequest $price_local_edit_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2ExpeditorPriceLocalPricePriceIdPutRequest($price_id, $price_local_edit_request)
    {
        // verify the required parameter 'price_id' is set
        if ($price_id === null || (is_array($price_id) && count($price_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_id when calling apiV2ExpeditorPriceLocalPricePriceIdPut'
            );
        }
        // verify the required parameter 'price_local_edit_request' is set
        if ($price_local_edit_request === null || (is_array($price_local_edit_request) && count($price_local_edit_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_local_edit_request when calling apiV2ExpeditorPriceLocalPricePriceIdPut'
            );
        }

        $resourcePath = '/api/v2/expeditor/price-local/price/{priceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($price_id !== null) {
            $resourcePath = str_replace(
                '{' . 'priceId' . '}',
                ObjectSerializer::toPathValue($price_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($price_local_edit_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($price_local_edit_request));
            } else {
                $httpBody = $price_local_edit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
