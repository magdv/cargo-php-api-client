<?php
/**
 * StoragePointApi
 * PHP version 7.2
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\CargoApi;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use MagDv\Cargomart\ApiException;
use MagDv\Cargomart\Configuration;
use MagDv\Cargomart\DebugPlugin;
use MagDv\Cargomart\HeaderSelector;
use MagDv\Cargomart\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * StoragePointApi Class Doc Comment
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StoragePointApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://cargomart.ru');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2AcStoragePointGet
     *
     * Поиск пунктов погрузки/выгрузки.
     *
     * @param  string $filter_search Поисковая строка (optional)
     * @param  string $filter_latitude Координаты широты (optional)
     * @param  string $filter_longitude Координаты долготы (optional)
     * @param  int $filter_radius Радиус в метрах (optional)
     * @param  int[] $selected_ids Дополнительные id для поиска (на первое место) (optional)
     * @param  int $page Страница выдачи. (optional)
     * @param  int $per_page лимит выдачи. (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\StoragePointList
     */
    public function apiV2AcStoragePointGet($filter_search = null, $filter_latitude = null, $filter_longitude = null, $filter_radius = null, $selected_ids = null, $page = null, $per_page = null)
    {
        list($response) = $this->apiV2AcStoragePointGetWithHttpInfo($filter_search, $filter_latitude, $filter_longitude, $filter_radius, $selected_ids, $page, $per_page);
        return $response;
    }

    /**
     * Operation apiV2AcStoragePointGetWithHttpInfo
     *
     * Поиск пунктов погрузки/выгрузки.
     *
     * @param  string $filter_search Поисковая строка (optional)
     * @param  string $filter_latitude Координаты широты (optional)
     * @param  string $filter_longitude Координаты долготы (optional)
     * @param  int $filter_radius Радиус в метрах (optional)
     * @param  int[] $selected_ids Дополнительные id для поиска (на первое место) (optional)
     * @param  int $page Страница выдачи. (optional)
     * @param  int $per_page лимит выдачи. (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\StoragePointList, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2AcStoragePointGetWithHttpInfo($filter_search = null, $filter_latitude = null, $filter_longitude = null, $filter_radius = null, $selected_ids = null, $page = null, $per_page = null)
    {
        $request = $this->apiV2AcStoragePointGetRequest($filter_search, $filter_latitude, $filter_longitude, $filter_radius, $selected_ids, $page, $per_page);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\StoragePointList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\StoragePointList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\StoragePointList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\StoragePointList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2AcStoragePointGetAsync
     *
     * Поиск пунктов погрузки/выгрузки.
     *
     * @param  string $filter_search Поисковая строка (optional)
     * @param  string $filter_latitude Координаты широты (optional)
     * @param  string $filter_longitude Координаты долготы (optional)
     * @param  int $filter_radius Радиус в метрах (optional)
     * @param  int[] $selected_ids Дополнительные id для поиска (на первое место) (optional)
     * @param  int $page Страница выдачи. (optional)
     * @param  int $per_page лимит выдачи. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2AcStoragePointGetAsync($filter_search = null, $filter_latitude = null, $filter_longitude = null, $filter_radius = null, $selected_ids = null, $page = null, $per_page = null)
    {
        return $this->apiV2AcStoragePointGetAsyncWithHttpInfo($filter_search, $filter_latitude, $filter_longitude, $filter_radius, $selected_ids, $page, $per_page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2AcStoragePointGetAsyncWithHttpInfo
     *
     * Поиск пунктов погрузки/выгрузки.
     *
     * @param  string $filter_search Поисковая строка (optional)
     * @param  string $filter_latitude Координаты широты (optional)
     * @param  string $filter_longitude Координаты долготы (optional)
     * @param  int $filter_radius Радиус в метрах (optional)
     * @param  int[] $selected_ids Дополнительные id для поиска (на первое место) (optional)
     * @param  int $page Страница выдачи. (optional)
     * @param  int $per_page лимит выдачи. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2AcStoragePointGetAsyncWithHttpInfo($filter_search = null, $filter_latitude = null, $filter_longitude = null, $filter_radius = null, $selected_ids = null, $page = null, $per_page = null)
    {
        $returnType = '\MagDv\Cargomart\Dto\StoragePointList';
        $request = $this->apiV2AcStoragePointGetRequest($filter_search, $filter_latitude, $filter_longitude, $filter_radius, $selected_ids, $page, $per_page);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2AcStoragePointGet'
     *
     * @param  string $filter_search Поисковая строка (optional)
     * @param  string $filter_latitude Координаты широты (optional)
     * @param  string $filter_longitude Координаты долготы (optional)
     * @param  int $filter_radius Радиус в метрах (optional)
     * @param  int[] $selected_ids Дополнительные id для поиска (на первое место) (optional)
     * @param  int $page Страница выдачи. (optional)
     * @param  int $per_page лимит выдачи. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2AcStoragePointGetRequest($filter_search = null, $filter_latitude = null, $filter_longitude = null, $filter_radius = null, $selected_ids = null, $page = null, $per_page = null)
    {

        $resourcePath = '/api/v2/ac/storage-point';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($filter_search !== null) {
            if('form' === 'form' && is_array($filter_search)) {
                foreach($filter_search as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[search]'] = $filter_search;
            }
        }
        // query params
        if ($filter_latitude !== null) {
            if('form' === 'form' && is_array($filter_latitude)) {
                foreach($filter_latitude as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[latitude]'] = $filter_latitude;
            }
        }
        // query params
        if ($filter_longitude !== null) {
            if('form' === 'form' && is_array($filter_longitude)) {
                foreach($filter_longitude as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[longitude]'] = $filter_longitude;
            }
        }
        // query params
        if ($filter_radius !== null) {
            if('form' === 'form' && is_array($filter_radius)) {
                foreach($filter_radius as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[radius]'] = $filter_radius;
            }
        }
        // query params
        if ($selected_ids !== null) {
            if('form' === 'form' && is_array($selected_ids)) {
                foreach($selected_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['selectedIds[]'] = $selected_ids;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($per_page !== null) {
            if('form' === 'form' && is_array($per_page)) {
                foreach($per_page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['perPage'] = $per_page;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2StoragePointDelete
     *
     * Групповое удаление пунктов погрузки/выгрузки.
     *
     * @param  \MagDv\Cargomart\Dto\SpBatchDeleteRequest $sp_batch_delete_request Список идентификаторов пунктов погрузки/выгрузки для удаления (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StoragePointDelete($sp_batch_delete_request = null)
    {
        $this->apiV2StoragePointDeleteWithHttpInfo($sp_batch_delete_request);
    }

    /**
     * Operation apiV2StoragePointDeleteWithHttpInfo
     *
     * Групповое удаление пунктов погрузки/выгрузки.
     *
     * @param  \MagDv\Cargomart\Dto\SpBatchDeleteRequest $sp_batch_delete_request Список идентификаторов пунктов погрузки/выгрузки для удаления (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StoragePointDeleteWithHttpInfo($sp_batch_delete_request = null)
    {
        $request = $this->apiV2StoragePointDeleteRequest($sp_batch_delete_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StoragePointDeleteAsync
     *
     * Групповое удаление пунктов погрузки/выгрузки.
     *
     * @param  \MagDv\Cargomart\Dto\SpBatchDeleteRequest $sp_batch_delete_request Список идентификаторов пунктов погрузки/выгрузки для удаления (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2StoragePointDeleteAsync($sp_batch_delete_request = null)
    {
        return $this->apiV2StoragePointDeleteAsyncWithHttpInfo($sp_batch_delete_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StoragePointDeleteAsyncWithHttpInfo
     *
     * Групповое удаление пунктов погрузки/выгрузки.
     *
     * @param  \MagDv\Cargomart\Dto\SpBatchDeleteRequest $sp_batch_delete_request Список идентификаторов пунктов погрузки/выгрузки для удаления (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2StoragePointDeleteAsyncWithHttpInfo($sp_batch_delete_request = null)
    {
        $returnType = '';
        $request = $this->apiV2StoragePointDeleteRequest($sp_batch_delete_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StoragePointDelete'
     *
     * @param  \MagDv\Cargomart\Dto\SpBatchDeleteRequest $sp_batch_delete_request Список идентификаторов пунктов погрузки/выгрузки для удаления (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2StoragePointDeleteRequest($sp_batch_delete_request = null)
    {

        $resourcePath = '/api/v2/storage-point';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($sp_batch_delete_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($sp_batch_delete_request));
            } else {
                $httpBody = $sp_batch_delete_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2StoragePointGet
     *
     * Метод возвращает список пунктов погрузки/выгрузки.
     *
     * @param  string $filter_title Название пункта погрузки/выгрузки (optional)
     * @param  string $filter_locality_name Город (optional)
     * @param  string $filter_external_id Внешний идентификатор (optional)
     * @param  string[] $sort Список ключей для сортировки. Для сортировки доступны поля модели (title, localityName). Сортировка производитсяя по возрастанию. При наличии префикса \&quot;-\&quot; сортировка будет произведена в обратном порядке. (optional)
     * @param  int $page Просматриваемая страница, по умолчанию 1 (optional)
     * @param  int $per_page Количество элементов на одну страницу, по умолчанию 20 (optional)
     * @param  int[] $selected_ids Отсортировать пункты под идентификатору(на первое место) (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\PointList
     */
    public function apiV2StoragePointGet($filter_title = null, $filter_locality_name = null, $filter_external_id = null, $sort = null, $page = null, $per_page = null, $selected_ids = null)
    {
        list($response) = $this->apiV2StoragePointGetWithHttpInfo($filter_title, $filter_locality_name, $filter_external_id, $sort, $page, $per_page, $selected_ids);
        return $response;
    }

    /**
     * Operation apiV2StoragePointGetWithHttpInfo
     *
     * Метод возвращает список пунктов погрузки/выгрузки.
     *
     * @param  string $filter_title Название пункта погрузки/выгрузки (optional)
     * @param  string $filter_locality_name Город (optional)
     * @param  string $filter_external_id Внешний идентификатор (optional)
     * @param  string[] $sort Список ключей для сортировки. Для сортировки доступны поля модели (title, localityName). Сортировка производитсяя по возрастанию. При наличии префикса \&quot;-\&quot; сортировка будет произведена в обратном порядке. (optional)
     * @param  int $page Просматриваемая страница, по умолчанию 1 (optional)
     * @param  int $per_page Количество элементов на одну страницу, по умолчанию 20 (optional)
     * @param  int[] $selected_ids Отсортировать пункты под идентификатору(на первое место) (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\PointList, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StoragePointGetWithHttpInfo($filter_title = null, $filter_locality_name = null, $filter_external_id = null, $sort = null, $page = null, $per_page = null, $selected_ids = null)
    {
        $request = $this->apiV2StoragePointGetRequest($filter_title, $filter_locality_name, $filter_external_id, $sort, $page, $per_page, $selected_ids);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\PointList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\PointList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\PointList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\PointList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StoragePointGetAsync
     *
     * Метод возвращает список пунктов погрузки/выгрузки.
     *
     * @param  string $filter_title Название пункта погрузки/выгрузки (optional)
     * @param  string $filter_locality_name Город (optional)
     * @param  string $filter_external_id Внешний идентификатор (optional)
     * @param  string[] $sort Список ключей для сортировки. Для сортировки доступны поля модели (title, localityName). Сортировка производитсяя по возрастанию. При наличии префикса \&quot;-\&quot; сортировка будет произведена в обратном порядке. (optional)
     * @param  int $page Просматриваемая страница, по умолчанию 1 (optional)
     * @param  int $per_page Количество элементов на одну страницу, по умолчанию 20 (optional)
     * @param  int[] $selected_ids Отсортировать пункты под идентификатору(на первое место) (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2StoragePointGetAsync($filter_title = null, $filter_locality_name = null, $filter_external_id = null, $sort = null, $page = null, $per_page = null, $selected_ids = null)
    {
        return $this->apiV2StoragePointGetAsyncWithHttpInfo($filter_title, $filter_locality_name, $filter_external_id, $sort, $page, $per_page, $selected_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StoragePointGetAsyncWithHttpInfo
     *
     * Метод возвращает список пунктов погрузки/выгрузки.
     *
     * @param  string $filter_title Название пункта погрузки/выгрузки (optional)
     * @param  string $filter_locality_name Город (optional)
     * @param  string $filter_external_id Внешний идентификатор (optional)
     * @param  string[] $sort Список ключей для сортировки. Для сортировки доступны поля модели (title, localityName). Сортировка производитсяя по возрастанию. При наличии префикса \&quot;-\&quot; сортировка будет произведена в обратном порядке. (optional)
     * @param  int $page Просматриваемая страница, по умолчанию 1 (optional)
     * @param  int $per_page Количество элементов на одну страницу, по умолчанию 20 (optional)
     * @param  int[] $selected_ids Отсортировать пункты под идентификатору(на первое место) (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2StoragePointGetAsyncWithHttpInfo($filter_title = null, $filter_locality_name = null, $filter_external_id = null, $sort = null, $page = null, $per_page = null, $selected_ids = null)
    {
        $returnType = '\MagDv\Cargomart\Dto\PointList';
        $request = $this->apiV2StoragePointGetRequest($filter_title, $filter_locality_name, $filter_external_id, $sort, $page, $per_page, $selected_ids);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StoragePointGet'
     *
     * @param  string $filter_title Название пункта погрузки/выгрузки (optional)
     * @param  string $filter_locality_name Город (optional)
     * @param  string $filter_external_id Внешний идентификатор (optional)
     * @param  string[] $sort Список ключей для сортировки. Для сортировки доступны поля модели (title, localityName). Сортировка производитсяя по возрастанию. При наличии префикса \&quot;-\&quot; сортировка будет произведена в обратном порядке. (optional)
     * @param  int $page Просматриваемая страница, по умолчанию 1 (optional)
     * @param  int $per_page Количество элементов на одну страницу, по умолчанию 20 (optional)
     * @param  int[] $selected_ids Отсортировать пункты под идентификатору(на первое место) (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2StoragePointGetRequest($filter_title = null, $filter_locality_name = null, $filter_external_id = null, $sort = null, $page = null, $per_page = null, $selected_ids = null)
    {

        $resourcePath = '/api/v2/storage-point';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($filter_title !== null) {
            if('form' === 'form' && is_array($filter_title)) {
                foreach($filter_title as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[title]'] = $filter_title;
            }
        }
        // query params
        if ($filter_locality_name !== null) {
            if('form' === 'form' && is_array($filter_locality_name)) {
                foreach($filter_locality_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[localityName]'] = $filter_locality_name;
            }
        }
        // query params
        if ($filter_external_id !== null) {
            if('form' === 'form' && is_array($filter_external_id)) {
                foreach($filter_external_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[externalId]'] = $filter_external_id;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort[]'] = $sort;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($per_page !== null) {
            if('form' === 'form' && is_array($per_page)) {
                foreach($per_page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['perPage'] = $per_page;
            }
        }
        // query params
        if ($selected_ids !== null) {
            if('form' === 'form' && is_array($selected_ids)) {
                foreach($selected_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['selectedIds[]'] = $selected_ids;
            }
        }




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2StoragePointIdContactContactIdDelete
     *
     * @deprecated. Использовать вместе с редактированием SP. Удаление одного контакта пункта погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     * @param  int $contact_id Идентификатор контакта пункта погрузки/выгрузки (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StoragePointIdContactContactIdDelete($id, $contact_id)
    {
        $this->apiV2StoragePointIdContactContactIdDeleteWithHttpInfo($id, $contact_id);
    }

    /**
     * Operation apiV2StoragePointIdContactContactIdDeleteWithHttpInfo
     *
     * @deprecated. Использовать вместе с редактированием SP. Удаление одного контакта пункта погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     * @param  int $contact_id Идентификатор контакта пункта погрузки/выгрузки (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StoragePointIdContactContactIdDeleteWithHttpInfo($id, $contact_id)
    {
        $request = $this->apiV2StoragePointIdContactContactIdDeleteRequest($id, $contact_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StoragePointIdContactContactIdDeleteAsync
     *
     * @deprecated. Использовать вместе с редактированием SP. Удаление одного контакта пункта погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     * @param  int $contact_id Идентификатор контакта пункта погрузки/выгрузки (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2StoragePointIdContactContactIdDeleteAsync($id, $contact_id)
    {
        return $this->apiV2StoragePointIdContactContactIdDeleteAsyncWithHttpInfo($id, $contact_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StoragePointIdContactContactIdDeleteAsyncWithHttpInfo
     *
     * @deprecated. Использовать вместе с редактированием SP. Удаление одного контакта пункта погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     * @param  int $contact_id Идентификатор контакта пункта погрузки/выгрузки (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2StoragePointIdContactContactIdDeleteAsyncWithHttpInfo($id, $contact_id)
    {
        $returnType = '';
        $request = $this->apiV2StoragePointIdContactContactIdDeleteRequest($id, $contact_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StoragePointIdContactContactIdDelete'
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     * @param  int $contact_id Идентификатор контакта пункта погрузки/выгрузки (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2StoragePointIdContactContactIdDeleteRequest($id, $contact_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2StoragePointIdContactContactIdDelete'
            );
        }
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling apiV2StoragePointIdContactContactIdDelete'
            );
        }

        $resourcePath = '/api/v2/storage-point/{id}/contact/{contactId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2StoragePointIdContactContactIdPut
     *
     * @deprecated. Использовать вместе с редактированием SP. Редактирование контакта пункта погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     * @param  int $contact_id Идентификатор контакта пункта погрузки/выгрузки (required)
     * @param  \MagDv\Cargomart\Dto\SpContact $sp_contact Тело запроса (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\ContactList
     */
    public function apiV2StoragePointIdContactContactIdPut($id, $contact_id, $sp_contact)
    {
        list($response) = $this->apiV2StoragePointIdContactContactIdPutWithHttpInfo($id, $contact_id, $sp_contact);
        return $response;
    }

    /**
     * Operation apiV2StoragePointIdContactContactIdPutWithHttpInfo
     *
     * @deprecated. Использовать вместе с редактированием SP. Редактирование контакта пункта погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     * @param  int $contact_id Идентификатор контакта пункта погрузки/выгрузки (required)
     * @param  \MagDv\Cargomart\Dto\SpContact $sp_contact Тело запроса (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\ContactList, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StoragePointIdContactContactIdPutWithHttpInfo($id, $contact_id, $sp_contact)
    {
        $request = $this->apiV2StoragePointIdContactContactIdPutRequest($id, $contact_id, $sp_contact);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\ContactList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\ContactList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\ContactList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\ContactList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StoragePointIdContactContactIdPutAsync
     *
     * @deprecated. Использовать вместе с редактированием SP. Редактирование контакта пункта погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     * @param  int $contact_id Идентификатор контакта пункта погрузки/выгрузки (required)
     * @param  \MagDv\Cargomart\Dto\SpContact $sp_contact Тело запроса (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2StoragePointIdContactContactIdPutAsync($id, $contact_id, $sp_contact)
    {
        return $this->apiV2StoragePointIdContactContactIdPutAsyncWithHttpInfo($id, $contact_id, $sp_contact)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StoragePointIdContactContactIdPutAsyncWithHttpInfo
     *
     * @deprecated. Использовать вместе с редактированием SP. Редактирование контакта пункта погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     * @param  int $contact_id Идентификатор контакта пункта погрузки/выгрузки (required)
     * @param  \MagDv\Cargomart\Dto\SpContact $sp_contact Тело запроса (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2StoragePointIdContactContactIdPutAsyncWithHttpInfo($id, $contact_id, $sp_contact)
    {
        $returnType = '\MagDv\Cargomart\Dto\ContactList';
        $request = $this->apiV2StoragePointIdContactContactIdPutRequest($id, $contact_id, $sp_contact);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StoragePointIdContactContactIdPut'
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     * @param  int $contact_id Идентификатор контакта пункта погрузки/выгрузки (required)
     * @param  \MagDv\Cargomart\Dto\SpContact $sp_contact Тело запроса (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2StoragePointIdContactContactIdPutRequest($id, $contact_id, $sp_contact)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2StoragePointIdContactContactIdPut'
            );
        }
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling apiV2StoragePointIdContactContactIdPut'
            );
        }
        // verify the required parameter 'sp_contact' is set
        if ($sp_contact === null || (is_array($sp_contact) && count($sp_contact) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sp_contact when calling apiV2StoragePointIdContactContactIdPut'
            );
        }

        $resourcePath = '/api/v2/storage-point/{id}/contact/{contactId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($sp_contact)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($sp_contact));
            } else {
                $httpBody = $sp_contact;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2StoragePointIdContactGet
     *
     * @deprecated. Использовать вместе с редактированием SP. Получение списка контактов пункта погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\ContactList
     */
    public function apiV2StoragePointIdContactGet($id)
    {
        list($response) = $this->apiV2StoragePointIdContactGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation apiV2StoragePointIdContactGetWithHttpInfo
     *
     * @deprecated. Использовать вместе с редактированием SP. Получение списка контактов пункта погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\ContactList, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StoragePointIdContactGetWithHttpInfo($id)
    {
        $request = $this->apiV2StoragePointIdContactGetRequest($id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\ContactList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\ContactList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\ContactList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\ContactList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StoragePointIdContactGetAsync
     *
     * @deprecated. Использовать вместе с редактированием SP. Получение списка контактов пункта погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2StoragePointIdContactGetAsync($id)
    {
        return $this->apiV2StoragePointIdContactGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StoragePointIdContactGetAsyncWithHttpInfo
     *
     * @deprecated. Использовать вместе с редактированием SP. Получение списка контактов пункта погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2StoragePointIdContactGetAsyncWithHttpInfo($id)
    {
        $returnType = '\MagDv\Cargomart\Dto\ContactList';
        $request = $this->apiV2StoragePointIdContactGetRequest($id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StoragePointIdContactGet'
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2StoragePointIdContactGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2StoragePointIdContactGet'
            );
        }

        $resourcePath = '/api/v2/storage-point/{id}/contact';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2StoragePointIdContactPost
     *
     * @deprecated. Использовать вместе с редактированием SP. Создание контакта пункта погрузки выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     * @param  \MagDv\Cargomart\Dto\SpContact $sp_contact Тело запроса (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\ContactList
     */
    public function apiV2StoragePointIdContactPost($id, $sp_contact)
    {
        list($response) = $this->apiV2StoragePointIdContactPostWithHttpInfo($id, $sp_contact);
        return $response;
    }

    /**
     * Operation apiV2StoragePointIdContactPostWithHttpInfo
     *
     * @deprecated. Использовать вместе с редактированием SP. Создание контакта пункта погрузки выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     * @param  \MagDv\Cargomart\Dto\SpContact $sp_contact Тело запроса (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\ContactList, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StoragePointIdContactPostWithHttpInfo($id, $sp_contact)
    {
        $request = $this->apiV2StoragePointIdContactPostRequest($id, $sp_contact);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 201:
                    if ('\MagDv\Cargomart\Dto\ContactList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\ContactList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\ContactList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\ContactList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StoragePointIdContactPostAsync
     *
     * @deprecated. Использовать вместе с редактированием SP. Создание контакта пункта погрузки выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     * @param  \MagDv\Cargomart\Dto\SpContact $sp_contact Тело запроса (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2StoragePointIdContactPostAsync($id, $sp_contact)
    {
        return $this->apiV2StoragePointIdContactPostAsyncWithHttpInfo($id, $sp_contact)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StoragePointIdContactPostAsyncWithHttpInfo
     *
     * @deprecated. Использовать вместе с редактированием SP. Создание контакта пункта погрузки выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     * @param  \MagDv\Cargomart\Dto\SpContact $sp_contact Тело запроса (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2StoragePointIdContactPostAsyncWithHttpInfo($id, $sp_contact)
    {
        $returnType = '\MagDv\Cargomart\Dto\ContactList';
        $request = $this->apiV2StoragePointIdContactPostRequest($id, $sp_contact);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StoragePointIdContactPost'
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     * @param  \MagDv\Cargomart\Dto\SpContact $sp_contact Тело запроса (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2StoragePointIdContactPostRequest($id, $sp_contact)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2StoragePointIdContactPost'
            );
        }
        // verify the required parameter 'sp_contact' is set
        if ($sp_contact === null || (is_array($sp_contact) && count($sp_contact) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sp_contact when calling apiV2StoragePointIdContactPost'
            );
        }

        $resourcePath = '/api/v2/storage-point/{id}/contact';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($sp_contact)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($sp_contact));
            } else {
                $httpBody = $sp_contact;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2StoragePointIdDelete
     *
     * Удаление пункта погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2StoragePointIdDelete($id)
    {
        $this->apiV2StoragePointIdDeleteWithHttpInfo($id);
    }

    /**
     * Operation apiV2StoragePointIdDeleteWithHttpInfo
     *
     * Удаление пункта погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StoragePointIdDeleteWithHttpInfo($id)
    {
        $request = $this->apiV2StoragePointIdDeleteRequest($id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StoragePointIdDeleteAsync
     *
     * Удаление пункта погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2StoragePointIdDeleteAsync($id)
    {
        return $this->apiV2StoragePointIdDeleteAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StoragePointIdDeleteAsyncWithHttpInfo
     *
     * Удаление пункта погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2StoragePointIdDeleteAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->apiV2StoragePointIdDeleteRequest($id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StoragePointIdDelete'
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2StoragePointIdDeleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2StoragePointIdDelete'
            );
        }

        $resourcePath = '/api/v2/storage-point/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2StoragePointIdGet
     *
     * Информация о конкретном пункте погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\PointOne
     */
    public function apiV2StoragePointIdGet($id)
    {
        list($response) = $this->apiV2StoragePointIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation apiV2StoragePointIdGetWithHttpInfo
     *
     * Информация о конкретном пункте погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\PointOne, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StoragePointIdGetWithHttpInfo($id)
    {
        $request = $this->apiV2StoragePointIdGetRequest($id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\PointOne' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\PointOne', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\PointOne';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\PointOne',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StoragePointIdGetAsync
     *
     * Информация о конкретном пункте погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2StoragePointIdGetAsync($id)
    {
        return $this->apiV2StoragePointIdGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StoragePointIdGetAsyncWithHttpInfo
     *
     * Информация о конкретном пункте погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2StoragePointIdGetAsyncWithHttpInfo($id)
    {
        $returnType = '\MagDv\Cargomart\Dto\PointOne';
        $request = $this->apiV2StoragePointIdGetRequest($id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StoragePointIdGet'
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2StoragePointIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2StoragePointIdGet'
            );
        }

        $resourcePath = '/api/v2/storage-point/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2StoragePointIdPut
     *
     * Редактирование пункта погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     * @param  \MagDv\Cargomart\Dto\SpPoint $sp_point sp_point (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\PointOne
     */
    public function apiV2StoragePointIdPut($id, $sp_point)
    {
        list($response) = $this->apiV2StoragePointIdPutWithHttpInfo($id, $sp_point);
        return $response;
    }

    /**
     * Operation apiV2StoragePointIdPutWithHttpInfo
     *
     * Редактирование пункта погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     * @param  \MagDv\Cargomart\Dto\SpPoint $sp_point (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\PointOne, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StoragePointIdPutWithHttpInfo($id, $sp_point)
    {
        $request = $this->apiV2StoragePointIdPutRequest($id, $sp_point);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\PointOne' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\PointOne', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\PointOne';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\PointOne',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StoragePointIdPutAsync
     *
     * Редактирование пункта погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     * @param  \MagDv\Cargomart\Dto\SpPoint $sp_point (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2StoragePointIdPutAsync($id, $sp_point)
    {
        return $this->apiV2StoragePointIdPutAsyncWithHttpInfo($id, $sp_point)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StoragePointIdPutAsyncWithHttpInfo
     *
     * Редактирование пункта погрузки/выгрузки
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     * @param  \MagDv\Cargomart\Dto\SpPoint $sp_point (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2StoragePointIdPutAsyncWithHttpInfo($id, $sp_point)
    {
        $returnType = '\MagDv\Cargomart\Dto\PointOne';
        $request = $this->apiV2StoragePointIdPutRequest($id, $sp_point);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StoragePointIdPut'
     *
     * @param  int $id Идентификатор пункта погрузки/выгрузки (required)
     * @param  \MagDv\Cargomart\Dto\SpPoint $sp_point (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2StoragePointIdPutRequest($id, $sp_point)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV2StoragePointIdPut'
            );
        }
        // verify the required parameter 'sp_point' is set
        if ($sp_point === null || (is_array($sp_point) && count($sp_point) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sp_point when calling apiV2StoragePointIdPut'
            );
        }

        $resourcePath = '/api/v2/storage-point/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($sp_point)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($sp_point));
            } else {
                $httpBody = $sp_point;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2StoragePointPost
     *
     * Создание нового пункта погрузки/выгрузки
     *
     * @param  \MagDv\Cargomart\Dto\SpPoint $sp_point sp_point (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\PointOne
     */
    public function apiV2StoragePointPost($sp_point)
    {
        list($response) = $this->apiV2StoragePointPostWithHttpInfo($sp_point);
        return $response;
    }

    /**
     * Operation apiV2StoragePointPostWithHttpInfo
     *
     * Создание нового пункта погрузки/выгрузки
     *
     * @param  \MagDv\Cargomart\Dto\SpPoint $sp_point (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\PointOne, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2StoragePointPostWithHttpInfo($sp_point)
    {
        $request = $this->apiV2StoragePointPostRequest($sp_point);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\PointOne' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\PointOne', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\PointOne';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\PointOne',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2StoragePointPostAsync
     *
     * Создание нового пункта погрузки/выгрузки
     *
     * @param  \MagDv\Cargomart\Dto\SpPoint $sp_point (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2StoragePointPostAsync($sp_point)
    {
        return $this->apiV2StoragePointPostAsyncWithHttpInfo($sp_point)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2StoragePointPostAsyncWithHttpInfo
     *
     * Создание нового пункта погрузки/выгрузки
     *
     * @param  \MagDv\Cargomart\Dto\SpPoint $sp_point (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2StoragePointPostAsyncWithHttpInfo($sp_point)
    {
        $returnType = '\MagDv\Cargomart\Dto\PointOne';
        $request = $this->apiV2StoragePointPostRequest($sp_point);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2StoragePointPost'
     *
     * @param  \MagDv\Cargomart\Dto\SpPoint $sp_point (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2StoragePointPostRequest($sp_point)
    {
        // verify the required parameter 'sp_point' is set
        if ($sp_point === null || (is_array($sp_point) && count($sp_point) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sp_point when calling apiV2StoragePointPost'
            );
        }

        $resourcePath = '/api/v2/storage-point';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($sp_point)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($sp_point));
            } else {
                $httpBody = $sp_point;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
