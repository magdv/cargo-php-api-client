<?php
/**
 * ExpeditorProposalListApi
 * PHP version 7.2
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\CargoApi;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use MagDv\Cargomart\ApiException;
use MagDv\Cargomart\Configuration;
use MagDv\Cargomart\DebugPlugin;
use MagDv\Cargomart\HeaderSelector;
use MagDv\Cargomart\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * ExpeditorProposalListApi Class Doc Comment
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ExpeditorProposalListApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://cargomart.ru');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2ExpeditorProposalExistsGet
     *
     * Метод для существования хоть одной записи по запросу.
     *
     * @param  int $x_modify_from_event Идентификатор события для получения заказов которые измененились после этого события (optional)
     * @param  string $filter_serial Порядковый номер заказа. (optional)
     * @param  string $filter_departure Код кладр пункта отправления. (optional)
     * @param  string $filter_destination Код кладр пункта назначения. (optional)
     * @param  int[] $filter_truck_type Список идентификаторов типов ТС. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterOrderStatusEnum[] $filter_status Массив id статусов заказов. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalProxyStatusEnum[] $filter_proxy_status Список статусов доверенности. (optional)
     * @param  \DateTime $filter_loading_from Дата погрузки ОТ. (optional)
     * @param  \DateTime $filter_loading_to Дата погрузки ДО (optional)
     * @param  string $filter_carrier Хэш код компании перевозчика (optional)
     * @param  string $filter_consignor Хэш код компании отправителя (optional)
     * @param  int $filter_branch_id Заказы дочерней компании (optional)
     * @param  string $filter_consignor_parent Хэш компании, который передается вместе с branchId если нужно включить заказы дочерних компаний (весь холдинг) (optional)
     * @param  \MagDv\Cargomart\Dto\OrderArchiveStatus $filter_archive_status Статус архивации заказа (optional)
     * @param  int $filter_driver Идентификатор водителя (optional)
     * @param  string $filter_driver_name ФИО водителя (optional)
     * @param  string $filter_max_end_time Предел времени закрытия заказа (optional)
     * @param  string $filter_tracking_number Трек номер (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentOriginalStatusEnum $filter_document_originals_status Статус оригинала документа (optional)
     * @param  bool $filter_has_carrier Фильтр по наличию перевозчика. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalOrderRefuseTypeEnum[] $filter_expeditor_order_refuse_type Наличие отказа для заказа по его типу (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentPackageStatusEnum[] $filter_document_package_status Статус проверки пакетов документов (сканов) (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterCarrierPaidStatusEnum $filter_carrier_paid_status Выборка по статусу оплат перевозчику (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterSignStatusEnum[] $filter_sign_status Фильтр подписей. (optional)
     * @param  int $filter_consignor_curator Идентификатор куратора со стороны заказчика. (optional)
     * @param  \MagDv\Cargomart\Dto\StringBooleanEnum $filter_has_expeditor_offers Фильтр наличия предложений (в том числе ставок перевозчика). (optional)
     * @param  \MagDv\Cargomart\Dto\OrderExpeditorPriceType[] $filter_expeditor_price_type Фильтр по типу согласования цены. (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\ExistsResponse
     */
    public function apiV2ExpeditorProposalExistsGet($x_modify_from_event = null, $filter_serial = null, $filter_departure = null, $filter_destination = null, $filter_truck_type = null, $filter_status = null, $filter_proxy_status = null, $filter_loading_from = null, $filter_loading_to = null, $filter_carrier = null, $filter_consignor = null, $filter_branch_id = null, $filter_consignor_parent = null, $filter_archive_status = null, $filter_driver = null, $filter_driver_name = null, $filter_max_end_time = null, $filter_tracking_number = null, $filter_document_originals_status = null, $filter_has_carrier = null, $filter_expeditor_order_refuse_type = null, $filter_document_package_status = null, $filter_carrier_paid_status = null, $filter_sign_status = null, $filter_consignor_curator = null, $filter_has_expeditor_offers = null, $filter_expeditor_price_type = null)
    {
        list($response) = $this->apiV2ExpeditorProposalExistsGetWithHttpInfo($x_modify_from_event, $filter_serial, $filter_departure, $filter_destination, $filter_truck_type, $filter_status, $filter_proxy_status, $filter_loading_from, $filter_loading_to, $filter_carrier, $filter_consignor, $filter_branch_id, $filter_consignor_parent, $filter_archive_status, $filter_driver, $filter_driver_name, $filter_max_end_time, $filter_tracking_number, $filter_document_originals_status, $filter_has_carrier, $filter_expeditor_order_refuse_type, $filter_document_package_status, $filter_carrier_paid_status, $filter_sign_status, $filter_consignor_curator, $filter_has_expeditor_offers, $filter_expeditor_price_type);
        return $response;
    }

    /**
     * Operation apiV2ExpeditorProposalExistsGetWithHttpInfo
     *
     * Метод для существования хоть одной записи по запросу.
     *
     * @param  int $x_modify_from_event Идентификатор события для получения заказов которые измененились после этого события (optional)
     * @param  string $filter_serial Порядковый номер заказа. (optional)
     * @param  string $filter_departure Код кладр пункта отправления. (optional)
     * @param  string $filter_destination Код кладр пункта назначения. (optional)
     * @param  int[] $filter_truck_type Список идентификаторов типов ТС. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterOrderStatusEnum[] $filter_status Массив id статусов заказов. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalProxyStatusEnum[] $filter_proxy_status Список статусов доверенности. (optional)
     * @param  \DateTime $filter_loading_from Дата погрузки ОТ. (optional)
     * @param  \DateTime $filter_loading_to Дата погрузки ДО (optional)
     * @param  string $filter_carrier Хэш код компании перевозчика (optional)
     * @param  string $filter_consignor Хэш код компании отправителя (optional)
     * @param  int $filter_branch_id Заказы дочерней компании (optional)
     * @param  string $filter_consignor_parent Хэш компании, который передается вместе с branchId если нужно включить заказы дочерних компаний (весь холдинг) (optional)
     * @param  \MagDv\Cargomart\Dto\OrderArchiveStatus $filter_archive_status Статус архивации заказа (optional)
     * @param  int $filter_driver Идентификатор водителя (optional)
     * @param  string $filter_driver_name ФИО водителя (optional)
     * @param  string $filter_max_end_time Предел времени закрытия заказа (optional)
     * @param  string $filter_tracking_number Трек номер (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentOriginalStatusEnum $filter_document_originals_status Статус оригинала документа (optional)
     * @param  bool $filter_has_carrier Фильтр по наличию перевозчика. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalOrderRefuseTypeEnum[] $filter_expeditor_order_refuse_type Наличие отказа для заказа по его типу (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentPackageStatusEnum[] $filter_document_package_status Статус проверки пакетов документов (сканов) (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterCarrierPaidStatusEnum $filter_carrier_paid_status Выборка по статусу оплат перевозчику (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterSignStatusEnum[] $filter_sign_status Фильтр подписей. (optional)
     * @param  int $filter_consignor_curator Идентификатор куратора со стороны заказчика. (optional)
     * @param  \MagDv\Cargomart\Dto\StringBooleanEnum $filter_has_expeditor_offers Фильтр наличия предложений (в том числе ставок перевозчика). (optional)
     * @param  \MagDv\Cargomart\Dto\OrderExpeditorPriceType[] $filter_expeditor_price_type Фильтр по типу согласования цены. (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\ExistsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ExpeditorProposalExistsGetWithHttpInfo($x_modify_from_event = null, $filter_serial = null, $filter_departure = null, $filter_destination = null, $filter_truck_type = null, $filter_status = null, $filter_proxy_status = null, $filter_loading_from = null, $filter_loading_to = null, $filter_carrier = null, $filter_consignor = null, $filter_branch_id = null, $filter_consignor_parent = null, $filter_archive_status = null, $filter_driver = null, $filter_driver_name = null, $filter_max_end_time = null, $filter_tracking_number = null, $filter_document_originals_status = null, $filter_has_carrier = null, $filter_expeditor_order_refuse_type = null, $filter_document_package_status = null, $filter_carrier_paid_status = null, $filter_sign_status = null, $filter_consignor_curator = null, $filter_has_expeditor_offers = null, $filter_expeditor_price_type = null)
    {
        $request = $this->apiV2ExpeditorProposalExistsGetRequest($x_modify_from_event, $filter_serial, $filter_departure, $filter_destination, $filter_truck_type, $filter_status, $filter_proxy_status, $filter_loading_from, $filter_loading_to, $filter_carrier, $filter_consignor, $filter_branch_id, $filter_consignor_parent, $filter_archive_status, $filter_driver, $filter_driver_name, $filter_max_end_time, $filter_tracking_number, $filter_document_originals_status, $filter_has_carrier, $filter_expeditor_order_refuse_type, $filter_document_package_status, $filter_carrier_paid_status, $filter_sign_status, $filter_consignor_curator, $filter_has_expeditor_offers, $filter_expeditor_price_type);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\ExistsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\ExistsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\ExistsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\ExistsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ExpeditorProposalExistsGetAsync
     *
     * Метод для существования хоть одной записи по запросу.
     *
     * @param  int $x_modify_from_event Идентификатор события для получения заказов которые измененились после этого события (optional)
     * @param  string $filter_serial Порядковый номер заказа. (optional)
     * @param  string $filter_departure Код кладр пункта отправления. (optional)
     * @param  string $filter_destination Код кладр пункта назначения. (optional)
     * @param  int[] $filter_truck_type Список идентификаторов типов ТС. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterOrderStatusEnum[] $filter_status Массив id статусов заказов. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalProxyStatusEnum[] $filter_proxy_status Список статусов доверенности. (optional)
     * @param  \DateTime $filter_loading_from Дата погрузки ОТ. (optional)
     * @param  \DateTime $filter_loading_to Дата погрузки ДО (optional)
     * @param  string $filter_carrier Хэш код компании перевозчика (optional)
     * @param  string $filter_consignor Хэш код компании отправителя (optional)
     * @param  int $filter_branch_id Заказы дочерней компании (optional)
     * @param  string $filter_consignor_parent Хэш компании, который передается вместе с branchId если нужно включить заказы дочерних компаний (весь холдинг) (optional)
     * @param  \MagDv\Cargomart\Dto\OrderArchiveStatus $filter_archive_status Статус архивации заказа (optional)
     * @param  int $filter_driver Идентификатор водителя (optional)
     * @param  string $filter_driver_name ФИО водителя (optional)
     * @param  string $filter_max_end_time Предел времени закрытия заказа (optional)
     * @param  string $filter_tracking_number Трек номер (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentOriginalStatusEnum $filter_document_originals_status Статус оригинала документа (optional)
     * @param  bool $filter_has_carrier Фильтр по наличию перевозчика. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalOrderRefuseTypeEnum[] $filter_expeditor_order_refuse_type Наличие отказа для заказа по его типу (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentPackageStatusEnum[] $filter_document_package_status Статус проверки пакетов документов (сканов) (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterCarrierPaidStatusEnum $filter_carrier_paid_status Выборка по статусу оплат перевозчику (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterSignStatusEnum[] $filter_sign_status Фильтр подписей. (optional)
     * @param  int $filter_consignor_curator Идентификатор куратора со стороны заказчика. (optional)
     * @param  \MagDv\Cargomart\Dto\StringBooleanEnum $filter_has_expeditor_offers Фильтр наличия предложений (в том числе ставок перевозчика). (optional)
     * @param  \MagDv\Cargomart\Dto\OrderExpeditorPriceType[] $filter_expeditor_price_type Фильтр по типу согласования цены. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorProposalExistsGetAsync($x_modify_from_event = null, $filter_serial = null, $filter_departure = null, $filter_destination = null, $filter_truck_type = null, $filter_status = null, $filter_proxy_status = null, $filter_loading_from = null, $filter_loading_to = null, $filter_carrier = null, $filter_consignor = null, $filter_branch_id = null, $filter_consignor_parent = null, $filter_archive_status = null, $filter_driver = null, $filter_driver_name = null, $filter_max_end_time = null, $filter_tracking_number = null, $filter_document_originals_status = null, $filter_has_carrier = null, $filter_expeditor_order_refuse_type = null, $filter_document_package_status = null, $filter_carrier_paid_status = null, $filter_sign_status = null, $filter_consignor_curator = null, $filter_has_expeditor_offers = null, $filter_expeditor_price_type = null)
    {
        return $this->apiV2ExpeditorProposalExistsGetAsyncWithHttpInfo($x_modify_from_event, $filter_serial, $filter_departure, $filter_destination, $filter_truck_type, $filter_status, $filter_proxy_status, $filter_loading_from, $filter_loading_to, $filter_carrier, $filter_consignor, $filter_branch_id, $filter_consignor_parent, $filter_archive_status, $filter_driver, $filter_driver_name, $filter_max_end_time, $filter_tracking_number, $filter_document_originals_status, $filter_has_carrier, $filter_expeditor_order_refuse_type, $filter_document_package_status, $filter_carrier_paid_status, $filter_sign_status, $filter_consignor_curator, $filter_has_expeditor_offers, $filter_expeditor_price_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ExpeditorProposalExistsGetAsyncWithHttpInfo
     *
     * Метод для существования хоть одной записи по запросу.
     *
     * @param  int $x_modify_from_event Идентификатор события для получения заказов которые измененились после этого события (optional)
     * @param  string $filter_serial Порядковый номер заказа. (optional)
     * @param  string $filter_departure Код кладр пункта отправления. (optional)
     * @param  string $filter_destination Код кладр пункта назначения. (optional)
     * @param  int[] $filter_truck_type Список идентификаторов типов ТС. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterOrderStatusEnum[] $filter_status Массив id статусов заказов. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalProxyStatusEnum[] $filter_proxy_status Список статусов доверенности. (optional)
     * @param  \DateTime $filter_loading_from Дата погрузки ОТ. (optional)
     * @param  \DateTime $filter_loading_to Дата погрузки ДО (optional)
     * @param  string $filter_carrier Хэш код компании перевозчика (optional)
     * @param  string $filter_consignor Хэш код компании отправителя (optional)
     * @param  int $filter_branch_id Заказы дочерней компании (optional)
     * @param  string $filter_consignor_parent Хэш компании, который передается вместе с branchId если нужно включить заказы дочерних компаний (весь холдинг) (optional)
     * @param  \MagDv\Cargomart\Dto\OrderArchiveStatus $filter_archive_status Статус архивации заказа (optional)
     * @param  int $filter_driver Идентификатор водителя (optional)
     * @param  string $filter_driver_name ФИО водителя (optional)
     * @param  string $filter_max_end_time Предел времени закрытия заказа (optional)
     * @param  string $filter_tracking_number Трек номер (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentOriginalStatusEnum $filter_document_originals_status Статус оригинала документа (optional)
     * @param  bool $filter_has_carrier Фильтр по наличию перевозчика. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalOrderRefuseTypeEnum[] $filter_expeditor_order_refuse_type Наличие отказа для заказа по его типу (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentPackageStatusEnum[] $filter_document_package_status Статус проверки пакетов документов (сканов) (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterCarrierPaidStatusEnum $filter_carrier_paid_status Выборка по статусу оплат перевозчику (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterSignStatusEnum[] $filter_sign_status Фильтр подписей. (optional)
     * @param  int $filter_consignor_curator Идентификатор куратора со стороны заказчика. (optional)
     * @param  \MagDv\Cargomart\Dto\StringBooleanEnum $filter_has_expeditor_offers Фильтр наличия предложений (в том числе ставок перевозчика). (optional)
     * @param  \MagDv\Cargomart\Dto\OrderExpeditorPriceType[] $filter_expeditor_price_type Фильтр по типу согласования цены. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorProposalExistsGetAsyncWithHttpInfo($x_modify_from_event = null, $filter_serial = null, $filter_departure = null, $filter_destination = null, $filter_truck_type = null, $filter_status = null, $filter_proxy_status = null, $filter_loading_from = null, $filter_loading_to = null, $filter_carrier = null, $filter_consignor = null, $filter_branch_id = null, $filter_consignor_parent = null, $filter_archive_status = null, $filter_driver = null, $filter_driver_name = null, $filter_max_end_time = null, $filter_tracking_number = null, $filter_document_originals_status = null, $filter_has_carrier = null, $filter_expeditor_order_refuse_type = null, $filter_document_package_status = null, $filter_carrier_paid_status = null, $filter_sign_status = null, $filter_consignor_curator = null, $filter_has_expeditor_offers = null, $filter_expeditor_price_type = null)
    {
        $returnType = '\MagDv\Cargomart\Dto\ExistsResponse';
        $request = $this->apiV2ExpeditorProposalExistsGetRequest($x_modify_from_event, $filter_serial, $filter_departure, $filter_destination, $filter_truck_type, $filter_status, $filter_proxy_status, $filter_loading_from, $filter_loading_to, $filter_carrier, $filter_consignor, $filter_branch_id, $filter_consignor_parent, $filter_archive_status, $filter_driver, $filter_driver_name, $filter_max_end_time, $filter_tracking_number, $filter_document_originals_status, $filter_has_carrier, $filter_expeditor_order_refuse_type, $filter_document_package_status, $filter_carrier_paid_status, $filter_sign_status, $filter_consignor_curator, $filter_has_expeditor_offers, $filter_expeditor_price_type);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ExpeditorProposalExistsGet'
     *
     * @param  int $x_modify_from_event Идентификатор события для получения заказов которые измененились после этого события (optional)
     * @param  string $filter_serial Порядковый номер заказа. (optional)
     * @param  string $filter_departure Код кладр пункта отправления. (optional)
     * @param  string $filter_destination Код кладр пункта назначения. (optional)
     * @param  int[] $filter_truck_type Список идентификаторов типов ТС. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterOrderStatusEnum[] $filter_status Массив id статусов заказов. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalProxyStatusEnum[] $filter_proxy_status Список статусов доверенности. (optional)
     * @param  \DateTime $filter_loading_from Дата погрузки ОТ. (optional)
     * @param  \DateTime $filter_loading_to Дата погрузки ДО (optional)
     * @param  string $filter_carrier Хэш код компании перевозчика (optional)
     * @param  string $filter_consignor Хэш код компании отправителя (optional)
     * @param  int $filter_branch_id Заказы дочерней компании (optional)
     * @param  string $filter_consignor_parent Хэш компании, который передается вместе с branchId если нужно включить заказы дочерних компаний (весь холдинг) (optional)
     * @param  \MagDv\Cargomart\Dto\OrderArchiveStatus $filter_archive_status Статус архивации заказа (optional)
     * @param  int $filter_driver Идентификатор водителя (optional)
     * @param  string $filter_driver_name ФИО водителя (optional)
     * @param  string $filter_max_end_time Предел времени закрытия заказа (optional)
     * @param  string $filter_tracking_number Трек номер (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentOriginalStatusEnum $filter_document_originals_status Статус оригинала документа (optional)
     * @param  bool $filter_has_carrier Фильтр по наличию перевозчика. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalOrderRefuseTypeEnum[] $filter_expeditor_order_refuse_type Наличие отказа для заказа по его типу (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentPackageStatusEnum[] $filter_document_package_status Статус проверки пакетов документов (сканов) (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterCarrierPaidStatusEnum $filter_carrier_paid_status Выборка по статусу оплат перевозчику (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterSignStatusEnum[] $filter_sign_status Фильтр подписей. (optional)
     * @param  int $filter_consignor_curator Идентификатор куратора со стороны заказчика. (optional)
     * @param  \MagDv\Cargomart\Dto\StringBooleanEnum $filter_has_expeditor_offers Фильтр наличия предложений (в том числе ставок перевозчика). (optional)
     * @param  \MagDv\Cargomart\Dto\OrderExpeditorPriceType[] $filter_expeditor_price_type Фильтр по типу согласования цены. (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2ExpeditorProposalExistsGetRequest($x_modify_from_event = null, $filter_serial = null, $filter_departure = null, $filter_destination = null, $filter_truck_type = null, $filter_status = null, $filter_proxy_status = null, $filter_loading_from = null, $filter_loading_to = null, $filter_carrier = null, $filter_consignor = null, $filter_branch_id = null, $filter_consignor_parent = null, $filter_archive_status = null, $filter_driver = null, $filter_driver_name = null, $filter_max_end_time = null, $filter_tracking_number = null, $filter_document_originals_status = null, $filter_has_carrier = null, $filter_expeditor_order_refuse_type = null, $filter_document_package_status = null, $filter_carrier_paid_status = null, $filter_sign_status = null, $filter_consignor_curator = null, $filter_has_expeditor_offers = null, $filter_expeditor_price_type = null)
    {

        $resourcePath = '/api/v2/expeditor-proposal/exists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($filter_serial !== null) {
            if('form' === 'form' && is_array($filter_serial)) {
                foreach($filter_serial as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[serial]'] = $filter_serial;
            }
        }
        // query params
        if ($filter_departure !== null) {
            if('form' === 'form' && is_array($filter_departure)) {
                foreach($filter_departure as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[departure]'] = $filter_departure;
            }
        }
        // query params
        if ($filter_destination !== null) {
            if('form' === 'form' && is_array($filter_destination)) {
                foreach($filter_destination as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[destination]'] = $filter_destination;
            }
        }
        // query params
        if ($filter_truck_type !== null) {
            if('form' === 'form' && is_array($filter_truck_type)) {
                foreach($filter_truck_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[truckType][]'] = $filter_truck_type;
            }
        }
        // query params
        if ($filter_status !== null) {
            if('form' === 'form' && is_array($filter_status)) {
                foreach($filter_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[status][]'] = $filter_status;
            }
        }
        // query params
        if ($filter_proxy_status !== null) {
            if('form' === 'form' && is_array($filter_proxy_status)) {
                foreach($filter_proxy_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[proxyStatus][]'] = $filter_proxy_status;
            }
        }
        // query params
        if ($filter_loading_from !== null) {
            if('form' === 'form' && is_array($filter_loading_from)) {
                foreach($filter_loading_from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[loadingFrom]'] = $filter_loading_from;
            }
        }
        // query params
        if ($filter_loading_to !== null) {
            if('form' === 'form' && is_array($filter_loading_to)) {
                foreach($filter_loading_to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[loadingTo]'] = $filter_loading_to;
            }
        }
        // query params
        if ($filter_carrier !== null) {
            if('form' === 'form' && is_array($filter_carrier)) {
                foreach($filter_carrier as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[carrier]'] = $filter_carrier;
            }
        }
        // query params
        if ($filter_consignor !== null) {
            if('form' === 'form' && is_array($filter_consignor)) {
                foreach($filter_consignor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[consignor]'] = $filter_consignor;
            }
        }
        // query params
        if ($filter_branch_id !== null) {
            if('form' === 'form' && is_array($filter_branch_id)) {
                foreach($filter_branch_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[branchId]'] = $filter_branch_id;
            }
        }
        // query params
        if ($filter_consignor_parent !== null) {
            if('form' === 'form' && is_array($filter_consignor_parent)) {
                foreach($filter_consignor_parent as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[consignorParent]'] = $filter_consignor_parent;
            }
        }
        // query params
        if ($filter_archive_status !== null) {
            if('form' === 'form' && is_array($filter_archive_status)) {
                foreach($filter_archive_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[archiveStatus]'] = $filter_archive_status;
            }
        }
        // query params
        if ($filter_driver !== null) {
            if('form' === 'form' && is_array($filter_driver)) {
                foreach($filter_driver as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[driver]'] = $filter_driver;
            }
        }
        // query params
        if ($filter_driver_name !== null) {
            if('form' === 'form' && is_array($filter_driver_name)) {
                foreach($filter_driver_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[driverName]'] = $filter_driver_name;
            }
        }
        // query params
        if ($filter_max_end_time !== null) {
            if('form' === 'form' && is_array($filter_max_end_time)) {
                foreach($filter_max_end_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[maxEndTime]'] = $filter_max_end_time;
            }
        }
        // query params
        if ($filter_tracking_number !== null) {
            if('form' === 'form' && is_array($filter_tracking_number)) {
                foreach($filter_tracking_number as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[trackingNumber]'] = $filter_tracking_number;
            }
        }
        // query params
        if ($filter_document_originals_status !== null) {
            if('form' === 'form' && is_array($filter_document_originals_status)) {
                foreach($filter_document_originals_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[documentOriginalsStatus]'] = $filter_document_originals_status;
            }
        }
        // query params
        if ($filter_has_carrier !== null) {
            if('form' === 'form' && is_array($filter_has_carrier)) {
                foreach($filter_has_carrier as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[hasCarrier]'] = $filter_has_carrier;
            }
        }
        // query params
        if ($filter_expeditor_order_refuse_type !== null) {
            if('form' === 'form' && is_array($filter_expeditor_order_refuse_type)) {
                foreach($filter_expeditor_order_refuse_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[expeditorOrderRefuseType][]'] = $filter_expeditor_order_refuse_type;
            }
        }
        // query params
        if ($filter_document_package_status !== null) {
            if('form' === 'form' && is_array($filter_document_package_status)) {
                foreach($filter_document_package_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[documentPackageStatus][]'] = $filter_document_package_status;
            }
        }
        // query params
        if ($filter_carrier_paid_status !== null) {
            if('form' === 'form' && is_array($filter_carrier_paid_status)) {
                foreach($filter_carrier_paid_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[carrierPaidStatus]'] = $filter_carrier_paid_status;
            }
        }
        // query params
        if ($filter_sign_status !== null) {
            if('form' === 'form' && is_array($filter_sign_status)) {
                foreach($filter_sign_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[signStatus][]'] = $filter_sign_status;
            }
        }
        // query params
        if ($filter_consignor_curator !== null) {
            if('form' === 'form' && is_array($filter_consignor_curator)) {
                foreach($filter_consignor_curator as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[consignorCurator]'] = $filter_consignor_curator;
            }
        }
        // query params
        if ($filter_has_expeditor_offers !== null) {
            if('form' === 'form' && is_array($filter_has_expeditor_offers)) {
                foreach($filter_has_expeditor_offers as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[hasExpeditorOffers]'] = $filter_has_expeditor_offers;
            }
        }
        // query params
        if ($filter_expeditor_price_type !== null) {
            if('form' === 'form' && is_array($filter_expeditor_price_type)) {
                foreach($filter_expeditor_price_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[expeditorPriceType]'] = $filter_expeditor_price_type;
            }
        }

        // header params
        if ($x_modify_from_event !== null) {
            $headerParams['X-Modify-From-Event'] = ObjectSerializer::toHeaderValue($x_modify_from_event);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2ExpeditorProposalGet
     *
     * Метод для получения списка заказов Экспедитора согласно фильтру.
     *
     * @param  int $x_modify_from_event Идентификатор события для получения заказов которые измененились после этого события (optional)
     * @param  string $filter_serial Порядковый номер заказа. (optional)
     * @param  string $filter_departure Код кладр пункта отправления. (optional)
     * @param  string $filter_destination Код кладр пункта назначения. (optional)
     * @param  int[] $filter_truck_type Список идентификаторов типов ТС. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterOrderStatusEnum[] $filter_status Массив id статусов заказов. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalProxyStatusEnum[] $filter_proxy_status Список статусов доверенности. (optional)
     * @param  \DateTime $filter_loading_from Дата погрузки ОТ. (optional)
     * @param  \DateTime $filter_loading_to Дата погрузки ДО (optional)
     * @param  string $filter_carrier Хэш код компании перевозчика (optional)
     * @param  string $filter_consignor Хэш код компании отправителя (optional)
     * @param  int $filter_branch_id Заказы дочерней компании (optional)
     * @param  string $filter_consignor_parent Хэш компании, который передается вместе с branchId если нужно включить заказы дочерних компаний (весь холдинг) (optional)
     * @param  \MagDv\Cargomart\Dto\OrderArchiveStatus $filter_archive_status Статус архивации заказа (optional)
     * @param  string $filter_driver_name ФИО водителя (optional)
     * @param  string $filter_max_end_time Предел времени закрытия заказа (optional)
     * @param  string $filter_tracking_number Трек номер (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentOriginalStatusEnum $filter_document_originals_status Статус оригинала документа (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalOrderRefuseTypeEnum[] $filter_expeditor_order_refuse_type Наличие отказа для заказа по его типу (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDriverStatusEnum $filter_driver_status Выборка по статусу назначения водителей (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterPatchStatusEnum[] $filter_patch_status Список статусов запроса на изменение заказа. 1 - ожидает подтверждение от отправителя, 2 - ожидает подтверждения от перевозчика, 3 - принят ввсеми сторонами, 4 - отозван экспедитором до согласования с перевозчиком, 5 - отклонен отправителем, 6 - отклонен перевозчиком, 7 - отозвано экспедитором до согласования с заказчиком (optional)
     * @param  bool $filter_has_carrier Фильтр по наличию перевозчика. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentPackageStatusEnum[] $filter_document_package_status Статус проверки пакетов документов (сканов) (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterCarrierPaidStatusEnum $filter_carrier_paid_status Выборка по статусу оплат перевозчику (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterConsignorPaidStatusEnum $filter_consignor_to_expeditor_paid_status Выборка по статусу оплат от заказчика экспедитору (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterSignStatusEnum[] $filter_sign_status Фильтр подписей. (optional)
     * @param  bool $filter_has_without_truck_driver Фильтр отсутствия машины и водителя. (optional, default to false)
     * @param  int $filter_consignor_curator Идентификатор куратора со стороны заказчика. (optional)
     * @param  \MagDv\Cargomart\Dto\StringBooleanEnum $filter_has_expeditor_offers Фильтр наличия предложений (в том числе ставок перевозчика). (optional)
     * @param  \MagDv\Cargomart\Dto\OrderExpeditorPriceType[] $filter_expeditor_price_type Фильтр по типу согласования цены. (optional)
     * @param  int $page Номер страницы для постраничной навигации (optional, default to 1)
     * @param  int $per_page Количество элементов на страницу (optional, default to 20)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\ProposalListResponse
     */
    public function apiV2ExpeditorProposalGet($x_modify_from_event = null, $filter_serial = null, $filter_departure = null, $filter_destination = null, $filter_truck_type = null, $filter_status = null, $filter_proxy_status = null, $filter_loading_from = null, $filter_loading_to = null, $filter_carrier = null, $filter_consignor = null, $filter_branch_id = null, $filter_consignor_parent = null, $filter_archive_status = null, $filter_driver_name = null, $filter_max_end_time = null, $filter_tracking_number = null, $filter_document_originals_status = null, $filter_expeditor_order_refuse_type = null, $filter_driver_status = null, $filter_patch_status = null, $filter_has_carrier = null, $filter_document_package_status = null, $filter_carrier_paid_status = null, $filter_consignor_to_expeditor_paid_status = null, $filter_sign_status = null, $filter_has_without_truck_driver = false, $filter_consignor_curator = null, $filter_has_expeditor_offers = null, $filter_expeditor_price_type = null, $page = 1, $per_page = 20)
    {
        list($response) = $this->apiV2ExpeditorProposalGetWithHttpInfo($x_modify_from_event, $filter_serial, $filter_departure, $filter_destination, $filter_truck_type, $filter_status, $filter_proxy_status, $filter_loading_from, $filter_loading_to, $filter_carrier, $filter_consignor, $filter_branch_id, $filter_consignor_parent, $filter_archive_status, $filter_driver_name, $filter_max_end_time, $filter_tracking_number, $filter_document_originals_status, $filter_expeditor_order_refuse_type, $filter_driver_status, $filter_patch_status, $filter_has_carrier, $filter_document_package_status, $filter_carrier_paid_status, $filter_consignor_to_expeditor_paid_status, $filter_sign_status, $filter_has_without_truck_driver, $filter_consignor_curator, $filter_has_expeditor_offers, $filter_expeditor_price_type, $page, $per_page);
        return $response;
    }

    /**
     * Operation apiV2ExpeditorProposalGetWithHttpInfo
     *
     * Метод для получения списка заказов Экспедитора согласно фильтру.
     *
     * @param  int $x_modify_from_event Идентификатор события для получения заказов которые измененились после этого события (optional)
     * @param  string $filter_serial Порядковый номер заказа. (optional)
     * @param  string $filter_departure Код кладр пункта отправления. (optional)
     * @param  string $filter_destination Код кладр пункта назначения. (optional)
     * @param  int[] $filter_truck_type Список идентификаторов типов ТС. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterOrderStatusEnum[] $filter_status Массив id статусов заказов. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalProxyStatusEnum[] $filter_proxy_status Список статусов доверенности. (optional)
     * @param  \DateTime $filter_loading_from Дата погрузки ОТ. (optional)
     * @param  \DateTime $filter_loading_to Дата погрузки ДО (optional)
     * @param  string $filter_carrier Хэш код компании перевозчика (optional)
     * @param  string $filter_consignor Хэш код компании отправителя (optional)
     * @param  int $filter_branch_id Заказы дочерней компании (optional)
     * @param  string $filter_consignor_parent Хэш компании, который передается вместе с branchId если нужно включить заказы дочерних компаний (весь холдинг) (optional)
     * @param  \MagDv\Cargomart\Dto\OrderArchiveStatus $filter_archive_status Статус архивации заказа (optional)
     * @param  string $filter_driver_name ФИО водителя (optional)
     * @param  string $filter_max_end_time Предел времени закрытия заказа (optional)
     * @param  string $filter_tracking_number Трек номер (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentOriginalStatusEnum $filter_document_originals_status Статус оригинала документа (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalOrderRefuseTypeEnum[] $filter_expeditor_order_refuse_type Наличие отказа для заказа по его типу (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDriverStatusEnum $filter_driver_status Выборка по статусу назначения водителей (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterPatchStatusEnum[] $filter_patch_status Список статусов запроса на изменение заказа. 1 - ожидает подтверждение от отправителя, 2 - ожидает подтверждения от перевозчика, 3 - принят ввсеми сторонами, 4 - отозван экспедитором до согласования с перевозчиком, 5 - отклонен отправителем, 6 - отклонен перевозчиком, 7 - отозвано экспедитором до согласования с заказчиком (optional)
     * @param  bool $filter_has_carrier Фильтр по наличию перевозчика. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentPackageStatusEnum[] $filter_document_package_status Статус проверки пакетов документов (сканов) (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterCarrierPaidStatusEnum $filter_carrier_paid_status Выборка по статусу оплат перевозчику (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterConsignorPaidStatusEnum $filter_consignor_to_expeditor_paid_status Выборка по статусу оплат от заказчика экспедитору (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterSignStatusEnum[] $filter_sign_status Фильтр подписей. (optional)
     * @param  bool $filter_has_without_truck_driver Фильтр отсутствия машины и водителя. (optional, default to false)
     * @param  int $filter_consignor_curator Идентификатор куратора со стороны заказчика. (optional)
     * @param  \MagDv\Cargomart\Dto\StringBooleanEnum $filter_has_expeditor_offers Фильтр наличия предложений (в том числе ставок перевозчика). (optional)
     * @param  \MagDv\Cargomart\Dto\OrderExpeditorPriceType[] $filter_expeditor_price_type Фильтр по типу согласования цены. (optional)
     * @param  int $page Номер страницы для постраничной навигации (optional, default to 1)
     * @param  int $per_page Количество элементов на страницу (optional, default to 20)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\ProposalListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ExpeditorProposalGetWithHttpInfo($x_modify_from_event = null, $filter_serial = null, $filter_departure = null, $filter_destination = null, $filter_truck_type = null, $filter_status = null, $filter_proxy_status = null, $filter_loading_from = null, $filter_loading_to = null, $filter_carrier = null, $filter_consignor = null, $filter_branch_id = null, $filter_consignor_parent = null, $filter_archive_status = null, $filter_driver_name = null, $filter_max_end_time = null, $filter_tracking_number = null, $filter_document_originals_status = null, $filter_expeditor_order_refuse_type = null, $filter_driver_status = null, $filter_patch_status = null, $filter_has_carrier = null, $filter_document_package_status = null, $filter_carrier_paid_status = null, $filter_consignor_to_expeditor_paid_status = null, $filter_sign_status = null, $filter_has_without_truck_driver = false, $filter_consignor_curator = null, $filter_has_expeditor_offers = null, $filter_expeditor_price_type = null, $page = 1, $per_page = 20)
    {
        $request = $this->apiV2ExpeditorProposalGetRequest($x_modify_from_event, $filter_serial, $filter_departure, $filter_destination, $filter_truck_type, $filter_status, $filter_proxy_status, $filter_loading_from, $filter_loading_to, $filter_carrier, $filter_consignor, $filter_branch_id, $filter_consignor_parent, $filter_archive_status, $filter_driver_name, $filter_max_end_time, $filter_tracking_number, $filter_document_originals_status, $filter_expeditor_order_refuse_type, $filter_driver_status, $filter_patch_status, $filter_has_carrier, $filter_document_package_status, $filter_carrier_paid_status, $filter_consignor_to_expeditor_paid_status, $filter_sign_status, $filter_has_without_truck_driver, $filter_consignor_curator, $filter_has_expeditor_offers, $filter_expeditor_price_type, $page, $per_page);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\ProposalListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\ProposalListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\ProposalListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\ProposalListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ExpeditorProposalGetAsync
     *
     * Метод для получения списка заказов Экспедитора согласно фильтру.
     *
     * @param  int $x_modify_from_event Идентификатор события для получения заказов которые измененились после этого события (optional)
     * @param  string $filter_serial Порядковый номер заказа. (optional)
     * @param  string $filter_departure Код кладр пункта отправления. (optional)
     * @param  string $filter_destination Код кладр пункта назначения. (optional)
     * @param  int[] $filter_truck_type Список идентификаторов типов ТС. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterOrderStatusEnum[] $filter_status Массив id статусов заказов. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalProxyStatusEnum[] $filter_proxy_status Список статусов доверенности. (optional)
     * @param  \DateTime $filter_loading_from Дата погрузки ОТ. (optional)
     * @param  \DateTime $filter_loading_to Дата погрузки ДО (optional)
     * @param  string $filter_carrier Хэш код компании перевозчика (optional)
     * @param  string $filter_consignor Хэш код компании отправителя (optional)
     * @param  int $filter_branch_id Заказы дочерней компании (optional)
     * @param  string $filter_consignor_parent Хэш компании, который передается вместе с branchId если нужно включить заказы дочерних компаний (весь холдинг) (optional)
     * @param  \MagDv\Cargomart\Dto\OrderArchiveStatus $filter_archive_status Статус архивации заказа (optional)
     * @param  string $filter_driver_name ФИО водителя (optional)
     * @param  string $filter_max_end_time Предел времени закрытия заказа (optional)
     * @param  string $filter_tracking_number Трек номер (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentOriginalStatusEnum $filter_document_originals_status Статус оригинала документа (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalOrderRefuseTypeEnum[] $filter_expeditor_order_refuse_type Наличие отказа для заказа по его типу (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDriverStatusEnum $filter_driver_status Выборка по статусу назначения водителей (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterPatchStatusEnum[] $filter_patch_status Список статусов запроса на изменение заказа. 1 - ожидает подтверждение от отправителя, 2 - ожидает подтверждения от перевозчика, 3 - принят ввсеми сторонами, 4 - отозван экспедитором до согласования с перевозчиком, 5 - отклонен отправителем, 6 - отклонен перевозчиком, 7 - отозвано экспедитором до согласования с заказчиком (optional)
     * @param  bool $filter_has_carrier Фильтр по наличию перевозчика. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentPackageStatusEnum[] $filter_document_package_status Статус проверки пакетов документов (сканов) (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterCarrierPaidStatusEnum $filter_carrier_paid_status Выборка по статусу оплат перевозчику (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterConsignorPaidStatusEnum $filter_consignor_to_expeditor_paid_status Выборка по статусу оплат от заказчика экспедитору (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterSignStatusEnum[] $filter_sign_status Фильтр подписей. (optional)
     * @param  bool $filter_has_without_truck_driver Фильтр отсутствия машины и водителя. (optional, default to false)
     * @param  int $filter_consignor_curator Идентификатор куратора со стороны заказчика. (optional)
     * @param  \MagDv\Cargomart\Dto\StringBooleanEnum $filter_has_expeditor_offers Фильтр наличия предложений (в том числе ставок перевозчика). (optional)
     * @param  \MagDv\Cargomart\Dto\OrderExpeditorPriceType[] $filter_expeditor_price_type Фильтр по типу согласования цены. (optional)
     * @param  int $page Номер страницы для постраничной навигации (optional, default to 1)
     * @param  int $per_page Количество элементов на страницу (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorProposalGetAsync($x_modify_from_event = null, $filter_serial = null, $filter_departure = null, $filter_destination = null, $filter_truck_type = null, $filter_status = null, $filter_proxy_status = null, $filter_loading_from = null, $filter_loading_to = null, $filter_carrier = null, $filter_consignor = null, $filter_branch_id = null, $filter_consignor_parent = null, $filter_archive_status = null, $filter_driver_name = null, $filter_max_end_time = null, $filter_tracking_number = null, $filter_document_originals_status = null, $filter_expeditor_order_refuse_type = null, $filter_driver_status = null, $filter_patch_status = null, $filter_has_carrier = null, $filter_document_package_status = null, $filter_carrier_paid_status = null, $filter_consignor_to_expeditor_paid_status = null, $filter_sign_status = null, $filter_has_without_truck_driver = false, $filter_consignor_curator = null, $filter_has_expeditor_offers = null, $filter_expeditor_price_type = null, $page = 1, $per_page = 20)
    {
        return $this->apiV2ExpeditorProposalGetAsyncWithHttpInfo($x_modify_from_event, $filter_serial, $filter_departure, $filter_destination, $filter_truck_type, $filter_status, $filter_proxy_status, $filter_loading_from, $filter_loading_to, $filter_carrier, $filter_consignor, $filter_branch_id, $filter_consignor_parent, $filter_archive_status, $filter_driver_name, $filter_max_end_time, $filter_tracking_number, $filter_document_originals_status, $filter_expeditor_order_refuse_type, $filter_driver_status, $filter_patch_status, $filter_has_carrier, $filter_document_package_status, $filter_carrier_paid_status, $filter_consignor_to_expeditor_paid_status, $filter_sign_status, $filter_has_without_truck_driver, $filter_consignor_curator, $filter_has_expeditor_offers, $filter_expeditor_price_type, $page, $per_page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ExpeditorProposalGetAsyncWithHttpInfo
     *
     * Метод для получения списка заказов Экспедитора согласно фильтру.
     *
     * @param  int $x_modify_from_event Идентификатор события для получения заказов которые измененились после этого события (optional)
     * @param  string $filter_serial Порядковый номер заказа. (optional)
     * @param  string $filter_departure Код кладр пункта отправления. (optional)
     * @param  string $filter_destination Код кладр пункта назначения. (optional)
     * @param  int[] $filter_truck_type Список идентификаторов типов ТС. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterOrderStatusEnum[] $filter_status Массив id статусов заказов. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalProxyStatusEnum[] $filter_proxy_status Список статусов доверенности. (optional)
     * @param  \DateTime $filter_loading_from Дата погрузки ОТ. (optional)
     * @param  \DateTime $filter_loading_to Дата погрузки ДО (optional)
     * @param  string $filter_carrier Хэш код компании перевозчика (optional)
     * @param  string $filter_consignor Хэш код компании отправителя (optional)
     * @param  int $filter_branch_id Заказы дочерней компании (optional)
     * @param  string $filter_consignor_parent Хэш компании, который передается вместе с branchId если нужно включить заказы дочерних компаний (весь холдинг) (optional)
     * @param  \MagDv\Cargomart\Dto\OrderArchiveStatus $filter_archive_status Статус архивации заказа (optional)
     * @param  string $filter_driver_name ФИО водителя (optional)
     * @param  string $filter_max_end_time Предел времени закрытия заказа (optional)
     * @param  string $filter_tracking_number Трек номер (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentOriginalStatusEnum $filter_document_originals_status Статус оригинала документа (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalOrderRefuseTypeEnum[] $filter_expeditor_order_refuse_type Наличие отказа для заказа по его типу (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDriverStatusEnum $filter_driver_status Выборка по статусу назначения водителей (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterPatchStatusEnum[] $filter_patch_status Список статусов запроса на изменение заказа. 1 - ожидает подтверждение от отправителя, 2 - ожидает подтверждения от перевозчика, 3 - принят ввсеми сторонами, 4 - отозван экспедитором до согласования с перевозчиком, 5 - отклонен отправителем, 6 - отклонен перевозчиком, 7 - отозвано экспедитором до согласования с заказчиком (optional)
     * @param  bool $filter_has_carrier Фильтр по наличию перевозчика. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentPackageStatusEnum[] $filter_document_package_status Статус проверки пакетов документов (сканов) (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterCarrierPaidStatusEnum $filter_carrier_paid_status Выборка по статусу оплат перевозчику (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterConsignorPaidStatusEnum $filter_consignor_to_expeditor_paid_status Выборка по статусу оплат от заказчика экспедитору (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterSignStatusEnum[] $filter_sign_status Фильтр подписей. (optional)
     * @param  bool $filter_has_without_truck_driver Фильтр отсутствия машины и водителя. (optional, default to false)
     * @param  int $filter_consignor_curator Идентификатор куратора со стороны заказчика. (optional)
     * @param  \MagDv\Cargomart\Dto\StringBooleanEnum $filter_has_expeditor_offers Фильтр наличия предложений (в том числе ставок перевозчика). (optional)
     * @param  \MagDv\Cargomart\Dto\OrderExpeditorPriceType[] $filter_expeditor_price_type Фильтр по типу согласования цены. (optional)
     * @param  int $page Номер страницы для постраничной навигации (optional, default to 1)
     * @param  int $per_page Количество элементов на страницу (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorProposalGetAsyncWithHttpInfo($x_modify_from_event = null, $filter_serial = null, $filter_departure = null, $filter_destination = null, $filter_truck_type = null, $filter_status = null, $filter_proxy_status = null, $filter_loading_from = null, $filter_loading_to = null, $filter_carrier = null, $filter_consignor = null, $filter_branch_id = null, $filter_consignor_parent = null, $filter_archive_status = null, $filter_driver_name = null, $filter_max_end_time = null, $filter_tracking_number = null, $filter_document_originals_status = null, $filter_expeditor_order_refuse_type = null, $filter_driver_status = null, $filter_patch_status = null, $filter_has_carrier = null, $filter_document_package_status = null, $filter_carrier_paid_status = null, $filter_consignor_to_expeditor_paid_status = null, $filter_sign_status = null, $filter_has_without_truck_driver = false, $filter_consignor_curator = null, $filter_has_expeditor_offers = null, $filter_expeditor_price_type = null, $page = 1, $per_page = 20)
    {
        $returnType = '\MagDv\Cargomart\Dto\ProposalListResponse';
        $request = $this->apiV2ExpeditorProposalGetRequest($x_modify_from_event, $filter_serial, $filter_departure, $filter_destination, $filter_truck_type, $filter_status, $filter_proxy_status, $filter_loading_from, $filter_loading_to, $filter_carrier, $filter_consignor, $filter_branch_id, $filter_consignor_parent, $filter_archive_status, $filter_driver_name, $filter_max_end_time, $filter_tracking_number, $filter_document_originals_status, $filter_expeditor_order_refuse_type, $filter_driver_status, $filter_patch_status, $filter_has_carrier, $filter_document_package_status, $filter_carrier_paid_status, $filter_consignor_to_expeditor_paid_status, $filter_sign_status, $filter_has_without_truck_driver, $filter_consignor_curator, $filter_has_expeditor_offers, $filter_expeditor_price_type, $page, $per_page);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ExpeditorProposalGet'
     *
     * @param  int $x_modify_from_event Идентификатор события для получения заказов которые измененились после этого события (optional)
     * @param  string $filter_serial Порядковый номер заказа. (optional)
     * @param  string $filter_departure Код кладр пункта отправления. (optional)
     * @param  string $filter_destination Код кладр пункта назначения. (optional)
     * @param  int[] $filter_truck_type Список идентификаторов типов ТС. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterOrderStatusEnum[] $filter_status Массив id статусов заказов. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalProxyStatusEnum[] $filter_proxy_status Список статусов доверенности. (optional)
     * @param  \DateTime $filter_loading_from Дата погрузки ОТ. (optional)
     * @param  \DateTime $filter_loading_to Дата погрузки ДО (optional)
     * @param  string $filter_carrier Хэш код компании перевозчика (optional)
     * @param  string $filter_consignor Хэш код компании отправителя (optional)
     * @param  int $filter_branch_id Заказы дочерней компании (optional)
     * @param  string $filter_consignor_parent Хэш компании, который передается вместе с branchId если нужно включить заказы дочерних компаний (весь холдинг) (optional)
     * @param  \MagDv\Cargomart\Dto\OrderArchiveStatus $filter_archive_status Статус архивации заказа (optional)
     * @param  string $filter_driver_name ФИО водителя (optional)
     * @param  string $filter_max_end_time Предел времени закрытия заказа (optional)
     * @param  string $filter_tracking_number Трек номер (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentOriginalStatusEnum $filter_document_originals_status Статус оригинала документа (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalOrderRefuseTypeEnum[] $filter_expeditor_order_refuse_type Наличие отказа для заказа по его типу (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDriverStatusEnum $filter_driver_status Выборка по статусу назначения водителей (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterPatchStatusEnum[] $filter_patch_status Список статусов запроса на изменение заказа. 1 - ожидает подтверждение от отправителя, 2 - ожидает подтверждения от перевозчика, 3 - принят ввсеми сторонами, 4 - отозван экспедитором до согласования с перевозчиком, 5 - отклонен отправителем, 6 - отклонен перевозчиком, 7 - отозвано экспедитором до согласования с заказчиком (optional)
     * @param  bool $filter_has_carrier Фильтр по наличию перевозчика. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentPackageStatusEnum[] $filter_document_package_status Статус проверки пакетов документов (сканов) (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterCarrierPaidStatusEnum $filter_carrier_paid_status Выборка по статусу оплат перевозчику (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterConsignorPaidStatusEnum $filter_consignor_to_expeditor_paid_status Выборка по статусу оплат от заказчика экспедитору (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterSignStatusEnum[] $filter_sign_status Фильтр подписей. (optional)
     * @param  bool $filter_has_without_truck_driver Фильтр отсутствия машины и водителя. (optional, default to false)
     * @param  int $filter_consignor_curator Идентификатор куратора со стороны заказчика. (optional)
     * @param  \MagDv\Cargomart\Dto\StringBooleanEnum $filter_has_expeditor_offers Фильтр наличия предложений (в том числе ставок перевозчика). (optional)
     * @param  \MagDv\Cargomart\Dto\OrderExpeditorPriceType[] $filter_expeditor_price_type Фильтр по типу согласования цены. (optional)
     * @param  int $page Номер страницы для постраничной навигации (optional, default to 1)
     * @param  int $per_page Количество элементов на страницу (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2ExpeditorProposalGetRequest($x_modify_from_event = null, $filter_serial = null, $filter_departure = null, $filter_destination = null, $filter_truck_type = null, $filter_status = null, $filter_proxy_status = null, $filter_loading_from = null, $filter_loading_to = null, $filter_carrier = null, $filter_consignor = null, $filter_branch_id = null, $filter_consignor_parent = null, $filter_archive_status = null, $filter_driver_name = null, $filter_max_end_time = null, $filter_tracking_number = null, $filter_document_originals_status = null, $filter_expeditor_order_refuse_type = null, $filter_driver_status = null, $filter_patch_status = null, $filter_has_carrier = null, $filter_document_package_status = null, $filter_carrier_paid_status = null, $filter_consignor_to_expeditor_paid_status = null, $filter_sign_status = null, $filter_has_without_truck_driver = false, $filter_consignor_curator = null, $filter_has_expeditor_offers = null, $filter_expeditor_price_type = null, $page = 1, $per_page = 20)
    {

        $resourcePath = '/api/v2/expeditor-proposal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($filter_serial !== null) {
            if('form' === 'form' && is_array($filter_serial)) {
                foreach($filter_serial as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[serial]'] = $filter_serial;
            }
        }
        // query params
        if ($filter_departure !== null) {
            if('form' === 'form' && is_array($filter_departure)) {
                foreach($filter_departure as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[departure]'] = $filter_departure;
            }
        }
        // query params
        if ($filter_destination !== null) {
            if('form' === 'form' && is_array($filter_destination)) {
                foreach($filter_destination as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[destination]'] = $filter_destination;
            }
        }
        // query params
        if ($filter_truck_type !== null) {
            if('form' === 'form' && is_array($filter_truck_type)) {
                foreach($filter_truck_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[truckType][]'] = $filter_truck_type;
            }
        }
        // query params
        if ($filter_status !== null) {
            if('form' === 'form' && is_array($filter_status)) {
                foreach($filter_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[status][]'] = $filter_status;
            }
        }
        // query params
        if ($filter_proxy_status !== null) {
            if('form' === 'form' && is_array($filter_proxy_status)) {
                foreach($filter_proxy_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[proxyStatus][]'] = $filter_proxy_status;
            }
        }
        // query params
        if ($filter_loading_from !== null) {
            if('form' === 'form' && is_array($filter_loading_from)) {
                foreach($filter_loading_from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[loadingFrom]'] = $filter_loading_from;
            }
        }
        // query params
        if ($filter_loading_to !== null) {
            if('form' === 'form' && is_array($filter_loading_to)) {
                foreach($filter_loading_to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[loadingTo]'] = $filter_loading_to;
            }
        }
        // query params
        if ($filter_carrier !== null) {
            if('form' === 'form' && is_array($filter_carrier)) {
                foreach($filter_carrier as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[carrier]'] = $filter_carrier;
            }
        }
        // query params
        if ($filter_consignor !== null) {
            if('form' === 'form' && is_array($filter_consignor)) {
                foreach($filter_consignor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[consignor]'] = $filter_consignor;
            }
        }
        // query params
        if ($filter_branch_id !== null) {
            if('form' === 'form' && is_array($filter_branch_id)) {
                foreach($filter_branch_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[branchId]'] = $filter_branch_id;
            }
        }
        // query params
        if ($filter_consignor_parent !== null) {
            if('form' === 'form' && is_array($filter_consignor_parent)) {
                foreach($filter_consignor_parent as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[consignorParent]'] = $filter_consignor_parent;
            }
        }
        // query params
        if ($filter_archive_status !== null) {
            if('form' === 'form' && is_array($filter_archive_status)) {
                foreach($filter_archive_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[archiveStatus]'] = $filter_archive_status;
            }
        }
        // query params
        if ($filter_driver_name !== null) {
            if('form' === 'form' && is_array($filter_driver_name)) {
                foreach($filter_driver_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[driverName]'] = $filter_driver_name;
            }
        }
        // query params
        if ($filter_max_end_time !== null) {
            if('form' === 'form' && is_array($filter_max_end_time)) {
                foreach($filter_max_end_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[maxEndTime]'] = $filter_max_end_time;
            }
        }
        // query params
        if ($filter_tracking_number !== null) {
            if('form' === 'form' && is_array($filter_tracking_number)) {
                foreach($filter_tracking_number as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[trackingNumber]'] = $filter_tracking_number;
            }
        }
        // query params
        if ($filter_document_originals_status !== null) {
            if('form' === 'form' && is_array($filter_document_originals_status)) {
                foreach($filter_document_originals_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[documentOriginalsStatus]'] = $filter_document_originals_status;
            }
        }
        // query params
        if ($filter_expeditor_order_refuse_type !== null) {
            if('form' === 'form' && is_array($filter_expeditor_order_refuse_type)) {
                foreach($filter_expeditor_order_refuse_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[expeditorOrderRefuseType][]'] = $filter_expeditor_order_refuse_type;
            }
        }
        // query params
        if ($filter_driver_status !== null) {
            if('form' === 'form' && is_array($filter_driver_status)) {
                foreach($filter_driver_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[driverStatus]'] = $filter_driver_status;
            }
        }
        // query params
        if ($filter_patch_status !== null) {
            if('form' === 'form' && is_array($filter_patch_status)) {
                foreach($filter_patch_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[patchStatus][]'] = $filter_patch_status;
            }
        }
        // query params
        if ($filter_has_carrier !== null) {
            if('form' === 'form' && is_array($filter_has_carrier)) {
                foreach($filter_has_carrier as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[hasCarrier]'] = $filter_has_carrier;
            }
        }
        // query params
        if ($filter_document_package_status !== null) {
            if('form' === 'form' && is_array($filter_document_package_status)) {
                foreach($filter_document_package_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[documentPackageStatus][]'] = $filter_document_package_status;
            }
        }
        // query params
        if ($filter_carrier_paid_status !== null) {
            if('form' === 'form' && is_array($filter_carrier_paid_status)) {
                foreach($filter_carrier_paid_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[carrierPaidStatus]'] = $filter_carrier_paid_status;
            }
        }
        // query params
        if ($filter_consignor_to_expeditor_paid_status !== null) {
            if('form' === 'form' && is_array($filter_consignor_to_expeditor_paid_status)) {
                foreach($filter_consignor_to_expeditor_paid_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[consignorToExpeditorPaidStatus]'] = $filter_consignor_to_expeditor_paid_status;
            }
        }
        // query params
        if ($filter_sign_status !== null) {
            if('form' === 'form' && is_array($filter_sign_status)) {
                foreach($filter_sign_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[signStatus][]'] = $filter_sign_status;
            }
        }
        // query params
        if ($filter_has_without_truck_driver !== null) {
            if('form' === 'form' && is_array($filter_has_without_truck_driver)) {
                foreach($filter_has_without_truck_driver as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[hasWithoutTruckDriver]'] = $filter_has_without_truck_driver;
            }
        }
        // query params
        if ($filter_consignor_curator !== null) {
            if('form' === 'form' && is_array($filter_consignor_curator)) {
                foreach($filter_consignor_curator as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[consignorCurator]'] = $filter_consignor_curator;
            }
        }
        // query params
        if ($filter_has_expeditor_offers !== null) {
            if('form' === 'form' && is_array($filter_has_expeditor_offers)) {
                foreach($filter_has_expeditor_offers as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[hasExpeditorOffers]'] = $filter_has_expeditor_offers;
            }
        }
        // query params
        if ($filter_expeditor_price_type !== null) {
            if('form' === 'form' && is_array($filter_expeditor_price_type)) {
                foreach($filter_expeditor_price_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[expeditorPriceType]'] = $filter_expeditor_price_type;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($per_page !== null) {
            if('form' === 'form' && is_array($per_page)) {
                foreach($per_page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['perPage'] = $per_page;
            }
        }

        // header params
        if ($x_modify_from_event !== null) {
            $headerParams['X-Modify-From-Event'] = ObjectSerializer::toHeaderValue($x_modify_from_event);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2ExpeditorProposalIdsGet
     *
     * Метод для получения списка ids заказов Экспедитора согласно фильтру.
     *
     * @param  int $x_modify_from_event Идентификатор события для получения заказов которые измененились после этого события (optional)
     * @param  string $filter_serial Порядковый номер заказа. (optional)
     * @param  string $filter_departure Код кладр пункта отправления. (optional)
     * @param  string $filter_destination Код кладр пункта назначения. (optional)
     * @param  int[] $filter_truck_type Список идентификаторов типов ТС. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterOrderStatusEnum[] $filter_status Массив id статусов заказов. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalProxyStatusEnum[] $filter_proxy_status Список статусов доверенности. (optional)
     * @param  \DateTime $filter_loading_from Дата погрузки ОТ. (optional)
     * @param  \DateTime $filter_loading_to Дата погрузки ДО (optional)
     * @param  string $filter_carrier Хэш код компании перевозчика (optional)
     * @param  string $filter_consignor Хэш код компании отправителя (optional)
     * @param  int $filter_branch_id Заказы дочерней компании (optional)
     * @param  string $filter_consignor_parent Хэш компании, который передается вместе с branchId если нужно включить заказы дочерних компаний (весь холдинг) (optional)
     * @param  \MagDv\Cargomart\Dto\OrderArchiveStatus $filter_archive_status Статус архивации заказа (optional)
     * @param  int $filter_driver Идентификатор водителя (optional)
     * @param  string $filter_driver_name ФИО водителя (optional)
     * @param  string $filter_max_end_time Предел времени закрытия заказа (optional)
     * @param  string $filter_tracking_number Трек номер (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentOriginalStatusEnum $filter_document_originals_status Статус оригинала документа (optional)
     * @param  bool $filter_has_carrier Фильтр по наличию перевозчика. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalOrderRefuseTypeEnum[] $filter_expeditor_order_refuse_type Наличие отказа для заказа по его типу (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDriverStatusEnum $filter_driver_status Выборка по статусу назначения водителей (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterPatchStatusEnum[] $filter_patch_status Список статусов запроса на изменение заказа. 1 - ожидает подтверждение от отправителя, 2 - ожидает подтверждения от перевозчика, 3 - принят ввсеми сторонами, 4 - отозван экспедитором до согласования с перевозчиком, 5 - отклонен отправителем, 6 - отклонен перевозчиком, 7 - отозвано экспедитором до согласования с заказчиком (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentPackageStatusEnum[] $filter_document_package_status Статус проверки пакетов документов (сканов) (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterCarrierPaidStatusEnum $filter_carrier_paid_status Выборка по статусу оплат перевозчику (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterSignStatusEnum[] $filter_sign_status Фильтр подписей. (optional)
     * @param  int $filter_consignor_curator Идентификатор куратора со стороны заказчика. (optional)
     * @param  \MagDv\Cargomart\Dto\StringBooleanEnum $filter_has_expeditor_offers Фильтр наличия предложений (в том числе ставок перевозчика). (optional)
     * @param  \MagDv\Cargomart\Dto\OrderExpeditorPriceType[] $filter_expeditor_price_type Фильтр по типу согласования цены. (optional)
     * @param  int $page Номер страницы для постраничной навигации (optional, default to 1)
     * @param  int $per_page Количество элементов на страницу (optional, default to 20)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\ProposalListIdsResponse
     */
    public function apiV2ExpeditorProposalIdsGet($x_modify_from_event = null, $filter_serial = null, $filter_departure = null, $filter_destination = null, $filter_truck_type = null, $filter_status = null, $filter_proxy_status = null, $filter_loading_from = null, $filter_loading_to = null, $filter_carrier = null, $filter_consignor = null, $filter_branch_id = null, $filter_consignor_parent = null, $filter_archive_status = null, $filter_driver = null, $filter_driver_name = null, $filter_max_end_time = null, $filter_tracking_number = null, $filter_document_originals_status = null, $filter_has_carrier = null, $filter_expeditor_order_refuse_type = null, $filter_driver_status = null, $filter_patch_status = null, $filter_document_package_status = null, $filter_carrier_paid_status = null, $filter_sign_status = null, $filter_consignor_curator = null, $filter_has_expeditor_offers = null, $filter_expeditor_price_type = null, $page = 1, $per_page = 20)
    {
        list($response) = $this->apiV2ExpeditorProposalIdsGetWithHttpInfo($x_modify_from_event, $filter_serial, $filter_departure, $filter_destination, $filter_truck_type, $filter_status, $filter_proxy_status, $filter_loading_from, $filter_loading_to, $filter_carrier, $filter_consignor, $filter_branch_id, $filter_consignor_parent, $filter_archive_status, $filter_driver, $filter_driver_name, $filter_max_end_time, $filter_tracking_number, $filter_document_originals_status, $filter_has_carrier, $filter_expeditor_order_refuse_type, $filter_driver_status, $filter_patch_status, $filter_document_package_status, $filter_carrier_paid_status, $filter_sign_status, $filter_consignor_curator, $filter_has_expeditor_offers, $filter_expeditor_price_type, $page, $per_page);
        return $response;
    }

    /**
     * Operation apiV2ExpeditorProposalIdsGetWithHttpInfo
     *
     * Метод для получения списка ids заказов Экспедитора согласно фильтру.
     *
     * @param  int $x_modify_from_event Идентификатор события для получения заказов которые измененились после этого события (optional)
     * @param  string $filter_serial Порядковый номер заказа. (optional)
     * @param  string $filter_departure Код кладр пункта отправления. (optional)
     * @param  string $filter_destination Код кладр пункта назначения. (optional)
     * @param  int[] $filter_truck_type Список идентификаторов типов ТС. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterOrderStatusEnum[] $filter_status Массив id статусов заказов. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalProxyStatusEnum[] $filter_proxy_status Список статусов доверенности. (optional)
     * @param  \DateTime $filter_loading_from Дата погрузки ОТ. (optional)
     * @param  \DateTime $filter_loading_to Дата погрузки ДО (optional)
     * @param  string $filter_carrier Хэш код компании перевозчика (optional)
     * @param  string $filter_consignor Хэш код компании отправителя (optional)
     * @param  int $filter_branch_id Заказы дочерней компании (optional)
     * @param  string $filter_consignor_parent Хэш компании, который передается вместе с branchId если нужно включить заказы дочерних компаний (весь холдинг) (optional)
     * @param  \MagDv\Cargomart\Dto\OrderArchiveStatus $filter_archive_status Статус архивации заказа (optional)
     * @param  int $filter_driver Идентификатор водителя (optional)
     * @param  string $filter_driver_name ФИО водителя (optional)
     * @param  string $filter_max_end_time Предел времени закрытия заказа (optional)
     * @param  string $filter_tracking_number Трек номер (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentOriginalStatusEnum $filter_document_originals_status Статус оригинала документа (optional)
     * @param  bool $filter_has_carrier Фильтр по наличию перевозчика. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalOrderRefuseTypeEnum[] $filter_expeditor_order_refuse_type Наличие отказа для заказа по его типу (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDriverStatusEnum $filter_driver_status Выборка по статусу назначения водителей (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterPatchStatusEnum[] $filter_patch_status Список статусов запроса на изменение заказа. 1 - ожидает подтверждение от отправителя, 2 - ожидает подтверждения от перевозчика, 3 - принят ввсеми сторонами, 4 - отозван экспедитором до согласования с перевозчиком, 5 - отклонен отправителем, 6 - отклонен перевозчиком, 7 - отозвано экспедитором до согласования с заказчиком (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentPackageStatusEnum[] $filter_document_package_status Статус проверки пакетов документов (сканов) (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterCarrierPaidStatusEnum $filter_carrier_paid_status Выборка по статусу оплат перевозчику (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterSignStatusEnum[] $filter_sign_status Фильтр подписей. (optional)
     * @param  int $filter_consignor_curator Идентификатор куратора со стороны заказчика. (optional)
     * @param  \MagDv\Cargomart\Dto\StringBooleanEnum $filter_has_expeditor_offers Фильтр наличия предложений (в том числе ставок перевозчика). (optional)
     * @param  \MagDv\Cargomart\Dto\OrderExpeditorPriceType[] $filter_expeditor_price_type Фильтр по типу согласования цены. (optional)
     * @param  int $page Номер страницы для постраничной навигации (optional, default to 1)
     * @param  int $per_page Количество элементов на страницу (optional, default to 20)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\ProposalListIdsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ExpeditorProposalIdsGetWithHttpInfo($x_modify_from_event = null, $filter_serial = null, $filter_departure = null, $filter_destination = null, $filter_truck_type = null, $filter_status = null, $filter_proxy_status = null, $filter_loading_from = null, $filter_loading_to = null, $filter_carrier = null, $filter_consignor = null, $filter_branch_id = null, $filter_consignor_parent = null, $filter_archive_status = null, $filter_driver = null, $filter_driver_name = null, $filter_max_end_time = null, $filter_tracking_number = null, $filter_document_originals_status = null, $filter_has_carrier = null, $filter_expeditor_order_refuse_type = null, $filter_driver_status = null, $filter_patch_status = null, $filter_document_package_status = null, $filter_carrier_paid_status = null, $filter_sign_status = null, $filter_consignor_curator = null, $filter_has_expeditor_offers = null, $filter_expeditor_price_type = null, $page = 1, $per_page = 20)
    {
        $request = $this->apiV2ExpeditorProposalIdsGetRequest($x_modify_from_event, $filter_serial, $filter_departure, $filter_destination, $filter_truck_type, $filter_status, $filter_proxy_status, $filter_loading_from, $filter_loading_to, $filter_carrier, $filter_consignor, $filter_branch_id, $filter_consignor_parent, $filter_archive_status, $filter_driver, $filter_driver_name, $filter_max_end_time, $filter_tracking_number, $filter_document_originals_status, $filter_has_carrier, $filter_expeditor_order_refuse_type, $filter_driver_status, $filter_patch_status, $filter_document_package_status, $filter_carrier_paid_status, $filter_sign_status, $filter_consignor_curator, $filter_has_expeditor_offers, $filter_expeditor_price_type, $page, $per_page);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\ProposalListIdsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\ProposalListIdsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\ProposalListIdsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\ProposalListIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ExpeditorProposalIdsGetAsync
     *
     * Метод для получения списка ids заказов Экспедитора согласно фильтру.
     *
     * @param  int $x_modify_from_event Идентификатор события для получения заказов которые измененились после этого события (optional)
     * @param  string $filter_serial Порядковый номер заказа. (optional)
     * @param  string $filter_departure Код кладр пункта отправления. (optional)
     * @param  string $filter_destination Код кладр пункта назначения. (optional)
     * @param  int[] $filter_truck_type Список идентификаторов типов ТС. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterOrderStatusEnum[] $filter_status Массив id статусов заказов. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalProxyStatusEnum[] $filter_proxy_status Список статусов доверенности. (optional)
     * @param  \DateTime $filter_loading_from Дата погрузки ОТ. (optional)
     * @param  \DateTime $filter_loading_to Дата погрузки ДО (optional)
     * @param  string $filter_carrier Хэш код компании перевозчика (optional)
     * @param  string $filter_consignor Хэш код компании отправителя (optional)
     * @param  int $filter_branch_id Заказы дочерней компании (optional)
     * @param  string $filter_consignor_parent Хэш компании, который передается вместе с branchId если нужно включить заказы дочерних компаний (весь холдинг) (optional)
     * @param  \MagDv\Cargomart\Dto\OrderArchiveStatus $filter_archive_status Статус архивации заказа (optional)
     * @param  int $filter_driver Идентификатор водителя (optional)
     * @param  string $filter_driver_name ФИО водителя (optional)
     * @param  string $filter_max_end_time Предел времени закрытия заказа (optional)
     * @param  string $filter_tracking_number Трек номер (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentOriginalStatusEnum $filter_document_originals_status Статус оригинала документа (optional)
     * @param  bool $filter_has_carrier Фильтр по наличию перевозчика. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalOrderRefuseTypeEnum[] $filter_expeditor_order_refuse_type Наличие отказа для заказа по его типу (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDriverStatusEnum $filter_driver_status Выборка по статусу назначения водителей (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterPatchStatusEnum[] $filter_patch_status Список статусов запроса на изменение заказа. 1 - ожидает подтверждение от отправителя, 2 - ожидает подтверждения от перевозчика, 3 - принят ввсеми сторонами, 4 - отозван экспедитором до согласования с перевозчиком, 5 - отклонен отправителем, 6 - отклонен перевозчиком, 7 - отозвано экспедитором до согласования с заказчиком (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentPackageStatusEnum[] $filter_document_package_status Статус проверки пакетов документов (сканов) (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterCarrierPaidStatusEnum $filter_carrier_paid_status Выборка по статусу оплат перевозчику (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterSignStatusEnum[] $filter_sign_status Фильтр подписей. (optional)
     * @param  int $filter_consignor_curator Идентификатор куратора со стороны заказчика. (optional)
     * @param  \MagDv\Cargomart\Dto\StringBooleanEnum $filter_has_expeditor_offers Фильтр наличия предложений (в том числе ставок перевозчика). (optional)
     * @param  \MagDv\Cargomart\Dto\OrderExpeditorPriceType[] $filter_expeditor_price_type Фильтр по типу согласования цены. (optional)
     * @param  int $page Номер страницы для постраничной навигации (optional, default to 1)
     * @param  int $per_page Количество элементов на страницу (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorProposalIdsGetAsync($x_modify_from_event = null, $filter_serial = null, $filter_departure = null, $filter_destination = null, $filter_truck_type = null, $filter_status = null, $filter_proxy_status = null, $filter_loading_from = null, $filter_loading_to = null, $filter_carrier = null, $filter_consignor = null, $filter_branch_id = null, $filter_consignor_parent = null, $filter_archive_status = null, $filter_driver = null, $filter_driver_name = null, $filter_max_end_time = null, $filter_tracking_number = null, $filter_document_originals_status = null, $filter_has_carrier = null, $filter_expeditor_order_refuse_type = null, $filter_driver_status = null, $filter_patch_status = null, $filter_document_package_status = null, $filter_carrier_paid_status = null, $filter_sign_status = null, $filter_consignor_curator = null, $filter_has_expeditor_offers = null, $filter_expeditor_price_type = null, $page = 1, $per_page = 20)
    {
        return $this->apiV2ExpeditorProposalIdsGetAsyncWithHttpInfo($x_modify_from_event, $filter_serial, $filter_departure, $filter_destination, $filter_truck_type, $filter_status, $filter_proxy_status, $filter_loading_from, $filter_loading_to, $filter_carrier, $filter_consignor, $filter_branch_id, $filter_consignor_parent, $filter_archive_status, $filter_driver, $filter_driver_name, $filter_max_end_time, $filter_tracking_number, $filter_document_originals_status, $filter_has_carrier, $filter_expeditor_order_refuse_type, $filter_driver_status, $filter_patch_status, $filter_document_package_status, $filter_carrier_paid_status, $filter_sign_status, $filter_consignor_curator, $filter_has_expeditor_offers, $filter_expeditor_price_type, $page, $per_page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ExpeditorProposalIdsGetAsyncWithHttpInfo
     *
     * Метод для получения списка ids заказов Экспедитора согласно фильтру.
     *
     * @param  int $x_modify_from_event Идентификатор события для получения заказов которые измененились после этого события (optional)
     * @param  string $filter_serial Порядковый номер заказа. (optional)
     * @param  string $filter_departure Код кладр пункта отправления. (optional)
     * @param  string $filter_destination Код кладр пункта назначения. (optional)
     * @param  int[] $filter_truck_type Список идентификаторов типов ТС. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterOrderStatusEnum[] $filter_status Массив id статусов заказов. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalProxyStatusEnum[] $filter_proxy_status Список статусов доверенности. (optional)
     * @param  \DateTime $filter_loading_from Дата погрузки ОТ. (optional)
     * @param  \DateTime $filter_loading_to Дата погрузки ДО (optional)
     * @param  string $filter_carrier Хэш код компании перевозчика (optional)
     * @param  string $filter_consignor Хэш код компании отправителя (optional)
     * @param  int $filter_branch_id Заказы дочерней компании (optional)
     * @param  string $filter_consignor_parent Хэш компании, который передается вместе с branchId если нужно включить заказы дочерних компаний (весь холдинг) (optional)
     * @param  \MagDv\Cargomart\Dto\OrderArchiveStatus $filter_archive_status Статус архивации заказа (optional)
     * @param  int $filter_driver Идентификатор водителя (optional)
     * @param  string $filter_driver_name ФИО водителя (optional)
     * @param  string $filter_max_end_time Предел времени закрытия заказа (optional)
     * @param  string $filter_tracking_number Трек номер (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentOriginalStatusEnum $filter_document_originals_status Статус оригинала документа (optional)
     * @param  bool $filter_has_carrier Фильтр по наличию перевозчика. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalOrderRefuseTypeEnum[] $filter_expeditor_order_refuse_type Наличие отказа для заказа по его типу (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDriverStatusEnum $filter_driver_status Выборка по статусу назначения водителей (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterPatchStatusEnum[] $filter_patch_status Список статусов запроса на изменение заказа. 1 - ожидает подтверждение от отправителя, 2 - ожидает подтверждения от перевозчика, 3 - принят ввсеми сторонами, 4 - отозван экспедитором до согласования с перевозчиком, 5 - отклонен отправителем, 6 - отклонен перевозчиком, 7 - отозвано экспедитором до согласования с заказчиком (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentPackageStatusEnum[] $filter_document_package_status Статус проверки пакетов документов (сканов) (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterCarrierPaidStatusEnum $filter_carrier_paid_status Выборка по статусу оплат перевозчику (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterSignStatusEnum[] $filter_sign_status Фильтр подписей. (optional)
     * @param  int $filter_consignor_curator Идентификатор куратора со стороны заказчика. (optional)
     * @param  \MagDv\Cargomart\Dto\StringBooleanEnum $filter_has_expeditor_offers Фильтр наличия предложений (в том числе ставок перевозчика). (optional)
     * @param  \MagDv\Cargomart\Dto\OrderExpeditorPriceType[] $filter_expeditor_price_type Фильтр по типу согласования цены. (optional)
     * @param  int $page Номер страницы для постраничной навигации (optional, default to 1)
     * @param  int $per_page Количество элементов на страницу (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2ExpeditorProposalIdsGetAsyncWithHttpInfo($x_modify_from_event = null, $filter_serial = null, $filter_departure = null, $filter_destination = null, $filter_truck_type = null, $filter_status = null, $filter_proxy_status = null, $filter_loading_from = null, $filter_loading_to = null, $filter_carrier = null, $filter_consignor = null, $filter_branch_id = null, $filter_consignor_parent = null, $filter_archive_status = null, $filter_driver = null, $filter_driver_name = null, $filter_max_end_time = null, $filter_tracking_number = null, $filter_document_originals_status = null, $filter_has_carrier = null, $filter_expeditor_order_refuse_type = null, $filter_driver_status = null, $filter_patch_status = null, $filter_document_package_status = null, $filter_carrier_paid_status = null, $filter_sign_status = null, $filter_consignor_curator = null, $filter_has_expeditor_offers = null, $filter_expeditor_price_type = null, $page = 1, $per_page = 20)
    {
        $returnType = '\MagDv\Cargomart\Dto\ProposalListIdsResponse';
        $request = $this->apiV2ExpeditorProposalIdsGetRequest($x_modify_from_event, $filter_serial, $filter_departure, $filter_destination, $filter_truck_type, $filter_status, $filter_proxy_status, $filter_loading_from, $filter_loading_to, $filter_carrier, $filter_consignor, $filter_branch_id, $filter_consignor_parent, $filter_archive_status, $filter_driver, $filter_driver_name, $filter_max_end_time, $filter_tracking_number, $filter_document_originals_status, $filter_has_carrier, $filter_expeditor_order_refuse_type, $filter_driver_status, $filter_patch_status, $filter_document_package_status, $filter_carrier_paid_status, $filter_sign_status, $filter_consignor_curator, $filter_has_expeditor_offers, $filter_expeditor_price_type, $page, $per_page);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ExpeditorProposalIdsGet'
     *
     * @param  int $x_modify_from_event Идентификатор события для получения заказов которые измененились после этого события (optional)
     * @param  string $filter_serial Порядковый номер заказа. (optional)
     * @param  string $filter_departure Код кладр пункта отправления. (optional)
     * @param  string $filter_destination Код кладр пункта назначения. (optional)
     * @param  int[] $filter_truck_type Список идентификаторов типов ТС. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterOrderStatusEnum[] $filter_status Массив id статусов заказов. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalProxyStatusEnum[] $filter_proxy_status Список статусов доверенности. (optional)
     * @param  \DateTime $filter_loading_from Дата погрузки ОТ. (optional)
     * @param  \DateTime $filter_loading_to Дата погрузки ДО (optional)
     * @param  string $filter_carrier Хэш код компании перевозчика (optional)
     * @param  string $filter_consignor Хэш код компании отправителя (optional)
     * @param  int $filter_branch_id Заказы дочерней компании (optional)
     * @param  string $filter_consignor_parent Хэш компании, который передается вместе с branchId если нужно включить заказы дочерних компаний (весь холдинг) (optional)
     * @param  \MagDv\Cargomart\Dto\OrderArchiveStatus $filter_archive_status Статус архивации заказа (optional)
     * @param  int $filter_driver Идентификатор водителя (optional)
     * @param  string $filter_driver_name ФИО водителя (optional)
     * @param  string $filter_max_end_time Предел времени закрытия заказа (optional)
     * @param  string $filter_tracking_number Трек номер (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentOriginalStatusEnum $filter_document_originals_status Статус оригинала документа (optional)
     * @param  bool $filter_has_carrier Фильтр по наличию перевозчика. (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalOrderRefuseTypeEnum[] $filter_expeditor_order_refuse_type Наличие отказа для заказа по его типу (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDriverStatusEnum $filter_driver_status Выборка по статусу назначения водителей (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterPatchStatusEnum[] $filter_patch_status Список статусов запроса на изменение заказа. 1 - ожидает подтверждение от отправителя, 2 - ожидает подтверждения от перевозчика, 3 - принят ввсеми сторонами, 4 - отозван экспедитором до согласования с перевозчиком, 5 - отклонен отправителем, 6 - отклонен перевозчиком, 7 - отозвано экспедитором до согласования с заказчиком (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterDocumentPackageStatusEnum[] $filter_document_package_status Статус проверки пакетов документов (сканов) (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterCarrierPaidStatusEnum $filter_carrier_paid_status Выборка по статусу оплат перевозчику (optional)
     * @param  \MagDv\Cargomart\Dto\ProposalFilterSignStatusEnum[] $filter_sign_status Фильтр подписей. (optional)
     * @param  int $filter_consignor_curator Идентификатор куратора со стороны заказчика. (optional)
     * @param  \MagDv\Cargomart\Dto\StringBooleanEnum $filter_has_expeditor_offers Фильтр наличия предложений (в том числе ставок перевозчика). (optional)
     * @param  \MagDv\Cargomart\Dto\OrderExpeditorPriceType[] $filter_expeditor_price_type Фильтр по типу согласования цены. (optional)
     * @param  int $page Номер страницы для постраничной навигации (optional, default to 1)
     * @param  int $per_page Количество элементов на страницу (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2ExpeditorProposalIdsGetRequest($x_modify_from_event = null, $filter_serial = null, $filter_departure = null, $filter_destination = null, $filter_truck_type = null, $filter_status = null, $filter_proxy_status = null, $filter_loading_from = null, $filter_loading_to = null, $filter_carrier = null, $filter_consignor = null, $filter_branch_id = null, $filter_consignor_parent = null, $filter_archive_status = null, $filter_driver = null, $filter_driver_name = null, $filter_max_end_time = null, $filter_tracking_number = null, $filter_document_originals_status = null, $filter_has_carrier = null, $filter_expeditor_order_refuse_type = null, $filter_driver_status = null, $filter_patch_status = null, $filter_document_package_status = null, $filter_carrier_paid_status = null, $filter_sign_status = null, $filter_consignor_curator = null, $filter_has_expeditor_offers = null, $filter_expeditor_price_type = null, $page = 1, $per_page = 20)
    {

        $resourcePath = '/api/v2/expeditor-proposal/ids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($filter_serial !== null) {
            if('form' === 'form' && is_array($filter_serial)) {
                foreach($filter_serial as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[serial]'] = $filter_serial;
            }
        }
        // query params
        if ($filter_departure !== null) {
            if('form' === 'form' && is_array($filter_departure)) {
                foreach($filter_departure as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[departure]'] = $filter_departure;
            }
        }
        // query params
        if ($filter_destination !== null) {
            if('form' === 'form' && is_array($filter_destination)) {
                foreach($filter_destination as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[destination]'] = $filter_destination;
            }
        }
        // query params
        if ($filter_truck_type !== null) {
            if('form' === 'form' && is_array($filter_truck_type)) {
                foreach($filter_truck_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[truckType][]'] = $filter_truck_type;
            }
        }
        // query params
        if ($filter_status !== null) {
            if('form' === 'form' && is_array($filter_status)) {
                foreach($filter_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[status][]'] = $filter_status;
            }
        }
        // query params
        if ($filter_proxy_status !== null) {
            if('form' === 'form' && is_array($filter_proxy_status)) {
                foreach($filter_proxy_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[proxyStatus][]'] = $filter_proxy_status;
            }
        }
        // query params
        if ($filter_loading_from !== null) {
            if('form' === 'form' && is_array($filter_loading_from)) {
                foreach($filter_loading_from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[loadingFrom]'] = $filter_loading_from;
            }
        }
        // query params
        if ($filter_loading_to !== null) {
            if('form' === 'form' && is_array($filter_loading_to)) {
                foreach($filter_loading_to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[loadingTo]'] = $filter_loading_to;
            }
        }
        // query params
        if ($filter_carrier !== null) {
            if('form' === 'form' && is_array($filter_carrier)) {
                foreach($filter_carrier as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[carrier]'] = $filter_carrier;
            }
        }
        // query params
        if ($filter_consignor !== null) {
            if('form' === 'form' && is_array($filter_consignor)) {
                foreach($filter_consignor as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[consignor]'] = $filter_consignor;
            }
        }
        // query params
        if ($filter_branch_id !== null) {
            if('form' === 'form' && is_array($filter_branch_id)) {
                foreach($filter_branch_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[branchId]'] = $filter_branch_id;
            }
        }
        // query params
        if ($filter_consignor_parent !== null) {
            if('form' === 'form' && is_array($filter_consignor_parent)) {
                foreach($filter_consignor_parent as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[consignorParent]'] = $filter_consignor_parent;
            }
        }
        // query params
        if ($filter_archive_status !== null) {
            if('form' === 'form' && is_array($filter_archive_status)) {
                foreach($filter_archive_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[archiveStatus]'] = $filter_archive_status;
            }
        }
        // query params
        if ($filter_driver !== null) {
            if('form' === 'form' && is_array($filter_driver)) {
                foreach($filter_driver as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[driver]'] = $filter_driver;
            }
        }
        // query params
        if ($filter_driver_name !== null) {
            if('form' === 'form' && is_array($filter_driver_name)) {
                foreach($filter_driver_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[driverName]'] = $filter_driver_name;
            }
        }
        // query params
        if ($filter_max_end_time !== null) {
            if('form' === 'form' && is_array($filter_max_end_time)) {
                foreach($filter_max_end_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[maxEndTime]'] = $filter_max_end_time;
            }
        }
        // query params
        if ($filter_tracking_number !== null) {
            if('form' === 'form' && is_array($filter_tracking_number)) {
                foreach($filter_tracking_number as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[trackingNumber]'] = $filter_tracking_number;
            }
        }
        // query params
        if ($filter_document_originals_status !== null) {
            if('form' === 'form' && is_array($filter_document_originals_status)) {
                foreach($filter_document_originals_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[documentOriginalsStatus]'] = $filter_document_originals_status;
            }
        }
        // query params
        if ($filter_has_carrier !== null) {
            if('form' === 'form' && is_array($filter_has_carrier)) {
                foreach($filter_has_carrier as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[hasCarrier]'] = $filter_has_carrier;
            }
        }
        // query params
        if ($filter_expeditor_order_refuse_type !== null) {
            if('form' === 'form' && is_array($filter_expeditor_order_refuse_type)) {
                foreach($filter_expeditor_order_refuse_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[expeditorOrderRefuseType][]'] = $filter_expeditor_order_refuse_type;
            }
        }
        // query params
        if ($filter_driver_status !== null) {
            if('form' === 'form' && is_array($filter_driver_status)) {
                foreach($filter_driver_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[driverStatus]'] = $filter_driver_status;
            }
        }
        // query params
        if ($filter_patch_status !== null) {
            if('form' === 'form' && is_array($filter_patch_status)) {
                foreach($filter_patch_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[patchStatus][]'] = $filter_patch_status;
            }
        }
        // query params
        if ($filter_document_package_status !== null) {
            if('form' === 'form' && is_array($filter_document_package_status)) {
                foreach($filter_document_package_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[documentPackageStatus][]'] = $filter_document_package_status;
            }
        }
        // query params
        if ($filter_carrier_paid_status !== null) {
            if('form' === 'form' && is_array($filter_carrier_paid_status)) {
                foreach($filter_carrier_paid_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[carrierPaidStatus]'] = $filter_carrier_paid_status;
            }
        }
        // query params
        if ($filter_sign_status !== null) {
            if('form' === 'form' && is_array($filter_sign_status)) {
                foreach($filter_sign_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[signStatus][]'] = $filter_sign_status;
            }
        }
        // query params
        if ($filter_consignor_curator !== null) {
            if('form' === 'form' && is_array($filter_consignor_curator)) {
                foreach($filter_consignor_curator as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[consignorCurator]'] = $filter_consignor_curator;
            }
        }
        // query params
        if ($filter_has_expeditor_offers !== null) {
            if('form' === 'form' && is_array($filter_has_expeditor_offers)) {
                foreach($filter_has_expeditor_offers as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[hasExpeditorOffers]'] = $filter_has_expeditor_offers;
            }
        }
        // query params
        if ($filter_expeditor_price_type !== null) {
            if('form' === 'form' && is_array($filter_expeditor_price_type)) {
                foreach($filter_expeditor_price_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[expeditorPriceType]'] = $filter_expeditor_price_type;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($per_page !== null) {
            if('form' === 'form' && is_array($per_page)) {
                foreach($per_page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['perPage'] = $per_page;
            }
        }

        // header params
        if ($x_modify_from_event !== null) {
            $headerParams['X-Modify-From-Event'] = ObjectSerializer::toHeaderValue($x_modify_from_event);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
