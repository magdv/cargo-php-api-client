<?php
/**
 * OrderEditApi
 * PHP version 7.2
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\CargoApi;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use MagDv\Cargomart\ApiException;
use MagDv\Cargomart\Configuration;
use MagDv\Cargomart\DebugPlugin;
use MagDv\Cargomart\HeaderSelector;
use MagDv\Cargomart\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * OrderEditApi Class Doc Comment
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderEditApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://cargomart.ru');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2OrderOrderIdClientAccessDelete
     *
     * Удалить список партнеров из исключенных.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\HashListRequest $hash_list_request hash_list_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2OrderOrderIdClientAccessDelete($order_id, $hash_list_request)
    {
        $this->apiV2OrderOrderIdClientAccessDeleteWithHttpInfo($order_id, $hash_list_request);
    }

    /**
     * Operation apiV2OrderOrderIdClientAccessDeleteWithHttpInfo
     *
     * Удалить список партнеров из исключенных.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\HashListRequest $hash_list_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdClientAccessDeleteWithHttpInfo($order_id, $hash_list_request)
    {
        $request = $this->apiV2OrderOrderIdClientAccessDeleteRequest($order_id, $hash_list_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdClientAccessDeleteAsync
     *
     * Удалить список партнеров из исключенных.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\HashListRequest $hash_list_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdClientAccessDeleteAsync($order_id, $hash_list_request)
    {
        return $this->apiV2OrderOrderIdClientAccessDeleteAsyncWithHttpInfo($order_id, $hash_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdClientAccessDeleteAsyncWithHttpInfo
     *
     * Удалить список партнеров из исключенных.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\HashListRequest $hash_list_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdClientAccessDeleteAsyncWithHttpInfo($order_id, $hash_list_request)
    {
        $returnType = '';
        $request = $this->apiV2OrderOrderIdClientAccessDeleteRequest($order_id, $hash_list_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdClientAccessDelete'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\HashListRequest $hash_list_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdClientAccessDeleteRequest($order_id, $hash_list_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdClientAccessDelete'
            );
        }
        // verify the required parameter 'hash_list_request' is set
        if ($hash_list_request === null || (is_array($hash_list_request) && count($hash_list_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hash_list_request when calling apiV2OrderOrderIdClientAccessDelete'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/client-access';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($hash_list_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($hash_list_request));
            } else {
                $httpBody = $hash_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdClientAccessGet
     *
     * Получение списка исключеных партнеров.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderClientAccessListResponse
     */
    public function apiV2OrderOrderIdClientAccessGet($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdClientAccessGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdClientAccessGetWithHttpInfo
     *
     * Получение списка исключеных партнеров.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderClientAccessListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdClientAccessGetWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdClientAccessGetRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderClientAccessListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderClientAccessListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderClientAccessListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderClientAccessListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdClientAccessGetAsync
     *
     * Получение списка исключеных партнеров.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdClientAccessGetAsync($order_id)
    {
        return $this->apiV2OrderOrderIdClientAccessGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdClientAccessGetAsyncWithHttpInfo
     *
     * Получение списка исключеных партнеров.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdClientAccessGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderClientAccessListResponse';
        $request = $this->apiV2OrderOrderIdClientAccessGetRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdClientAccessGet'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdClientAccessGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdClientAccessGet'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/client-access';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdClientAccessPatch
     *
     * Отправить список партнеров на исключение.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\HashListRequest $hash_list_request hash_list_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2OrderOrderIdClientAccessPatch($order_id, $hash_list_request)
    {
        $this->apiV2OrderOrderIdClientAccessPatchWithHttpInfo($order_id, $hash_list_request);
    }

    /**
     * Operation apiV2OrderOrderIdClientAccessPatchWithHttpInfo
     *
     * Отправить список партнеров на исключение.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\HashListRequest $hash_list_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdClientAccessPatchWithHttpInfo($order_id, $hash_list_request)
    {
        $request = $this->apiV2OrderOrderIdClientAccessPatchRequest($order_id, $hash_list_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdClientAccessPatchAsync
     *
     * Отправить список партнеров на исключение.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\HashListRequest $hash_list_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdClientAccessPatchAsync($order_id, $hash_list_request)
    {
        return $this->apiV2OrderOrderIdClientAccessPatchAsyncWithHttpInfo($order_id, $hash_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdClientAccessPatchAsyncWithHttpInfo
     *
     * Отправить список партнеров на исключение.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\HashListRequest $hash_list_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdClientAccessPatchAsyncWithHttpInfo($order_id, $hash_list_request)
    {
        $returnType = '';
        $request = $this->apiV2OrderOrderIdClientAccessPatchRequest($order_id, $hash_list_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdClientAccessPatch'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\HashListRequest $hash_list_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdClientAccessPatchRequest($order_id, $hash_list_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdClientAccessPatch'
            );
        }
        // verify the required parameter 'hash_list_request' is set
        if ($hash_list_request === null || (is_array($hash_list_request) && count($hash_list_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hash_list_request when calling apiV2OrderOrderIdClientAccessPatch'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/client-access';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($hash_list_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($hash_list_request));
            } else {
                $httpBody = $hash_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PATCH', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdClonePost
     *
     * Создание нового заказа из шаблона или на основании
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderEditResponse
     */
    public function apiV2OrderOrderIdClonePost($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdClonePostWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdClonePostWithHttpInfo
     *
     * Создание нового заказа из шаблона или на основании
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderEditResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdClonePostWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdClonePostRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderEditResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderEditResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderEditResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderEditResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdClonePostAsync
     *
     * Создание нового заказа из шаблона или на основании
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdClonePostAsync($order_id)
    {
        return $this->apiV2OrderOrderIdClonePostAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdClonePostAsyncWithHttpInfo
     *
     * Создание нового заказа из шаблона или на основании
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdClonePostAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderEditResponse';
        $request = $this->apiV2OrderOrderIdClonePostRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdClonePost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdClonePostRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdClonePost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/clone';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdContactDelete
     *
     * Список контактов на удаление из заказа.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\IdListRequest $id_list_request id_list_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2OrderOrderIdContactDelete($order_id, $id_list_request)
    {
        $this->apiV2OrderOrderIdContactDeleteWithHttpInfo($order_id, $id_list_request);
    }

    /**
     * Operation apiV2OrderOrderIdContactDeleteWithHttpInfo
     *
     * Список контактов на удаление из заказа.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\IdListRequest $id_list_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdContactDeleteWithHttpInfo($order_id, $id_list_request)
    {
        $request = $this->apiV2OrderOrderIdContactDeleteRequest($order_id, $id_list_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdContactDeleteAsync
     *
     * Список контактов на удаление из заказа.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\IdListRequest $id_list_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdContactDeleteAsync($order_id, $id_list_request)
    {
        return $this->apiV2OrderOrderIdContactDeleteAsyncWithHttpInfo($order_id, $id_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdContactDeleteAsyncWithHttpInfo
     *
     * Список контактов на удаление из заказа.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\IdListRequest $id_list_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdContactDeleteAsyncWithHttpInfo($order_id, $id_list_request)
    {
        $returnType = '';
        $request = $this->apiV2OrderOrderIdContactDeleteRequest($order_id, $id_list_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdContactDelete'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\IdListRequest $id_list_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdContactDeleteRequest($order_id, $id_list_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdContactDelete'
            );
        }
        // verify the required parameter 'id_list_request' is set
        if ($id_list_request === null || (is_array($id_list_request) && count($id_list_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_list_request when calling apiV2OrderOrderIdContactDelete'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/contact';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($id_list_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($id_list_request));
            } else {
                $httpBody = $id_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdContactGet
     *
     * Получение списка контактов.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderContactListResponse
     */
    public function apiV2OrderOrderIdContactGet($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdContactGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdContactGetWithHttpInfo
     *
     * Получение списка контактов.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderContactListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdContactGetWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdContactGetRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderContactListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderContactListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderContactListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderContactListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdContactGetAsync
     *
     * Получение списка контактов.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdContactGetAsync($order_id)
    {
        return $this->apiV2OrderOrderIdContactGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdContactGetAsyncWithHttpInfo
     *
     * Получение списка контактов.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdContactGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderContactListResponse';
        $request = $this->apiV2OrderOrderIdContactGetRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdContactGet'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdContactGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdContactGet'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/contact';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdContactPatch
     *
     * Отправить список контактов для добавления.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\IdListRequest $id_list_request id_list_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2OrderOrderIdContactPatch($order_id, $id_list_request)
    {
        $this->apiV2OrderOrderIdContactPatchWithHttpInfo($order_id, $id_list_request);
    }

    /**
     * Operation apiV2OrderOrderIdContactPatchWithHttpInfo
     *
     * Отправить список контактов для добавления.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\IdListRequest $id_list_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdContactPatchWithHttpInfo($order_id, $id_list_request)
    {
        $request = $this->apiV2OrderOrderIdContactPatchRequest($order_id, $id_list_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdContactPatchAsync
     *
     * Отправить список контактов для добавления.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\IdListRequest $id_list_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdContactPatchAsync($order_id, $id_list_request)
    {
        return $this->apiV2OrderOrderIdContactPatchAsyncWithHttpInfo($order_id, $id_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdContactPatchAsyncWithHttpInfo
     *
     * Отправить список контактов для добавления.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\IdListRequest $id_list_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdContactPatchAsyncWithHttpInfo($order_id, $id_list_request)
    {
        $returnType = '';
        $request = $this->apiV2OrderOrderIdContactPatchRequest($order_id, $id_list_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdContactPatch'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\IdListRequest $id_list_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdContactPatchRequest($order_id, $id_list_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdContactPatch'
            );
        }
        // verify the required parameter 'id_list_request' is set
        if ($id_list_request === null || (is_array($id_list_request) && count($id_list_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_list_request when calling apiV2OrderOrderIdContactPatch'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/contact';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($id_list_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($id_list_request));
            } else {
                $httpBody = $id_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PATCH', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdDelete
     *
     * Удаление заказа
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2OrderOrderIdDelete($order_id)
    {
        $this->apiV2OrderOrderIdDeleteWithHttpInfo($order_id);
    }

    /**
     * Operation apiV2OrderOrderIdDeleteWithHttpInfo
     *
     * Удаление заказа
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdDeleteWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdDeleteRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdDeleteAsync
     *
     * Удаление заказа
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdDeleteAsync($order_id)
    {
        return $this->apiV2OrderOrderIdDeleteAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdDeleteAsyncWithHttpInfo
     *
     * Удаление заказа
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdDeleteAsyncWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->apiV2OrderOrderIdDeleteRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdDelete'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdDeleteRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdDelete'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdEditGet
     *
     * Получение данных для редактирования заказа
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderEditResponse
     */
    public function apiV2OrderOrderIdEditGet($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdEditGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdEditGetWithHttpInfo
     *
     * Получение данных для редактирования заказа
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderEditResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdEditGetWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdEditGetRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderEditResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderEditResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderEditResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderEditResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdEditGetAsync
     *
     * Получение данных для редактирования заказа
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdEditGetAsync($order_id)
    {
        return $this->apiV2OrderOrderIdEditGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdEditGetAsyncWithHttpInfo
     *
     * Получение данных для редактирования заказа
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdEditGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderEditResponse';
        $request = $this->apiV2OrderOrderIdEditGetRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdEditGet'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdEditGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdEditGet'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/edit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdModerationApprovePost
     *
     * Опубликовать заказ под ГП.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderEditResponse
     */
    public function apiV2OrderOrderIdModerationApprovePost($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdModerationApprovePostWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdModerationApprovePostWithHttpInfo
     *
     * Опубликовать заказ под ГП.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderEditResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdModerationApprovePostWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdModerationApprovePostRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderEditResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderEditResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderEditResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderEditResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdModerationApprovePostAsync
     *
     * Опубликовать заказ под ГП.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdModerationApprovePostAsync($order_id)
    {
        return $this->apiV2OrderOrderIdModerationApprovePostAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdModerationApprovePostAsyncWithHttpInfo
     *
     * Опубликовать заказ под ГП.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdModerationApprovePostAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderEditResponse';
        $request = $this->apiV2OrderOrderIdModerationApprovePostRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdModerationApprovePost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdModerationApprovePostRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdModerationApprovePost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/moderation-approve';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdModerationDelete
     *
     * Забрать заказ на модерации ГП.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderEditResponse
     */
    public function apiV2OrderOrderIdModerationDelete($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdModerationDeleteWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdModerationDeleteWithHttpInfo
     *
     * Забрать заказ на модерации ГП.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderEditResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdModerationDeleteWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdModerationDeleteRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderEditResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderEditResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderEditResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderEditResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdModerationDeleteAsync
     *
     * Забрать заказ на модерации ГП.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdModerationDeleteAsync($order_id)
    {
        return $this->apiV2OrderOrderIdModerationDeleteAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdModerationDeleteAsyncWithHttpInfo
     *
     * Забрать заказ на модерации ГП.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdModerationDeleteAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderEditResponse';
        $request = $this->apiV2OrderOrderIdModerationDeleteRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdModerationDelete'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdModerationDeleteRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdModerationDelete'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/moderation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdModerationPost
     *
     * Отправка заказа на модерацию ГП.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPublishRequest $order_publish_request order_publish_request (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderEditResponse
     */
    public function apiV2OrderOrderIdModerationPost($order_id, $order_publish_request = null)
    {
        list($response) = $this->apiV2OrderOrderIdModerationPostWithHttpInfo($order_id, $order_publish_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdModerationPostWithHttpInfo
     *
     * Отправка заказа на модерацию ГП.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPublishRequest $order_publish_request (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderEditResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdModerationPostWithHttpInfo($order_id, $order_publish_request = null)
    {
        $request = $this->apiV2OrderOrderIdModerationPostRequest($order_id, $order_publish_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderEditResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderEditResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderEditResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderEditResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdModerationPostAsync
     *
     * Отправка заказа на модерацию ГП.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPublishRequest $order_publish_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdModerationPostAsync($order_id, $order_publish_request = null)
    {
        return $this->apiV2OrderOrderIdModerationPostAsyncWithHttpInfo($order_id, $order_publish_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdModerationPostAsyncWithHttpInfo
     *
     * Отправка заказа на модерацию ГП.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPublishRequest $order_publish_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdModerationPostAsyncWithHttpInfo($order_id, $order_publish_request = null)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderEditResponse';
        $request = $this->apiV2OrderOrderIdModerationPostRequest($order_id, $order_publish_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdModerationPost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPublishRequest $order_publish_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdModerationPostRequest($order_id, $order_publish_request = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdModerationPost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/moderation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_publish_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_publish_request));
            } else {
                $httpBody = $order_publish_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdModerationRejectPost
     *
     * Отклонение модератором заказа.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\MessageRequest $message_request message_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderCardResponse
     */
    public function apiV2OrderOrderIdModerationRejectPost($order_id, $message_request)
    {
        list($response) = $this->apiV2OrderOrderIdModerationRejectPostWithHttpInfo($order_id, $message_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdModerationRejectPostWithHttpInfo
     *
     * Отклонение модератором заказа.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\MessageRequest $message_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderCardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdModerationRejectPostWithHttpInfo($order_id, $message_request)
    {
        $request = $this->apiV2OrderOrderIdModerationRejectPostRequest($order_id, $message_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderCardResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderCardResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdModerationRejectPostAsync
     *
     * Отклонение модератором заказа.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\MessageRequest $message_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdModerationRejectPostAsync($order_id, $message_request)
    {
        return $this->apiV2OrderOrderIdModerationRejectPostAsyncWithHttpInfo($order_id, $message_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdModerationRejectPostAsyncWithHttpInfo
     *
     * Отклонение модератором заказа.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\MessageRequest $message_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdModerationRejectPostAsyncWithHttpInfo($order_id, $message_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
        $request = $this->apiV2OrderOrderIdModerationRejectPostRequest($order_id, $message_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdModerationRejectPost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\MessageRequest $message_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdModerationRejectPostRequest($order_id, $message_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdModerationRejectPost'
            );
        }
        // verify the required parameter 'message_request' is set
        if ($message_request === null || (is_array($message_request) && count($message_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_request when calling apiV2OrderOrderIdModerationRejectPost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/moderation-reject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($message_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($message_request));
            } else {
                $httpBody = $message_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdPatch
     *
     * Редактирование информации о заказе
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderEditRequest $order_edit_request order_edit_request (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderEditResponse
     */
    public function apiV2OrderOrderIdPatch($order_id, $order_edit_request = null)
    {
        list($response) = $this->apiV2OrderOrderIdPatchWithHttpInfo($order_id, $order_edit_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdPatchWithHttpInfo
     *
     * Редактирование информации о заказе
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderEditRequest $order_edit_request (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderEditResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdPatchWithHttpInfo($order_id, $order_edit_request = null)
    {
        $request = $this->apiV2OrderOrderIdPatchRequest($order_id, $order_edit_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderEditResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderEditResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderEditResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderEditResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdPatchAsync
     *
     * Редактирование информации о заказе
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderEditRequest $order_edit_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdPatchAsync($order_id, $order_edit_request = null)
    {
        return $this->apiV2OrderOrderIdPatchAsyncWithHttpInfo($order_id, $order_edit_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdPatchAsyncWithHttpInfo
     *
     * Редактирование информации о заказе
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderEditRequest $order_edit_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdPatchAsyncWithHttpInfo($order_id, $order_edit_request = null)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderEditResponse';
        $request = $this->apiV2OrderOrderIdPatchRequest($order_id, $order_edit_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdPatch'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderEditRequest $order_edit_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdPatchRequest($order_id, $order_edit_request = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdPatch'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_edit_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_edit_request));
            } else {
                $httpBody = $order_edit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PATCH', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdPointPointIdDelete
     *
     * Удаление маршрутной точки
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $point_id Идентификатор маршрутной точки. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2OrderOrderIdPointPointIdDelete($order_id, $point_id)
    {
        $this->apiV2OrderOrderIdPointPointIdDeleteWithHttpInfo($order_id, $point_id);
    }

    /**
     * Operation apiV2OrderOrderIdPointPointIdDeleteWithHttpInfo
     *
     * Удаление маршрутной точки
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $point_id Идентификатор маршрутной точки. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdPointPointIdDeleteWithHttpInfo($order_id, $point_id)
    {
        $request = $this->apiV2OrderOrderIdPointPointIdDeleteRequest($order_id, $point_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdPointPointIdDeleteAsync
     *
     * Удаление маршрутной точки
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $point_id Идентификатор маршрутной точки. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdPointPointIdDeleteAsync($order_id, $point_id)
    {
        return $this->apiV2OrderOrderIdPointPointIdDeleteAsyncWithHttpInfo($order_id, $point_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdPointPointIdDeleteAsyncWithHttpInfo
     *
     * Удаление маршрутной точки
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $point_id Идентификатор маршрутной точки. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdPointPointIdDeleteAsyncWithHttpInfo($order_id, $point_id)
    {
        $returnType = '';
        $request = $this->apiV2OrderOrderIdPointPointIdDeleteRequest($order_id, $point_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdPointPointIdDelete'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $point_id Идентификатор маршрутной точки. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdPointPointIdDeleteRequest($order_id, $point_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdPointPointIdDelete'
            );
        }
        // verify the required parameter 'point_id' is set
        if ($point_id === null || (is_array($point_id) && count($point_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $point_id when calling apiV2OrderOrderIdPointPointIdDelete'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/point/{pointId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($point_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pointId' . '}',
                ObjectSerializer::toPathValue($point_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('DELETE', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdPointPointIdGet
     *
     * Получение информации по кокретной точке
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $point_id Идентификатор маршрутной точки. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderPointEditResponse
     */
    public function apiV2OrderOrderIdPointPointIdGet($order_id, $point_id)
    {
        list($response) = $this->apiV2OrderOrderIdPointPointIdGetWithHttpInfo($order_id, $point_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdPointPointIdGetWithHttpInfo
     *
     * Получение информации по кокретной точке
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $point_id Идентификатор маршрутной точки. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderPointEditResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdPointPointIdGetWithHttpInfo($order_id, $point_id)
    {
        $request = $this->apiV2OrderOrderIdPointPointIdGetRequest($order_id, $point_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderPointEditResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderPointEditResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderPointEditResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderPointEditResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdPointPointIdGetAsync
     *
     * Получение информации по кокретной точке
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $point_id Идентификатор маршрутной точки. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdPointPointIdGetAsync($order_id, $point_id)
    {
        return $this->apiV2OrderOrderIdPointPointIdGetAsyncWithHttpInfo($order_id, $point_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdPointPointIdGetAsyncWithHttpInfo
     *
     * Получение информации по кокретной точке
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $point_id Идентификатор маршрутной точки. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdPointPointIdGetAsyncWithHttpInfo($order_id, $point_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderPointEditResponse';
        $request = $this->apiV2OrderOrderIdPointPointIdGetRequest($order_id, $point_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdPointPointIdGet'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $point_id Идентификатор маршрутной точки. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdPointPointIdGetRequest($order_id, $point_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdPointPointIdGet'
            );
        }
        // verify the required parameter 'point_id' is set
        if ($point_id === null || (is_array($point_id) && count($point_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $point_id when calling apiV2OrderOrderIdPointPointIdGet'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/point/{pointId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($point_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pointId' . '}',
                ObjectSerializer::toPathValue($point_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdPointPointIdPatch
     *
     * Редактирование маршрутной точки
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $point_id Идентификатор маршрутной точки. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPointEditRequest $order_point_edit_request order_point_edit_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderPointEditResponse
     */
    public function apiV2OrderOrderIdPointPointIdPatch($order_id, $point_id, $order_point_edit_request)
    {
        list($response) = $this->apiV2OrderOrderIdPointPointIdPatchWithHttpInfo($order_id, $point_id, $order_point_edit_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdPointPointIdPatchWithHttpInfo
     *
     * Редактирование маршрутной точки
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $point_id Идентификатор маршрутной точки. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPointEditRequest $order_point_edit_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderPointEditResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdPointPointIdPatchWithHttpInfo($order_id, $point_id, $order_point_edit_request)
    {
        $request = $this->apiV2OrderOrderIdPointPointIdPatchRequest($order_id, $point_id, $order_point_edit_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderPointEditResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderPointEditResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderPointEditResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderPointEditResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdPointPointIdPatchAsync
     *
     * Редактирование маршрутной точки
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $point_id Идентификатор маршрутной точки. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPointEditRequest $order_point_edit_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdPointPointIdPatchAsync($order_id, $point_id, $order_point_edit_request)
    {
        return $this->apiV2OrderOrderIdPointPointIdPatchAsyncWithHttpInfo($order_id, $point_id, $order_point_edit_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdPointPointIdPatchAsyncWithHttpInfo
     *
     * Редактирование маршрутной точки
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $point_id Идентификатор маршрутной точки. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPointEditRequest $order_point_edit_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdPointPointIdPatchAsyncWithHttpInfo($order_id, $point_id, $order_point_edit_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderPointEditResponse';
        $request = $this->apiV2OrderOrderIdPointPointIdPatchRequest($order_id, $point_id, $order_point_edit_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdPointPointIdPatch'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  int $point_id Идентификатор маршрутной точки. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPointEditRequest $order_point_edit_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdPointPointIdPatchRequest($order_id, $point_id, $order_point_edit_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdPointPointIdPatch'
            );
        }
        // verify the required parameter 'point_id' is set
        if ($point_id === null || (is_array($point_id) && count($point_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $point_id when calling apiV2OrderOrderIdPointPointIdPatch'
            );
        }
        // verify the required parameter 'order_point_edit_request' is set
        if ($order_point_edit_request === null || (is_array($order_point_edit_request) && count($order_point_edit_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_point_edit_request when calling apiV2OrderOrderIdPointPointIdPatch'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/point/{pointId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($point_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pointId' . '}',
                ObjectSerializer::toPathValue($point_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_point_edit_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_point_edit_request));
            } else {
                $httpBody = $order_point_edit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PATCH', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdPointPost
     *
     * Создание новой маршрутной точки
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPointCreateRequest $order_point_create_request order_point_create_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderPointEditResponse
     */
    public function apiV2OrderOrderIdPointPost($order_id, $order_point_create_request)
    {
        list($response) = $this->apiV2OrderOrderIdPointPostWithHttpInfo($order_id, $order_point_create_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdPointPostWithHttpInfo
     *
     * Создание новой маршрутной точки
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPointCreateRequest $order_point_create_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderPointEditResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdPointPostWithHttpInfo($order_id, $order_point_create_request)
    {
        $request = $this->apiV2OrderOrderIdPointPostRequest($order_id, $order_point_create_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderPointEditResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderPointEditResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderPointEditResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderPointEditResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdPointPostAsync
     *
     * Создание новой маршрутной точки
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPointCreateRequest $order_point_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdPointPostAsync($order_id, $order_point_create_request)
    {
        return $this->apiV2OrderOrderIdPointPostAsyncWithHttpInfo($order_id, $order_point_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdPointPostAsyncWithHttpInfo
     *
     * Создание новой маршрутной точки
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPointCreateRequest $order_point_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdPointPostAsyncWithHttpInfo($order_id, $order_point_create_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderPointEditResponse';
        $request = $this->apiV2OrderOrderIdPointPostRequest($order_id, $order_point_create_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdPointPost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPointCreateRequest $order_point_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdPointPostRequest($order_id, $order_point_create_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdPointPost'
            );
        }
        // verify the required parameter 'order_point_create_request' is set
        if ($order_point_create_request === null || (is_array($order_point_create_request) && count($order_point_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_point_create_request when calling apiV2OrderOrderIdPointPost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/point';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_point_create_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_point_create_request));
            } else {
                $httpBody = $order_point_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdPointSwapPost
     *
     * Изменение последовательности точек.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPointEditSwapRequest $order_point_edit_swap_request order_point_edit_swap_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2OrderOrderIdPointSwapPost($order_id, $order_point_edit_swap_request)
    {
        $this->apiV2OrderOrderIdPointSwapPostWithHttpInfo($order_id, $order_point_edit_swap_request);
    }

    /**
     * Operation apiV2OrderOrderIdPointSwapPostWithHttpInfo
     *
     * Изменение последовательности точек.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPointEditSwapRequest $order_point_edit_swap_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdPointSwapPostWithHttpInfo($order_id, $order_point_edit_swap_request)
    {
        $request = $this->apiV2OrderOrderIdPointSwapPostRequest($order_id, $order_point_edit_swap_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdPointSwapPostAsync
     *
     * Изменение последовательности точек.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPointEditSwapRequest $order_point_edit_swap_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdPointSwapPostAsync($order_id, $order_point_edit_swap_request)
    {
        return $this->apiV2OrderOrderIdPointSwapPostAsyncWithHttpInfo($order_id, $order_point_edit_swap_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdPointSwapPostAsyncWithHttpInfo
     *
     * Изменение последовательности точек.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPointEditSwapRequest $order_point_edit_swap_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdPointSwapPostAsyncWithHttpInfo($order_id, $order_point_edit_swap_request)
    {
        $returnType = '';
        $request = $this->apiV2OrderOrderIdPointSwapPostRequest($order_id, $order_point_edit_swap_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdPointSwapPost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPointEditSwapRequest $order_point_edit_swap_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdPointSwapPostRequest($order_id, $order_point_edit_swap_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdPointSwapPost'
            );
        }
        // verify the required parameter 'order_point_edit_swap_request' is set
        if ($order_point_edit_swap_request === null || (is_array($order_point_edit_swap_request) && count($order_point_edit_swap_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_point_edit_swap_request when calling apiV2OrderOrderIdPointSwapPost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/point/swap';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_point_edit_swap_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_point_edit_swap_request));
            } else {
                $httpBody = $order_point_edit_swap_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdPublishPost
     *
     * Публикация заказа
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPublishRequest $order_publish_request order_publish_request (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderCardResponse|\MagDv\Cargomart\Dto\OrderEditResponse
     */
    public function apiV2OrderOrderIdPublishPost($order_id, $order_publish_request = null)
    {
        list($response) = $this->apiV2OrderOrderIdPublishPostWithHttpInfo($order_id, $order_publish_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdPublishPostWithHttpInfo
     *
     * Публикация заказа
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPublishRequest $order_publish_request (optional)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderCardResponse|\MagDv\Cargomart\Dto\OrderEditResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdPublishPostWithHttpInfo($order_id, $order_publish_request = null)
    {
        $request = $this->apiV2OrderOrderIdPublishPostRequest($order_id, $order_publish_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderCardResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderCardResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MagDv\Cargomart\Dto\OrderEditResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderEditResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderEditResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdPublishPostAsync
     *
     * Публикация заказа
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPublishRequest $order_publish_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdPublishPostAsync($order_id, $order_publish_request = null)
    {
        return $this->apiV2OrderOrderIdPublishPostAsyncWithHttpInfo($order_id, $order_publish_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdPublishPostAsyncWithHttpInfo
     *
     * Публикация заказа
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPublishRequest $order_publish_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdPublishPostAsyncWithHttpInfo($order_id, $order_publish_request = null)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderCardResponse';
        $request = $this->apiV2OrderOrderIdPublishPostRequest($order_id, $order_publish_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdPublishPost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderPublishRequest $order_publish_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdPublishPostRequest($order_id, $order_publish_request = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdPublishPost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/publish';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_publish_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_publish_request));
            } else {
                $httpBody = $order_publish_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdSavePost
     *
     * Перевод заказа из времменого в черновики.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderEditResponse
     */
    public function apiV2OrderOrderIdSavePost($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdSavePostWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdSavePostWithHttpInfo
     *
     * Перевод заказа из времменого в черновики.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderEditResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdSavePostWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdSavePostRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderEditResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderEditResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderEditResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderEditResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdSavePostAsync
     *
     * Перевод заказа из времменого в черновики.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdSavePostAsync($order_id)
    {
        return $this->apiV2OrderOrderIdSavePostAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdSavePostAsyncWithHttpInfo
     *
     * Перевод заказа из времменого в черновики.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdSavePostAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderEditResponse';
        $request = $this->apiV2OrderOrderIdSavePostRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdSavePost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdSavePostRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdSavePost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/save';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdTagGet
     *
     * Получение списка тэгов заказа.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderTagListResponse
     */
    public function apiV2OrderOrderIdTagGet($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdTagGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdTagGetWithHttpInfo
     *
     * Получение списка тэгов заказа.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderTagListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdTagGetWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdTagGetRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderTagListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderTagListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderTagListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderTagListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdTagGetAsync
     *
     * Получение списка тэгов заказа.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdTagGetAsync($order_id)
    {
        return $this->apiV2OrderOrderIdTagGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdTagGetAsyncWithHttpInfo
     *
     * Получение списка тэгов заказа.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdTagGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderTagListResponse';
        $request = $this->apiV2OrderOrderIdTagGetRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdTagGet'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdTagGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdTagGet'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/tag';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdTagPut
     *
     * Запись списка тэгов.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderEditTagRequest $order_edit_tag_request order_edit_tag_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderTagListResponse
     */
    public function apiV2OrderOrderIdTagPut($order_id, $order_edit_tag_request)
    {
        list($response) = $this->apiV2OrderOrderIdTagPutWithHttpInfo($order_id, $order_edit_tag_request);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdTagPutWithHttpInfo
     *
     * Запись списка тэгов.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderEditTagRequest $order_edit_tag_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderTagListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdTagPutWithHttpInfo($order_id, $order_edit_tag_request)
    {
        $request = $this->apiV2OrderOrderIdTagPutRequest($order_id, $order_edit_tag_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderTagListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderTagListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderTagListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderTagListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdTagPutAsync
     *
     * Запись списка тэгов.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderEditTagRequest $order_edit_tag_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdTagPutAsync($order_id, $order_edit_tag_request)
    {
        return $this->apiV2OrderOrderIdTagPutAsyncWithHttpInfo($order_id, $order_edit_tag_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdTagPutAsyncWithHttpInfo
     *
     * Запись списка тэгов.
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderEditTagRequest $order_edit_tag_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdTagPutAsyncWithHttpInfo($order_id, $order_edit_tag_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderTagListResponse';
        $request = $this->apiV2OrderOrderIdTagPutRequest($order_id, $order_edit_tag_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdTagPut'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     * @param  \MagDv\Cargomart\Dto\OrderEditTagRequest $order_edit_tag_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdTagPutRequest($order_id, $order_edit_tag_request)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdTagPut'
            );
        }
        // verify the required parameter 'order_edit_tag_request' is set
        if ($order_edit_tag_request === null || (is_array($order_edit_tag_request) && count($order_edit_tag_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_edit_tag_request when calling apiV2OrderOrderIdTagPut'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/tag';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_edit_tag_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_edit_tag_request));
            } else {
                $httpBody = $order_edit_tag_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderOrderIdValidatePost
     *
     * Проверка валидности заказа
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderEditResponse
     */
    public function apiV2OrderOrderIdValidatePost($order_id)
    {
        list($response) = $this->apiV2OrderOrderIdValidatePostWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation apiV2OrderOrderIdValidatePostWithHttpInfo
     *
     * Проверка валидности заказа
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderEditResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderOrderIdValidatePostWithHttpInfo($order_id)
    {
        $request = $this->apiV2OrderOrderIdValidatePostRequest($order_id);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderEditResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderEditResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderEditResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderEditResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderOrderIdValidatePostAsync
     *
     * Проверка валидности заказа
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdValidatePostAsync($order_id)
    {
        return $this->apiV2OrderOrderIdValidatePostAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderOrderIdValidatePostAsyncWithHttpInfo
     *
     * Проверка валидности заказа
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderOrderIdValidatePostAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderEditResponse';
        $request = $this->apiV2OrderOrderIdValidatePostRequest($order_id);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderOrderIdValidatePost'
     *
     * @param  string $order_id Идентификатор шаблона или базового заказа. (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderOrderIdValidatePostRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling apiV2OrderOrderIdValidatePost'
            );
        }

        $resourcePath = '/api/v2/order/{orderId}/validate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }

    /**
     * Operation apiV2OrderPost
     *
     * Создание нового заказа
     *
     * @param  \MagDv\Cargomart\Dto\OrderCreateRequest $order_create_request order_create_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MagDv\Cargomart\Dto\OrderEditResponse
     */
    public function apiV2OrderPost($order_create_request)
    {
        list($response) = $this->apiV2OrderPostWithHttpInfo($order_create_request);
        return $response;
    }

    /**
     * Operation apiV2OrderPostWithHttpInfo
     *
     * Создание нового заказа
     *
     * @param  \MagDv\Cargomart\Dto\OrderCreateRequest $order_create_request (required)
     *
     * @throws \MagDv\Cargomart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MagDv\Cargomart\Dto\OrderEditResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2OrderPostWithHttpInfo($order_create_request)
    {
        $request = $this->apiV2OrderPostRequest($order_create_request);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    if ('\MagDv\Cargomart\Dto\OrderEditResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MagDv\Cargomart\Dto\OrderEditResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MagDv\Cargomart\Dto\OrderEditResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MagDv\Cargomart\Dto\OrderEditResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2OrderPostAsync
     *
     * Создание нового заказа
     *
     * @param  \MagDv\Cargomart\Dto\OrderCreateRequest $order_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderPostAsync($order_create_request)
    {
        return $this->apiV2OrderPostAsyncWithHttpInfo($order_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2OrderPostAsyncWithHttpInfo
     *
     * Создание нового заказа
     *
     * @param  \MagDv\Cargomart\Dto\OrderCreateRequest $order_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function apiV2OrderPostAsyncWithHttpInfo($order_create_request)
    {
        $returnType = '\MagDv\Cargomart\Dto\OrderEditResponse';
        $request = $this->apiV2OrderPostRequest($order_create_request);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2OrderPost'
     *
     * @param  \MagDv\Cargomart\Dto\OrderCreateRequest $order_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function apiV2OrderPostRequest($order_create_request)
    {
        // verify the required parameter 'order_create_request' is set
        if ($order_create_request === null || (is_array($order_create_request) && count($order_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_create_request when calling apiV2OrderPost'
            );
        }

        $resourcePath = '/api/v2/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($order_create_request)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($order_create_request));
            } else {
                $httpBody = $order_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('POST', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
