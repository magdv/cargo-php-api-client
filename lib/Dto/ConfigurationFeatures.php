<?php
/**
 * ConfigurationFeatures
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * ConfigurationFeatures Class Doc Comment
 *
 * @category Class
 * @description Доступная функциональность
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConfigurationFeatures implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConfigurationFeatures';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'consignor_expeditor_orders' => 'bool',
        'expeditor_carrier_documents' => 'bool',
        'expeditor_customer' => 'bool',
        'new_order_edit_form' => 'bool',
        'common_draft' => 'bool',
        'one_order_list' => 'bool',
        'order_downtime_claim' => 'bool',
        'order_filter_new' => 'bool',
        'order_roadmap' => 'bool',
        'price_prediction' => 'bool',
        'small_carrier' => 'bool',
        'web_socket' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'consignor_expeditor_orders' => null,
        'expeditor_carrier_documents' => null,
        'expeditor_customer' => null,
        'new_order_edit_form' => null,
        'common_draft' => null,
        'one_order_list' => null,
        'order_downtime_claim' => null,
        'order_filter_new' => null,
        'order_roadmap' => null,
        'price_prediction' => null,
        'small_carrier' => null,
        'web_socket' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'consignor_expeditor_orders' => false,
        'expeditor_carrier_documents' => false,
        'expeditor_customer' => false,
        'new_order_edit_form' => false,
        'common_draft' => false,
        'one_order_list' => false,
        'order_downtime_claim' => false,
        'order_filter_new' => false,
        'order_roadmap' => false,
        'price_prediction' => false,
        'small_carrier' => false,
        'web_socket' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'consignor_expeditor_orders' => 'consignorExpeditorOrders',
        'expeditor_carrier_documents' => 'expeditorCarrierDocuments',
        'expeditor_customer' => 'expeditorCustomer',
        'new_order_edit_form' => 'newOrderEditForm',
        'common_draft' => 'commonDraft',
        'one_order_list' => 'oneOrderList',
        'order_downtime_claim' => 'orderDowntimeClaim',
        'order_filter_new' => 'orderFilterNew',
        'order_roadmap' => 'orderRoadmap',
        'price_prediction' => 'pricePrediction',
        'small_carrier' => 'smallCarrier',
        'web_socket' => 'webSocket'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'consignor_expeditor_orders' => 'setConsignorExpeditorOrders',
        'expeditor_carrier_documents' => 'setExpeditorCarrierDocuments',
        'expeditor_customer' => 'setExpeditorCustomer',
        'new_order_edit_form' => 'setNewOrderEditForm',
        'common_draft' => 'setCommonDraft',
        'one_order_list' => 'setOneOrderList',
        'order_downtime_claim' => 'setOrderDowntimeClaim',
        'order_filter_new' => 'setOrderFilterNew',
        'order_roadmap' => 'setOrderRoadmap',
        'price_prediction' => 'setPricePrediction',
        'small_carrier' => 'setSmallCarrier',
        'web_socket' => 'setWebSocket'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'consignor_expeditor_orders' => 'getConsignorExpeditorOrders',
        'expeditor_carrier_documents' => 'getExpeditorCarrierDocuments',
        'expeditor_customer' => 'getExpeditorCustomer',
        'new_order_edit_form' => 'getNewOrderEditForm',
        'common_draft' => 'getCommonDraft',
        'one_order_list' => 'getOneOrderList',
        'order_downtime_claim' => 'getOrderDowntimeClaim',
        'order_filter_new' => 'getOrderFilterNew',
        'order_roadmap' => 'getOrderRoadmap',
        'price_prediction' => 'getPricePrediction',
        'small_carrier' => 'getSmallCarrier',
        'web_socket' => 'getWebSocket'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('consignor_expeditor_orders', $data ?? [], false);
        $this->setIfExists('expeditor_carrier_documents', $data ?? [], false);
        $this->setIfExists('expeditor_customer', $data ?? [], false);
        $this->setIfExists('new_order_edit_form', $data ?? [], false);
        $this->setIfExists('common_draft', $data ?? [], false);
        $this->setIfExists('one_order_list', $data ?? [], false);
        $this->setIfExists('order_downtime_claim', $data ?? [], false);
        $this->setIfExists('order_filter_new', $data ?? [], false);
        $this->setIfExists('order_roadmap', $data ?? [], false);
        $this->setIfExists('price_prediction', $data ?? [], false);
        $this->setIfExists('small_carrier', $data ?? [], false);
        $this->setIfExists('web_socket', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets consignor_expeditor_orders
     *
     * @return bool|null
     */
    public function getConsignorExpeditorOrders()
    {
        return $this->container['consignor_expeditor_orders'];
    }

    /**
     * Sets consignor_expeditor_orders
     *
     * @param bool|null $consignor_expeditor_orders Открывает раздел Перевозки заказчику
     *
     * @return self
     */
    public function setConsignorExpeditorOrders($consignor_expeditor_orders)
    {
        if (is_null($consignor_expeditor_orders)) {
            throw new \InvalidArgumentException('non-nullable consignor_expeditor_orders cannot be null');
        }
        $this->container['consignor_expeditor_orders'] = $consignor_expeditor_orders;

        return $this;
    }

    /**
     * Gets expeditor_carrier_documents
     *
     * @return bool|null
     */
    public function getExpeditorCarrierDocuments()
    {
        return $this->container['expeditor_carrier_documents'];
    }

    /**
     * Sets expeditor_carrier_documents
     *
     * @param bool|null $expeditor_carrier_documents Открывает возможность работать с закрывающими документами (сканы и оригиналы) перевозчику
     *
     * @return self
     */
    public function setExpeditorCarrierDocuments($expeditor_carrier_documents)
    {
        if (is_null($expeditor_carrier_documents)) {
            throw new \InvalidArgumentException('non-nullable expeditor_carrier_documents cannot be null');
        }
        $this->container['expeditor_carrier_documents'] = $expeditor_carrier_documents;

        return $this;
    }

    /**
     * Gets expeditor_customer
     *
     * @return bool|null
     */
    public function getExpeditorCustomer()
    {
        return $this->container['expeditor_customer'];
    }

    /**
     * Sets expeditor_customer
     *
     * @param bool|null $expeditor_customer Доступ к функционалу заказчика экспедитора
     *
     * @return self
     */
    public function setExpeditorCustomer($expeditor_customer)
    {
        if (is_null($expeditor_customer)) {
            throw new \InvalidArgumentException('non-nullable expeditor_customer cannot be null');
        }
        $this->container['expeditor_customer'] = $expeditor_customer;

        return $this;
    }

    /**
     * Gets new_order_edit_form
     *
     * @return bool|null
     */
    public function getNewOrderEditForm()
    {
        return $this->container['new_order_edit_form'];
    }

    /**
     * Sets new_order_edit_form
     *
     * @param bool|null $new_order_edit_form Использовать новую форму редактирования заказа
     *
     * @return self
     */
    public function setNewOrderEditForm($new_order_edit_form)
    {
        if (is_null($new_order_edit_form)) {
            throw new \InvalidArgumentException('non-nullable new_order_edit_form cannot be null');
        }
        $this->container['new_order_edit_form'] = $new_order_edit_form;

        return $this;
    }

    /**
     * Gets common_draft
     *
     * @return bool|null
     */
    public function getCommonDraft()
    {
        return $this->container['common_draft'];
    }

    /**
     * Sets common_draft
     *
     * @param bool|null $common_draft Использовать новую форму создания черновиков
     *
     * @return self
     */
    public function setCommonDraft($common_draft)
    {
        if (is_null($common_draft)) {
            throw new \InvalidArgumentException('non-nullable common_draft cannot be null');
        }
        $this->container['common_draft'] = $common_draft;

        return $this;
    }

    /**
     * Gets one_order_list
     *
     * @return bool|null
     */
    public function getOneOrderList()
    {
        return $this->container['one_order_list'];
    }

    /**
     * Sets one_order_list
     *
     * @param bool|null $one_order_list Использовать объединенный список заказов
     *
     * @return self
     */
    public function setOneOrderList($one_order_list)
    {
        if (is_null($one_order_list)) {
            throw new \InvalidArgumentException('non-nullable one_order_list cannot be null');
        }
        $this->container['one_order_list'] = $one_order_list;

        return $this;
    }

    /**
     * Gets order_downtime_claim
     *
     * @return bool|null
     */
    public function getOrderDowntimeClaim()
    {
        return $this->container['order_downtime_claim'];
    }

    /**
     * Sets order_downtime_claim
     *
     * @param bool|null $order_downtime_claim Включить фичу требований о простое по заявкам
     *
     * @return self
     */
    public function setOrderDowntimeClaim($order_downtime_claim)
    {
        if (is_null($order_downtime_claim)) {
            throw new \InvalidArgumentException('non-nullable order_downtime_claim cannot be null');
        }
        $this->container['order_downtime_claim'] = $order_downtime_claim;

        return $this;
    }

    /**
     * Gets order_filter_new
     *
     * @return bool|null
     */
    public function getOrderFilterNew()
    {
        return $this->container['order_filter_new'];
    }

    /**
     * Sets order_filter_new
     *
     * @param bool|null $order_filter_new Фильтр на заказы второй версии
     *
     * @return self
     */
    public function setOrderFilterNew($order_filter_new)
    {
        if (is_null($order_filter_new)) {
            throw new \InvalidArgumentException('non-nullable order_filter_new cannot be null');
        }
        $this->container['order_filter_new'] = $order_filter_new;

        return $this;
    }

    /**
     * Gets order_roadmap
     *
     * @return bool|null
     */
    public function getOrderRoadmap()
    {
        return $this->container['order_roadmap'];
    }

    /**
     * Sets order_roadmap
     *
     * @param bool|null $order_roadmap Включить роадмап
     *
     * @return self
     */
    public function setOrderRoadmap($order_roadmap)
    {
        if (is_null($order_roadmap)) {
            throw new \InvalidArgumentException('non-nullable order_roadmap cannot be null');
        }
        $this->container['order_roadmap'] = $order_roadmap;

        return $this;
    }

    /**
     * Gets price_prediction
     *
     * @return bool|null
     */
    public function getPricePrediction()
    {
        return $this->container['price_prediction'];
    }

    /**
     * Sets price_prediction
     *
     * @param bool|null $price_prediction Использовать предсказания цены
     *
     * @return self
     */
    public function setPricePrediction($price_prediction)
    {
        if (is_null($price_prediction)) {
            throw new \InvalidArgumentException('non-nullable price_prediction cannot be null');
        }
        $this->container['price_prediction'] = $price_prediction;

        return $this;
    }

    /**
     * Gets small_carrier
     *
     * @return bool|null
     */
    public function getSmallCarrier()
    {
        return $this->container['small_carrier'];
    }

    /**
     * Sets small_carrier
     *
     * @param bool|null $small_carrier Мелкий перевозчик
     *
     * @return self
     */
    public function setSmallCarrier($small_carrier)
    {
        if (is_null($small_carrier)) {
            throw new \InvalidArgumentException('non-nullable small_carrier cannot be null');
        }
        $this->container['small_carrier'] = $small_carrier;

        return $this;
    }

    /**
     * Gets web_socket
     *
     * @return bool|null
     */
    public function getWebSocket()
    {
        return $this->container['web_socket'];
    }

    /**
     * Sets web_socket
     *
     * @param bool|null $web_socket Возможность использовать WS
     *
     * @return self
     */
    public function setWebSocket($web_socket)
    {
        if (is_null($web_socket)) {
            throw new \InvalidArgumentException('non-nullable web_socket cannot be null');
        }
        $this->container['web_socket'] = $web_socket;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


