<?php
/**
 * OrderDraftExpeditorFields
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * OrderDraftExpeditorFields Class Doc Comment
 *
 * @category Class
 * @description Набор полей объекта экспедиторского заказа
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderDraftExpeditorFields implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderDraftExpeditorFields';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'kind' => 'string',
        'price_strategy_type' => '\MagDv\Cargomart\Dto\OrderPriceStrategyType',
        'loading' => 'int[]',
        'device' => 'string[]',
        'repeated_order_id' => 'string',
        'copied_order_id' => 'string',
        'carriage_detail' => 'string',
        'company_branch_id' => 'int',
        'contact' => 'int[]',
        'external_id' => 'string',
        'route_point' => '\MagDv\Cargomart\Dto\OrderDraftRoutePoint[]',
        'truck_type_id' => 'int',
        'cargo_weight' => 'float',
        'cargo_capacity' => 'int',
        'load_weight' => 'float',
        'load_capacity' => 'int',
        'cargo_type' => 'string',
        'temperature' => '\MagDv\Cargomart\Dto\TemperatureRange',
        'conditions' => 'string[]',
        'payment_type_id' => 'int',
        'payment_detail' => 'string',
        'currency_code' => 'string',
        'vat_rate' => 'float',
        'bidding_end_date' => '\DateTime',
        'tag' => 'string[]',
        'price' => 'string',
        'step_bid' => 'string',
        'bidding_type' => '\MagDv\Cargomart\Dto\OrderBiddingType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'kind' => null,
        'price_strategy_type' => null,
        'loading' => null,
        'device' => null,
        'repeated_order_id' => 'cm-uuid',
        'copied_order_id' => 'cm-uuid',
        'carriage_detail' => null,
        'company_branch_id' => null,
        'contact' => null,
        'external_id' => null,
        'route_point' => null,
        'truck_type_id' => null,
        'cargo_weight' => null,
        'cargo_capacity' => null,
        'load_weight' => null,
        'load_capacity' => null,
        'cargo_type' => null,
        'temperature' => null,
        'conditions' => null,
        'payment_type_id' => null,
        'payment_detail' => null,
        'currency_code' => null,
        'vat_rate' => null,
        'bidding_end_date' => 'date-time',
        'tag' => null,
        'price' => 'cm-price',
        'step_bid' => 'cm-price',
        'bidding_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'kind' => false,
        'price_strategy_type' => false,
        'loading' => false,
        'device' => false,
        'repeated_order_id' => false,
        'copied_order_id' => false,
        'carriage_detail' => false,
        'company_branch_id' => false,
        'contact' => false,
        'external_id' => false,
        'route_point' => false,
        'truck_type_id' => false,
        'cargo_weight' => false,
        'cargo_capacity' => false,
        'load_weight' => false,
        'load_capacity' => false,
        'cargo_type' => false,
        'temperature' => false,
        'conditions' => false,
        'payment_type_id' => false,
        'payment_detail' => false,
        'currency_code' => false,
        'vat_rate' => false,
        'bidding_end_date' => false,
        'tag' => false,
        'price' => false,
        'step_bid' => false,
        'bidding_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'kind' => 'kind',
        'price_strategy_type' => 'priceStrategyType',
        'loading' => 'loading',
        'device' => 'device',
        'repeated_order_id' => 'repeatedOrderId',
        'copied_order_id' => 'copiedOrderId',
        'carriage_detail' => 'carriageDetail',
        'company_branch_id' => 'companyBranchId',
        'contact' => 'contact',
        'external_id' => 'externalId',
        'route_point' => 'routePoint',
        'truck_type_id' => 'truckTypeId',
        'cargo_weight' => 'cargoWeight',
        'cargo_capacity' => 'cargoCapacity',
        'load_weight' => 'loadWeight',
        'load_capacity' => 'loadCapacity',
        'cargo_type' => 'cargoType',
        'temperature' => 'temperature',
        'conditions' => 'conditions',
        'payment_type_id' => 'paymentTypeId',
        'payment_detail' => 'paymentDetail',
        'currency_code' => 'currencyCode',
        'vat_rate' => 'vatRate',
        'bidding_end_date' => 'biddingEndDate',
        'tag' => 'tag',
        'price' => 'price',
        'step_bid' => 'stepBid',
        'bidding_type' => 'biddingType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'kind' => 'setKind',
        'price_strategy_type' => 'setPriceStrategyType',
        'loading' => 'setLoading',
        'device' => 'setDevice',
        'repeated_order_id' => 'setRepeatedOrderId',
        'copied_order_id' => 'setCopiedOrderId',
        'carriage_detail' => 'setCarriageDetail',
        'company_branch_id' => 'setCompanyBranchId',
        'contact' => 'setContact',
        'external_id' => 'setExternalId',
        'route_point' => 'setRoutePoint',
        'truck_type_id' => 'setTruckTypeId',
        'cargo_weight' => 'setCargoWeight',
        'cargo_capacity' => 'setCargoCapacity',
        'load_weight' => 'setLoadWeight',
        'load_capacity' => 'setLoadCapacity',
        'cargo_type' => 'setCargoType',
        'temperature' => 'setTemperature',
        'conditions' => 'setConditions',
        'payment_type_id' => 'setPaymentTypeId',
        'payment_detail' => 'setPaymentDetail',
        'currency_code' => 'setCurrencyCode',
        'vat_rate' => 'setVatRate',
        'bidding_end_date' => 'setBiddingEndDate',
        'tag' => 'setTag',
        'price' => 'setPrice',
        'step_bid' => 'setStepBid',
        'bidding_type' => 'setBiddingType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'kind' => 'getKind',
        'price_strategy_type' => 'getPriceStrategyType',
        'loading' => 'getLoading',
        'device' => 'getDevice',
        'repeated_order_id' => 'getRepeatedOrderId',
        'copied_order_id' => 'getCopiedOrderId',
        'carriage_detail' => 'getCarriageDetail',
        'company_branch_id' => 'getCompanyBranchId',
        'contact' => 'getContact',
        'external_id' => 'getExternalId',
        'route_point' => 'getRoutePoint',
        'truck_type_id' => 'getTruckTypeId',
        'cargo_weight' => 'getCargoWeight',
        'cargo_capacity' => 'getCargoCapacity',
        'load_weight' => 'getLoadWeight',
        'load_capacity' => 'getLoadCapacity',
        'cargo_type' => 'getCargoType',
        'temperature' => 'getTemperature',
        'conditions' => 'getConditions',
        'payment_type_id' => 'getPaymentTypeId',
        'payment_detail' => 'getPaymentDetail',
        'currency_code' => 'getCurrencyCode',
        'vat_rate' => 'getVatRate',
        'bidding_end_date' => 'getBiddingEndDate',
        'tag' => 'getTag',
        'price' => 'getPrice',
        'step_bid' => 'getStepBid',
        'bidding_type' => 'getBiddingType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const KIND_EXPEDITOR = 'expeditor';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKindAllowableValues()
    {
        return [
            self::KIND_EXPEDITOR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('kind', $data ?? [], 'expeditor');
        $this->setIfExists('price_strategy_type', $data ?? [], null);
        $this->setIfExists('loading', $data ?? [], null);
        $this->setIfExists('device', $data ?? [], null);
        $this->setIfExists('repeated_order_id', $data ?? [], null);
        $this->setIfExists('copied_order_id', $data ?? [], null);
        $this->setIfExists('carriage_detail', $data ?? [], null);
        $this->setIfExists('company_branch_id', $data ?? [], null);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('route_point', $data ?? [], null);
        $this->setIfExists('truck_type_id', $data ?? [], null);
        $this->setIfExists('cargo_weight', $data ?? [], null);
        $this->setIfExists('cargo_capacity', $data ?? [], null);
        $this->setIfExists('load_weight', $data ?? [], null);
        $this->setIfExists('load_capacity', $data ?? [], null);
        $this->setIfExists('cargo_type', $data ?? [], null);
        $this->setIfExists('temperature', $data ?? [], null);
        $this->setIfExists('conditions', $data ?? [], null);
        $this->setIfExists('payment_type_id', $data ?? [], null);
        $this->setIfExists('payment_detail', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('vat_rate', $data ?? [], null);
        $this->setIfExists('bidding_end_date', $data ?? [], null);
        $this->setIfExists('tag', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('step_bid', $data ?? [], null);
        $this->setIfExists('bidding_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['kind'] === null) {
            $invalidProperties[] = "'kind' can't be null";
        }
        $allowedValues = $this->getKindAllowableValues();
        if (!is_null($this->container['kind']) && !in_array($this->container['kind'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'kind', must be one of '%s'",
                $this->container['kind'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['price']) && !preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", $this->container['price'])) {
            $invalidProperties[] = "invalid value for 'price', must be conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.";
        }

        if (!is_null($this->container['step_bid']) && !preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", $this->container['step_bid'])) {
            $invalidProperties[] = "invalid value for 'step_bid', must be conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets kind
     *
     * @return string
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param string $kind Тип черновика expeditor
     *
     * @return self
     */
    public function setKind($kind)
    {
        if (is_null($kind)) {
            throw new \InvalidArgumentException('non-nullable kind cannot be null');
        }
        $allowedValues = $this->getKindAllowableValues();
        if (!in_array($kind, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'kind', must be one of '%s'",
                    $kind,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets price_strategy_type
     *
     * @return \MagDv\Cargomart\Dto\OrderPriceStrategyType|null
     */
    public function getPriceStrategyType()
    {
        return $this->container['price_strategy_type'];
    }

    /**
     * Sets price_strategy_type
     *
     * @param \MagDv\Cargomart\Dto\OrderPriceStrategyType|null $price_strategy_type price_strategy_type
     *
     * @return self
     */
    public function setPriceStrategyType($price_strategy_type)
    {
        if (is_null($price_strategy_type)) {
            throw new \InvalidArgumentException('non-nullable price_strategy_type cannot be null');
        }
        $this->container['price_strategy_type'] = $price_strategy_type;

        return $this;
    }

    /**
     * Gets loading
     *
     * @return int[]|null
     */
    public function getLoading()
    {
        return $this->container['loading'];
    }

    /**
     * Sets loading
     *
     * @param int[]|null $loading Требуемые типы погрузки-выгрузки
     *
     * @return self
     */
    public function setLoading($loading)
    {
        if (is_null($loading)) {
            throw new \InvalidArgumentException('non-nullable loading cannot be null');
        }
        $this->container['loading'] = $loading;

        return $this;
    }

    /**
     * Gets device
     *
     * @return string[]|null
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param string[]|null $device Дополнительное оборудование машины
     *
     * @return self
     */
    public function setDevice($device)
    {
        if (is_null($device)) {
            throw new \InvalidArgumentException('non-nullable device cannot be null');
        }
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets repeated_order_id
     *
     * @return string|null
     */
    public function getRepeatedOrderId()
    {
        return $this->container['repeated_order_id'];
    }

    /**
     * Sets repeated_order_id
     *
     * @param string|null $repeated_order_id Идентификатор заказа для переразмещения
     *
     * @return self
     */
    public function setRepeatedOrderId($repeated_order_id)
    {
        if (is_null($repeated_order_id)) {
            throw new \InvalidArgumentException('non-nullable repeated_order_id cannot be null');
        }
        $this->container['repeated_order_id'] = $repeated_order_id;

        return $this;
    }

    /**
     * Gets copied_order_id
     *
     * @return string|null
     */
    public function getCopiedOrderId()
    {
        return $this->container['copied_order_id'];
    }

    /**
     * Sets copied_order_id
     *
     * @param string|null $copied_order_id Идентификатор заказа скопированного заказа
     *
     * @return self
     */
    public function setCopiedOrderId($copied_order_id)
    {
        if (is_null($copied_order_id)) {
            throw new \InvalidArgumentException('non-nullable copied_order_id cannot be null');
        }
        $this->container['copied_order_id'] = $copied_order_id;

        return $this;
    }

    /**
     * Gets carriage_detail
     *
     * @return string|null
     */
    public function getCarriageDetail()
    {
        return $this->container['carriage_detail'];
    }

    /**
     * Sets carriage_detail
     *
     * @param string|null $carriage_detail Доп. информация к условиям перевозки
     *
     * @return self
     */
    public function setCarriageDetail($carriage_detail)
    {
        if (is_null($carriage_detail)) {
            throw new \InvalidArgumentException('non-nullable carriage_detail cannot be null');
        }
        $this->container['carriage_detail'] = $carriage_detail;

        return $this;
    }

    /**
     * Gets company_branch_id
     *
     * @return int|null
     */
    public function getCompanyBranchId()
    {
        return $this->container['company_branch_id'];
    }

    /**
     * Sets company_branch_id
     *
     * @param int|null $company_branch_id Идентификатор дочерней компании
     *
     * @return self
     */
    public function setCompanyBranchId($company_branch_id)
    {
        if (is_null($company_branch_id)) {
            throw new \InvalidArgumentException('non-nullable company_branch_id cannot be null');
        }
        $this->container['company_branch_id'] = $company_branch_id;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return int[]|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param int[]|null $contact Список идентификаторов контактных лиц(кураторы)
     *
     * @return self
     */
    public function setContact($contact)
    {
        if (is_null($contact)) {
            throw new \InvalidArgumentException('non-nullable contact cannot be null');
        }
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id Внешний идентификатор
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets route_point
     *
     * @return \MagDv\Cargomart\Dto\OrderDraftRoutePoint[]|null
     */
    public function getRoutePoint()
    {
        return $this->container['route_point'];
    }

    /**
     * Sets route_point
     *
     * @param \MagDv\Cargomart\Dto\OrderDraftRoutePoint[]|null $route_point route_point
     *
     * @return self
     */
    public function setRoutePoint($route_point)
    {
        if (is_null($route_point)) {
            throw new \InvalidArgumentException('non-nullable route_point cannot be null');
        }
        $this->container['route_point'] = $route_point;

        return $this;
    }

    /**
     * Gets truck_type_id
     *
     * @return int|null
     */
    public function getTruckTypeId()
    {
        return $this->container['truck_type_id'];
    }

    /**
     * Sets truck_type_id
     *
     * @param int|null $truck_type_id Тип грузовика
     *
     * @return self
     */
    public function setTruckTypeId($truck_type_id)
    {
        if (is_null($truck_type_id)) {
            throw new \InvalidArgumentException('non-nullable truck_type_id cannot be null');
        }
        $this->container['truck_type_id'] = $truck_type_id;

        return $this;
    }

    /**
     * Gets cargo_weight
     *
     * @return float|null
     */
    public function getCargoWeight()
    {
        return $this->container['cargo_weight'];
    }

    /**
     * Sets cargo_weight
     *
     * @param float|null $cargo_weight Тоннаж авто из условий заказа(в тоннах)
     *
     * @return self
     */
    public function setCargoWeight($cargo_weight)
    {
        if (is_null($cargo_weight)) {
            throw new \InvalidArgumentException('non-nullable cargo_weight cannot be null');
        }
        $this->container['cargo_weight'] = $cargo_weight;

        return $this;
    }

    /**
     * Gets cargo_capacity
     *
     * @return int|null
     */
    public function getCargoCapacity()
    {
        return $this->container['cargo_capacity'];
    }

    /**
     * Sets cargo_capacity
     *
     * @param int|null $cargo_capacity Кубатура авто из условий заказа(в м3)
     *
     * @return self
     */
    public function setCargoCapacity($cargo_capacity)
    {
        if (is_null($cargo_capacity)) {
            throw new \InvalidArgumentException('non-nullable cargo_capacity cannot be null');
        }
        $this->container['cargo_capacity'] = $cargo_capacity;

        return $this;
    }

    /**
     * Gets load_weight
     *
     * @return float|null
     */
    public function getLoadWeight()
    {
        return $this->container['load_weight'];
    }

    /**
     * Sets load_weight
     *
     * @param float|null $load_weight Вес груза(в тоннах)
     *
     * @return self
     */
    public function setLoadWeight($load_weight)
    {
        if (is_null($load_weight)) {
            throw new \InvalidArgumentException('non-nullable load_weight cannot be null');
        }
        $this->container['load_weight'] = $load_weight;

        return $this;
    }

    /**
     * Gets load_capacity
     *
     * @return int|null
     */
    public function getLoadCapacity()
    {
        return $this->container['load_capacity'];
    }

    /**
     * Sets load_capacity
     *
     * @param int|null $load_capacity Объём груза(в м3)
     *
     * @return self
     */
    public function setLoadCapacity($load_capacity)
    {
        if (is_null($load_capacity)) {
            throw new \InvalidArgumentException('non-nullable load_capacity cannot be null');
        }
        $this->container['load_capacity'] = $load_capacity;

        return $this;
    }

    /**
     * Gets cargo_type
     *
     * @return string|null
     */
    public function getCargoType()
    {
        return $this->container['cargo_type'];
    }

    /**
     * Sets cargo_type
     *
     * @param string|null $cargo_type Описание груза
     *
     * @return self
     */
    public function setCargoType($cargo_type)
    {
        if (is_null($cargo_type)) {
            throw new \InvalidArgumentException('non-nullable cargo_type cannot be null');
        }
        $this->container['cargo_type'] = $cargo_type;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return \MagDv\Cargomart\Dto\TemperatureRange|null
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param \MagDv\Cargomart\Dto\TemperatureRange|null $temperature Температурный режим в цельсиях
     *
     * @return self
     */
    public function setTemperature($temperature)
    {
        if (is_null($temperature)) {
            throw new \InvalidArgumentException('non-nullable temperature cannot be null');
        }
        $this->container['temperature'] = $temperature;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return string[]|null
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param string[]|null $conditions Условия перевозки
     *
     * @return self
     */
    public function setConditions($conditions)
    {
        if (is_null($conditions)) {
            throw new \InvalidArgumentException('non-nullable conditions cannot be null');
        }
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets payment_type_id
     *
     * @return int|null
     */
    public function getPaymentTypeId()
    {
        return $this->container['payment_type_id'];
    }

    /**
     * Sets payment_type_id
     *
     * @param int|null $payment_type_id Идентификатор способа оплаты заказа
     *
     * @return self
     */
    public function setPaymentTypeId($payment_type_id)
    {
        if (is_null($payment_type_id)) {
            throw new \InvalidArgumentException('non-nullable payment_type_id cannot be null');
        }
        $this->container['payment_type_id'] = $payment_type_id;

        return $this;
    }

    /**
     * Gets payment_detail
     *
     * @return string|null
     */
    public function getPaymentDetail()
    {
        return $this->container['payment_detail'];
    }

    /**
     * Sets payment_detail
     *
     * @param string|null $payment_detail Комментарий по оплате
     *
     * @return self
     */
    public function setPaymentDetail($payment_detail)
    {
        if (is_null($payment_detail)) {
            throw new \InvalidArgumentException('non-nullable payment_detail cannot be null');
        }
        $this->container['payment_detail'] = $payment_detail;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code Код валюты заказа
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return float|null
     */
    public function getVatRate()
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param float|null $vat_rate Ставка НДС
     *
     * @return self
     */
    public function setVatRate($vat_rate)
    {
        if (is_null($vat_rate)) {
            throw new \InvalidArgumentException('non-nullable vat_rate cannot be null');
        }
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }

    /**
     * Gets bidding_end_date
     *
     * @return \DateTime|null
     */
    public function getBiddingEndDate()
    {
        return $this->container['bidding_end_date'];
    }

    /**
     * Sets bidding_end_date
     *
     * @param \DateTime|null $bidding_end_date Конечная дата торгов
     *
     * @return self
     */
    public function setBiddingEndDate($bidding_end_date)
    {
        if (is_null($bidding_end_date)) {
            throw new \InvalidArgumentException('non-nullable bidding_end_date cannot be null');
        }
        $this->container['bidding_end_date'] = $bidding_end_date;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string[]|null
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string[]|null $tag Метки
     *
     * @return self
     */
    public function setTag($tag)
    {
        if (is_null($tag)) {
            throw new \InvalidArgumentException('non-nullable tag cannot be null');
        }
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string|null $price Цена перевозки с НДС (начальная или фиксированная)
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }

        if ((!preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", ObjectSerializer::toString($price)))) {
            throw new \InvalidArgumentException("invalid value for \$price when calling OrderDraftExpeditorFields., must conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.");
        }

        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets step_bid
     *
     * @return string|null
     */
    public function getStepBid()
    {
        return $this->container['step_bid'];
    }

    /**
     * Sets step_bid
     *
     * @param string|null $step_bid Шаг изменения цены заказа
     *
     * @return self
     */
    public function setStepBid($step_bid)
    {
        if (is_null($step_bid)) {
            throw new \InvalidArgumentException('non-nullable step_bid cannot be null');
        }

        if ((!preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", ObjectSerializer::toString($step_bid)))) {
            throw new \InvalidArgumentException("invalid value for \$step_bid when calling OrderDraftExpeditorFields., must conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.");
        }

        $this->container['step_bid'] = $step_bid;

        return $this;
    }

    /**
     * Gets bidding_type
     *
     * @return \MagDv\Cargomart\Dto\OrderBiddingType|null
     */
    public function getBiddingType()
    {
        return $this->container['bidding_type'];
    }

    /**
     * Sets bidding_type
     *
     * @param \MagDv\Cargomart\Dto\OrderBiddingType|null $bidding_type bidding_type
     *
     * @return self
     */
    public function setBiddingType($bidding_type)
    {
        if (is_null($bidding_type)) {
            throw new \InvalidArgumentException('non-nullable bidding_type cannot be null');
        }
        $this->container['bidding_type'] = $bidding_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


