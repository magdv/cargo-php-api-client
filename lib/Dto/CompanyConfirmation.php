<?php
/**
 * CompanyConfirmation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * CompanyConfirmation Class Doc Comment
 *
 * @category Class
 * @description Объект состояния валидации
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CompanyConfirmation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'company-confirmation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => '\MagDv\Cargomart\Dto\CompanyConfirmationStatusEnum',
        'message' => '\MagDv\Cargomart\Dto\CompanyConfirmationMessage',
        'owner' => '\MagDv\Cargomart\Dto\Owner',
        'contacts' => '\MagDv\Cargomart\Dto\Contact[]',
        'candidate' => '\MagDv\Cargomart\Dto\Candidate',
        'company' => '\MagDv\Cargomart\Dto\CompanyConfirmationCompany',
        'required_docs' => 'string[]',
        'file' => 'int[]',
        'company_profile' => '\MagDv\Cargomart\Dto\CompanyProfile',
        'allow_easy_validation' => 'bool',
        'consignor_contract_iteration' => 'int',
        'access' => '\MagDv\Cargomart\Dto\CompanyConfirmationAccess'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'message' => null,
        'owner' => null,
        'contacts' => null,
        'candidate' => null,
        'company' => null,
        'required_docs' => null,
        'file' => null,
        'company_profile' => null,
        'allow_easy_validation' => null,
        'consignor_contract_iteration' => null,
        'access' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'status' => false,
        'message' => false,
        'owner' => false,
        'contacts' => false,
        'candidate' => false,
        'company' => false,
        'required_docs' => false,
        'file' => false,
        'company_profile' => false,
        'allow_easy_validation' => false,
        'consignor_contract_iteration' => false,
        'access' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'message' => 'message',
        'owner' => 'owner',
        'contacts' => 'contacts',
        'candidate' => 'candidate',
        'company' => 'company',
        'required_docs' => 'requiredDocs',
        'file' => 'file',
        'company_profile' => 'companyProfile',
        'allow_easy_validation' => 'allowEasyValidation',
        'consignor_contract_iteration' => 'consignorContractIteration',
        'access' => 'access'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'message' => 'setMessage',
        'owner' => 'setOwner',
        'contacts' => 'setContacts',
        'candidate' => 'setCandidate',
        'company' => 'setCompany',
        'required_docs' => 'setRequiredDocs',
        'file' => 'setFile',
        'company_profile' => 'setCompanyProfile',
        'allow_easy_validation' => 'setAllowEasyValidation',
        'consignor_contract_iteration' => 'setConsignorContractIteration',
        'access' => 'setAccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'message' => 'getMessage',
        'owner' => 'getOwner',
        'contacts' => 'getContacts',
        'candidate' => 'getCandidate',
        'company' => 'getCompany',
        'required_docs' => 'getRequiredDocs',
        'file' => 'getFile',
        'company_profile' => 'getCompanyProfile',
        'allow_easy_validation' => 'getAllowEasyValidation',
        'consignor_contract_iteration' => 'getConsignorContractIteration',
        'access' => 'getAccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('contacts', $data ?? [], null);
        $this->setIfExists('candidate', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('required_docs', $data ?? [], null);
        $this->setIfExists('file', $data ?? [], null);
        $this->setIfExists('company_profile', $data ?? [], null);
        $this->setIfExists('allow_easy_validation', $data ?? [], false);
        $this->setIfExists('consignor_contract_iteration', $data ?? [], null);
        $this->setIfExists('access', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if (!is_null($this->container['consignor_contract_iteration']) && ($this->container['consignor_contract_iteration'] < 0)) {
            $invalidProperties[] = "invalid value for 'consignor_contract_iteration', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return \MagDv\Cargomart\Dto\CompanyConfirmationStatusEnum
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \MagDv\Cargomart\Dto\CompanyConfirmationStatusEnum $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets message
     *
     * @return \MagDv\Cargomart\Dto\CompanyConfirmationMessage|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param \MagDv\Cargomart\Dto\CompanyConfirmationMessage|null $message message
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \MagDv\Cargomart\Dto\Owner|null
     * @deprecated
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \MagDv\Cargomart\Dto\Owner|null $owner owner
     *
     * @return self
     * @deprecated
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \MagDv\Cargomart\Dto\Contact[]|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \MagDv\Cargomart\Dto\Contact[]|null $contacts Контакты компании и дублирующих компаний
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        if (is_null($contacts)) {
            throw new \InvalidArgumentException('non-nullable contacts cannot be null');
        }
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets candidate
     *
     * @return \MagDv\Cargomart\Dto\Candidate|null
     */
    public function getCandidate()
    {
        return $this->container['candidate'];
    }

    /**
     * Sets candidate
     *
     * @param \MagDv\Cargomart\Dto\Candidate|null $candidate candidate
     *
     * @return self
     */
    public function setCandidate($candidate)
    {
        if (is_null($candidate)) {
            throw new \InvalidArgumentException('non-nullable candidate cannot be null');
        }
        $this->container['candidate'] = $candidate;

        return $this;
    }

    /**
     * Gets company
     *
     * @return \MagDv\Cargomart\Dto\CompanyConfirmationCompany|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \MagDv\Cargomart\Dto\CompanyConfirmationCompany|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets required_docs
     *
     * @return string[]|null
     */
    public function getRequiredDocs()
    {
        return $this->container['required_docs'];
    }

    /**
     * Sets required_docs
     *
     * @param string[]|null $required_docs Массив идентификаторов документов
     *
     * @return self
     */
    public function setRequiredDocs($required_docs)
    {
        if (is_null($required_docs)) {
            throw new \InvalidArgumentException('non-nullable required_docs cannot be null');
        }
        $this->container['required_docs'] = $required_docs;

        return $this;
    }

    /**
     * Gets file
     *
     * @return int[]|null
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param int[]|null $file Список идентификаторов прикрепленных файлов
     *
     * @return self
     */
    public function setFile($file)
    {
        if (is_null($file)) {
            throw new \InvalidArgumentException('non-nullable file cannot be null');
        }
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets company_profile
     *
     * @return \MagDv\Cargomart\Dto\CompanyProfile|null
     */
    public function getCompanyProfile()
    {
        return $this->container['company_profile'];
    }

    /**
     * Sets company_profile
     *
     * @param \MagDv\Cargomart\Dto\CompanyProfile|null $company_profile Анкета/профиль компании
     *
     * @return self
     */
    public function setCompanyProfile($company_profile)
    {
        if (is_null($company_profile)) {
            throw new \InvalidArgumentException('non-nullable company_profile cannot be null');
        }
        $this->container['company_profile'] = $company_profile;

        return $this;
    }

    /**
     * Gets allow_easy_validation
     *
     * @return bool|null
     */
    public function getAllowEasyValidation()
    {
        return $this->container['allow_easy_validation'];
    }

    /**
     * Sets allow_easy_validation
     *
     * @param bool|null $allow_easy_validation Флаг, показывающий что включена упрощенная схема валидации
     *
     * @return self
     */
    public function setAllowEasyValidation($allow_easy_validation)
    {
        if (is_null($allow_easy_validation)) {
            throw new \InvalidArgumentException('non-nullable allow_easy_validation cannot be null');
        }
        $this->container['allow_easy_validation'] = $allow_easy_validation;

        return $this;
    }

    /**
     * Gets consignor_contract_iteration
     *
     * @return int|null
     */
    public function getConsignorContractIteration()
    {
        return $this->container['consignor_contract_iteration'];
    }

    /**
     * Sets consignor_contract_iteration
     *
     * @param int|null $consignor_contract_iteration Номер итерации механизма валидации заказчика
     *
     * @return self
     */
    public function setConsignorContractIteration($consignor_contract_iteration)
    {
        if (is_null($consignor_contract_iteration)) {
            throw new \InvalidArgumentException('non-nullable consignor_contract_iteration cannot be null');
        }

        if (($consignor_contract_iteration < 0)) {
            throw new \InvalidArgumentException('invalid value for $consignor_contract_iteration when calling CompanyConfirmation., must be bigger than or equal to 0.');
        }

        $this->container['consignor_contract_iteration'] = $consignor_contract_iteration;

        return $this;
    }

    /**
     * Gets access
     *
     * @return \MagDv\Cargomart\Dto\CompanyConfirmationAccess|null
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param \MagDv\Cargomart\Dto\CompanyConfirmationAccess|null $access access
     *
     * @return self
     */
    public function setAccess($access)
    {
        if (is_null($access)) {
            throw new \InvalidArgumentException('non-nullable access cannot be null');
        }
        $this->container['access'] = $access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


