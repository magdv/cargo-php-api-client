<?php
/**
 * TruckOld
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * TruckOld Class Doc Comment
 *
 * @category Class
 * @description deprecated объект с детализацией транспортного средства
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TruckOld implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'truck-old';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'truck_manufacturer' => 'string',
        'truck_number' => 'string',
        'truck_manufacturer_trailer' => 'string',
        'truck_number_trailer' => 'string',
        'truck_model' => 'string',
        'carrying_capacity_value' => 'float',
        'cubic_capacity_value' => 'float',
        'truck_type_id' => 'int',
        'ownership_type' => '\MagDv\Cargomart\Dto\TruckOwnershipType',
        'tractor' => '\MagDv\Cargomart\Dto\TractorVehicle',
        'trailer' => '\MagDv\Cargomart\Dto\Vehicle',
        'van' => '\MagDv\Cargomart\Dto\Vehicle',
        'validation_status' => '\MagDv\Cargomart\Dto\TruckValidationStatus',
        'affiliation_type' => '\MagDv\Cargomart\Dto\TruckAffiliationType',
        'company_owner_inn' => 'string',
        'company_owner_name' => 'string',
        'company_owner_address' => 'string',
        'actual_carrier' => '\MagDv\Cargomart\Dto\ActualCarrier',
        'truck_mode_id' => 'int',
        'photo' => 'object',
        'phones' => 'string[]',
        'pts' => 'object',
        'status' => '\MagDv\Cargomart\Dto\TruckStatusEnum',
        'rejection_reason' => 'string',
        'company_owner_country_code' => 'string',
        'owner_country_code' => 'string',
        'access' => '\MagDv\Cargomart\Dto\TruckAccess'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'truck_manufacturer' => null,
        'truck_number' => null,
        'truck_manufacturer_trailer' => null,
        'truck_number_trailer' => null,
        'truck_model' => null,
        'carrying_capacity_value' => null,
        'cubic_capacity_value' => null,
        'truck_type_id' => null,
        'ownership_type' => null,
        'tractor' => null,
        'trailer' => null,
        'van' => null,
        'validation_status' => null,
        'affiliation_type' => null,
        'company_owner_inn' => null,
        'company_owner_name' => null,
        'company_owner_address' => null,
        'actual_carrier' => null,
        'truck_mode_id' => null,
        'photo' => null,
        'phones' => null,
        'pts' => null,
        'status' => null,
        'rejection_reason' => null,
        'company_owner_country_code' => null,
        'owner_country_code' => null,
        'access' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'truck_manufacturer' => false,
        'truck_number' => false,
        'truck_manufacturer_trailer' => false,
        'truck_number_trailer' => false,
        'truck_model' => false,
        'carrying_capacity_value' => false,
        'cubic_capacity_value' => false,
        'truck_type_id' => false,
        'ownership_type' => false,
        'tractor' => false,
        'trailer' => false,
        'van' => false,
        'validation_status' => false,
        'affiliation_type' => false,
        'company_owner_inn' => false,
        'company_owner_name' => false,
        'company_owner_address' => false,
        'actual_carrier' => false,
        'truck_mode_id' => false,
        'photo' => false,
        'phones' => false,
        'pts' => false,
        'status' => false,
        'rejection_reason' => false,
        'company_owner_country_code' => false,
        'owner_country_code' => false,
        'access' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'truck_manufacturer' => 'truckManufacturer',
        'truck_number' => 'truckNumber',
        'truck_manufacturer_trailer' => 'truckManufacturerTrailer',
        'truck_number_trailer' => 'truckNumberTrailer',
        'truck_model' => 'truckModel',
        'carrying_capacity_value' => 'carryingCapacityValue',
        'cubic_capacity_value' => 'cubicCapacityValue',
        'truck_type_id' => 'truckTypeId',
        'ownership_type' => 'ownershipType',
        'tractor' => 'tractor',
        'trailer' => 'trailer',
        'van' => 'van',
        'validation_status' => 'validationStatus',
        'affiliation_type' => 'affiliationType',
        'company_owner_inn' => 'companyOwnerInn',
        'company_owner_name' => 'companyOwnerName',
        'company_owner_address' => 'companyOwnerAddress',
        'actual_carrier' => 'actualCarrier',
        'truck_mode_id' => 'truckModeId',
        'photo' => 'photo',
        'phones' => 'phones',
        'pts' => 'pts',
        'status' => 'status',
        'rejection_reason' => 'rejectionReason',
        'company_owner_country_code' => 'companyOwnerCountryCode',
        'owner_country_code' => 'ownerCountryCode',
        'access' => 'access'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'truck_manufacturer' => 'setTruckManufacturer',
        'truck_number' => 'setTruckNumber',
        'truck_manufacturer_trailer' => 'setTruckManufacturerTrailer',
        'truck_number_trailer' => 'setTruckNumberTrailer',
        'truck_model' => 'setTruckModel',
        'carrying_capacity_value' => 'setCarryingCapacityValue',
        'cubic_capacity_value' => 'setCubicCapacityValue',
        'truck_type_id' => 'setTruckTypeId',
        'ownership_type' => 'setOwnershipType',
        'tractor' => 'setTractor',
        'trailer' => 'setTrailer',
        'van' => 'setVan',
        'validation_status' => 'setValidationStatus',
        'affiliation_type' => 'setAffiliationType',
        'company_owner_inn' => 'setCompanyOwnerInn',
        'company_owner_name' => 'setCompanyOwnerName',
        'company_owner_address' => 'setCompanyOwnerAddress',
        'actual_carrier' => 'setActualCarrier',
        'truck_mode_id' => 'setTruckModeId',
        'photo' => 'setPhoto',
        'phones' => 'setPhones',
        'pts' => 'setPts',
        'status' => 'setStatus',
        'rejection_reason' => 'setRejectionReason',
        'company_owner_country_code' => 'setCompanyOwnerCountryCode',
        'owner_country_code' => 'setOwnerCountryCode',
        'access' => 'setAccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'truck_manufacturer' => 'getTruckManufacturer',
        'truck_number' => 'getTruckNumber',
        'truck_manufacturer_trailer' => 'getTruckManufacturerTrailer',
        'truck_number_trailer' => 'getTruckNumberTrailer',
        'truck_model' => 'getTruckModel',
        'carrying_capacity_value' => 'getCarryingCapacityValue',
        'cubic_capacity_value' => 'getCubicCapacityValue',
        'truck_type_id' => 'getTruckTypeId',
        'ownership_type' => 'getOwnershipType',
        'tractor' => 'getTractor',
        'trailer' => 'getTrailer',
        'van' => 'getVan',
        'validation_status' => 'getValidationStatus',
        'affiliation_type' => 'getAffiliationType',
        'company_owner_inn' => 'getCompanyOwnerInn',
        'company_owner_name' => 'getCompanyOwnerName',
        'company_owner_address' => 'getCompanyOwnerAddress',
        'actual_carrier' => 'getActualCarrier',
        'truck_mode_id' => 'getTruckModeId',
        'photo' => 'getPhoto',
        'phones' => 'getPhones',
        'pts' => 'getPts',
        'status' => 'getStatus',
        'rejection_reason' => 'getRejectionReason',
        'company_owner_country_code' => 'getCompanyOwnerCountryCode',
        'owner_country_code' => 'getOwnerCountryCode',
        'access' => 'getAccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('truck_manufacturer', $data ?? [], null);
        $this->setIfExists('truck_number', $data ?? [], null);
        $this->setIfExists('truck_manufacturer_trailer', $data ?? [], null);
        $this->setIfExists('truck_number_trailer', $data ?? [], null);
        $this->setIfExists('truck_model', $data ?? [], null);
        $this->setIfExists('carrying_capacity_value', $data ?? [], null);
        $this->setIfExists('cubic_capacity_value', $data ?? [], null);
        $this->setIfExists('truck_type_id', $data ?? [], null);
        $this->setIfExists('ownership_type', $data ?? [], null);
        $this->setIfExists('tractor', $data ?? [], null);
        $this->setIfExists('trailer', $data ?? [], null);
        $this->setIfExists('van', $data ?? [], null);
        $this->setIfExists('validation_status', $data ?? [], null);
        $this->setIfExists('affiliation_type', $data ?? [], null);
        $this->setIfExists('company_owner_inn', $data ?? [], null);
        $this->setIfExists('company_owner_name', $data ?? [], null);
        $this->setIfExists('company_owner_address', $data ?? [], null);
        $this->setIfExists('actual_carrier', $data ?? [], null);
        $this->setIfExists('truck_mode_id', $data ?? [], null);
        $this->setIfExists('photo', $data ?? [], null);
        $this->setIfExists('phones', $data ?? [], null);
        $this->setIfExists('pts', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('rejection_reason', $data ?? [], null);
        $this->setIfExists('company_owner_country_code', $data ?? [], null);
        $this->setIfExists('owner_country_code', $data ?? [], null);
        $this->setIfExists('access', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id идентификатор ТС
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets truck_manufacturer
     *
     * @return string|null
     * @deprecated
     */
    public function getTruckManufacturer()
    {
        return $this->container['truck_manufacturer'];
    }

    /**
     * Sets truck_manufacturer
     *
     * @param string|null $truck_manufacturer @deprecated Использовать tractor, trailer, van. Марка ТС
     *
     * @return self
     * @deprecated
     */
    public function setTruckManufacturer($truck_manufacturer)
    {
        if (is_null($truck_manufacturer)) {
            throw new \InvalidArgumentException('non-nullable truck_manufacturer cannot be null');
        }
        $this->container['truck_manufacturer'] = $truck_manufacturer;

        return $this;
    }

    /**
     * Gets truck_number
     *
     * @return string|null
     * @deprecated
     */
    public function getTruckNumber()
    {
        return $this->container['truck_number'];
    }

    /**
     * Sets truck_number
     *
     * @param string|null $truck_number @deprecated Использовать tractor, trailer, van. Гос.номер ТС
     *
     * @return self
     * @deprecated
     */
    public function setTruckNumber($truck_number)
    {
        if (is_null($truck_number)) {
            throw new \InvalidArgumentException('non-nullable truck_number cannot be null');
        }
        $this->container['truck_number'] = $truck_number;

        return $this;
    }

    /**
     * Gets truck_manufacturer_trailer
     *
     * @return string|null
     * @deprecated
     */
    public function getTruckManufacturerTrailer()
    {
        return $this->container['truck_manufacturer_trailer'];
    }

    /**
     * Sets truck_manufacturer_trailer
     *
     * @param string|null $truck_manufacturer_trailer @deprecated Использовать tractor, trailer, van. Марка прицепа ТС
     *
     * @return self
     * @deprecated
     */
    public function setTruckManufacturerTrailer($truck_manufacturer_trailer)
    {
        if (is_null($truck_manufacturer_trailer)) {
            throw new \InvalidArgumentException('non-nullable truck_manufacturer_trailer cannot be null');
        }
        $this->container['truck_manufacturer_trailer'] = $truck_manufacturer_trailer;

        return $this;
    }

    /**
     * Gets truck_number_trailer
     *
     * @return string|null
     * @deprecated
     */
    public function getTruckNumberTrailer()
    {
        return $this->container['truck_number_trailer'];
    }

    /**
     * Sets truck_number_trailer
     *
     * @param string|null $truck_number_trailer @deprecated Использовать tractor, trailer, van. Гос.номер прицепа ТС
     *
     * @return self
     * @deprecated
     */
    public function setTruckNumberTrailer($truck_number_trailer)
    {
        if (is_null($truck_number_trailer)) {
            throw new \InvalidArgumentException('non-nullable truck_number_trailer cannot be null');
        }
        $this->container['truck_number_trailer'] = $truck_number_trailer;

        return $this;
    }

    /**
     * Gets truck_model
     *
     * @return string|null
     */
    public function getTruckModel()
    {
        return $this->container['truck_model'];
    }

    /**
     * Sets truck_model
     *
     * @param string|null $truck_model модель ТС
     *
     * @return self
     */
    public function setTruckModel($truck_model)
    {
        if (is_null($truck_model)) {
            throw new \InvalidArgumentException('non-nullable truck_model cannot be null');
        }
        $this->container['truck_model'] = $truck_model;

        return $this;
    }

    /**
     * Gets carrying_capacity_value
     *
     * @return float|null
     * @deprecated
     */
    public function getCarryingCapacityValue()
    {
        return $this->container['carrying_capacity_value'];
    }

    /**
     * Sets carrying_capacity_value
     *
     * @param float|null $carrying_capacity_value @deprecated Использовать trailer, van. Грузоподъемность ТС
     *
     * @return self
     * @deprecated
     */
    public function setCarryingCapacityValue($carrying_capacity_value)
    {
        if (is_null($carrying_capacity_value)) {
            throw new \InvalidArgumentException('non-nullable carrying_capacity_value cannot be null');
        }
        $this->container['carrying_capacity_value'] = $carrying_capacity_value;

        return $this;
    }

    /**
     * Gets cubic_capacity_value
     *
     * @return float|null
     * @deprecated
     */
    public function getCubicCapacityValue()
    {
        return $this->container['cubic_capacity_value'];
    }

    /**
     * Sets cubic_capacity_value
     *
     * @param float|null $cubic_capacity_value @deprecated Использовать trailer, van. Кубатура ТС
     *
     * @return self
     * @deprecated
     */
    public function setCubicCapacityValue($cubic_capacity_value)
    {
        if (is_null($cubic_capacity_value)) {
            throw new \InvalidArgumentException('non-nullable cubic_capacity_value cannot be null');
        }
        $this->container['cubic_capacity_value'] = $cubic_capacity_value;

        return $this;
    }

    /**
     * Gets truck_type_id
     *
     * @return int|null
     * @deprecated
     */
    public function getTruckTypeId()
    {
        return $this->container['truck_type_id'];
    }

    /**
     * Sets truck_type_id
     *
     * @param int|null $truck_type_id @deprecated Использовать trailer, van. Тип кузова
     *
     * @return self
     * @deprecated
     */
    public function setTruckTypeId($truck_type_id)
    {
        if (is_null($truck_type_id)) {
            throw new \InvalidArgumentException('non-nullable truck_type_id cannot be null');
        }
        $this->container['truck_type_id'] = $truck_type_id;

        return $this;
    }

    /**
     * Gets ownership_type
     *
     * @return \MagDv\Cargomart\Dto\TruckOwnershipType|null
     * @deprecated
     */
    public function getOwnershipType()
    {
        return $this->container['ownership_type'];
    }

    /**
     * Sets ownership_type
     *
     * @param \MagDv\Cargomart\Dto\TruckOwnershipType|null $ownership_type @deprecated Использовать ownershipType в tractor и trailer. Тип владения (owned - Собственность, leasing - Лизинг, rent - Аренда, joint_property_spouses - Совместная собственность супругов, free_use - Безвозмездное пользование)
     *
     * @return self
     * @deprecated
     */
    public function setOwnershipType($ownership_type)
    {
        if (is_null($ownership_type)) {
            throw new \InvalidArgumentException('non-nullable ownership_type cannot be null');
        }
        $this->container['ownership_type'] = $ownership_type;

        return $this;
    }

    /**
     * Gets tractor
     *
     * @return \MagDv\Cargomart\Dto\TractorVehicle|null
     */
    public function getTractor()
    {
        return $this->container['tractor'];
    }

    /**
     * Sets tractor
     *
     * @param \MagDv\Cargomart\Dto\TractorVehicle|null $tractor Данные тягача
     *
     * @return self
     */
    public function setTractor($tractor)
    {
        if (is_null($tractor)) {
            throw new \InvalidArgumentException('non-nullable tractor cannot be null');
        }
        $this->container['tractor'] = $tractor;

        return $this;
    }

    /**
     * Gets trailer
     *
     * @return \MagDv\Cargomart\Dto\Vehicle|null
     */
    public function getTrailer()
    {
        return $this->container['trailer'];
    }

    /**
     * Sets trailer
     *
     * @param \MagDv\Cargomart\Dto\Vehicle|null $trailer Данные прицепа
     *
     * @return self
     */
    public function setTrailer($trailer)
    {
        if (is_null($trailer)) {
            throw new \InvalidArgumentException('non-nullable trailer cannot be null');
        }
        $this->container['trailer'] = $trailer;

        return $this;
    }

    /**
     * Gets van
     *
     * @return \MagDv\Cargomart\Dto\Vehicle|null
     */
    public function getVan()
    {
        return $this->container['van'];
    }

    /**
     * Sets van
     *
     * @param \MagDv\Cargomart\Dto\Vehicle|null $van Данные фургона
     *
     * @return self
     */
    public function setVan($van)
    {
        if (is_null($van)) {
            throw new \InvalidArgumentException('non-nullable van cannot be null');
        }
        $this->container['van'] = $van;

        return $this;
    }

    /**
     * Gets validation_status
     *
     * @return \MagDv\Cargomart\Dto\TruckValidationStatus|null
     */
    public function getValidationStatus()
    {
        return $this->container['validation_status'];
    }

    /**
     * Sets validation_status
     *
     * @param \MagDv\Cargomart\Dto\TruckValidationStatus|null $validation_status validation_status
     *
     * @return self
     */
    public function setValidationStatus($validation_status)
    {
        if (is_null($validation_status)) {
            throw new \InvalidArgumentException('non-nullable validation_status cannot be null');
        }
        $this->container['validation_status'] = $validation_status;

        return $this;
    }

    /**
     * Gets affiliation_type
     *
     * @return \MagDv\Cargomart\Dto\TruckAffiliationType|null
     */
    public function getAffiliationType()
    {
        return $this->container['affiliation_type'];
    }

    /**
     * Sets affiliation_type
     *
     * @param \MagDv\Cargomart\Dto\TruckAffiliationType|null $affiliation_type affiliation_type
     *
     * @return self
     */
    public function setAffiliationType($affiliation_type)
    {
        if (is_null($affiliation_type)) {
            throw new \InvalidArgumentException('non-nullable affiliation_type cannot be null');
        }
        $this->container['affiliation_type'] = $affiliation_type;

        return $this;
    }

    /**
     * Gets company_owner_inn
     *
     * @return string|null
     * @deprecated
     */
    public function getCompanyOwnerInn()
    {
        return $this->container['company_owner_inn'];
    }

    /**
     * Sets company_owner_inn
     *
     * @param string|null $company_owner_inn @deprecated будет удалено. юзать actualCarrier
     *
     * @return self
     * @deprecated
     */
    public function setCompanyOwnerInn($company_owner_inn)
    {
        if (is_null($company_owner_inn)) {
            throw new \InvalidArgumentException('non-nullable company_owner_inn cannot be null');
        }
        $this->container['company_owner_inn'] = $company_owner_inn;

        return $this;
    }

    /**
     * Gets company_owner_name
     *
     * @return string|null
     * @deprecated
     */
    public function getCompanyOwnerName()
    {
        return $this->container['company_owner_name'];
    }

    /**
     * Sets company_owner_name
     *
     * @param string|null $company_owner_name @deprecated будет удалено. юзать actualCarrier
     *
     * @return self
     * @deprecated
     */
    public function setCompanyOwnerName($company_owner_name)
    {
        if (is_null($company_owner_name)) {
            throw new \InvalidArgumentException('non-nullable company_owner_name cannot be null');
        }
        $this->container['company_owner_name'] = $company_owner_name;

        return $this;
    }

    /**
     * Gets company_owner_address
     *
     * @return string|null
     * @deprecated
     */
    public function getCompanyOwnerAddress()
    {
        return $this->container['company_owner_address'];
    }

    /**
     * Sets company_owner_address
     *
     * @param string|null $company_owner_address @deprecated будет удалено. юзать actualCarrier
     *
     * @return self
     * @deprecated
     */
    public function setCompanyOwnerAddress($company_owner_address)
    {
        if (is_null($company_owner_address)) {
            throw new \InvalidArgumentException('non-nullable company_owner_address cannot be null');
        }
        $this->container['company_owner_address'] = $company_owner_address;

        return $this;
    }

    /**
     * Gets actual_carrier
     *
     * @return \MagDv\Cargomart\Dto\ActualCarrier|null
     */
    public function getActualCarrier()
    {
        return $this->container['actual_carrier'];
    }

    /**
     * Sets actual_carrier
     *
     * @param \MagDv\Cargomart\Dto\ActualCarrier|null $actual_carrier Фактический перевозчик
     *
     * @return self
     */
    public function setActualCarrier($actual_carrier)
    {
        if (is_null($actual_carrier)) {
            throw new \InvalidArgumentException('non-nullable actual_carrier cannot be null');
        }
        $this->container['actual_carrier'] = $actual_carrier;

        return $this;
    }

    /**
     * Gets truck_mode_id
     *
     * @return int|null
     */
    public function getTruckModeId()
    {
        return $this->container['truck_mode_id'];
    }

    /**
     * Sets truck_mode_id
     *
     * @param int|null $truck_mode_id тип ТС
     *
     * @return self
     */
    public function setTruckModeId($truck_mode_id)
    {
        if (is_null($truck_mode_id)) {
            throw new \InvalidArgumentException('non-nullable truck_mode_id cannot be null');
        }
        $this->container['truck_mode_id'] = $truck_mode_id;

        return $this;
    }

    /**
     * Gets photo
     *
     * @return object|null
     */
    public function getPhoto()
    {
        return $this->container['photo'];
    }

    /**
     * Sets photo
     *
     * @param object|null $photo фотография
     *
     * @return self
     */
    public function setPhoto($photo)
    {
        if (is_null($photo)) {
            throw new \InvalidArgumentException('non-nullable photo cannot be null');
        }
        $this->container['photo'] = $photo;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return string[]|null
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param string[]|null $phones Список телефонов ТС.
     *
     * @return self
     */
    public function setPhones($phones)
    {
        if (is_null($phones)) {
            throw new \InvalidArgumentException('non-nullable phones cannot be null');
        }
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets pts
     *
     * @return object|null
     */
    public function getPts()
    {
        return $this->container['pts'];
    }

    /**
     * Sets pts
     *
     * @param object|null $pts ПТС
     *
     * @return self
     */
    public function setPts($pts)
    {
        if (is_null($pts)) {
            throw new \InvalidArgumentException('non-nullable pts cannot be null');
        }
        $this->container['pts'] = $pts;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \MagDv\Cargomart\Dto\TruckStatusEnum|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \MagDv\Cargomart\Dto\TruckStatusEnum|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets rejection_reason
     *
     * @return string|null
     */
    public function getRejectionReason()
    {
        return $this->container['rejection_reason'];
    }

    /**
     * Sets rejection_reason
     *
     * @param string|null $rejection_reason Причина отклонения - возвращется в случае значения поля status = 3
     *
     * @return self
     */
    public function setRejectionReason($rejection_reason)
    {
        if (is_null($rejection_reason)) {
            throw new \InvalidArgumentException('non-nullable rejection_reason cannot be null');
        }
        $this->container['rejection_reason'] = $rejection_reason;

        return $this;
    }

    /**
     * Gets company_owner_country_code
     *
     * @return string|null
     * @deprecated
     */
    public function getCompanyOwnerCountryCode()
    {
        return $this->container['company_owner_country_code'];
    }

    /**
     * Sets company_owner_country_code
     *
     * @param string|null $company_owner_country_code @deprecated будет удалено. Код страны компании фактического перевозчика
     *
     * @return self
     * @deprecated
     */
    public function setCompanyOwnerCountryCode($company_owner_country_code)
    {
        if (is_null($company_owner_country_code)) {
            throw new \InvalidArgumentException('non-nullable company_owner_country_code cannot be null');
        }
        $this->container['company_owner_country_code'] = $company_owner_country_code;

        return $this;
    }

    /**
     * Gets owner_country_code
     *
     * @return string|null
     */
    public function getOwnerCountryCode()
    {
        return $this->container['owner_country_code'];
    }

    /**
     * Sets owner_country_code
     *
     * @param string|null $owner_country_code Код страны компании фактического перевозчика
     *
     * @return self
     */
    public function setOwnerCountryCode($owner_country_code)
    {
        if (is_null($owner_country_code)) {
            throw new \InvalidArgumentException('non-nullable owner_country_code cannot be null');
        }
        $this->container['owner_country_code'] = $owner_country_code;

        return $this;
    }

    /**
     * Gets access
     *
     * @return \MagDv\Cargomart\Dto\TruckAccess|null
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param \MagDv\Cargomart\Dto\TruckAccess|null $access Контекстные права доступа к ТС
     *
     * @return self
     */
    public function setAccess($access)
    {
        if (is_null($access)) {
            throw new \InvalidArgumentException('non-nullable access cannot be null');
        }
        $this->container['access'] = $access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


