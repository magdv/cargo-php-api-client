<?php
/**
 * PayloadChunkPoints
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * PayloadChunkPoints Class Doc Comment
 *
 * @category Class
 * @description Данные маршрута из титула отправителя
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayloadChunkPoints implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'payload-chunk-points';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'storage_point_id' => 'int',
        'type' => '\MagDv\Cargomart\Dto\RoutePointType',
        'from_date' => '\DateTime',
        'from_time' => 'string',
        'is_according_to_work_schedule' => 'bool',
        'to_date' => '\DateTime',
        'to_time' => 'string',
        'address' => 'string',
        'house' => 'string',
        'locality_name' => 'string',
        'location' => 'string',
        'comment' => 'string',
        'contacts' => 'string[]',
        'additional_info' => 'string',
        'date' => 'string',
        'point_shipper_last_name' => 'string',
        'point_shipper_first_name' => 'string',
        'point_shipper_second_name' => 'string',
        'point_shipper_address' => 'string',
        'phones' => 'string[]',
        'legal_status' => '\MagDv\Cargomart\Dto\LegalFormEnum',
        'company_name' => 'string',
        'inn' => 'string',
        'taxpayer_id' => 'string',
        'country_code' => 'string',
        'document_type' => 'string',
        'document_number' => 'string',
        'document_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'storage_point_id' => null,
        'type' => null,
        'from_date' => 'date',
        'from_time' => 'time',
        'is_according_to_work_schedule' => null,
        'to_date' => 'date',
        'to_time' => 'time',
        'address' => null,
        'house' => null,
        'locality_name' => null,
        'location' => null,
        'comment' => null,
        'contacts' => null,
        'additional_info' => null,
        'date' => null,
        'point_shipper_last_name' => null,
        'point_shipper_first_name' => null,
        'point_shipper_second_name' => null,
        'point_shipper_address' => null,
        'phones' => null,
        'legal_status' => null,
        'company_name' => null,
        'inn' => null,
        'taxpayer_id' => null,
        'country_code' => null,
        'document_type' => null,
        'document_number' => null,
        'document_date' => 'date'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'storage_point_id' => false,
        'type' => false,
        'from_date' => false,
        'from_time' => false,
        'is_according_to_work_schedule' => false,
        'to_date' => false,
        'to_time' => false,
        'address' => false,
        'house' => false,
        'locality_name' => false,
        'location' => false,
        'comment' => false,
        'contacts' => false,
        'additional_info' => false,
        'date' => false,
        'point_shipper_last_name' => false,
        'point_shipper_first_name' => false,
        'point_shipper_second_name' => false,
        'point_shipper_address' => false,
        'phones' => false,
        'legal_status' => false,
        'company_name' => false,
        'inn' => false,
        'taxpayer_id' => false,
        'country_code' => false,
        'document_type' => false,
        'document_number' => false,
        'document_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'storage_point_id' => 'storagePointId',
        'type' => 'type',
        'from_date' => 'fromDate',
        'from_time' => 'fromTime',
        'is_according_to_work_schedule' => 'isAccordingToWorkSchedule',
        'to_date' => 'toDate',
        'to_time' => 'toTime',
        'address' => 'address',
        'house' => 'house',
        'locality_name' => 'localityName',
        'location' => 'location',
        'comment' => 'comment',
        'contacts' => 'contacts',
        'additional_info' => 'additionalInfo',
        'date' => 'date',
        'point_shipper_last_name' => 'pointShipperLastName',
        'point_shipper_first_name' => 'pointShipperFirstName',
        'point_shipper_second_name' => 'pointShipperSecondName',
        'point_shipper_address' => 'pointShipperAddress',
        'phones' => 'phones',
        'legal_status' => 'legalStatus',
        'company_name' => 'companyName',
        'inn' => 'inn',
        'taxpayer_id' => 'taxpayerId',
        'country_code' => 'countryCode',
        'document_type' => 'documentType',
        'document_number' => 'documentNumber',
        'document_date' => 'documentDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'storage_point_id' => 'setStoragePointId',
        'type' => 'setType',
        'from_date' => 'setFromDate',
        'from_time' => 'setFromTime',
        'is_according_to_work_schedule' => 'setIsAccordingToWorkSchedule',
        'to_date' => 'setToDate',
        'to_time' => 'setToTime',
        'address' => 'setAddress',
        'house' => 'setHouse',
        'locality_name' => 'setLocalityName',
        'location' => 'setLocation',
        'comment' => 'setComment',
        'contacts' => 'setContacts',
        'additional_info' => 'setAdditionalInfo',
        'date' => 'setDate',
        'point_shipper_last_name' => 'setPointShipperLastName',
        'point_shipper_first_name' => 'setPointShipperFirstName',
        'point_shipper_second_name' => 'setPointShipperSecondName',
        'point_shipper_address' => 'setPointShipperAddress',
        'phones' => 'setPhones',
        'legal_status' => 'setLegalStatus',
        'company_name' => 'setCompanyName',
        'inn' => 'setInn',
        'taxpayer_id' => 'setTaxpayerId',
        'country_code' => 'setCountryCode',
        'document_type' => 'setDocumentType',
        'document_number' => 'setDocumentNumber',
        'document_date' => 'setDocumentDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'storage_point_id' => 'getStoragePointId',
        'type' => 'getType',
        'from_date' => 'getFromDate',
        'from_time' => 'getFromTime',
        'is_according_to_work_schedule' => 'getIsAccordingToWorkSchedule',
        'to_date' => 'getToDate',
        'to_time' => 'getToTime',
        'address' => 'getAddress',
        'house' => 'getHouse',
        'locality_name' => 'getLocalityName',
        'location' => 'getLocation',
        'comment' => 'getComment',
        'contacts' => 'getContacts',
        'additional_info' => 'getAdditionalInfo',
        'date' => 'getDate',
        'point_shipper_last_name' => 'getPointShipperLastName',
        'point_shipper_first_name' => 'getPointShipperFirstName',
        'point_shipper_second_name' => 'getPointShipperSecondName',
        'point_shipper_address' => 'getPointShipperAddress',
        'phones' => 'getPhones',
        'legal_status' => 'getLegalStatus',
        'company_name' => 'getCompanyName',
        'inn' => 'getInn',
        'taxpayer_id' => 'getTaxpayerId',
        'country_code' => 'getCountryCode',
        'document_type' => 'getDocumentType',
        'document_number' => 'getDocumentNumber',
        'document_date' => 'getDocumentDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('storage_point_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('from_date', $data ?? [], null);
        $this->setIfExists('from_time', $data ?? [], null);
        $this->setIfExists('is_according_to_work_schedule', $data ?? [], false);
        $this->setIfExists('to_date', $data ?? [], null);
        $this->setIfExists('to_time', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('house', $data ?? [], null);
        $this->setIfExists('locality_name', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('contacts', $data ?? [], null);
        $this->setIfExists('additional_info', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('point_shipper_last_name', $data ?? [], null);
        $this->setIfExists('point_shipper_first_name', $data ?? [], null);
        $this->setIfExists('point_shipper_second_name', $data ?? [], null);
        $this->setIfExists('point_shipper_address', $data ?? [], null);
        $this->setIfExists('phones', $data ?? [], null);
        $this->setIfExists('legal_status', $data ?? [], null);
        $this->setIfExists('company_name', $data ?? [], null);
        $this->setIfExists('inn', $data ?? [], null);
        $this->setIfExists('taxpayer_id', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('document_type', $data ?? [], null);
        $this->setIfExists('document_number', $data ?? [], null);
        $this->setIfExists('document_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['storage_point_id'] === null) {
            $invalidProperties[] = "'storage_point_id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['from_date'] === null) {
            $invalidProperties[] = "'from_date' can't be null";
        }
        if (!is_null($this->container['from_time']) && !preg_match("/^\\d{2}:\\d{2}(:\\d{2})?$/", $this->container['from_time'])) {
            $invalidProperties[] = "invalid value for 'from_time', must be conform to the pattern /^\\d{2}:\\d{2}(:\\d{2})?$/.";
        }

        if (!is_null($this->container['to_time']) && !preg_match("/^\\d{2}:\\d{2}(:\\d{2})?$/", $this->container['to_time'])) {
            $invalidProperties[] = "invalid value for 'to_time', must be conform to the pattern /^\\d{2}:\\d{2}(:\\d{2})?$/.";
        }

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['locality_name'] === null) {
            $invalidProperties[] = "'locality_name' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ($this->container['contacts'] === null) {
            $invalidProperties[] = "'contacts' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets storage_point_id
     *
     * @return int
     */
    public function getStoragePointId()
    {
        return $this->container['storage_point_id'];
    }

    /**
     * Sets storage_point_id
     *
     * @param int $storage_point_id Идентификатор склада
     *
     * @return self
     */
    public function setStoragePointId($storage_point_id)
    {
        if (is_null($storage_point_id)) {
            throw new \InvalidArgumentException('non-nullable storage_point_id cannot be null');
        }
        $this->container['storage_point_id'] = $storage_point_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \MagDv\Cargomart\Dto\RoutePointType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \MagDv\Cargomart\Dto\RoutePointType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets from_date
     *
     * @return \DateTime
     */
    public function getFromDate()
    {
        return $this->container['from_date'];
    }

    /**
     * Sets from_date
     *
     * @param \DateTime $from_date Дата на пункте маршрута ОТ
     *
     * @return self
     */
    public function setFromDate($from_date)
    {
        if (is_null($from_date)) {
            throw new \InvalidArgumentException('non-nullable from_date cannot be null');
        }
        $this->container['from_date'] = $from_date;

        return $this;
    }

    /**
     * Gets from_time
     *
     * @return string|null
     */
    public function getFromTime()
    {
        return $this->container['from_time'];
    }

    /**
     * Sets from_time
     *
     * @param string|null $from_time Время работы пункта маршрута ОТ. HH:mm:ss
     *
     * @return self
     */
    public function setFromTime($from_time)
    {
        if (is_null($from_time)) {
            throw new \InvalidArgumentException('non-nullable from_time cannot be null');
        }

        if ((!preg_match("/^\\d{2}:\\d{2}(:\\d{2})?$/", ObjectSerializer::toString($from_time)))) {
            throw new \InvalidArgumentException("invalid value for \$from_time when calling PayloadChunkPoints., must conform to the pattern /^\\d{2}:\\d{2}(:\\d{2})?$/.");
        }

        $this->container['from_time'] = $from_time;

        return $this;
    }

    /**
     * Gets is_according_to_work_schedule
     *
     * @return bool|null
     */
    public function getIsAccordingToWorkSchedule()
    {
        return $this->container['is_according_to_work_schedule'];
    }

    /**
     * Sets is_according_to_work_schedule
     *
     * @param bool|null $is_according_to_work_schedule Флаг времени подачи машины по графику работы пункта
     *
     * @return self
     */
    public function setIsAccordingToWorkSchedule($is_according_to_work_schedule)
    {
        if (is_null($is_according_to_work_schedule)) {
            throw new \InvalidArgumentException('non-nullable is_according_to_work_schedule cannot be null');
        }
        $this->container['is_according_to_work_schedule'] = $is_according_to_work_schedule;

        return $this;
    }

    /**
     * Gets to_date
     *
     * @return \DateTime|null
     */
    public function getToDate()
    {
        return $this->container['to_date'];
    }

    /**
     * Sets to_date
     *
     * @param \DateTime|null $to_date Дата на пункте маршрута ДО
     *
     * @return self
     */
    public function setToDate($to_date)
    {
        if (is_null($to_date)) {
            throw new \InvalidArgumentException('non-nullable to_date cannot be null');
        }
        $this->container['to_date'] = $to_date;

        return $this;
    }

    /**
     * Gets to_time
     *
     * @return string|null
     */
    public function getToTime()
    {
        return $this->container['to_time'];
    }

    /**
     * Sets to_time
     *
     * @param string|null $to_time Время работы пункта маршрута ДО. HH:mm:ss
     *
     * @return self
     */
    public function setToTime($to_time)
    {
        if (is_null($to_time)) {
            throw new \InvalidArgumentException('non-nullable to_time cannot be null');
        }

        if ((!preg_match("/^\\d{2}:\\d{2}(:\\d{2})?$/", ObjectSerializer::toString($to_time)))) {
            throw new \InvalidArgumentException("invalid value for \$to_time when calling PayloadChunkPoints., must conform to the pattern /^\\d{2}:\\d{2}(:\\d{2})?$/.");
        }

        $this->container['to_time'] = $to_time;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Адрес пункта маршрута
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets house
     *
     * @return string|null
     */
    public function getHouse()
    {
        return $this->container['house'];
    }

    /**
     * Sets house
     *
     * @param string|null $house Номер дома пункта маршрута
     *
     * @return self
     */
    public function setHouse($house)
    {
        if (is_null($house)) {
            throw new \InvalidArgumentException('non-nullable house cannot be null');
        }
        $this->container['house'] = $house;

        return $this;
    }

    /**
     * Gets locality_name
     *
     * @return string
     */
    public function getLocalityName()
    {
        return $this->container['locality_name'];
    }

    /**
     * Sets locality_name
     *
     * @param string $locality_name Название пункта маршрута
     *
     * @return self
     */
    public function setLocalityName($locality_name)
    {
        if (is_null($locality_name)) {
            throw new \InvalidArgumentException('non-nullable locality_name cannot be null');
        }
        $this->container['locality_name'] = $locality_name;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location Полный адрес с названием точки
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Комментарий пункта маршрута
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return string[]
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param string[] $contacts Контакты маршрутной точки для связи
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        if (is_null($contacts)) {
            throw new \InvalidArgumentException('non-nullable contacts cannot be null');
        }
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets additional_info
     *
     * @return string|null
     */
    public function getAdditionalInfo()
    {
        return $this->container['additional_info'];
    }

    /**
     * Sets additional_info
     *
     * @param string|null $additional_info Комментарий к пункту маршрута в заказе
     *
     * @return self
     */
    public function setAdditionalInfo($additional_info)
    {
        if (is_null($additional_info)) {
            throw new \InvalidArgumentException('non-nullable additional_info cannot be null');
        }
        $this->container['additional_info'] = $additional_info;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date Форматированная строка даты маршрутной точки
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets point_shipper_last_name
     *
     * @return string|null
     */
    public function getPointShipperLastName()
    {
        return $this->container['point_shipper_last_name'];
    }

    /**
     * Sets point_shipper_last_name
     *
     * @param string|null $point_shipper_last_name Фамилия грузополучателя/грузоотправителя ИП и российских/иностранных физ.лиц
     *
     * @return self
     */
    public function setPointShipperLastName($point_shipper_last_name)
    {
        if (is_null($point_shipper_last_name)) {
            throw new \InvalidArgumentException('non-nullable point_shipper_last_name cannot be null');
        }
        $this->container['point_shipper_last_name'] = $point_shipper_last_name;

        return $this;
    }

    /**
     * Gets point_shipper_first_name
     *
     * @return string|null
     */
    public function getPointShipperFirstName()
    {
        return $this->container['point_shipper_first_name'];
    }

    /**
     * Sets point_shipper_first_name
     *
     * @param string|null $point_shipper_first_name Имя грузополучателя/грузоотправителя ИП и российских/иностранных физ.лиц
     *
     * @return self
     */
    public function setPointShipperFirstName($point_shipper_first_name)
    {
        if (is_null($point_shipper_first_name)) {
            throw new \InvalidArgumentException('non-nullable point_shipper_first_name cannot be null');
        }
        $this->container['point_shipper_first_name'] = $point_shipper_first_name;

        return $this;
    }

    /**
     * Gets point_shipper_second_name
     *
     * @return string|null
     */
    public function getPointShipperSecondName()
    {
        return $this->container['point_shipper_second_name'];
    }

    /**
     * Sets point_shipper_second_name
     *
     * @param string|null $point_shipper_second_name Отчество грузополучателя/грузоотправителя ИП и российских/иностранных физ.лиц
     *
     * @return self
     */
    public function setPointShipperSecondName($point_shipper_second_name)
    {
        if (is_null($point_shipper_second_name)) {
            throw new \InvalidArgumentException('non-nullable point_shipper_second_name cannot be null');
        }
        $this->container['point_shipper_second_name'] = $point_shipper_second_name;

        return $this;
    }

    /**
     * Gets point_shipper_address
     *
     * @return string|null
     */
    public function getPointShipperAddress()
    {
        return $this->container['point_shipper_address'];
    }

    /**
     * Sets point_shipper_address
     *
     * @param string|null $point_shipper_address Адрес регистрации грузополучателя/грузоотправителя
     *
     * @return self
     */
    public function setPointShipperAddress($point_shipper_address)
    {
        if (is_null($point_shipper_address)) {
            throw new \InvalidArgumentException('non-nullable point_shipper_address cannot be null');
        }
        $this->container['point_shipper_address'] = $point_shipper_address;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return string[]|null
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param string[]|null $phones Телефоны контактных лиц
     *
     * @return self
     */
    public function setPhones($phones)
    {
        if (is_null($phones)) {
            throw new \InvalidArgumentException('non-nullable phones cannot be null');
        }
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets legal_status
     *
     * @return \MagDv\Cargomart\Dto\LegalFormEnum|null
     */
    public function getLegalStatus()
    {
        return $this->container['legal_status'];
    }

    /**
     * Sets legal_status
     *
     * @param \MagDv\Cargomart\Dto\LegalFormEnum|null $legal_status Юридический статус
     *
     * @return self
     */
    public function setLegalStatus($legal_status)
    {
        if (is_null($legal_status)) {
            throw new \InvalidArgumentException('non-nullable legal_status cannot be null');
        }
        $this->container['legal_status'] = $legal_status;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name Юридическое наименование
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (is_null($company_name)) {
            throw new \InvalidArgumentException('non-nullable company_name cannot be null');
        }
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets inn
     *
     * @return string|null
     */
    public function getInn()
    {
        return $this->container['inn'];
    }

    /**
     * Sets inn
     *
     * @param string|null $inn ИНН грузополучателя/грузоотправителя
     *
     * @return self
     */
    public function setInn($inn)
    {
        if (is_null($inn)) {
            throw new \InvalidArgumentException('non-nullable inn cannot be null');
        }
        $this->container['inn'] = $inn;

        return $this;
    }

    /**
     * Gets taxpayer_id
     *
     * @return string|null
     */
    public function getTaxpayerId()
    {
        return $this->container['taxpayer_id'];
    }

    /**
     * Sets taxpayer_id
     *
     * @param string|null $taxpayer_id Налоговый идентификатор  грузополучателя/грузоотправителя для иностранных юр.лиц
     *
     * @return self
     */
    public function setTaxpayerId($taxpayer_id)
    {
        if (is_null($taxpayer_id)) {
            throw new \InvalidArgumentException('non-nullable taxpayer_id cannot be null');
        }
        $this->container['taxpayer_id'] = $taxpayer_id;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code Страна резидентства грузополучателя/грузоотправителя для иностранных юр.лиц
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (is_null($country_code)) {
            throw new \InvalidArgumentException('non-nullable country_code cannot be null');
        }
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string|null
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string|null $document_type Вид документа, удостоверяющего личность грузополучателя/грузоотправителя иностранного физ.лица
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        if (is_null($document_type)) {
            throw new \InvalidArgumentException('non-nullable document_type cannot be null');
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string|null
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string|null $document_number Номер документа, удостоверяющего личность грузополучателя/грузоотправителя иностранного физ.лица
     *
     * @return self
     */
    public function setDocumentNumber($document_number)
    {
        if (is_null($document_number)) {
            throw new \InvalidArgumentException('non-nullable document_number cannot be null');
        }
        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets document_date
     *
     * @return \DateTime|null
     */
    public function getDocumentDate()
    {
        return $this->container['document_date'];
    }

    /**
     * Sets document_date
     *
     * @param \DateTime|null $document_date Дата документа, удостоверяющего личность грузополучателя/грузоотправителя иностранного физ.лица
     *
     * @return self
     */
    public function setDocumentDate($document_date)
    {
        if (is_null($document_date)) {
            throw new \InvalidArgumentException('non-nullable document_date cannot be null');
        }
        $this->container['document_date'] = $document_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


