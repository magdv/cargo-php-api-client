<?php
/**
 * OrderEditRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * OrderEditRequest Class Doc Comment
 *
 * @category Class
 * @description Данные для редактирования объекта заказа
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderEditRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderEditRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'comment' => 'string',
        'truck_type_id' => 'int',
        'cargo_weight' => 'float',
        'cargo_capacity' => 'int',
        'cargo_type' => 'string',
        'temperature' => '\MagDv\Cargomart\Dto\TemperatureRange',
        'loading' => 'int[]',
        'device' => 'string[]',
        'conditions' => 'string[]',
        'payment_type_id' => 'int',
        'payment_detail' => 'string',
        'currency_code' => 'string',
        'is_multi_currency' => 'bool',
        'vat_rate' => 'float',
        'open_price' => 'string',
        'step_bid' => 'string',
        'is_no_price' => 'bool',
        'type' => '\MagDv\Cargomart\Dto\OrderType',
        'access_type_id' => '\MagDv\Cargomart\Dto\OrderAccessType',
        'contract_type_id' => 'int',
        'start_date' => 'string',
        'end_date' => 'string',
        'duration' => 'int',
        'name' => 'string',
        'external_id' => 'string',
        'period_from_date' => 'string',
        'period_to_date' => 'string',
        'price_type' => '\MagDv\Cargomart\Dto\OrderPriceType',
        'car_request' => '\MagDv\Cargomart\Dto\OrderOfferCarRequest',
        'company_branch_id' => 'int',
        'params' => '\MagDv\Cargomart\Dto\OrderEditParams'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'comment' => null,
        'truck_type_id' => null,
        'cargo_weight' => null,
        'cargo_capacity' => null,
        'cargo_type' => null,
        'temperature' => null,
        'loading' => null,
        'device' => null,
        'conditions' => null,
        'payment_type_id' => null,
        'payment_detail' => null,
        'currency_code' => null,
        'is_multi_currency' => null,
        'vat_rate' => null,
        'open_price' => null,
        'step_bid' => null,
        'is_no_price' => null,
        'type' => null,
        'access_type_id' => null,
        'contract_type_id' => null,
        'start_date' => null,
        'end_date' => null,
        'duration' => null,
        'name' => null,
        'external_id' => null,
        'period_from_date' => null,
        'period_to_date' => null,
        'price_type' => null,
        'car_request' => null,
        'company_branch_id' => null,
        'params' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'comment' => false,
        'truck_type_id' => false,
        'cargo_weight' => false,
        'cargo_capacity' => false,
        'cargo_type' => false,
        'temperature' => false,
        'loading' => false,
        'device' => false,
        'conditions' => false,
        'payment_type_id' => false,
        'payment_detail' => false,
        'currency_code' => false,
        'is_multi_currency' => false,
        'vat_rate' => false,
        'open_price' => false,
        'step_bid' => false,
        'is_no_price' => false,
        'type' => false,
        'access_type_id' => false,
        'contract_type_id' => false,
        'start_date' => false,
        'end_date' => false,
        'duration' => false,
        'name' => false,
        'external_id' => false,
        'period_from_date' => false,
        'period_to_date' => false,
        'price_type' => false,
        'car_request' => false,
        'company_branch_id' => false,
        'params' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'comment' => 'comment',
        'truck_type_id' => 'truckTypeId',
        'cargo_weight' => 'cargoWeight',
        'cargo_capacity' => 'cargoCapacity',
        'cargo_type' => 'cargoType',
        'temperature' => 'temperature',
        'loading' => 'loading',
        'device' => 'device',
        'conditions' => 'conditions',
        'payment_type_id' => 'paymentTypeId',
        'payment_detail' => 'paymentDetail',
        'currency_code' => 'currencyCode',
        'is_multi_currency' => 'isMultiCurrency',
        'vat_rate' => 'vatRate',
        'open_price' => 'openPrice',
        'step_bid' => 'stepBid',
        'is_no_price' => 'isNoPrice',
        'type' => 'type',
        'access_type_id' => 'accessTypeId',
        'contract_type_id' => 'contractTypeId',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'duration' => 'duration',
        'name' => 'name',
        'external_id' => 'externalId',
        'period_from_date' => 'periodFromDate',
        'period_to_date' => 'periodToDate',
        'price_type' => 'priceType',
        'car_request' => 'carRequest',
        'company_branch_id' => 'companyBranchId',
        'params' => 'params'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'comment' => 'setComment',
        'truck_type_id' => 'setTruckTypeId',
        'cargo_weight' => 'setCargoWeight',
        'cargo_capacity' => 'setCargoCapacity',
        'cargo_type' => 'setCargoType',
        'temperature' => 'setTemperature',
        'loading' => 'setLoading',
        'device' => 'setDevice',
        'conditions' => 'setConditions',
        'payment_type_id' => 'setPaymentTypeId',
        'payment_detail' => 'setPaymentDetail',
        'currency_code' => 'setCurrencyCode',
        'is_multi_currency' => 'setIsMultiCurrency',
        'vat_rate' => 'setVatRate',
        'open_price' => 'setOpenPrice',
        'step_bid' => 'setStepBid',
        'is_no_price' => 'setIsNoPrice',
        'type' => 'setType',
        'access_type_id' => 'setAccessTypeId',
        'contract_type_id' => 'setContractTypeId',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'duration' => 'setDuration',
        'name' => 'setName',
        'external_id' => 'setExternalId',
        'period_from_date' => 'setPeriodFromDate',
        'period_to_date' => 'setPeriodToDate',
        'price_type' => 'setPriceType',
        'car_request' => 'setCarRequest',
        'company_branch_id' => 'setCompanyBranchId',
        'params' => 'setParams'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'comment' => 'getComment',
        'truck_type_id' => 'getTruckTypeId',
        'cargo_weight' => 'getCargoWeight',
        'cargo_capacity' => 'getCargoCapacity',
        'cargo_type' => 'getCargoType',
        'temperature' => 'getTemperature',
        'loading' => 'getLoading',
        'device' => 'getDevice',
        'conditions' => 'getConditions',
        'payment_type_id' => 'getPaymentTypeId',
        'payment_detail' => 'getPaymentDetail',
        'currency_code' => 'getCurrencyCode',
        'is_multi_currency' => 'getIsMultiCurrency',
        'vat_rate' => 'getVatRate',
        'open_price' => 'getOpenPrice',
        'step_bid' => 'getStepBid',
        'is_no_price' => 'getIsNoPrice',
        'type' => 'getType',
        'access_type_id' => 'getAccessTypeId',
        'contract_type_id' => 'getContractTypeId',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'duration' => 'getDuration',
        'name' => 'getName',
        'external_id' => 'getExternalId',
        'period_from_date' => 'getPeriodFromDate',
        'period_to_date' => 'getPeriodToDate',
        'price_type' => 'getPriceType',
        'car_request' => 'getCarRequest',
        'company_branch_id' => 'getCompanyBranchId',
        'params' => 'getParams'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('truck_type_id', $data ?? [], null);
        $this->setIfExists('cargo_weight', $data ?? [], null);
        $this->setIfExists('cargo_capacity', $data ?? [], null);
        $this->setIfExists('cargo_type', $data ?? [], null);
        $this->setIfExists('temperature', $data ?? [], null);
        $this->setIfExists('loading', $data ?? [], null);
        $this->setIfExists('device', $data ?? [], null);
        $this->setIfExists('conditions', $data ?? [], null);
        $this->setIfExists('payment_type_id', $data ?? [], null);
        $this->setIfExists('payment_detail', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('is_multi_currency', $data ?? [], false);
        $this->setIfExists('vat_rate', $data ?? [], null);
        $this->setIfExists('open_price', $data ?? [], null);
        $this->setIfExists('step_bid', $data ?? [], null);
        $this->setIfExists('is_no_price', $data ?? [], false);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('access_type_id', $data ?? [], null);
        $this->setIfExists('contract_type_id', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('period_from_date', $data ?? [], null);
        $this->setIfExists('period_to_date', $data ?? [], null);
        $this->setIfExists('price_type', $data ?? [], null);
        $this->setIfExists('car_request', $data ?? [], null);
        $this->setIfExists('company_branch_id', $data ?? [], null);
        $this->setIfExists('params', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Коментарий к заказу
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets truck_type_id
     *
     * @return int|null
     */
    public function getTruckTypeId()
    {
        return $this->container['truck_type_id'];
    }

    /**
     * Sets truck_type_id
     *
     * @param int|null $truck_type_id Идентификатор типа транспорта
     *
     * @return self
     */
    public function setTruckTypeId($truck_type_id)
    {
        if (is_null($truck_type_id)) {
            throw new \InvalidArgumentException('non-nullable truck_type_id cannot be null');
        }
        $this->container['truck_type_id'] = $truck_type_id;

        return $this;
    }

    /**
     * Gets cargo_weight
     *
     * @return float|null
     */
    public function getCargoWeight()
    {
        return $this->container['cargo_weight'];
    }

    /**
     * Sets cargo_weight
     *
     * @param float|null $cargo_weight Вес груза в тоннах
     *
     * @return self
     */
    public function setCargoWeight($cargo_weight)
    {
        if (is_null($cargo_weight)) {
            throw new \InvalidArgumentException('non-nullable cargo_weight cannot be null');
        }
        $this->container['cargo_weight'] = $cargo_weight;

        return $this;
    }

    /**
     * Gets cargo_capacity
     *
     * @return int|null
     */
    public function getCargoCapacity()
    {
        return $this->container['cargo_capacity'];
    }

    /**
     * Sets cargo_capacity
     *
     * @param int|null $cargo_capacity Объём груза в м3
     *
     * @return self
     */
    public function setCargoCapacity($cargo_capacity)
    {
        if (is_null($cargo_capacity)) {
            throw new \InvalidArgumentException('non-nullable cargo_capacity cannot be null');
        }
        $this->container['cargo_capacity'] = $cargo_capacity;

        return $this;
    }

    /**
     * Gets cargo_type
     *
     * @return string|null
     */
    public function getCargoType()
    {
        return $this->container['cargo_type'];
    }

    /**
     * Sets cargo_type
     *
     * @param string|null $cargo_type Описание груза
     *
     * @return self
     */
    public function setCargoType($cargo_type)
    {
        if (is_null($cargo_type)) {
            throw new \InvalidArgumentException('non-nullable cargo_type cannot be null');
        }
        $this->container['cargo_type'] = $cargo_type;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return \MagDv\Cargomart\Dto\TemperatureRange|null
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param \MagDv\Cargomart\Dto\TemperatureRange|null $temperature Температурный режим в кельвинах
     *
     * @return self
     */
    public function setTemperature($temperature)
    {
        if (is_null($temperature)) {
            throw new \InvalidArgumentException('non-nullable temperature cannot be null');
        }
        $this->container['temperature'] = $temperature;

        return $this;
    }

    /**
     * Gets loading
     *
     * @return int[]|null
     */
    public function getLoading()
    {
        return $this->container['loading'];
    }

    /**
     * Sets loading
     *
     * @param int[]|null $loading Требуемые типы погрузки-выгрузки
     *
     * @return self
     */
    public function setLoading($loading)
    {
        if (is_null($loading)) {
            throw new \InvalidArgumentException('non-nullable loading cannot be null');
        }
        $this->container['loading'] = $loading;

        return $this;
    }

    /**
     * Gets device
     *
     * @return string[]|null
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param string[]|null $device Дополнительное оборудование машины
     *
     * @return self
     */
    public function setDevice($device)
    {
        if (is_null($device)) {
            throw new \InvalidArgumentException('non-nullable device cannot be null');
        }
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return string[]|null
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param string[]|null $conditions Условия перевозки
     *
     * @return self
     */
    public function setConditions($conditions)
    {
        if (is_null($conditions)) {
            throw new \InvalidArgumentException('non-nullable conditions cannot be null');
        }
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets payment_type_id
     *
     * @return int|null
     */
    public function getPaymentTypeId()
    {
        return $this->container['payment_type_id'];
    }

    /**
     * Sets payment_type_id
     *
     * @param int|null $payment_type_id Идентификатор способа оплаты заказа
     *
     * @return self
     */
    public function setPaymentTypeId($payment_type_id)
    {
        if (is_null($payment_type_id)) {
            throw new \InvalidArgumentException('non-nullable payment_type_id cannot be null');
        }
        $this->container['payment_type_id'] = $payment_type_id;

        return $this;
    }

    /**
     * Gets payment_detail
     *
     * @return string|null
     */
    public function getPaymentDetail()
    {
        return $this->container['payment_detail'];
    }

    /**
     * Sets payment_detail
     *
     * @param string|null $payment_detail Комментарий по оплате
     *
     * @return self
     */
    public function setPaymentDetail($payment_detail)
    {
        if (is_null($payment_detail)) {
            throw new \InvalidArgumentException('non-nullable payment_detail cannot be null');
        }
        $this->container['payment_detail'] = $payment_detail;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code Код валюты заказа
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets is_multi_currency
     *
     * @return bool|null
     */
    public function getIsMultiCurrency()
    {
        return $this->container['is_multi_currency'];
    }

    /**
     * Sets is_multi_currency
     *
     * @param bool|null $is_multi_currency Флаг мультивалютности
     *
     * @return self
     */
    public function setIsMultiCurrency($is_multi_currency)
    {
        if (is_null($is_multi_currency)) {
            throw new \InvalidArgumentException('non-nullable is_multi_currency cannot be null');
        }
        $this->container['is_multi_currency'] = $is_multi_currency;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return float|null
     */
    public function getVatRate()
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param float|null $vat_rate Ставка НДС
     *
     * @return self
     */
    public function setVatRate($vat_rate)
    {
        if (is_null($vat_rate)) {
            throw new \InvalidArgumentException('non-nullable vat_rate cannot be null');
        }
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }

    /**
     * Gets open_price
     *
     * @return string|null
     */
    public function getOpenPrice()
    {
        return $this->container['open_price'];
    }

    /**
     * Sets open_price
     *
     * @param string|null $open_price Начальная цена заказа
     *
     * @return self
     */
    public function setOpenPrice($open_price)
    {
        if (is_null($open_price)) {
            throw new \InvalidArgumentException('non-nullable open_price cannot be null');
        }
        $this->container['open_price'] = $open_price;

        return $this;
    }

    /**
     * Gets step_bid
     *
     * @return string|null
     */
    public function getStepBid()
    {
        return $this->container['step_bid'];
    }

    /**
     * Sets step_bid
     *
     * @param string|null $step_bid Шаг измеения цены заказа
     *
     * @return self
     */
    public function setStepBid($step_bid)
    {
        if (is_null($step_bid)) {
            throw new \InvalidArgumentException('non-nullable step_bid cannot be null');
        }
        $this->container['step_bid'] = $step_bid;

        return $this;
    }

    /**
     * Gets is_no_price
     *
     * @return bool|null
     */
    public function getIsNoPrice()
    {
        return $this->container['is_no_price'];
    }

    /**
     * Sets is_no_price
     *
     * @param bool|null $is_no_price Флаг заказ без цены
     *
     * @return self
     */
    public function setIsNoPrice($is_no_price)
    {
        if (is_null($is_no_price)) {
            throw new \InvalidArgumentException('non-nullable is_no_price cannot be null');
        }
        $this->container['is_no_price'] = $is_no_price;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \MagDv\Cargomart\Dto\OrderType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \MagDv\Cargomart\Dto\OrderType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets access_type_id
     *
     * @return \MagDv\Cargomart\Dto\OrderAccessType|null
     */
    public function getAccessTypeId()
    {
        return $this->container['access_type_id'];
    }

    /**
     * Sets access_type_id
     *
     * @param \MagDv\Cargomart\Dto\OrderAccessType|null $access_type_id access_type_id
     *
     * @return self
     */
    public function setAccessTypeId($access_type_id)
    {
        if (is_null($access_type_id)) {
            throw new \InvalidArgumentException('non-nullable access_type_id cannot be null');
        }
        $this->container['access_type_id'] = $access_type_id;

        return $this;
    }

    /**
     * Gets contract_type_id
     *
     * @return int|null
     */
    public function getContractTypeId()
    {
        return $this->container['contract_type_id'];
    }

    /**
     * Sets contract_type_id
     *
     * @param int|null $contract_type_id Идентификатор типа договора партнерства, учитывается при accessTypeId = prt_contract_exclude
     *
     * @return self
     */
    public function setContractTypeId($contract_type_id)
    {
        if (is_null($contract_type_id)) {
            throw new \InvalidArgumentException('non-nullable contract_type_id cannot be null');
        }
        $this->container['contract_type_id'] = $contract_type_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string|null $start_date Начальная дата торгов
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string|null $end_date Конечная дата торгов
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int|null $duration Продолжительность торгов
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Название шаблона, только для шаблонов
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id Внешний идентификатор
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets period_from_date
     *
     * @return string|null
     */
    public function getPeriodFromDate()
    {
        return $this->container['period_from_date'];
    }

    /**
     * Sets period_from_date
     *
     * @param string|null $period_from_date Период исполнения грузоперевозки От
     *
     * @return self
     */
    public function setPeriodFromDate($period_from_date)
    {
        if (is_null($period_from_date)) {
            throw new \InvalidArgumentException('non-nullable period_from_date cannot be null');
        }
        $this->container['period_from_date'] = $period_from_date;

        return $this;
    }

    /**
     * Gets period_to_date
     *
     * @return string|null
     */
    public function getPeriodToDate()
    {
        return $this->container['period_to_date'];
    }

    /**
     * Sets period_to_date
     *
     * @param string|null $period_to_date Период исполнения грузоперевозки До
     *
     * @return self
     */
    public function setPeriodToDate($period_to_date)
    {
        if (is_null($period_to_date)) {
            throw new \InvalidArgumentException('non-nullable period_to_date cannot be null');
        }
        $this->container['period_to_date'] = $period_to_date;

        return $this;
    }

    /**
     * Gets price_type
     *
     * @return \MagDv\Cargomart\Dto\OrderPriceType|null
     */
    public function getPriceType()
    {
        return $this->container['price_type'];
    }

    /**
     * Sets price_type
     *
     * @param \MagDv\Cargomart\Dto\OrderPriceType|null $price_type price_type
     *
     * @return self
     */
    public function setPriceType($price_type)
    {
        if (is_null($price_type)) {
            throw new \InvalidArgumentException('non-nullable price_type cannot be null');
        }
        $this->container['price_type'] = $price_type;

        return $this;
    }

    /**
     * Gets car_request
     *
     * @return \MagDv\Cargomart\Dto\OrderOfferCarRequest|null
     */
    public function getCarRequest()
    {
        return $this->container['car_request'];
    }

    /**
     * Sets car_request
     *
     * @param \MagDv\Cargomart\Dto\OrderOfferCarRequest|null $car_request Запрос количества машин
     *
     * @return self
     */
    public function setCarRequest($car_request)
    {
        if (is_null($car_request)) {
            throw new \InvalidArgumentException('non-nullable car_request cannot be null');
        }
        $this->container['car_request'] = $car_request;

        return $this;
    }

    /**
     * Gets company_branch_id
     *
     * @return int|null
     */
    public function getCompanyBranchId()
    {
        return $this->container['company_branch_id'];
    }

    /**
     * Sets company_branch_id
     *
     * @param int|null $company_branch_id Идентификатор дочерней компании
     *
     * @return self
     */
    public function setCompanyBranchId($company_branch_id)
    {
        if (is_null($company_branch_id)) {
            throw new \InvalidArgumentException('non-nullable company_branch_id cannot be null');
        }
        $this->container['company_branch_id'] = $company_branch_id;

        return $this;
    }

    /**
     * Gets params
     *
     * @return \MagDv\Cargomart\Dto\OrderEditParams|null
     */
    public function getParams()
    {
        return $this->container['params'];
    }

    /**
     * Sets params
     *
     * @param \MagDv\Cargomart\Dto\OrderEditParams|null $params Дополнительные параметры/флаги заказа
     *
     * @return self
     */
    public function setParams($params)
    {
        if (is_null($params)) {
            throw new \InvalidArgumentException('non-nullable params cannot be null');
        }
        $this->container['params'] = $params;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


