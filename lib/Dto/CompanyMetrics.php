<?php
/**
 * CompanyMetrics
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * CompanyMetrics Class Doc Comment
 *
 * @category Class
 * @description Показатели работы компании
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CompanyMetrics implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'company-metrics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'orders_won' => 'int',
        'orders_confirmed' => 'float',
        'orders_rejected' => 'float',
        'orders_confirmed_time' => 'float',
        'orders_created' => 'int',
        'orders_quality_score' => 'int',
        'orders_not_delayed' => 'float',
        'orders_in_safe' => 'float',
        'orders_other_conditions_ok' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'orders_won' => null,
        'orders_confirmed' => null,
        'orders_rejected' => null,
        'orders_confirmed_time' => null,
        'orders_created' => null,
        'orders_quality_score' => null,
        'orders_not_delayed' => null,
        'orders_in_safe' => null,
        'orders_other_conditions_ok' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'orders_won' => true,
        'orders_confirmed' => true,
        'orders_rejected' => true,
        'orders_confirmed_time' => true,
        'orders_created' => true,
        'orders_quality_score' => true,
        'orders_not_delayed' => true,
        'orders_in_safe' => true,
        'orders_other_conditions_ok' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orders_won' => 'ordersWon',
        'orders_confirmed' => 'ordersConfirmed',
        'orders_rejected' => 'ordersRejected',
        'orders_confirmed_time' => 'ordersConfirmedTime',
        'orders_created' => 'ordersCreated',
        'orders_quality_score' => 'ordersQualityScore',
        'orders_not_delayed' => 'ordersNotDelayed',
        'orders_in_safe' => 'ordersInSafe',
        'orders_other_conditions_ok' => 'ordersOtherConditionsOk'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'orders_won' => 'setOrdersWon',
        'orders_confirmed' => 'setOrdersConfirmed',
        'orders_rejected' => 'setOrdersRejected',
        'orders_confirmed_time' => 'setOrdersConfirmedTime',
        'orders_created' => 'setOrdersCreated',
        'orders_quality_score' => 'setOrdersQualityScore',
        'orders_not_delayed' => 'setOrdersNotDelayed',
        'orders_in_safe' => 'setOrdersInSafe',
        'orders_other_conditions_ok' => 'setOrdersOtherConditionsOk'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'orders_won' => 'getOrdersWon',
        'orders_confirmed' => 'getOrdersConfirmed',
        'orders_rejected' => 'getOrdersRejected',
        'orders_confirmed_time' => 'getOrdersConfirmedTime',
        'orders_created' => 'getOrdersCreated',
        'orders_quality_score' => 'getOrdersQualityScore',
        'orders_not_delayed' => 'getOrdersNotDelayed',
        'orders_in_safe' => 'getOrdersInSafe',
        'orders_other_conditions_ok' => 'getOrdersOtherConditionsOk'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('orders_won', $data ?? [], null);
        $this->setIfExists('orders_confirmed', $data ?? [], null);
        $this->setIfExists('orders_rejected', $data ?? [], null);
        $this->setIfExists('orders_confirmed_time', $data ?? [], null);
        $this->setIfExists('orders_created', $data ?? [], null);
        $this->setIfExists('orders_quality_score', $data ?? [], null);
        $this->setIfExists('orders_not_delayed', $data ?? [], null);
        $this->setIfExists('orders_in_safe', $data ?? [], null);
        $this->setIfExists('orders_other_conditions_ok', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['orders_won'] === null) {
            $invalidProperties[] = "'orders_won' can't be null";
        }
        if ($this->container['orders_confirmed'] === null) {
            $invalidProperties[] = "'orders_confirmed' can't be null";
        }
        if ($this->container['orders_rejected'] === null) {
            $invalidProperties[] = "'orders_rejected' can't be null";
        }
        if ($this->container['orders_confirmed_time'] === null) {
            $invalidProperties[] = "'orders_confirmed_time' can't be null";
        }
        if ($this->container['orders_created'] === null) {
            $invalidProperties[] = "'orders_created' can't be null";
        }
        if ($this->container['orders_quality_score'] === null) {
            $invalidProperties[] = "'orders_quality_score' can't be null";
        }
        if ($this->container['orders_not_delayed'] === null) {
            $invalidProperties[] = "'orders_not_delayed' can't be null";
        }
        if ($this->container['orders_in_safe'] === null) {
            $invalidProperties[] = "'orders_in_safe' can't be null";
        }
        if ($this->container['orders_other_conditions_ok'] === null) {
            $invalidProperties[] = "'orders_other_conditions_ok' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets orders_won
     *
     * @return int
     */
    public function getOrdersWon()
    {
        return $this->container['orders_won'];
    }

    /**
     * Sets orders_won
     *
     * @param int $orders_won orders_won
     *
     * @return self
     */
    public function setOrdersWon($orders_won)
    {
        if (is_null($orders_won)) {
            array_push($this->openAPINullablesSetToNull, 'orders_won');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orders_won', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['orders_won'] = $orders_won;

        return $this;
    }

    /**
     * Gets orders_confirmed
     *
     * @return float
     */
    public function getOrdersConfirmed()
    {
        return $this->container['orders_confirmed'];
    }

    /**
     * Sets orders_confirmed
     *
     * @param float $orders_confirmed orders_confirmed
     *
     * @return self
     */
    public function setOrdersConfirmed($orders_confirmed)
    {
        if (is_null($orders_confirmed)) {
            array_push($this->openAPINullablesSetToNull, 'orders_confirmed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orders_confirmed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['orders_confirmed'] = $orders_confirmed;

        return $this;
    }

    /**
     * Gets orders_rejected
     *
     * @return float
     */
    public function getOrdersRejected()
    {
        return $this->container['orders_rejected'];
    }

    /**
     * Sets orders_rejected
     *
     * @param float $orders_rejected orders_rejected
     *
     * @return self
     */
    public function setOrdersRejected($orders_rejected)
    {
        if (is_null($orders_rejected)) {
            array_push($this->openAPINullablesSetToNull, 'orders_rejected');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orders_rejected', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['orders_rejected'] = $orders_rejected;

        return $this;
    }

    /**
     * Gets orders_confirmed_time
     *
     * @return float
     */
    public function getOrdersConfirmedTime()
    {
        return $this->container['orders_confirmed_time'];
    }

    /**
     * Sets orders_confirmed_time
     *
     * @param float $orders_confirmed_time orders_confirmed_time
     *
     * @return self
     */
    public function setOrdersConfirmedTime($orders_confirmed_time)
    {
        if (is_null($orders_confirmed_time)) {
            array_push($this->openAPINullablesSetToNull, 'orders_confirmed_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orders_confirmed_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['orders_confirmed_time'] = $orders_confirmed_time;

        return $this;
    }

    /**
     * Gets orders_created
     *
     * @return int
     */
    public function getOrdersCreated()
    {
        return $this->container['orders_created'];
    }

    /**
     * Sets orders_created
     *
     * @param int $orders_created orders_created
     *
     * @return self
     */
    public function setOrdersCreated($orders_created)
    {
        if (is_null($orders_created)) {
            array_push($this->openAPINullablesSetToNull, 'orders_created');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orders_created', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['orders_created'] = $orders_created;

        return $this;
    }

    /**
     * Gets orders_quality_score
     *
     * @return int
     */
    public function getOrdersQualityScore()
    {
        return $this->container['orders_quality_score'];
    }

    /**
     * Sets orders_quality_score
     *
     * @param int $orders_quality_score orders_quality_score
     *
     * @return self
     */
    public function setOrdersQualityScore($orders_quality_score)
    {
        if (is_null($orders_quality_score)) {
            array_push($this->openAPINullablesSetToNull, 'orders_quality_score');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orders_quality_score', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['orders_quality_score'] = $orders_quality_score;

        return $this;
    }

    /**
     * Gets orders_not_delayed
     *
     * @return float
     */
    public function getOrdersNotDelayed()
    {
        return $this->container['orders_not_delayed'];
    }

    /**
     * Sets orders_not_delayed
     *
     * @param float $orders_not_delayed orders_not_delayed
     *
     * @return self
     */
    public function setOrdersNotDelayed($orders_not_delayed)
    {
        if (is_null($orders_not_delayed)) {
            array_push($this->openAPINullablesSetToNull, 'orders_not_delayed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orders_not_delayed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['orders_not_delayed'] = $orders_not_delayed;

        return $this;
    }

    /**
     * Gets orders_in_safe
     *
     * @return float
     */
    public function getOrdersInSafe()
    {
        return $this->container['orders_in_safe'];
    }

    /**
     * Sets orders_in_safe
     *
     * @param float $orders_in_safe orders_in_safe
     *
     * @return self
     */
    public function setOrdersInSafe($orders_in_safe)
    {
        if (is_null($orders_in_safe)) {
            array_push($this->openAPINullablesSetToNull, 'orders_in_safe');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orders_in_safe', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['orders_in_safe'] = $orders_in_safe;

        return $this;
    }

    /**
     * Gets orders_other_conditions_ok
     *
     * @return float
     */
    public function getOrdersOtherConditionsOk()
    {
        return $this->container['orders_other_conditions_ok'];
    }

    /**
     * Sets orders_other_conditions_ok
     *
     * @param float $orders_other_conditions_ok orders_other_conditions_ok
     *
     * @return self
     */
    public function setOrdersOtherConditionsOk($orders_other_conditions_ok)
    {
        if (is_null($orders_other_conditions_ok)) {
            array_push($this->openAPINullablesSetToNull, 'orders_other_conditions_ok');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orders_other_conditions_ok', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['orders_other_conditions_ok'] = $orders_other_conditions_ok;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


