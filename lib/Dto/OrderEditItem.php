<?php
/**
 * OrderEditItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * OrderEditItem Class Doc Comment
 *
 * @category Class
 * @description Полная информация по заказу, карточка заказа
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderEditItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderEditItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'serial_id' => 'int',
        'serial_number_and_version' => 'string',
        'status_id' => 'int',
        'ext_status_id' => 'int',
        'comment' => 'string',
        'details' => '\MagDv\Cargomart\Dto\OrderDetails[]',
        'truck_type_id' => 'int',
        'cargo_weight' => 'float',
        'cargo_capacity' => 'int',
        'cargo_type' => 'string',
        'load_weight' => 'float',
        'load_capacity' => 'int',
        'temperature' => '\MagDv\Cargomart\Dto\TemperatureRange',
        'loading' => 'int[]',
        'device' => 'string[]',
        'conditions' => 'string[]',
        'payment_type_id' => 'int',
        'payment_detail' => 'string',
        'currency_code' => 'string',
        'is_multi_currency' => 'bool',
        'vat_rate' => 'float',
        'vat' => 'string',
        'vat_less_price' => 'string',
        'open_price' => 'string',
        'current_price' => 'string',
        'current_price_with_fee' => 'string',
        'step_bid' => 'string',
        'is_no_price' => 'bool',
        'is_round' => 'bool',
        'is_view' => 'bool',
        'type' => '\MagDv\Cargomart\Dto\OrderType',
        'price_strategy_type' => '\MagDv\Cargomart\Dto\OrderPriceStrategyType',
        'bidding_type' => '\MagDv\Cargomart\Dto\OrderBiddingType',
        'protected_bid_reason' => '\MagDv\Cargomart\Dto\ProtectedBidReason[]',
        'view_count' => 'int',
        'pin_count' => 'int',
        'bid_count' => 'int',
        'comment_count' => 'int',
        'consignor_id' => 'string',
        'access_type_id' => '\MagDv\Cargomart\Dto\OrderAccessType',
        'create_date' => '\DateTime',
        'start_date' => 'string',
        'end_date' => 'string',
        'duration' => 'int',
        'name' => 'string',
        'route_point' => '\MagDv\Cargomart\Dto\OrderRoutePoint[]',
        'point' => '\MagDv\Cargomart\Dto\RoutePointEdit[]',
        'contact' => 'int[]',
        'external_id' => 'string',
        'last_update' => 'int',
        'refuse_reason_code' => 'string',
        'refuse_reason_comment' => 'string',
        'refuse_date' => 'string',
        'price_type' => '\MagDv\Cargomart\Dto\OrderPriceType',
        'period_from_date' => 'string',
        'period_to_date' => 'string',
        'kind' => '\MagDv\Cargomart\Dto\OrderDraftKindEnum',
        'is_general_partner' => 'bool',
        'general_partner_id' => 'string',
        'moderation_message' => '\MagDv\Cargomart\Dto\ModerationMessage[]',
        'general_partner_contract_id' => 'string',
        'general_partner_contact' => 'int[]',
        'company_branch_id' => 'int',
        'start_perform_date' => '\DateTime',
        'is_proxy_date_end' => 'bool',
        'car_request' => '\MagDv\Cargomart\Dto\OrderOfferCarRequest',
        'recommended_price' => 'string',
        'progress' => '\MagDv\Cargomart\Dto\ProgressItem[]',
        'params' => '\MagDv\Cargomart\Dto\OrderEditParams',
        'tag' => 'string[]',
        'access' => '\MagDv\Cargomart\Dto\OrderAccess'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'serial_id' => null,
        'serial_number_and_version' => null,
        'status_id' => null,
        'ext_status_id' => null,
        'comment' => null,
        'details' => null,
        'truck_type_id' => null,
        'cargo_weight' => null,
        'cargo_capacity' => null,
        'cargo_type' => null,
        'load_weight' => null,
        'load_capacity' => null,
        'temperature' => null,
        'loading' => null,
        'device' => null,
        'conditions' => null,
        'payment_type_id' => null,
        'payment_detail' => null,
        'currency_code' => null,
        'is_multi_currency' => null,
        'vat_rate' => null,
        'vat' => 'cm-price',
        'vat_less_price' => null,
        'open_price' => null,
        'current_price' => 'cm-price',
        'current_price_with_fee' => 'cm-price',
        'step_bid' => null,
        'is_no_price' => null,
        'is_round' => null,
        'is_view' => null,
        'type' => null,
        'price_strategy_type' => null,
        'bidding_type' => null,
        'protected_bid_reason' => null,
        'view_count' => null,
        'pin_count' => null,
        'bid_count' => null,
        'comment_count' => null,
        'consignor_id' => null,
        'access_type_id' => null,
        'create_date' => 'date-time',
        'start_date' => null,
        'end_date' => null,
        'duration' => null,
        'name' => null,
        'route_point' => null,
        'point' => null,
        'contact' => null,
        'external_id' => null,
        'last_update' => null,
        'refuse_reason_code' => null,
        'refuse_reason_comment' => null,
        'refuse_date' => null,
        'price_type' => null,
        'period_from_date' => null,
        'period_to_date' => null,
        'kind' => null,
        'is_general_partner' => null,
        'general_partner_id' => null,
        'moderation_message' => null,
        'general_partner_contract_id' => null,
        'general_partner_contact' => null,
        'company_branch_id' => null,
        'start_perform_date' => 'date-time',
        'is_proxy_date_end' => null,
        'car_request' => null,
        'recommended_price' => null,
        'progress' => null,
        'params' => null,
        'tag' => null,
        'access' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'serial_id' => false,
        'serial_number_and_version' => false,
        'status_id' => false,
        'ext_status_id' => false,
        'comment' => false,
        'details' => false,
        'truck_type_id' => false,
        'cargo_weight' => false,
        'cargo_capacity' => false,
        'cargo_type' => false,
        'load_weight' => false,
        'load_capacity' => false,
        'temperature' => false,
        'loading' => false,
        'device' => false,
        'conditions' => false,
        'payment_type_id' => false,
        'payment_detail' => false,
        'currency_code' => false,
        'is_multi_currency' => false,
        'vat_rate' => false,
        'vat' => false,
        'vat_less_price' => false,
        'open_price' => false,
        'current_price' => false,
        'current_price_with_fee' => false,
        'step_bid' => false,
        'is_no_price' => false,
        'is_round' => false,
        'is_view' => false,
        'type' => false,
        'price_strategy_type' => false,
        'bidding_type' => false,
        'protected_bid_reason' => false,
        'view_count' => false,
        'pin_count' => false,
        'bid_count' => false,
        'comment_count' => false,
        'consignor_id' => false,
        'access_type_id' => false,
        'create_date' => false,
        'start_date' => false,
        'end_date' => false,
        'duration' => false,
        'name' => false,
        'route_point' => false,
        'point' => false,
        'contact' => false,
        'external_id' => false,
        'last_update' => false,
        'refuse_reason_code' => false,
        'refuse_reason_comment' => false,
        'refuse_date' => false,
        'price_type' => false,
        'period_from_date' => false,
        'period_to_date' => false,
        'kind' => false,
        'is_general_partner' => false,
        'general_partner_id' => false,
        'moderation_message' => false,
        'general_partner_contract_id' => false,
        'general_partner_contact' => false,
        'company_branch_id' => false,
        'start_perform_date' => false,
        'is_proxy_date_end' => false,
        'car_request' => false,
        'recommended_price' => false,
        'progress' => false,
        'params' => false,
        'tag' => false,
        'access' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'serial_id' => 'serialId',
        'serial_number_and_version' => 'serialNumberAndVersion',
        'status_id' => 'statusId',
        'ext_status_id' => 'extStatusId',
        'comment' => 'comment',
        'details' => 'details',
        'truck_type_id' => 'truckTypeId',
        'cargo_weight' => 'cargoWeight',
        'cargo_capacity' => 'cargoCapacity',
        'cargo_type' => 'cargoType',
        'load_weight' => 'loadWeight',
        'load_capacity' => 'loadCapacity',
        'temperature' => 'temperature',
        'loading' => 'loading',
        'device' => 'device',
        'conditions' => 'conditions',
        'payment_type_id' => 'paymentTypeId',
        'payment_detail' => 'paymentDetail',
        'currency_code' => 'currencyCode',
        'is_multi_currency' => 'isMultiCurrency',
        'vat_rate' => 'vatRate',
        'vat' => 'vat',
        'vat_less_price' => 'vatLessPrice',
        'open_price' => 'openPrice',
        'current_price' => 'currentPrice',
        'current_price_with_fee' => 'currentPriceWithFee',
        'step_bid' => 'stepBid',
        'is_no_price' => 'isNoPrice',
        'is_round' => 'isRound',
        'is_view' => 'isView',
        'type' => 'type',
        'price_strategy_type' => 'priceStrategyType',
        'bidding_type' => 'biddingType',
        'protected_bid_reason' => 'protectedBidReason',
        'view_count' => 'viewCount',
        'pin_count' => 'pinCount',
        'bid_count' => 'bidCount',
        'comment_count' => 'commentCount',
        'consignor_id' => 'consignorId',
        'access_type_id' => 'accessTypeId',
        'create_date' => 'createDate',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'duration' => 'duration',
        'name' => 'name',
        'route_point' => 'routePoint',
        'point' => 'point',
        'contact' => 'contact',
        'external_id' => 'externalId',
        'last_update' => 'lastUpdate',
        'refuse_reason_code' => 'refuseReasonCode',
        'refuse_reason_comment' => 'refuseReasonComment',
        'refuse_date' => 'refuseDate',
        'price_type' => 'priceType',
        'period_from_date' => 'periodFromDate',
        'period_to_date' => 'periodToDate',
        'kind' => 'kind',
        'is_general_partner' => 'isGeneralPartner',
        'general_partner_id' => 'generalPartnerId',
        'moderation_message' => 'moderationMessage',
        'general_partner_contract_id' => 'generalPartnerContractId',
        'general_partner_contact' => 'generalPartnerContact',
        'company_branch_id' => 'companyBranchId',
        'start_perform_date' => 'startPerformDate',
        'is_proxy_date_end' => 'isProxyDateEnd',
        'car_request' => 'carRequest',
        'recommended_price' => 'recommendedPrice',
        'progress' => 'progress',
        'params' => 'params',
        'tag' => 'tag',
        'access' => 'access'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'serial_id' => 'setSerialId',
        'serial_number_and_version' => 'setSerialNumberAndVersion',
        'status_id' => 'setStatusId',
        'ext_status_id' => 'setExtStatusId',
        'comment' => 'setComment',
        'details' => 'setDetails',
        'truck_type_id' => 'setTruckTypeId',
        'cargo_weight' => 'setCargoWeight',
        'cargo_capacity' => 'setCargoCapacity',
        'cargo_type' => 'setCargoType',
        'load_weight' => 'setLoadWeight',
        'load_capacity' => 'setLoadCapacity',
        'temperature' => 'setTemperature',
        'loading' => 'setLoading',
        'device' => 'setDevice',
        'conditions' => 'setConditions',
        'payment_type_id' => 'setPaymentTypeId',
        'payment_detail' => 'setPaymentDetail',
        'currency_code' => 'setCurrencyCode',
        'is_multi_currency' => 'setIsMultiCurrency',
        'vat_rate' => 'setVatRate',
        'vat' => 'setVat',
        'vat_less_price' => 'setVatLessPrice',
        'open_price' => 'setOpenPrice',
        'current_price' => 'setCurrentPrice',
        'current_price_with_fee' => 'setCurrentPriceWithFee',
        'step_bid' => 'setStepBid',
        'is_no_price' => 'setIsNoPrice',
        'is_round' => 'setIsRound',
        'is_view' => 'setIsView',
        'type' => 'setType',
        'price_strategy_type' => 'setPriceStrategyType',
        'bidding_type' => 'setBiddingType',
        'protected_bid_reason' => 'setProtectedBidReason',
        'view_count' => 'setViewCount',
        'pin_count' => 'setPinCount',
        'bid_count' => 'setBidCount',
        'comment_count' => 'setCommentCount',
        'consignor_id' => 'setConsignorId',
        'access_type_id' => 'setAccessTypeId',
        'create_date' => 'setCreateDate',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'duration' => 'setDuration',
        'name' => 'setName',
        'route_point' => 'setRoutePoint',
        'point' => 'setPoint',
        'contact' => 'setContact',
        'external_id' => 'setExternalId',
        'last_update' => 'setLastUpdate',
        'refuse_reason_code' => 'setRefuseReasonCode',
        'refuse_reason_comment' => 'setRefuseReasonComment',
        'refuse_date' => 'setRefuseDate',
        'price_type' => 'setPriceType',
        'period_from_date' => 'setPeriodFromDate',
        'period_to_date' => 'setPeriodToDate',
        'kind' => 'setKind',
        'is_general_partner' => 'setIsGeneralPartner',
        'general_partner_id' => 'setGeneralPartnerId',
        'moderation_message' => 'setModerationMessage',
        'general_partner_contract_id' => 'setGeneralPartnerContractId',
        'general_partner_contact' => 'setGeneralPartnerContact',
        'company_branch_id' => 'setCompanyBranchId',
        'start_perform_date' => 'setStartPerformDate',
        'is_proxy_date_end' => 'setIsProxyDateEnd',
        'car_request' => 'setCarRequest',
        'recommended_price' => 'setRecommendedPrice',
        'progress' => 'setProgress',
        'params' => 'setParams',
        'tag' => 'setTag',
        'access' => 'setAccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'serial_id' => 'getSerialId',
        'serial_number_and_version' => 'getSerialNumberAndVersion',
        'status_id' => 'getStatusId',
        'ext_status_id' => 'getExtStatusId',
        'comment' => 'getComment',
        'details' => 'getDetails',
        'truck_type_id' => 'getTruckTypeId',
        'cargo_weight' => 'getCargoWeight',
        'cargo_capacity' => 'getCargoCapacity',
        'cargo_type' => 'getCargoType',
        'load_weight' => 'getLoadWeight',
        'load_capacity' => 'getLoadCapacity',
        'temperature' => 'getTemperature',
        'loading' => 'getLoading',
        'device' => 'getDevice',
        'conditions' => 'getConditions',
        'payment_type_id' => 'getPaymentTypeId',
        'payment_detail' => 'getPaymentDetail',
        'currency_code' => 'getCurrencyCode',
        'is_multi_currency' => 'getIsMultiCurrency',
        'vat_rate' => 'getVatRate',
        'vat' => 'getVat',
        'vat_less_price' => 'getVatLessPrice',
        'open_price' => 'getOpenPrice',
        'current_price' => 'getCurrentPrice',
        'current_price_with_fee' => 'getCurrentPriceWithFee',
        'step_bid' => 'getStepBid',
        'is_no_price' => 'getIsNoPrice',
        'is_round' => 'getIsRound',
        'is_view' => 'getIsView',
        'type' => 'getType',
        'price_strategy_type' => 'getPriceStrategyType',
        'bidding_type' => 'getBiddingType',
        'protected_bid_reason' => 'getProtectedBidReason',
        'view_count' => 'getViewCount',
        'pin_count' => 'getPinCount',
        'bid_count' => 'getBidCount',
        'comment_count' => 'getCommentCount',
        'consignor_id' => 'getConsignorId',
        'access_type_id' => 'getAccessTypeId',
        'create_date' => 'getCreateDate',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'duration' => 'getDuration',
        'name' => 'getName',
        'route_point' => 'getRoutePoint',
        'point' => 'getPoint',
        'contact' => 'getContact',
        'external_id' => 'getExternalId',
        'last_update' => 'getLastUpdate',
        'refuse_reason_code' => 'getRefuseReasonCode',
        'refuse_reason_comment' => 'getRefuseReasonComment',
        'refuse_date' => 'getRefuseDate',
        'price_type' => 'getPriceType',
        'period_from_date' => 'getPeriodFromDate',
        'period_to_date' => 'getPeriodToDate',
        'kind' => 'getKind',
        'is_general_partner' => 'getIsGeneralPartner',
        'general_partner_id' => 'getGeneralPartnerId',
        'moderation_message' => 'getModerationMessage',
        'general_partner_contract_id' => 'getGeneralPartnerContractId',
        'general_partner_contact' => 'getGeneralPartnerContact',
        'company_branch_id' => 'getCompanyBranchId',
        'start_perform_date' => 'getStartPerformDate',
        'is_proxy_date_end' => 'getIsProxyDateEnd',
        'car_request' => 'getCarRequest',
        'recommended_price' => 'getRecommendedPrice',
        'progress' => 'getProgress',
        'params' => 'getParams',
        'tag' => 'getTag',
        'access' => 'getAccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('serial_id', $data ?? [], null);
        $this->setIfExists('serial_number_and_version', $data ?? [], null);
        $this->setIfExists('status_id', $data ?? [], null);
        $this->setIfExists('ext_status_id', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('details', $data ?? [], null);
        $this->setIfExists('truck_type_id', $data ?? [], null);
        $this->setIfExists('cargo_weight', $data ?? [], null);
        $this->setIfExists('cargo_capacity', $data ?? [], null);
        $this->setIfExists('cargo_type', $data ?? [], null);
        $this->setIfExists('load_weight', $data ?? [], null);
        $this->setIfExists('load_capacity', $data ?? [], null);
        $this->setIfExists('temperature', $data ?? [], null);
        $this->setIfExists('loading', $data ?? [], null);
        $this->setIfExists('device', $data ?? [], null);
        $this->setIfExists('conditions', $data ?? [], null);
        $this->setIfExists('payment_type_id', $data ?? [], null);
        $this->setIfExists('payment_detail', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('is_multi_currency', $data ?? [], false);
        $this->setIfExists('vat_rate', $data ?? [], null);
        $this->setIfExists('vat', $data ?? [], null);
        $this->setIfExists('vat_less_price', $data ?? [], null);
        $this->setIfExists('open_price', $data ?? [], null);
        $this->setIfExists('current_price', $data ?? [], null);
        $this->setIfExists('current_price_with_fee', $data ?? [], null);
        $this->setIfExists('step_bid', $data ?? [], null);
        $this->setIfExists('is_no_price', $data ?? [], false);
        $this->setIfExists('is_round', $data ?? [], false);
        $this->setIfExists('is_view', $data ?? [], false);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('price_strategy_type', $data ?? [], null);
        $this->setIfExists('bidding_type', $data ?? [], null);
        $this->setIfExists('protected_bid_reason', $data ?? [], null);
        $this->setIfExists('view_count', $data ?? [], null);
        $this->setIfExists('pin_count', $data ?? [], null);
        $this->setIfExists('bid_count', $data ?? [], null);
        $this->setIfExists('comment_count', $data ?? [], null);
        $this->setIfExists('consignor_id', $data ?? [], null);
        $this->setIfExists('access_type_id', $data ?? [], null);
        $this->setIfExists('create_date', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('route_point', $data ?? [], null);
        $this->setIfExists('point', $data ?? [], null);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('last_update', $data ?? [], null);
        $this->setIfExists('refuse_reason_code', $data ?? [], null);
        $this->setIfExists('refuse_reason_comment', $data ?? [], null);
        $this->setIfExists('refuse_date', $data ?? [], null);
        $this->setIfExists('price_type', $data ?? [], null);
        $this->setIfExists('period_from_date', $data ?? [], null);
        $this->setIfExists('period_to_date', $data ?? [], null);
        $this->setIfExists('kind', $data ?? [], null);
        $this->setIfExists('is_general_partner', $data ?? [], false);
        $this->setIfExists('general_partner_id', $data ?? [], null);
        $this->setIfExists('moderation_message', $data ?? [], null);
        $this->setIfExists('general_partner_contract_id', $data ?? [], null);
        $this->setIfExists('general_partner_contact', $data ?? [], null);
        $this->setIfExists('company_branch_id', $data ?? [], null);
        $this->setIfExists('start_perform_date', $data ?? [], null);
        $this->setIfExists('is_proxy_date_end', $data ?? [], false);
        $this->setIfExists('car_request', $data ?? [], null);
        $this->setIfExists('recommended_price', $data ?? [], null);
        $this->setIfExists('progress', $data ?? [], null);
        $this->setIfExists('params', $data ?? [], null);
        $this->setIfExists('tag', $data ?? [], null);
        $this->setIfExists('access', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!is_null($this->container['vat']) && !preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", $this->container['vat'])) {
            $invalidProperties[] = "invalid value for 'vat', must be conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.";
        }

        if (!is_null($this->container['current_price']) && !preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", $this->container['current_price'])) {
            $invalidProperties[] = "invalid value for 'current_price', must be conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.";
        }

        if (!is_null($this->container['current_price_with_fee']) && !preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", $this->container['current_price_with_fee'])) {
            $invalidProperties[] = "invalid value for 'current_price_with_fee', must be conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.";
        }

        if ($this->container['access'] === null) {
            $invalidProperties[] = "'access' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Идентификатор заказа
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets serial_id
     *
     * @return int|null
     */
    public function getSerialId()
    {
        return $this->container['serial_id'];
    }

    /**
     * Sets serial_id
     *
     * @param int|null $serial_id Порядковый номер заказа
     *
     * @return self
     */
    public function setSerialId($serial_id)
    {
        if (is_null($serial_id)) {
            throw new \InvalidArgumentException('non-nullable serial_id cannot be null');
        }
        $this->container['serial_id'] = $serial_id;

        return $this;
    }

    /**
     * Gets serial_number_and_version
     *
     * @return string|null
     */
    public function getSerialNumberAndVersion()
    {
        return $this->container['serial_number_and_version'];
    }

    /**
     * Sets serial_number_and_version
     *
     * @param string|null $serial_number_and_version Порядковый номер с версией
     *
     * @return self
     */
    public function setSerialNumberAndVersion($serial_number_and_version)
    {
        if (is_null($serial_number_and_version)) {
            throw new \InvalidArgumentException('non-nullable serial_number_and_version cannot be null');
        }
        $this->container['serial_number_and_version'] = $serial_number_and_version;

        return $this;
    }

    /**
     * Gets status_id
     *
     * @return int|null
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param int|null $status_id Статуса заказа
     *
     * @return self
     */
    public function setStatusId($status_id)
    {
        if (is_null($status_id)) {
            throw new \InvalidArgumentException('non-nullable status_id cannot be null');
        }
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets ext_status_id
     *
     * @return int|null
     */
    public function getExtStatusId()
    {
        return $this->container['ext_status_id'];
    }

    /**
     * Sets ext_status_id
     *
     * @param int|null $ext_status_id Расширенный статус заказа
     *
     * @return self
     */
    public function setExtStatusId($ext_status_id)
    {
        if (is_null($ext_status_id)) {
            throw new \InvalidArgumentException('non-nullable ext_status_id cannot be null');
        }
        $this->container['ext_status_id'] = $ext_status_id;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Комментарий к заказу
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \MagDv\Cargomart\Dto\OrderDetails[]|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \MagDv\Cargomart\Dto\OrderDetails[]|null $details Список деталей/комментариев/описаний заказа
     *
     * @return self
     */
    public function setDetails($details)
    {
        if (is_null($details)) {
            throw new \InvalidArgumentException('non-nullable details cannot be null');
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets truck_type_id
     *
     * @return int|null
     */
    public function getTruckTypeId()
    {
        return $this->container['truck_type_id'];
    }

    /**
     * Sets truck_type_id
     *
     * @param int|null $truck_type_id Идентификатор типа транспорта
     *
     * @return self
     */
    public function setTruckTypeId($truck_type_id)
    {
        if (is_null($truck_type_id)) {
            throw new \InvalidArgumentException('non-nullable truck_type_id cannot be null');
        }
        $this->container['truck_type_id'] = $truck_type_id;

        return $this;
    }

    /**
     * Gets cargo_weight
     *
     * @return float|null
     */
    public function getCargoWeight()
    {
        return $this->container['cargo_weight'];
    }

    /**
     * Sets cargo_weight
     *
     * @param float|null $cargo_weight Тоннаж авто из условий заказа(в тоннах)
     *
     * @return self
     */
    public function setCargoWeight($cargo_weight)
    {
        if (is_null($cargo_weight)) {
            throw new \InvalidArgumentException('non-nullable cargo_weight cannot be null');
        }
        $this->container['cargo_weight'] = $cargo_weight;

        return $this;
    }

    /**
     * Gets cargo_capacity
     *
     * @return int|null
     */
    public function getCargoCapacity()
    {
        return $this->container['cargo_capacity'];
    }

    /**
     * Sets cargo_capacity
     *
     * @param int|null $cargo_capacity Кубатура авто из условий заказа(в м3)
     *
     * @return self
     */
    public function setCargoCapacity($cargo_capacity)
    {
        if (is_null($cargo_capacity)) {
            throw new \InvalidArgumentException('non-nullable cargo_capacity cannot be null');
        }
        $this->container['cargo_capacity'] = $cargo_capacity;

        return $this;
    }

    /**
     * Gets cargo_type
     *
     * @return string|null
     */
    public function getCargoType()
    {
        return $this->container['cargo_type'];
    }

    /**
     * Sets cargo_type
     *
     * @param string|null $cargo_type Описание груза
     *
     * @return self
     */
    public function setCargoType($cargo_type)
    {
        if (is_null($cargo_type)) {
            throw new \InvalidArgumentException('non-nullable cargo_type cannot be null');
        }
        $this->container['cargo_type'] = $cargo_type;

        return $this;
    }

    /**
     * Gets load_weight
     *
     * @return float|null
     */
    public function getLoadWeight()
    {
        return $this->container['load_weight'];
    }

    /**
     * Sets load_weight
     *
     * @param float|null $load_weight Вес груза(в тоннах)
     *
     * @return self
     */
    public function setLoadWeight($load_weight)
    {
        if (is_null($load_weight)) {
            throw new \InvalidArgumentException('non-nullable load_weight cannot be null');
        }
        $this->container['load_weight'] = $load_weight;

        return $this;
    }

    /**
     * Gets load_capacity
     *
     * @return int|null
     */
    public function getLoadCapacity()
    {
        return $this->container['load_capacity'];
    }

    /**
     * Sets load_capacity
     *
     * @param int|null $load_capacity Объём груза(в м3)
     *
     * @return self
     */
    public function setLoadCapacity($load_capacity)
    {
        if (is_null($load_capacity)) {
            throw new \InvalidArgumentException('non-nullable load_capacity cannot be null');
        }
        $this->container['load_capacity'] = $load_capacity;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return \MagDv\Cargomart\Dto\TemperatureRange|null
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param \MagDv\Cargomart\Dto\TemperatureRange|null $temperature Температурный режим в кельвинах
     *
     * @return self
     */
    public function setTemperature($temperature)
    {
        if (is_null($temperature)) {
            throw new \InvalidArgumentException('non-nullable temperature cannot be null');
        }
        $this->container['temperature'] = $temperature;

        return $this;
    }

    /**
     * Gets loading
     *
     * @return int[]|null
     */
    public function getLoading()
    {
        return $this->container['loading'];
    }

    /**
     * Sets loading
     *
     * @param int[]|null $loading Требуемые типы погрузки-выгрузки
     *
     * @return self
     */
    public function setLoading($loading)
    {
        if (is_null($loading)) {
            throw new \InvalidArgumentException('non-nullable loading cannot be null');
        }
        $this->container['loading'] = $loading;

        return $this;
    }

    /**
     * Gets device
     *
     * @return string[]|null
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param string[]|null $device Дополнительное оборудование машины
     *
     * @return self
     */
    public function setDevice($device)
    {
        if (is_null($device)) {
            throw new \InvalidArgumentException('non-nullable device cannot be null');
        }
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return string[]|null
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param string[]|null $conditions Условия перевозки
     *
     * @return self
     */
    public function setConditions($conditions)
    {
        if (is_null($conditions)) {
            throw new \InvalidArgumentException('non-nullable conditions cannot be null');
        }
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets payment_type_id
     *
     * @return int|null
     */
    public function getPaymentTypeId()
    {
        return $this->container['payment_type_id'];
    }

    /**
     * Sets payment_type_id
     *
     * @param int|null $payment_type_id Идентификатор способа оплаты заказа
     *
     * @return self
     */
    public function setPaymentTypeId($payment_type_id)
    {
        if (is_null($payment_type_id)) {
            throw new \InvalidArgumentException('non-nullable payment_type_id cannot be null');
        }
        $this->container['payment_type_id'] = $payment_type_id;

        return $this;
    }

    /**
     * Gets payment_detail
     *
     * @return string|null
     */
    public function getPaymentDetail()
    {
        return $this->container['payment_detail'];
    }

    /**
     * Sets payment_detail
     *
     * @param string|null $payment_detail Комментарий по оплате
     *
     * @return self
     */
    public function setPaymentDetail($payment_detail)
    {
        if (is_null($payment_detail)) {
            throw new \InvalidArgumentException('non-nullable payment_detail cannot be null');
        }
        $this->container['payment_detail'] = $payment_detail;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code Код валюты заказа
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets is_multi_currency
     *
     * @return bool|null
     */
    public function getIsMultiCurrency()
    {
        return $this->container['is_multi_currency'];
    }

    /**
     * Sets is_multi_currency
     *
     * @param bool|null $is_multi_currency Флаг мультивалютности
     *
     * @return self
     */
    public function setIsMultiCurrency($is_multi_currency)
    {
        if (is_null($is_multi_currency)) {
            throw new \InvalidArgumentException('non-nullable is_multi_currency cannot be null');
        }
        $this->container['is_multi_currency'] = $is_multi_currency;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return float|null
     */
    public function getVatRate()
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param float|null $vat_rate Ставка НДС
     *
     * @return self
     */
    public function setVatRate($vat_rate)
    {
        if (is_null($vat_rate)) {
            throw new \InvalidArgumentException('non-nullable vat_rate cannot be null');
        }
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return string|null
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param string|null $vat Размер НДС
     *
     * @return self
     */
    public function setVat($vat)
    {
        if (is_null($vat)) {
            throw new \InvalidArgumentException('non-nullable vat cannot be null');
        }

        if ((!preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", ObjectSerializer::toString($vat)))) {
            throw new \InvalidArgumentException("invalid value for \$vat when calling OrderEditItem., must conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.");
        }

        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets vat_less_price
     *
     * @return string|null
     */
    public function getVatLessPrice()
    {
        return $this->container['vat_less_price'];
    }

    /**
     * Sets vat_less_price
     *
     * @param string|null $vat_less_price Цена без НДС
     *
     * @return self
     */
    public function setVatLessPrice($vat_less_price)
    {
        if (is_null($vat_less_price)) {
            throw new \InvalidArgumentException('non-nullable vat_less_price cannot be null');
        }
        $this->container['vat_less_price'] = $vat_less_price;

        return $this;
    }

    /**
     * Gets open_price
     *
     * @return string|null
     */
    public function getOpenPrice()
    {
        return $this->container['open_price'];
    }

    /**
     * Sets open_price
     *
     * @param string|null $open_price Начальная цена заказа
     *
     * @return self
     */
    public function setOpenPrice($open_price)
    {
        if (is_null($open_price)) {
            throw new \InvalidArgumentException('non-nullable open_price cannot be null');
        }
        $this->container['open_price'] = $open_price;

        return $this;
    }

    /**
     * Gets current_price
     *
     * @return string|null
     */
    public function getCurrentPrice()
    {
        return $this->container['current_price'];
    }

    /**
     * Sets current_price
     *
     * @param string|null $current_price Текущая цена заказа
     *
     * @return self
     */
    public function setCurrentPrice($current_price)
    {
        if (is_null($current_price)) {
            throw new \InvalidArgumentException('non-nullable current_price cannot be null');
        }

        if ((!preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", ObjectSerializer::toString($current_price)))) {
            throw new \InvalidArgumentException("invalid value for \$current_price when calling OrderEditItem., must conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.");
        }

        $this->container['current_price'] = $current_price;

        return $this;
    }

    /**
     * Gets current_price_with_fee
     *
     * @return string|null
     */
    public function getCurrentPriceWithFee()
    {
        return $this->container['current_price_with_fee'];
    }

    /**
     * Sets current_price_with_fee
     *
     * @param string|null $current_price_with_fee Текущая цена заказа с комиссией
     *
     * @return self
     */
    public function setCurrentPriceWithFee($current_price_with_fee)
    {
        if (is_null($current_price_with_fee)) {
            throw new \InvalidArgumentException('non-nullable current_price_with_fee cannot be null');
        }

        if ((!preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", ObjectSerializer::toString($current_price_with_fee)))) {
            throw new \InvalidArgumentException("invalid value for \$current_price_with_fee when calling OrderEditItem., must conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.");
        }

        $this->container['current_price_with_fee'] = $current_price_with_fee;

        return $this;
    }

    /**
     * Gets step_bid
     *
     * @return string|null
     */
    public function getStepBid()
    {
        return $this->container['step_bid'];
    }

    /**
     * Sets step_bid
     *
     * @param string|null $step_bid Шаг измеения цены заказа
     *
     * @return self
     */
    public function setStepBid($step_bid)
    {
        if (is_null($step_bid)) {
            throw new \InvalidArgumentException('non-nullable step_bid cannot be null');
        }
        $this->container['step_bid'] = $step_bid;

        return $this;
    }

    /**
     * Gets is_no_price
     *
     * @return bool|null
     */
    public function getIsNoPrice()
    {
        return $this->container['is_no_price'];
    }

    /**
     * Sets is_no_price
     *
     * @param bool|null $is_no_price Флаг заказ без цены
     *
     * @return self
     */
    public function setIsNoPrice($is_no_price)
    {
        if (is_null($is_no_price)) {
            throw new \InvalidArgumentException('non-nullable is_no_price cannot be null');
        }
        $this->container['is_no_price'] = $is_no_price;

        return $this;
    }

    /**
     * Gets is_round
     *
     * @return bool|null
     * @deprecated
     */
    public function getIsRound()
    {
        return $this->container['is_round'];
    }

    /**
     * Sets is_round
     *
     * @param bool|null $is_round @deprecated Является кругорейсом
     *
     * @return self
     * @deprecated
     */
    public function setIsRound($is_round)
    {
        if (is_null($is_round)) {
            throw new \InvalidArgumentException('non-nullable is_round cannot be null');
        }
        $this->container['is_round'] = $is_round;

        return $this;
    }

    /**
     * Gets is_view
     *
     * @return bool|null
     */
    public function getIsView()
    {
        return $this->container['is_view'];
    }

    /**
     * Sets is_view
     *
     * @param bool|null $is_view Был ли заказ просмотрен пользователем
     *
     * @return self
     */
    public function setIsView($is_view)
    {
        if (is_null($is_view)) {
            throw new \InvalidArgumentException('non-nullable is_view cannot be null');
        }
        $this->container['is_view'] = $is_view;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \MagDv\Cargomart\Dto\OrderType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \MagDv\Cargomart\Dto\OrderType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets price_strategy_type
     *
     * @return \MagDv\Cargomart\Dto\OrderPriceStrategyType|null
     */
    public function getPriceStrategyType()
    {
        return $this->container['price_strategy_type'];
    }

    /**
     * Sets price_strategy_type
     *
     * @param \MagDv\Cargomart\Dto\OrderPriceStrategyType|null $price_strategy_type price_strategy_type
     *
     * @return self
     */
    public function setPriceStrategyType($price_strategy_type)
    {
        if (is_null($price_strategy_type)) {
            throw new \InvalidArgumentException('non-nullable price_strategy_type cannot be null');
        }
        $this->container['price_strategy_type'] = $price_strategy_type;

        return $this;
    }

    /**
     * Gets bidding_type
     *
     * @return \MagDv\Cargomart\Dto\OrderBiddingType|null
     */
    public function getBiddingType()
    {
        return $this->container['bidding_type'];
    }

    /**
     * Sets bidding_type
     *
     * @param \MagDv\Cargomart\Dto\OrderBiddingType|null $bidding_type bidding_type
     *
     * @return self
     */
    public function setBiddingType($bidding_type)
    {
        if (is_null($bidding_type)) {
            throw new \InvalidArgumentException('non-nullable bidding_type cannot be null');
        }
        $this->container['bidding_type'] = $bidding_type;

        return $this;
    }

    /**
     * Gets protected_bid_reason
     *
     * @return \MagDv\Cargomart\Dto\ProtectedBidReason[]|null
     */
    public function getProtectedBidReason()
    {
        return $this->container['protected_bid_reason'];
    }

    /**
     * Sets protected_bid_reason
     *
     * @param \MagDv\Cargomart\Dto\ProtectedBidReason[]|null $protected_bid_reason Массив причин, по которым нельзя поставить ставку
     *
     * @return self
     */
    public function setProtectedBidReason($protected_bid_reason)
    {
        if (is_null($protected_bid_reason)) {
            throw new \InvalidArgumentException('non-nullable protected_bid_reason cannot be null');
        }
        $this->container['protected_bid_reason'] = $protected_bid_reason;

        return $this;
    }

    /**
     * Gets view_count
     *
     * @return int|null
     */
    public function getViewCount()
    {
        return $this->container['view_count'];
    }

    /**
     * Sets view_count
     *
     * @param int|null $view_count Количество просмотров данного заказа
     *
     * @return self
     */
    public function setViewCount($view_count)
    {
        if (is_null($view_count)) {
            throw new \InvalidArgumentException('non-nullable view_count cannot be null');
        }
        $this->container['view_count'] = $view_count;

        return $this;
    }

    /**
     * Gets pin_count
     *
     * @return int|null
     */
    public function getPinCount()
    {
        return $this->container['pin_count'];
    }

    /**
     * Sets pin_count
     *
     * @param int|null $pin_count Количество закреплений данного заказа
     *
     * @return self
     */
    public function setPinCount($pin_count)
    {
        if (is_null($pin_count)) {
            throw new \InvalidArgumentException('non-nullable pin_count cannot be null');
        }
        $this->container['pin_count'] = $pin_count;

        return $this;
    }

    /**
     * Gets bid_count
     *
     * @return int|null
     */
    public function getBidCount()
    {
        return $this->container['bid_count'];
    }

    /**
     * Sets bid_count
     *
     * @param int|null $bid_count Количество ставок на заказ
     *
     * @return self
     */
    public function setBidCount($bid_count)
    {
        if (is_null($bid_count)) {
            throw new \InvalidArgumentException('non-nullable bid_count cannot be null');
        }
        $this->container['bid_count'] = $bid_count;

        return $this;
    }

    /**
     * Gets comment_count
     *
     * @return int|null
     */
    public function getCommentCount()
    {
        return $this->container['comment_count'];
    }

    /**
     * Sets comment_count
     *
     * @param int|null $comment_count Количество комментариев заказа
     *
     * @return self
     */
    public function setCommentCount($comment_count)
    {
        if (is_null($comment_count)) {
            throw new \InvalidArgumentException('non-nullable comment_count cannot be null');
        }
        $this->container['comment_count'] = $comment_count;

        return $this;
    }

    /**
     * Gets consignor_id
     *
     * @return string|null
     */
    public function getConsignorId()
    {
        return $this->container['consignor_id'];
    }

    /**
     * Sets consignor_id
     *
     * @param string|null $consignor_id Хэш код отправителя
     *
     * @return self
     */
    public function setConsignorId($consignor_id)
    {
        if (is_null($consignor_id)) {
            throw new \InvalidArgumentException('non-nullable consignor_id cannot be null');
        }
        $this->container['consignor_id'] = $consignor_id;

        return $this;
    }

    /**
     * Gets access_type_id
     *
     * @return \MagDv\Cargomart\Dto\OrderAccessType|null
     */
    public function getAccessTypeId()
    {
        return $this->container['access_type_id'];
    }

    /**
     * Sets access_type_id
     *
     * @param \MagDv\Cargomart\Dto\OrderAccessType|null $access_type_id access_type_id
     *
     * @return self
     */
    public function setAccessTypeId($access_type_id)
    {
        if (is_null($access_type_id)) {
            throw new \InvalidArgumentException('non-nullable access_type_id cannot be null');
        }
        $this->container['access_type_id'] = $access_type_id;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime|null
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime|null $create_date Дата создания торгов
     *
     * @return self
     */
    public function setCreateDate($create_date)
    {
        if (is_null($create_date)) {
            throw new \InvalidArgumentException('non-nullable create_date cannot be null');
        }
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string|null $start_date Начальная дата торгов
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string|null $end_date Конечная дата торгов
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int|null $duration Продолжительность торгов
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Название шаблона, только для шаблонов
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets route_point
     *
     * @return \MagDv\Cargomart\Dto\OrderRoutePoint[]|null
     */
    public function getRoutePoint()
    {
        return $this->container['route_point'];
    }

    /**
     * Sets route_point
     *
     * @param \MagDv\Cargomart\Dto\OrderRoutePoint[]|null $route_point Массив маршрутных точек заказа.
     *
     * @return self
     */
    public function setRoutePoint($route_point)
    {
        if (is_null($route_point)) {
            throw new \InvalidArgumentException('non-nullable route_point cannot be null');
        }
        $this->container['route_point'] = $route_point;

        return $this;
    }

    /**
     * Gets point
     *
     * @return \MagDv\Cargomart\Dto\RoutePointEdit[]|null
     */
    public function getPoint()
    {
        return $this->container['point'];
    }

    /**
     * Sets point
     *
     * @param \MagDv\Cargomart\Dto\RoutePointEdit[]|null $point @deprecated Использовать routePoint.
     *
     * @return self
     */
    public function setPoint($point)
    {
        if (is_null($point)) {
            throw new \InvalidArgumentException('non-nullable point cannot be null');
        }
        $this->container['point'] = $point;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return int[]|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param int[]|null $contact Список идентификаторов контактных лиц
     *
     * @return self
     */
    public function setContact($contact)
    {
        if (is_null($contact)) {
            throw new \InvalidArgumentException('non-nullable contact cannot be null');
        }
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id Внешний идентификатор
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return int|null
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param int|null $last_update Последняя дата обновления в виде timestamp
     *
     * @return self
     */
    public function setLastUpdate($last_update)
    {
        if (is_null($last_update)) {
            throw new \InvalidArgumentException('non-nullable last_update cannot be null');
        }
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets refuse_reason_code
     *
     * @return string|null
     */
    public function getRefuseReasonCode()
    {
        return $this->container['refuse_reason_code'];
    }

    /**
     * Sets refuse_reason_code
     *
     * @param string|null $refuse_reason_code Причина отказа, ID
     *
     * @return self
     */
    public function setRefuseReasonCode($refuse_reason_code)
    {
        if (is_null($refuse_reason_code)) {
            throw new \InvalidArgumentException('non-nullable refuse_reason_code cannot be null');
        }
        $this->container['refuse_reason_code'] = $refuse_reason_code;

        return $this;
    }

    /**
     * Gets refuse_reason_comment
     *
     * @return string|null
     */
    public function getRefuseReasonComment()
    {
        return $this->container['refuse_reason_comment'];
    }

    /**
     * Sets refuse_reason_comment
     *
     * @param string|null $refuse_reason_comment Причина отказа, комментарий
     *
     * @return self
     */
    public function setRefuseReasonComment($refuse_reason_comment)
    {
        if (is_null($refuse_reason_comment)) {
            throw new \InvalidArgumentException('non-nullable refuse_reason_comment cannot be null');
        }
        $this->container['refuse_reason_comment'] = $refuse_reason_comment;

        return $this;
    }

    /**
     * Gets refuse_date
     *
     * @return string|null
     */
    public function getRefuseDate()
    {
        return $this->container['refuse_date'];
    }

    /**
     * Sets refuse_date
     *
     * @param string|null $refuse_date Причина отказа, дата создания
     *
     * @return self
     */
    public function setRefuseDate($refuse_date)
    {
        if (is_null($refuse_date)) {
            throw new \InvalidArgumentException('non-nullable refuse_date cannot be null');
        }
        $this->container['refuse_date'] = $refuse_date;

        return $this;
    }

    /**
     * Gets price_type
     *
     * @return \MagDv\Cargomart\Dto\OrderPriceType|null
     */
    public function getPriceType()
    {
        return $this->container['price_type'];
    }

    /**
     * Sets price_type
     *
     * @param \MagDv\Cargomart\Dto\OrderPriceType|null $price_type price_type
     *
     * @return self
     */
    public function setPriceType($price_type)
    {
        if (is_null($price_type)) {
            throw new \InvalidArgumentException('non-nullable price_type cannot be null');
        }
        $this->container['price_type'] = $price_type;

        return $this;
    }

    /**
     * Gets period_from_date
     *
     * @return string|null
     */
    public function getPeriodFromDate()
    {
        return $this->container['period_from_date'];
    }

    /**
     * Sets period_from_date
     *
     * @param string|null $period_from_date Период исполнения грузоперевозки От
     *
     * @return self
     */
    public function setPeriodFromDate($period_from_date)
    {
        if (is_null($period_from_date)) {
            throw new \InvalidArgumentException('non-nullable period_from_date cannot be null');
        }
        $this->container['period_from_date'] = $period_from_date;

        return $this;
    }

    /**
     * Gets period_to_date
     *
     * @return string|null
     */
    public function getPeriodToDate()
    {
        return $this->container['period_to_date'];
    }

    /**
     * Sets period_to_date
     *
     * @param string|null $period_to_date Период исполнения грузоперевозки До
     *
     * @return self
     */
    public function setPeriodToDate($period_to_date)
    {
        if (is_null($period_to_date)) {
            throw new \InvalidArgumentException('non-nullable period_to_date cannot be null');
        }
        $this->container['period_to_date'] = $period_to_date;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return \MagDv\Cargomart\Dto\OrderDraftKindEnum|null
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param \MagDv\Cargomart\Dto\OrderDraftKindEnum|null $kind kind
     *
     * @return self
     */
    public function setKind($kind)
    {
        if (is_null($kind)) {
            throw new \InvalidArgumentException('non-nullable kind cannot be null');
        }
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets is_general_partner
     *
     * @return bool|null
     */
    public function getIsGeneralPartner()
    {
        return $this->container['is_general_partner'];
    }

    /**
     * Sets is_general_partner
     *
     * @param bool|null $is_general_partner Флаг того что заказ под ГП
     *
     * @return self
     */
    public function setIsGeneralPartner($is_general_partner)
    {
        if (is_null($is_general_partner)) {
            throw new \InvalidArgumentException('non-nullable is_general_partner cannot be null');
        }
        $this->container['is_general_partner'] = $is_general_partner;

        return $this;
    }

    /**
     * Gets general_partner_id
     *
     * @return string|null
     */
    public function getGeneralPartnerId()
    {
        return $this->container['general_partner_id'];
    }

    /**
     * Sets general_partner_id
     *
     * @param string|null $general_partner_id Идентификатор ГП
     *
     * @return self
     */
    public function setGeneralPartnerId($general_partner_id)
    {
        if (is_null($general_partner_id)) {
            throw new \InvalidArgumentException('non-nullable general_partner_id cannot be null');
        }
        $this->container['general_partner_id'] = $general_partner_id;

        return $this;
    }

    /**
     * Gets moderation_message
     *
     * @return \MagDv\Cargomart\Dto\ModerationMessage[]|null
     */
    public function getModerationMessage()
    {
        return $this->container['moderation_message'];
    }

    /**
     * Sets moderation_message
     *
     * @param \MagDv\Cargomart\Dto\ModerationMessage[]|null $moderation_message Сообщение о модерации от ГП, последнее приходит первым
     *
     * @return self
     */
    public function setModerationMessage($moderation_message)
    {
        if (is_null($moderation_message)) {
            throw new \InvalidArgumentException('non-nullable moderation_message cannot be null');
        }
        $this->container['moderation_message'] = $moderation_message;

        return $this;
    }

    /**
     * Gets general_partner_contract_id
     *
     * @return string|null
     */
    public function getGeneralPartnerContractId()
    {
        return $this->container['general_partner_contract_id'];
    }

    /**
     * Sets general_partner_contract_id
     *
     * @param string|null $general_partner_contract_id Идентификатор условий договора с ГП
     *
     * @return self
     */
    public function setGeneralPartnerContractId($general_partner_contract_id)
    {
        if (is_null($general_partner_contract_id)) {
            throw new \InvalidArgumentException('non-nullable general_partner_contract_id cannot be null');
        }
        $this->container['general_partner_contract_id'] = $general_partner_contract_id;

        return $this;
    }

    /**
     * Gets general_partner_contact
     *
     * @return int[]|null
     */
    public function getGeneralPartnerContact()
    {
        return $this->container['general_partner_contact'];
    }

    /**
     * Sets general_partner_contact
     *
     * @param int[]|null $general_partner_contact Список идентифкаторов кураторов от ГП
     *
     * @return self
     */
    public function setGeneralPartnerContact($general_partner_contact)
    {
        if (is_null($general_partner_contact)) {
            throw new \InvalidArgumentException('non-nullable general_partner_contact cannot be null');
        }
        $this->container['general_partner_contact'] = $general_partner_contact;

        return $this;
    }

    /**
     * Gets company_branch_id
     *
     * @return int|null
     */
    public function getCompanyBranchId()
    {
        return $this->container['company_branch_id'];
    }

    /**
     * Sets company_branch_id
     *
     * @param int|null $company_branch_id Идентификатор дочерней компании
     *
     * @return self
     */
    public function setCompanyBranchId($company_branch_id)
    {
        if (is_null($company_branch_id)) {
            throw new \InvalidArgumentException('non-nullable company_branch_id cannot be null');
        }
        $this->container['company_branch_id'] = $company_branch_id;

        return $this;
    }

    /**
     * Gets start_perform_date
     *
     * @return \DateTime|null
     */
    public function getStartPerformDate()
    {
        return $this->container['start_perform_date'];
    }

    /**
     * Sets start_perform_date
     *
     * @param \DateTime|null $start_perform_date Дата начала погрузки
     *
     * @return self
     */
    public function setStartPerformDate($start_perform_date)
    {
        if (is_null($start_perform_date)) {
            throw new \InvalidArgumentException('non-nullable start_perform_date cannot be null');
        }
        $this->container['start_perform_date'] = $start_perform_date;

        return $this;
    }

    /**
     * Gets is_proxy_date_end
     *
     * @return bool|null
     */
    public function getIsProxyDateEnd()
    {
        return $this->container['is_proxy_date_end'];
    }

    /**
     * Sets is_proxy_date_end
     *
     * @param bool|null $is_proxy_date_end Наступила дата, когда нельзя загрузить доверенность
     *
     * @return self
     */
    public function setIsProxyDateEnd($is_proxy_date_end)
    {
        if (is_null($is_proxy_date_end)) {
            throw new \InvalidArgumentException('non-nullable is_proxy_date_end cannot be null');
        }
        $this->container['is_proxy_date_end'] = $is_proxy_date_end;

        return $this;
    }

    /**
     * Gets car_request
     *
     * @return \MagDv\Cargomart\Dto\OrderOfferCarRequest|null
     */
    public function getCarRequest()
    {
        return $this->container['car_request'];
    }

    /**
     * Sets car_request
     *
     * @param \MagDv\Cargomart\Dto\OrderOfferCarRequest|null $car_request Запрос количества машин
     *
     * @return self
     */
    public function setCarRequest($car_request)
    {
        if (is_null($car_request)) {
            throw new \InvalidArgumentException('non-nullable car_request cannot be null');
        }
        $this->container['car_request'] = $car_request;

        return $this;
    }

    /**
     * Gets recommended_price
     *
     * @return string|null
     */
    public function getRecommendedPrice()
    {
        return $this->container['recommended_price'];
    }

    /**
     * Sets recommended_price
     *
     * @param string|null $recommended_price Рекомендованная цена для этого заказа
     *
     * @return self
     */
    public function setRecommendedPrice($recommended_price)
    {
        if (is_null($recommended_price)) {
            throw new \InvalidArgumentException('non-nullable recommended_price cannot be null');
        }
        $this->container['recommended_price'] = $recommended_price;

        return $this;
    }

    /**
     * Gets progress
     *
     * @return \MagDv\Cargomart\Dto\ProgressItem[]|null
     */
    public function getProgress()
    {
        return $this->container['progress'];
    }

    /**
     * Sets progress
     *
     * @param \MagDv\Cargomart\Dto\ProgressItem[]|null $progress Элемент прогресса
     *
     * @return self
     */
    public function setProgress($progress)
    {
        if (is_null($progress)) {
            throw new \InvalidArgumentException('non-nullable progress cannot be null');
        }
        $this->container['progress'] = $progress;

        return $this;
    }

    /**
     * Gets params
     *
     * @return \MagDv\Cargomart\Dto\OrderEditParams|null
     */
    public function getParams()
    {
        return $this->container['params'];
    }

    /**
     * Sets params
     *
     * @param \MagDv\Cargomart\Dto\OrderEditParams|null $params Дополнительные параметры/флаги заказа
     *
     * @return self
     */
    public function setParams($params)
    {
        if (is_null($params)) {
            throw new \InvalidArgumentException('non-nullable params cannot be null');
        }
        $this->container['params'] = $params;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string[]|null
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string[]|null $tag Тэги для заказа
     *
     * @return self
     */
    public function setTag($tag)
    {
        if (is_null($tag)) {
            throw new \InvalidArgumentException('non-nullable tag cannot be null');
        }
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets access
     *
     * @return \MagDv\Cargomart\Dto\OrderAccess
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param \MagDv\Cargomart\Dto\OrderAccess $access Описание доступных действий по объекту.
     *
     * @return self
     */
    public function setAccess($access)
    {
        if (is_null($access)) {
            throw new \InvalidArgumentException('non-nullable access cannot be null');
        }
        $this->container['access'] = $access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


