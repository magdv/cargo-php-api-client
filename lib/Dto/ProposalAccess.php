<?php
/**
 * ProposalAccess
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * ProposalAccess Class Doc Comment
 *
 * @category Class
 * @description Описание доступов к заказу экспедитора
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProposalAccess implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'proposal-access';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'view' => 'bool',
        'view_carrier_document_tracking_number' => 'bool',
        'view_chat' => 'bool',
        'create_patch' => 'bool',
        'create_carrier_refuse' => 'bool',
        'create_refuse' => 'bool',
        'view_simple_document' => 'bool',
        'view_signed_documents' => 'bool',
        'view_itinerary' => 'bool',
        'view_visitor_list' => 'bool',
        'view_pin_list' => 'bool',
        'view_download_expeditor_assignment' => 'bool',
        'view_download_request_assignment' => 'bool',
        'waybill_view' => 'bool',
        'waybill_edit' => 'bool',
        'view_ecn_list' => 'bool',
        'view_ecn' => 'bool',
        'create_ecn' => 'bool',
        'view_carrier_payment' => 'bool',
        'update_carrier_payment' => 'bool',
        'view_offer' => 'bool',
        'view_carrier_ask_list' => 'bool',
        'view_bid_list' => 'bool',
        'view_consignor_expeditor_payment' => 'bool',
        'update_consignor_expeditor_payment' => 'bool',
        'create_customer_docs_tracking' => 'bool',
        'create_downtime_claim' => 'bool',
        'update_carrier_document_tracking_number' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'view' => null,
        'view_carrier_document_tracking_number' => null,
        'view_chat' => null,
        'create_patch' => null,
        'create_carrier_refuse' => null,
        'create_refuse' => null,
        'view_simple_document' => null,
        'view_signed_documents' => null,
        'view_itinerary' => null,
        'view_visitor_list' => null,
        'view_pin_list' => null,
        'view_download_expeditor_assignment' => null,
        'view_download_request_assignment' => null,
        'waybill_view' => null,
        'waybill_edit' => null,
        'view_ecn_list' => null,
        'view_ecn' => null,
        'create_ecn' => null,
        'view_carrier_payment' => null,
        'update_carrier_payment' => null,
        'view_offer' => null,
        'view_carrier_ask_list' => null,
        'view_bid_list' => null,
        'view_consignor_expeditor_payment' => null,
        'update_consignor_expeditor_payment' => null,
        'create_customer_docs_tracking' => null,
        'create_downtime_claim' => null,
        'update_carrier_document_tracking_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'view' => false,
        'view_carrier_document_tracking_number' => false,
        'view_chat' => false,
        'create_patch' => false,
        'create_carrier_refuse' => false,
        'create_refuse' => false,
        'view_simple_document' => false,
        'view_signed_documents' => false,
        'view_itinerary' => false,
        'view_visitor_list' => false,
        'view_pin_list' => false,
        'view_download_expeditor_assignment' => false,
        'view_download_request_assignment' => false,
        'waybill_view' => false,
        'waybill_edit' => false,
        'view_ecn_list' => false,
        'view_ecn' => false,
        'create_ecn' => false,
        'view_carrier_payment' => false,
        'update_carrier_payment' => false,
        'view_offer' => false,
        'view_carrier_ask_list' => false,
        'view_bid_list' => false,
        'view_consignor_expeditor_payment' => false,
        'update_consignor_expeditor_payment' => false,
        'create_customer_docs_tracking' => false,
        'create_downtime_claim' => false,
        'update_carrier_document_tracking_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'view' => 'view',
        'view_carrier_document_tracking_number' => 'viewCarrierDocumentTrackingNumber',
        'view_chat' => 'viewChat',
        'create_patch' => 'createPatch',
        'create_carrier_refuse' => 'createCarrierRefuse',
        'create_refuse' => 'createRefuse',
        'view_simple_document' => 'viewSimpleDocument',
        'view_signed_documents' => 'viewSignedDocuments',
        'view_itinerary' => 'viewItinerary',
        'view_visitor_list' => 'viewVisitorList',
        'view_pin_list' => 'viewPinList',
        'view_download_expeditor_assignment' => 'viewDownloadExpeditorAssignment',
        'view_download_request_assignment' => 'viewDownloadRequestAssignment',
        'waybill_view' => 'waybillView',
        'waybill_edit' => 'waybillEdit',
        'view_ecn_list' => 'viewEcnList',
        'view_ecn' => 'viewEcn',
        'create_ecn' => 'createEcn',
        'view_carrier_payment' => 'viewCarrierPayment',
        'update_carrier_payment' => 'updateCarrierPayment',
        'view_offer' => 'viewOffer',
        'view_carrier_ask_list' => 'viewCarrierAskList',
        'view_bid_list' => 'viewBidList',
        'view_consignor_expeditor_payment' => 'viewConsignorExpeditorPayment',
        'update_consignor_expeditor_payment' => 'updateConsignorExpeditorPayment',
        'create_customer_docs_tracking' => 'createCustomerDocsTracking',
        'create_downtime_claim' => 'createDowntimeClaim',
        'update_carrier_document_tracking_number' => 'updateCarrierDocumentTrackingNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'view' => 'setView',
        'view_carrier_document_tracking_number' => 'setViewCarrierDocumentTrackingNumber',
        'view_chat' => 'setViewChat',
        'create_patch' => 'setCreatePatch',
        'create_carrier_refuse' => 'setCreateCarrierRefuse',
        'create_refuse' => 'setCreateRefuse',
        'view_simple_document' => 'setViewSimpleDocument',
        'view_signed_documents' => 'setViewSignedDocuments',
        'view_itinerary' => 'setViewItinerary',
        'view_visitor_list' => 'setViewVisitorList',
        'view_pin_list' => 'setViewPinList',
        'view_download_expeditor_assignment' => 'setViewDownloadExpeditorAssignment',
        'view_download_request_assignment' => 'setViewDownloadRequestAssignment',
        'waybill_view' => 'setWaybillView',
        'waybill_edit' => 'setWaybillEdit',
        'view_ecn_list' => 'setViewEcnList',
        'view_ecn' => 'setViewEcn',
        'create_ecn' => 'setCreateEcn',
        'view_carrier_payment' => 'setViewCarrierPayment',
        'update_carrier_payment' => 'setUpdateCarrierPayment',
        'view_offer' => 'setViewOffer',
        'view_carrier_ask_list' => 'setViewCarrierAskList',
        'view_bid_list' => 'setViewBidList',
        'view_consignor_expeditor_payment' => 'setViewConsignorExpeditorPayment',
        'update_consignor_expeditor_payment' => 'setUpdateConsignorExpeditorPayment',
        'create_customer_docs_tracking' => 'setCreateCustomerDocsTracking',
        'create_downtime_claim' => 'setCreateDowntimeClaim',
        'update_carrier_document_tracking_number' => 'setUpdateCarrierDocumentTrackingNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'view' => 'getView',
        'view_carrier_document_tracking_number' => 'getViewCarrierDocumentTrackingNumber',
        'view_chat' => 'getViewChat',
        'create_patch' => 'getCreatePatch',
        'create_carrier_refuse' => 'getCreateCarrierRefuse',
        'create_refuse' => 'getCreateRefuse',
        'view_simple_document' => 'getViewSimpleDocument',
        'view_signed_documents' => 'getViewSignedDocuments',
        'view_itinerary' => 'getViewItinerary',
        'view_visitor_list' => 'getViewVisitorList',
        'view_pin_list' => 'getViewPinList',
        'view_download_expeditor_assignment' => 'getViewDownloadExpeditorAssignment',
        'view_download_request_assignment' => 'getViewDownloadRequestAssignment',
        'waybill_view' => 'getWaybillView',
        'waybill_edit' => 'getWaybillEdit',
        'view_ecn_list' => 'getViewEcnList',
        'view_ecn' => 'getViewEcn',
        'create_ecn' => 'getCreateEcn',
        'view_carrier_payment' => 'getViewCarrierPayment',
        'update_carrier_payment' => 'getUpdateCarrierPayment',
        'view_offer' => 'getViewOffer',
        'view_carrier_ask_list' => 'getViewCarrierAskList',
        'view_bid_list' => 'getViewBidList',
        'view_consignor_expeditor_payment' => 'getViewConsignorExpeditorPayment',
        'update_consignor_expeditor_payment' => 'getUpdateConsignorExpeditorPayment',
        'create_customer_docs_tracking' => 'getCreateCustomerDocsTracking',
        'create_downtime_claim' => 'getCreateDowntimeClaim',
        'update_carrier_document_tracking_number' => 'getUpdateCarrierDocumentTrackingNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('view', $data ?? [], false);
        $this->setIfExists('view_carrier_document_tracking_number', $data ?? [], false);
        $this->setIfExists('view_chat', $data ?? [], false);
        $this->setIfExists('create_patch', $data ?? [], false);
        $this->setIfExists('create_carrier_refuse', $data ?? [], false);
        $this->setIfExists('create_refuse', $data ?? [], false);
        $this->setIfExists('view_simple_document', $data ?? [], false);
        $this->setIfExists('view_signed_documents', $data ?? [], false);
        $this->setIfExists('view_itinerary', $data ?? [], false);
        $this->setIfExists('view_visitor_list', $data ?? [], false);
        $this->setIfExists('view_pin_list', $data ?? [], false);
        $this->setIfExists('view_download_expeditor_assignment', $data ?? [], false);
        $this->setIfExists('view_download_request_assignment', $data ?? [], false);
        $this->setIfExists('waybill_view', $data ?? [], false);
        $this->setIfExists('waybill_edit', $data ?? [], false);
        $this->setIfExists('view_ecn_list', $data ?? [], false);
        $this->setIfExists('view_ecn', $data ?? [], false);
        $this->setIfExists('create_ecn', $data ?? [], false);
        $this->setIfExists('view_carrier_payment', $data ?? [], false);
        $this->setIfExists('update_carrier_payment', $data ?? [], false);
        $this->setIfExists('view_offer', $data ?? [], false);
        $this->setIfExists('view_carrier_ask_list', $data ?? [], false);
        $this->setIfExists('view_bid_list', $data ?? [], false);
        $this->setIfExists('view_consignor_expeditor_payment', $data ?? [], false);
        $this->setIfExists('update_consignor_expeditor_payment', $data ?? [], false);
        $this->setIfExists('create_customer_docs_tracking', $data ?? [], false);
        $this->setIfExists('create_downtime_claim', $data ?? [], false);
        $this->setIfExists('update_carrier_document_tracking_number', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets view
     *
     * @return bool|null
     */
    public function getView()
    {
        return $this->container['view'];
    }

    /**
     * Sets view
     *
     * @param bool|null $view Просмотр карточки заказа
     *
     * @return self
     */
    public function setView($view)
    {
        if (is_null($view)) {
            throw new \InvalidArgumentException('non-nullable view cannot be null');
        }
        $this->container['view'] = $view;

        return $this;
    }

    /**
     * Gets view_carrier_document_tracking_number
     *
     * @return bool|null
     */
    public function getViewCarrierDocumentTrackingNumber()
    {
        return $this->container['view_carrier_document_tracking_number'];
    }

    /**
     * Sets view_carrier_document_tracking_number
     *
     * @param bool|null $view_carrier_document_tracking_number Просмотр трек-номера прикреплённых к заказу документов перевозчика
     *
     * @return self
     */
    public function setViewCarrierDocumentTrackingNumber($view_carrier_document_tracking_number)
    {
        if (is_null($view_carrier_document_tracking_number)) {
            throw new \InvalidArgumentException('non-nullable view_carrier_document_tracking_number cannot be null');
        }
        $this->container['view_carrier_document_tracking_number'] = $view_carrier_document_tracking_number;

        return $this;
    }

    /**
     * Gets view_chat
     *
     * @return bool|null
     */
    public function getViewChat()
    {
        return $this->container['view_chat'];
    }

    /**
     * Sets view_chat
     *
     * @param bool|null $view_chat Просмотр чатов заказа Экспедитора
     *
     * @return self
     */
    public function setViewChat($view_chat)
    {
        if (is_null($view_chat)) {
            throw new \InvalidArgumentException('non-nullable view_chat cannot be null');
        }
        $this->container['view_chat'] = $view_chat;

        return $this;
    }

    /**
     * Gets create_patch
     *
     * @return bool|null
     */
    public function getCreatePatch()
    {
        return $this->container['create_patch'];
    }

    /**
     * Sets create_patch
     *
     * @param bool|null $create_patch Создать заявку на изменение
     *
     * @return self
     */
    public function setCreatePatch($create_patch)
    {
        if (is_null($create_patch)) {
            throw new \InvalidArgumentException('non-nullable create_patch cannot be null');
        }
        $this->container['create_patch'] = $create_patch;

        return $this;
    }

    /**
     * Gets create_carrier_refuse
     *
     * @return bool|null
     */
    public function getCreateCarrierRefuse()
    {
        return $this->container['create_carrier_refuse'];
    }

    /**
     * Sets create_carrier_refuse
     *
     * @param bool|null $create_carrier_refuse Отказаться от Перевозчика
     *
     * @return self
     */
    public function setCreateCarrierRefuse($create_carrier_refuse)
    {
        if (is_null($create_carrier_refuse)) {
            throw new \InvalidArgumentException('non-nullable create_carrier_refuse cannot be null');
        }
        $this->container['create_carrier_refuse'] = $create_carrier_refuse;

        return $this;
    }

    /**
     * Gets create_refuse
     *
     * @return bool|null
     */
    public function getCreateRefuse()
    {
        return $this->container['create_refuse'];
    }

    /**
     * Sets create_refuse
     *
     * @param bool|null $create_refuse Отказаться от заказа
     *
     * @return self
     */
    public function setCreateRefuse($create_refuse)
    {
        if (is_null($create_refuse)) {
            throw new \InvalidArgumentException('non-nullable create_refuse cannot be null');
        }
        $this->container['create_refuse'] = $create_refuse;

        return $this;
    }

    /**
     * Gets view_simple_document
     *
     * @return bool|null
     */
    public function getViewSimpleDocument()
    {
        return $this->container['view_simple_document'];
    }

    /**
     * Sets view_simple_document
     *
     * @param bool|null $view_simple_document Возможность просматривать документ с титулами по заказу
     *
     * @return self
     */
    public function setViewSimpleDocument($view_simple_document)
    {
        if (is_null($view_simple_document)) {
            throw new \InvalidArgumentException('non-nullable view_simple_document cannot be null');
        }
        $this->container['view_simple_document'] = $view_simple_document;

        return $this;
    }

    /**
     * Gets view_signed_documents
     *
     * @return bool|null
     */
    public function getViewSignedDocuments()
    {
        return $this->container['view_signed_documents'];
    }

    /**
     * Sets view_signed_documents
     *
     * @param bool|null $view_signed_documents Возможность просматривать список документов, подписанных пэп, по заказу
     *
     * @return self
     */
    public function setViewSignedDocuments($view_signed_documents)
    {
        if (is_null($view_signed_documents)) {
            throw new \InvalidArgumentException('non-nullable view_signed_documents cannot be null');
        }
        $this->container['view_signed_documents'] = $view_signed_documents;

        return $this;
    }

    /**
     * Gets view_itinerary
     *
     * @return bool|null
     */
    public function getViewItinerary()
    {
        return $this->container['view_itinerary'];
    }

    /**
     * Sets view_itinerary
     *
     * @param bool|null $view_itinerary Возможность просматривать маршрут
     *
     * @return self
     */
    public function setViewItinerary($view_itinerary)
    {
        if (is_null($view_itinerary)) {
            throw new \InvalidArgumentException('non-nullable view_itinerary cannot be null');
        }
        $this->container['view_itinerary'] = $view_itinerary;

        return $this;
    }

    /**
     * Gets view_visitor_list
     *
     * @return bool|null
     */
    public function getViewVisitorList()
    {
        return $this->container['view_visitor_list'];
    }

    /**
     * Sets view_visitor_list
     *
     * @param bool|null $view_visitor_list Возможность просматривать список пользователей, просмотревших заказ
     *
     * @return self
     */
    public function setViewVisitorList($view_visitor_list)
    {
        if (is_null($view_visitor_list)) {
            throw new \InvalidArgumentException('non-nullable view_visitor_list cannot be null');
        }
        $this->container['view_visitor_list'] = $view_visitor_list;

        return $this;
    }

    /**
     * Gets view_pin_list
     *
     * @return bool|null
     */
    public function getViewPinList()
    {
        return $this->container['view_pin_list'];
    }

    /**
     * Sets view_pin_list
     *
     * @param bool|null $view_pin_list Возможность просматривать список пользователей, пометивших флагом заказ
     *
     * @return self
     */
    public function setViewPinList($view_pin_list)
    {
        if (is_null($view_pin_list)) {
            throw new \InvalidArgumentException('non-nullable view_pin_list cannot be null');
        }
        $this->container['view_pin_list'] = $view_pin_list;

        return $this;
    }

    /**
     * Gets view_download_expeditor_assignment
     *
     * @return bool|null
     */
    public function getViewDownloadExpeditorAssignment()
    {
        return $this->container['view_download_expeditor_assignment'];
    }

    /**
     * Sets view_download_expeditor_assignment
     *
     * @param bool|null $view_download_expeditor_assignment Возможность скачать поручение экспедитору
     *
     * @return self
     */
    public function setViewDownloadExpeditorAssignment($view_download_expeditor_assignment)
    {
        if (is_null($view_download_expeditor_assignment)) {
            throw new \InvalidArgumentException('non-nullable view_download_expeditor_assignment cannot be null');
        }
        $this->container['view_download_expeditor_assignment'] = $view_download_expeditor_assignment;

        return $this;
    }

    /**
     * Gets view_download_request_assignment
     *
     * @return bool|null
     */
    public function getViewDownloadRequestAssignment()
    {
        return $this->container['view_download_request_assignment'];
    }

    /**
     * Sets view_download_request_assignment
     *
     * @param bool|null $view_download_request_assignment Возможность скачать заявку-поручение
     *
     * @return self
     */
    public function setViewDownloadRequestAssignment($view_download_request_assignment)
    {
        if (is_null($view_download_request_assignment)) {
            throw new \InvalidArgumentException('non-nullable view_download_request_assignment cannot be null');
        }
        $this->container['view_download_request_assignment'] = $view_download_request_assignment;

        return $this;
    }

    /**
     * Gets waybill_view
     *
     * @return bool|null
     */
    public function getWaybillView()
    {
        return $this->container['waybill_view'];
    }

    /**
     * Sets waybill_view
     *
     * @param bool|null $waybill_view Возможность скачивать транспортную накладную
     *
     * @return self
     */
    public function setWaybillView($waybill_view)
    {
        if (is_null($waybill_view)) {
            throw new \InvalidArgumentException('non-nullable waybill_view cannot be null');
        }
        $this->container['waybill_view'] = $waybill_view;

        return $this;
    }

    /**
     * Gets waybill_edit
     *
     * @return bool|null
     */
    public function getWaybillEdit()
    {
        return $this->container['waybill_edit'];
    }

    /**
     * Sets waybill_edit
     *
     * @param bool|null $waybill_edit Возможность редактировать транспортную накладную
     *
     * @return self
     */
    public function setWaybillEdit($waybill_edit)
    {
        if (is_null($waybill_edit)) {
            throw new \InvalidArgumentException('non-nullable waybill_edit cannot be null');
        }
        $this->container['waybill_edit'] = $waybill_edit;

        return $this;
    }

    /**
     * Gets view_ecn_list
     *
     * @return bool|null
     */
    public function getViewEcnList()
    {
        return $this->container['view_ecn_list'];
    }

    /**
     * Sets view_ecn_list
     *
     * @param bool|null $view_ecn_list Возможность просмотра списка ЭТРН
     *
     * @return self
     */
    public function setViewEcnList($view_ecn_list)
    {
        if (is_null($view_ecn_list)) {
            throw new \InvalidArgumentException('non-nullable view_ecn_list cannot be null');
        }
        $this->container['view_ecn_list'] = $view_ecn_list;

        return $this;
    }

    /**
     * Gets view_ecn
     *
     * @return bool|null
     */
    public function getViewEcn()
    {
        return $this->container['view_ecn'];
    }

    /**
     * Sets view_ecn
     *
     * @param bool|null $view_ecn Возможность просмотра ЭТрН заказа
     *
     * @return self
     */
    public function setViewEcn($view_ecn)
    {
        if (is_null($view_ecn)) {
            throw new \InvalidArgumentException('non-nullable view_ecn cannot be null');
        }
        $this->container['view_ecn'] = $view_ecn;

        return $this;
    }

    /**
     * Gets create_ecn
     *
     * @return bool|null
     */
    public function getCreateEcn()
    {
        return $this->container['create_ecn'];
    }

    /**
     * Sets create_ecn
     *
     * @param bool|null $create_ecn Возможность создать ЭТрН заказа
     *
     * @return self
     */
    public function setCreateEcn($create_ecn)
    {
        if (is_null($create_ecn)) {
            throw new \InvalidArgumentException('non-nullable create_ecn cannot be null');
        }
        $this->container['create_ecn'] = $create_ecn;

        return $this;
    }

    /**
     * Gets view_carrier_payment
     *
     * @return bool|null
     */
    public function getViewCarrierPayment()
    {
        return $this->container['view_carrier_payment'];
    }

    /**
     * Sets view_carrier_payment
     *
     * @param bool|null $view_carrier_payment Возможность просматривать информацию о платеже перевозчику
     *
     * @return self
     */
    public function setViewCarrierPayment($view_carrier_payment)
    {
        if (is_null($view_carrier_payment)) {
            throw new \InvalidArgumentException('non-nullable view_carrier_payment cannot be null');
        }
        $this->container['view_carrier_payment'] = $view_carrier_payment;

        return $this;
    }

    /**
     * Gets update_carrier_payment
     *
     * @return bool|null
     */
    public function getUpdateCarrierPayment()
    {
        return $this->container['update_carrier_payment'];
    }

    /**
     * Sets update_carrier_payment
     *
     * @param bool|null $update_carrier_payment Возможность создать или обновить информацию о платеже перевозчику
     *
     * @return self
     */
    public function setUpdateCarrierPayment($update_carrier_payment)
    {
        if (is_null($update_carrier_payment)) {
            throw new \InvalidArgumentException('non-nullable update_carrier_payment cannot be null');
        }
        $this->container['update_carrier_payment'] = $update_carrier_payment;

        return $this;
    }

    /**
     * Gets view_offer
     *
     * @return bool|null
     */
    public function getViewOffer()
    {
        return $this->container['view_offer'];
    }

    /**
     * Sets view_offer
     *
     * @param bool|null $view_offer Просмотр списка предложений перевозчиков для экспедитора
     *
     * @return self
     */
    public function setViewOffer($view_offer)
    {
        if (is_null($view_offer)) {
            throw new \InvalidArgumentException('non-nullable view_offer cannot be null');
        }
        $this->container['view_offer'] = $view_offer;

        return $this;
    }

    /**
     * Gets view_carrier_ask_list
     *
     * @return bool|null
     */
    public function getViewCarrierAskList()
    {
        return $this->container['view_carrier_ask_list'];
    }

    /**
     * Sets view_carrier_ask_list
     *
     * @param bool|null $view_carrier_ask_list Возможность просмотра экспедитором ставок перевозчиков
     *
     * @return self
     */
    public function setViewCarrierAskList($view_carrier_ask_list)
    {
        if (is_null($view_carrier_ask_list)) {
            throw new \InvalidArgumentException('non-nullable view_carrier_ask_list cannot be null');
        }
        $this->container['view_carrier_ask_list'] = $view_carrier_ask_list;

        return $this;
    }

    /**
     * Gets view_bid_list
     *
     * @return bool|null
     */
    public function getViewBidList()
    {
        return $this->container['view_bid_list'];
    }

    /**
     * Sets view_bid_list
     *
     * @param bool|null $view_bid_list Просмотр списка ставок перевозчиков для экспедитора
     *
     * @return self
     */
    public function setViewBidList($view_bid_list)
    {
        if (is_null($view_bid_list)) {
            throw new \InvalidArgumentException('non-nullable view_bid_list cannot be null');
        }
        $this->container['view_bid_list'] = $view_bid_list;

        return $this;
    }

    /**
     * Gets view_consignor_expeditor_payment
     *
     * @return bool|null
     */
    public function getViewConsignorExpeditorPayment()
    {
        return $this->container['view_consignor_expeditor_payment'];
    }

    /**
     * Sets view_consignor_expeditor_payment
     *
     * @param bool|null $view_consignor_expeditor_payment Возможность просматривать информацию об оплате счёта заказчиком экспедитору
     *
     * @return self
     */
    public function setViewConsignorExpeditorPayment($view_consignor_expeditor_payment)
    {
        if (is_null($view_consignor_expeditor_payment)) {
            throw new \InvalidArgumentException('non-nullable view_consignor_expeditor_payment cannot be null');
        }
        $this->container['view_consignor_expeditor_payment'] = $view_consignor_expeditor_payment;

        return $this;
    }

    /**
     * Gets update_consignor_expeditor_payment
     *
     * @return bool|null
     */
    public function getUpdateConsignorExpeditorPayment()
    {
        return $this->container['update_consignor_expeditor_payment'];
    }

    /**
     * Sets update_consignor_expeditor_payment
     *
     * @param bool|null $update_consignor_expeditor_payment Возможность создания или обновления информации об оплате заказчиком счёта экспедитора
     *
     * @return self
     */
    public function setUpdateConsignorExpeditorPayment($update_consignor_expeditor_payment)
    {
        if (is_null($update_consignor_expeditor_payment)) {
            throw new \InvalidArgumentException('non-nullable update_consignor_expeditor_payment cannot be null');
        }
        $this->container['update_consignor_expeditor_payment'] = $update_consignor_expeditor_payment;

        return $this;
    }

    /**
     * Gets create_customer_docs_tracking
     *
     * @return bool|null
     */
    public function getCreateCustomerDocsTracking()
    {
        return $this->container['create_customer_docs_tracking'];
    }

    /**
     * Sets create_customer_docs_tracking
     *
     * @param bool|null $create_customer_docs_tracking Возможность создания трек-номера отслеживания отправления с документами для заказчика
     *
     * @return self
     */
    public function setCreateCustomerDocsTracking($create_customer_docs_tracking)
    {
        if (is_null($create_customer_docs_tracking)) {
            throw new \InvalidArgumentException('non-nullable create_customer_docs_tracking cannot be null');
        }
        $this->container['create_customer_docs_tracking'] = $create_customer_docs_tracking;

        return $this;
    }

    /**
     * Gets create_downtime_claim
     *
     * @return bool|null
     */
    public function getCreateDowntimeClaim()
    {
        return $this->container['create_downtime_claim'];
    }

    /**
     * Sets create_downtime_claim
     *
     * @param bool|null $create_downtime_claim Возможность создать претензию Экспедитора о простое по заявке
     *
     * @return self
     */
    public function setCreateDowntimeClaim($create_downtime_claim)
    {
        if (is_null($create_downtime_claim)) {
            throw new \InvalidArgumentException('non-nullable create_downtime_claim cannot be null');
        }
        $this->container['create_downtime_claim'] = $create_downtime_claim;

        return $this;
    }

    /**
     * Gets update_carrier_document_tracking_number
     *
     * @return bool|null
     */
    public function getUpdateCarrierDocumentTrackingNumber()
    {
        return $this->container['update_carrier_document_tracking_number'];
    }

    /**
     * Sets update_carrier_document_tracking_number
     *
     * @param bool|null $update_carrier_document_tracking_number Возможность создать или обновить трек-номер прикреплённых к заказу документов перевозчика
     *
     * @return self
     */
    public function setUpdateCarrierDocumentTrackingNumber($update_carrier_document_tracking_number)
    {
        if (is_null($update_carrier_document_tracking_number)) {
            throw new \InvalidArgumentException('non-nullable update_carrier_document_tracking_number cannot be null');
        }
        $this->container['update_carrier_document_tracking_number'] = $update_carrier_document_tracking_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


