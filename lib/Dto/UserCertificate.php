<?php
/**
 * UserCertificate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * UserCertificate Class Doc Comment
 *
 * @category Class
 * @description Сертификат ПЭП пользователя
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserCertificate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserCertificate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'status' => '\MagDv\Cargomart\Dto\UserCertificateStatusEnum',
        'serial_id' => 'int',
        'company_name' => 'string',
        'branch_id' => 'string',
        'system_company_name' => 'string',
        'contract_number' => 'string',
        'contract_date' => '\DateTime',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'receiver_id' => 'int',
        'receiver_phone' => 'string',
        'receiver_last_name' => 'string',
        'receiver_first_name' => 'string',
        'receiver_second_name' => 'string',
        'proxy_type' => '\MagDv\Cargomart\Dto\UserCertificateProxyTypeEnum',
        'certificate_file' => '\MagDv\Cargomart\Dto\FileUrl',
        'issue' => '\MagDv\Cargomart\Dto\UserCertificateIssue',
        'revoke' => '\MagDv\Cargomart\Dto\UserCertificateRevoke',
        'contract' => '\MagDv\Cargomart\Dto\CertificateContract',
        'access' => '\MagDv\Cargomart\Dto\UserCertificateAccess'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'status' => null,
        'serial_id' => null,
        'company_name' => null,
        'branch_id' => 'uuid',
        'system_company_name' => null,
        'contract_number' => null,
        'contract_date' => 'date',
        'start_date' => 'date',
        'end_date' => 'date',
        'receiver_id' => null,
        'receiver_phone' => null,
        'receiver_last_name' => null,
        'receiver_first_name' => null,
        'receiver_second_name' => null,
        'proxy_type' => null,
        'certificate_file' => null,
        'issue' => null,
        'revoke' => null,
        'contract' => null,
        'access' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'status' => false,
        'serial_id' => false,
        'company_name' => false,
        'branch_id' => false,
        'system_company_name' => false,
        'contract_number' => false,
        'contract_date' => false,
        'start_date' => false,
        'end_date' => false,
        'receiver_id' => false,
        'receiver_phone' => false,
        'receiver_last_name' => false,
        'receiver_first_name' => false,
        'receiver_second_name' => false,
        'proxy_type' => false,
        'certificate_file' => false,
        'issue' => false,
        'revoke' => false,
        'contract' => false,
        'access' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'serial_id' => 'serialId',
        'company_name' => 'companyName',
        'branch_id' => 'branchId',
        'system_company_name' => 'systemCompanyName',
        'contract_number' => 'contractNumber',
        'contract_date' => 'contractDate',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'receiver_id' => 'receiverId',
        'receiver_phone' => 'receiverPhone',
        'receiver_last_name' => 'receiverLastName',
        'receiver_first_name' => 'receiverFirstName',
        'receiver_second_name' => 'receiverSecondName',
        'proxy_type' => 'proxyType',
        'certificate_file' => 'certificateFile',
        'issue' => 'issue',
        'revoke' => 'revoke',
        'contract' => 'contract',
        'access' => 'access'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'serial_id' => 'setSerialId',
        'company_name' => 'setCompanyName',
        'branch_id' => 'setBranchId',
        'system_company_name' => 'setSystemCompanyName',
        'contract_number' => 'setContractNumber',
        'contract_date' => 'setContractDate',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'receiver_id' => 'setReceiverId',
        'receiver_phone' => 'setReceiverPhone',
        'receiver_last_name' => 'setReceiverLastName',
        'receiver_first_name' => 'setReceiverFirstName',
        'receiver_second_name' => 'setReceiverSecondName',
        'proxy_type' => 'setProxyType',
        'certificate_file' => 'setCertificateFile',
        'issue' => 'setIssue',
        'revoke' => 'setRevoke',
        'contract' => 'setContract',
        'access' => 'setAccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'serial_id' => 'getSerialId',
        'company_name' => 'getCompanyName',
        'branch_id' => 'getBranchId',
        'system_company_name' => 'getSystemCompanyName',
        'contract_number' => 'getContractNumber',
        'contract_date' => 'getContractDate',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'receiver_id' => 'getReceiverId',
        'receiver_phone' => 'getReceiverPhone',
        'receiver_last_name' => 'getReceiverLastName',
        'receiver_first_name' => 'getReceiverFirstName',
        'receiver_second_name' => 'getReceiverSecondName',
        'proxy_type' => 'getProxyType',
        'certificate_file' => 'getCertificateFile',
        'issue' => 'getIssue',
        'revoke' => 'getRevoke',
        'contract' => 'getContract',
        'access' => 'getAccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('serial_id', $data ?? [], null);
        $this->setIfExists('company_name', $data ?? [], null);
        $this->setIfExists('branch_id', $data ?? [], null);
        $this->setIfExists('system_company_name', $data ?? [], null);
        $this->setIfExists('contract_number', $data ?? [], null);
        $this->setIfExists('contract_date', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('receiver_id', $data ?? [], null);
        $this->setIfExists('receiver_phone', $data ?? [], null);
        $this->setIfExists('receiver_last_name', $data ?? [], null);
        $this->setIfExists('receiver_first_name', $data ?? [], null);
        $this->setIfExists('receiver_second_name', $data ?? [], null);
        $this->setIfExists('proxy_type', $data ?? [], null);
        $this->setIfExists('certificate_file', $data ?? [], null);
        $this->setIfExists('issue', $data ?? [], null);
        $this->setIfExists('revoke', $data ?? [], null);
        $this->setIfExists('contract', $data ?? [], null);
        $this->setIfExists('access', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['serial_id'] === null) {
            $invalidProperties[] = "'serial_id' can't be null";
        }
        if ($this->container['company_name'] === null) {
            $invalidProperties[] = "'company_name' can't be null";
        }
        if ($this->container['receiver_id'] === null) {
            $invalidProperties[] = "'receiver_id' can't be null";
        }
        if ($this->container['receiver_phone'] === null) {
            $invalidProperties[] = "'receiver_phone' can't be null";
        }
        if ($this->container['receiver_last_name'] === null) {
            $invalidProperties[] = "'receiver_last_name' can't be null";
        }
        if ($this->container['receiver_first_name'] === null) {
            $invalidProperties[] = "'receiver_first_name' can't be null";
        }
        if ($this->container['proxy_type'] === null) {
            $invalidProperties[] = "'proxy_type' can't be null";
        }
        if ($this->container['contract'] === null) {
            $invalidProperties[] = "'contract' can't be null";
        }
        if ($this->container['access'] === null) {
            $invalidProperties[] = "'access' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Идентификатор подписи
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \MagDv\Cargomart\Dto\UserCertificateStatusEnum
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \MagDv\Cargomart\Dto\UserCertificateStatusEnum $status Статус сертификата
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets serial_id
     *
     * @return int
     */
    public function getSerialId()
    {
        return $this->container['serial_id'];
    }

    /**
     * Sets serial_id
     *
     * @param int $serial_id Порядковый номер сертификата
     *
     * @return self
     */
    public function setSerialId($serial_id)
    {
        if (is_null($serial_id)) {
            throw new \InvalidArgumentException('non-nullable serial_id cannot be null');
        }
        $this->container['serial_id'] = $serial_id;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name Компания
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (is_null($company_name)) {
            throw new \InvalidArgumentException('non-nullable company_name cannot be null');
        }
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets branch_id
     *
     * @return string|null
     */
    public function getBranchId()
    {
        return $this->container['branch_id'];
    }

    /**
     * Sets branch_id
     *
     * @param string|null $branch_id Идентификатор дочерней компании
     *
     * @return self
     */
    public function setBranchId($branch_id)
    {
        if (is_null($branch_id)) {
            throw new \InvalidArgumentException('non-nullable branch_id cannot be null');
        }
        $this->container['branch_id'] = $branch_id;

        return $this;
    }

    /**
     * Gets system_company_name
     *
     * @return string|null
     */
    public function getSystemCompanyName()
    {
        return $this->container['system_company_name'];
    }

    /**
     * Sets system_company_name
     *
     * @param string|null $system_company_name Название компании системы
     *
     * @return self
     */
    public function setSystemCompanyName($system_company_name)
    {
        if (is_null($system_company_name)) {
            throw new \InvalidArgumentException('non-nullable system_company_name cannot be null');
        }
        $this->container['system_company_name'] = $system_company_name;

        return $this;
    }

    /**
     * Gets contract_number
     *
     * @return string|null
     */
    public function getContractNumber()
    {
        return $this->container['contract_number'];
    }

    /**
     * Sets contract_number
     *
     * @param string|null $contract_number Номер договора экспедитора
     *
     * @return self
     */
    public function setContractNumber($contract_number)
    {
        if (is_null($contract_number)) {
            throw new \InvalidArgumentException('non-nullable contract_number cannot be null');
        }
        $this->container['contract_number'] = $contract_number;

        return $this;
    }

    /**
     * Gets contract_date
     *
     * @return \DateTime|null
     */
    public function getContractDate()
    {
        return $this->container['contract_date'];
    }

    /**
     * Sets contract_date
     *
     * @param \DateTime|null $contract_date Дата договора экспедитора
     *
     * @return self
     */
    public function setContractDate($contract_date)
    {
        if (is_null($contract_date)) {
            throw new \InvalidArgumentException('non-nullable contract_date cannot be null');
        }
        $this->container['contract_date'] = $contract_date;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date Дата начала действия сертификата
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date Дата окончания действия сертификата
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets receiver_id
     *
     * @return int
     */
    public function getReceiverId()
    {
        return $this->container['receiver_id'];
    }

    /**
     * Sets receiver_id
     *
     * @param int $receiver_id Идентификатор получателя
     *
     * @return self
     */
    public function setReceiverId($receiver_id)
    {
        if (is_null($receiver_id)) {
            throw new \InvalidArgumentException('non-nullable receiver_id cannot be null');
        }
        $this->container['receiver_id'] = $receiver_id;

        return $this;
    }

    /**
     * Gets receiver_phone
     *
     * @return string
     */
    public function getReceiverPhone()
    {
        return $this->container['receiver_phone'];
    }

    /**
     * Sets receiver_phone
     *
     * @param string $receiver_phone Номер получателя
     *
     * @return self
     */
    public function setReceiverPhone($receiver_phone)
    {
        if (is_null($receiver_phone)) {
            throw new \InvalidArgumentException('non-nullable receiver_phone cannot be null');
        }
        $this->container['receiver_phone'] = $receiver_phone;

        return $this;
    }

    /**
     * Gets receiver_last_name
     *
     * @return string
     */
    public function getReceiverLastName()
    {
        return $this->container['receiver_last_name'];
    }

    /**
     * Sets receiver_last_name
     *
     * @param string $receiver_last_name Фамилия указанная в форме выдаче ПЭП
     *
     * @return self
     */
    public function setReceiverLastName($receiver_last_name)
    {
        if (is_null($receiver_last_name)) {
            throw new \InvalidArgumentException('non-nullable receiver_last_name cannot be null');
        }
        $this->container['receiver_last_name'] = $receiver_last_name;

        return $this;
    }

    /**
     * Gets receiver_first_name
     *
     * @return string
     */
    public function getReceiverFirstName()
    {
        return $this->container['receiver_first_name'];
    }

    /**
     * Sets receiver_first_name
     *
     * @param string $receiver_first_name Имя указанное в форме выдаче ПЭП
     *
     * @return self
     */
    public function setReceiverFirstName($receiver_first_name)
    {
        if (is_null($receiver_first_name)) {
            throw new \InvalidArgumentException('non-nullable receiver_first_name cannot be null');
        }
        $this->container['receiver_first_name'] = $receiver_first_name;

        return $this;
    }

    /**
     * Gets receiver_second_name
     *
     * @return string|null
     */
    public function getReceiverSecondName()
    {
        return $this->container['receiver_second_name'];
    }

    /**
     * Sets receiver_second_name
     *
     * @param string|null $receiver_second_name Отчество указанное в форме выдаче ПЭП
     *
     * @return self
     */
    public function setReceiverSecondName($receiver_second_name)
    {
        if (is_null($receiver_second_name)) {
            throw new \InvalidArgumentException('non-nullable receiver_second_name cannot be null');
        }
        $this->container['receiver_second_name'] = $receiver_second_name;

        return $this;
    }

    /**
     * Gets proxy_type
     *
     * @return \MagDv\Cargomart\Dto\UserCertificateProxyTypeEnum
     */
    public function getProxyType()
    {
        return $this->container['proxy_type'];
    }

    /**
     * Sets proxy_type
     *
     * @param \MagDv\Cargomart\Dto\UserCertificateProxyTypeEnum $proxy_type Тип доверенности в сертификате (ПЭП админ)
     *
     * @return self
     */
    public function setProxyType($proxy_type)
    {
        if (is_null($proxy_type)) {
            throw new \InvalidArgumentException('non-nullable proxy_type cannot be null');
        }
        $this->container['proxy_type'] = $proxy_type;

        return $this;
    }

    /**
     * Gets certificate_file
     *
     * @return \MagDv\Cargomart\Dto\FileUrl|null
     */
    public function getCertificateFile()
    {
        return $this->container['certificate_file'];
    }

    /**
     * Sets certificate_file
     *
     * @param \MagDv\Cargomart\Dto\FileUrl|null $certificate_file Ссылка на файл сертификата
     *
     * @return self
     */
    public function setCertificateFile($certificate_file)
    {
        if (is_null($certificate_file)) {
            throw new \InvalidArgumentException('non-nullable certificate_file cannot be null');
        }
        $this->container['certificate_file'] = $certificate_file;

        return $this;
    }

    /**
     * Gets issue
     *
     * @return \MagDv\Cargomart\Dto\UserCertificateIssue|null
     */
    public function getIssue()
    {
        return $this->container['issue'];
    }

    /**
     * Sets issue
     *
     * @param \MagDv\Cargomart\Dto\UserCertificateIssue|null $issue issue
     *
     * @return self
     */
    public function setIssue($issue)
    {
        if (is_null($issue)) {
            throw new \InvalidArgumentException('non-nullable issue cannot be null');
        }
        $this->container['issue'] = $issue;

        return $this;
    }

    /**
     * Gets revoke
     *
     * @return \MagDv\Cargomart\Dto\UserCertificateRevoke|null
     */
    public function getRevoke()
    {
        return $this->container['revoke'];
    }

    /**
     * Sets revoke
     *
     * @param \MagDv\Cargomart\Dto\UserCertificateRevoke|null $revoke revoke
     *
     * @return self
     */
    public function setRevoke($revoke)
    {
        if (is_null($revoke)) {
            throw new \InvalidArgumentException('non-nullable revoke cannot be null');
        }
        $this->container['revoke'] = $revoke;

        return $this;
    }

    /**
     * Gets contract
     *
     * @return \MagDv\Cargomart\Dto\CertificateContract
     */
    public function getContract()
    {
        return $this->container['contract'];
    }

    /**
     * Sets contract
     *
     * @param \MagDv\Cargomart\Dto\CertificateContract $contract Данные договора
     *
     * @return self
     */
    public function setContract($contract)
    {
        if (is_null($contract)) {
            throw new \InvalidArgumentException('non-nullable contract cannot be null');
        }
        $this->container['contract'] = $contract;

        return $this;
    }

    /**
     * Gets access
     *
     * @return \MagDv\Cargomart\Dto\UserCertificateAccess
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param \MagDv\Cargomart\Dto\UserCertificateAccess $access access
     *
     * @return self
     */
    public function setAccess($access)
    {
        if (is_null($access)) {
            throw new \InvalidArgumentException('non-nullable access cannot be null');
        }
        $this->container['access'] = $access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


