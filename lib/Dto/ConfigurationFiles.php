<?php
/**
 * ConfigurationFiles
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * ConfigurationFiles Class Doc Comment
 *
 * @category Class
 * @description Список документов для фронтенда
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConfigurationFiles implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'configuration-files';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'anti_corruption_agreement' => 'string',
        'confidential_info' => 'string',
        'standard_contract_btf' => 'string',
        'standard_contract_kdv' => 'string',
        'standard_contract_vostok_ved' => 'string',
        'application_form' => 'string',
        'corsa_charter_docs' => 'string',
        'expeditor_consignor_contract' => 'string',
        'required_expeditor_consignor_docs' => 'string',
        'email_template_joining_employee' => 'string',
        'rules' => 'string',
        'privacy_policy' => 'string',
        'agreement' => 'string',
        'offer' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'anti_corruption_agreement' => null,
        'confidential_info' => null,
        'standard_contract_btf' => null,
        'standard_contract_kdv' => null,
        'standard_contract_vostok_ved' => null,
        'application_form' => null,
        'corsa_charter_docs' => null,
        'expeditor_consignor_contract' => null,
        'required_expeditor_consignor_docs' => null,
        'email_template_joining_employee' => null,
        'rules' => null,
        'privacy_policy' => null,
        'agreement' => null,
        'offer' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'anti_corruption_agreement' => false,
        'confidential_info' => false,
        'standard_contract_btf' => false,
        'standard_contract_kdv' => false,
        'standard_contract_vostok_ved' => false,
        'application_form' => false,
        'corsa_charter_docs' => false,
        'expeditor_consignor_contract' => false,
        'required_expeditor_consignor_docs' => false,
        'email_template_joining_employee' => false,
        'rules' => false,
        'privacy_policy' => false,
        'agreement' => false,
        'offer' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'anti_corruption_agreement' => 'antiCorruptionAgreement',
        'confidential_info' => 'confidentialInfo',
        'standard_contract_btf' => 'standardContractBTF',
        'standard_contract_kdv' => 'standardContractKDV',
        'standard_contract_vostok_ved' => 'standardContractVostokVED',
        'application_form' => 'applicationForm',
        'corsa_charter_docs' => 'corsaCharterDocs',
        'expeditor_consignor_contract' => 'expeditorConsignorContract',
        'required_expeditor_consignor_docs' => 'requiredExpeditorConsignorDocs',
        'email_template_joining_employee' => 'emailTemplateJoiningEmployee',
        'rules' => 'rules',
        'privacy_policy' => 'privacyPolicy',
        'agreement' => 'agreement',
        'offer' => 'offer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'anti_corruption_agreement' => 'setAntiCorruptionAgreement',
        'confidential_info' => 'setConfidentialInfo',
        'standard_contract_btf' => 'setStandardContractBtf',
        'standard_contract_kdv' => 'setStandardContractKdv',
        'standard_contract_vostok_ved' => 'setStandardContractVostokVed',
        'application_form' => 'setApplicationForm',
        'corsa_charter_docs' => 'setCorsaCharterDocs',
        'expeditor_consignor_contract' => 'setExpeditorConsignorContract',
        'required_expeditor_consignor_docs' => 'setRequiredExpeditorConsignorDocs',
        'email_template_joining_employee' => 'setEmailTemplateJoiningEmployee',
        'rules' => 'setRules',
        'privacy_policy' => 'setPrivacyPolicy',
        'agreement' => 'setAgreement',
        'offer' => 'setOffer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'anti_corruption_agreement' => 'getAntiCorruptionAgreement',
        'confidential_info' => 'getConfidentialInfo',
        'standard_contract_btf' => 'getStandardContractBtf',
        'standard_contract_kdv' => 'getStandardContractKdv',
        'standard_contract_vostok_ved' => 'getStandardContractVostokVed',
        'application_form' => 'getApplicationForm',
        'corsa_charter_docs' => 'getCorsaCharterDocs',
        'expeditor_consignor_contract' => 'getExpeditorConsignorContract',
        'required_expeditor_consignor_docs' => 'getRequiredExpeditorConsignorDocs',
        'email_template_joining_employee' => 'getEmailTemplateJoiningEmployee',
        'rules' => 'getRules',
        'privacy_policy' => 'getPrivacyPolicy',
        'agreement' => 'getAgreement',
        'offer' => 'getOffer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('anti_corruption_agreement', $data ?? [], null);
        $this->setIfExists('confidential_info', $data ?? [], null);
        $this->setIfExists('standard_contract_btf', $data ?? [], null);
        $this->setIfExists('standard_contract_kdv', $data ?? [], null);
        $this->setIfExists('standard_contract_vostok_ved', $data ?? [], null);
        $this->setIfExists('application_form', $data ?? [], null);
        $this->setIfExists('corsa_charter_docs', $data ?? [], null);
        $this->setIfExists('expeditor_consignor_contract', $data ?? [], null);
        $this->setIfExists('required_expeditor_consignor_docs', $data ?? [], null);
        $this->setIfExists('email_template_joining_employee', $data ?? [], null);
        $this->setIfExists('rules', $data ?? [], null);
        $this->setIfExists('privacy_policy', $data ?? [], null);
        $this->setIfExists('agreement', $data ?? [], null);
        $this->setIfExists('offer', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets anti_corruption_agreement
     *
     * @return string|null
     */
    public function getAntiCorruptionAgreement()
    {
        return $this->container['anti_corruption_agreement'];
    }

    /**
     * Sets anti_corruption_agreement
     *
     * @param string|null $anti_corruption_agreement Антикоррупционное соглашение
     *
     * @return self
     */
    public function setAntiCorruptionAgreement($anti_corruption_agreement)
    {
        if (is_null($anti_corruption_agreement)) {
            throw new \InvalidArgumentException('non-nullable anti_corruption_agreement cannot be null');
        }
        $this->container['anti_corruption_agreement'] = $anti_corruption_agreement;

        return $this;
    }

    /**
     * Gets confidential_info
     *
     * @return string|null
     */
    public function getConfidentialInfo()
    {
        return $this->container['confidential_info'];
    }

    /**
     * Sets confidential_info
     *
     * @param string|null $confidential_info Соглашение о конфиденциальной информации
     *
     * @return self
     */
    public function setConfidentialInfo($confidential_info)
    {
        if (is_null($confidential_info)) {
            throw new \InvalidArgumentException('non-nullable confidential_info cannot be null');
        }
        $this->container['confidential_info'] = $confidential_info;

        return $this;
    }

    /**
     * Gets standard_contract_btf
     *
     * @return string|null
     */
    public function getStandardContractBtf()
    {
        return $this->container['standard_contract_btf'];
    }

    /**
     * Sets standard_contract_btf
     *
     * @param string|null $standard_contract_btf Образец договора перевозки с ЗАО «Бриджтаун Фудс»
     *
     * @return self
     */
    public function setStandardContractBtf($standard_contract_btf)
    {
        if (is_null($standard_contract_btf)) {
            throw new \InvalidArgumentException('non-nullable standard_contract_btf cannot be null');
        }
        $this->container['standard_contract_btf'] = $standard_contract_btf;

        return $this;
    }

    /**
     * Gets standard_contract_kdv
     *
     * @return string|null
     */
    public function getStandardContractKdv()
    {
        return $this->container['standard_contract_kdv'];
    }

    /**
     * Sets standard_contract_kdv
     *
     * @param string|null $standard_contract_kdv Образец договора перевозки с ООО «КДВ Групп»
     *
     * @return self
     */
    public function setStandardContractKdv($standard_contract_kdv)
    {
        if (is_null($standard_contract_kdv)) {
            throw new \InvalidArgumentException('non-nullable standard_contract_kdv cannot be null');
        }
        $this->container['standard_contract_kdv'] = $standard_contract_kdv;

        return $this;
    }

    /**
     * Gets standard_contract_vostok_ved
     *
     * @return string|null
     */
    public function getStandardContractVostokVed()
    {
        return $this->container['standard_contract_vostok_ved'];
    }

    /**
     * Sets standard_contract_vostok_ved
     *
     * @param string|null $standard_contract_vostok_ved Образец договора транспортно-экспедиционного обслуживания с ООО «Восток-ВЭД»
     *
     * @return self
     */
    public function setStandardContractVostokVed($standard_contract_vostok_ved)
    {
        if (is_null($standard_contract_vostok_ved)) {
            throw new \InvalidArgumentException('non-nullable standard_contract_vostok_ved cannot be null');
        }
        $this->container['standard_contract_vostok_ved'] = $standard_contract_vostok_ved;

        return $this;
    }

    /**
     * Gets application_form
     *
     * @return string|null
     */
    public function getApplicationForm()
    {
        return $this->container['application_form'];
    }

    /**
     * Sets application_form
     *
     * @param string|null $application_form Анкета-заявка на заключение договора
     *
     * @return self
     */
    public function setApplicationForm($application_form)
    {
        if (is_null($application_form)) {
            throw new \InvalidArgumentException('non-nullable application_form cannot be null');
        }
        $this->container['application_form'] = $application_form;

        return $this;
    }

    /**
     * Gets corsa_charter_docs
     *
     * @return string|null
     */
    public function getCorsaCharterDocs()
    {
        return $this->container['corsa_charter_docs'];
    }

    /**
     * Sets corsa_charter_docs
     *
     * @param string|null $corsa_charter_docs Архив с документами АО «Корса»
     *
     * @return self
     */
    public function setCorsaCharterDocs($corsa_charter_docs)
    {
        if (is_null($corsa_charter_docs)) {
            throw new \InvalidArgumentException('non-nullable corsa_charter_docs cannot be null');
        }
        $this->container['corsa_charter_docs'] = $corsa_charter_docs;

        return $this;
    }

    /**
     * Gets expeditor_consignor_contract
     *
     * @return string|null
     */
    public function getExpeditorConsignorContract()
    {
        return $this->container['expeditor_consignor_contract'];
    }

    /**
     * Sets expeditor_consignor_contract
     *
     * @param string|null $expeditor_consignor_contract Образец договора транспортно-экспедиционного обслуживания
     *
     * @return self
     */
    public function setExpeditorConsignorContract($expeditor_consignor_contract)
    {
        if (is_null($expeditor_consignor_contract)) {
            throw new \InvalidArgumentException('non-nullable expeditor_consignor_contract cannot be null');
        }
        $this->container['expeditor_consignor_contract'] = $expeditor_consignor_contract;

        return $this;
    }

    /**
     * Gets required_expeditor_consignor_docs
     *
     * @return string|null
     */
    public function getRequiredExpeditorConsignorDocs()
    {
        return $this->container['required_expeditor_consignor_docs'];
    }

    /**
     * Sets required_expeditor_consignor_docs
     *
     * @param string|null $required_expeditor_consignor_docs Требуемые документы для заключения договора с АО «Корса»
     *
     * @return self
     */
    public function setRequiredExpeditorConsignorDocs($required_expeditor_consignor_docs)
    {
        if (is_null($required_expeditor_consignor_docs)) {
            throw new \InvalidArgumentException('non-nullable required_expeditor_consignor_docs cannot be null');
        }
        $this->container['required_expeditor_consignor_docs'] = $required_expeditor_consignor_docs;

        return $this;
    }

    /**
     * Gets email_template_joining_employee
     *
     * @return string|null
     */
    public function getEmailTemplateJoiningEmployee()
    {
        return $this->container['email_template_joining_employee'];
    }

    /**
     * Sets email_template_joining_employee
     *
     * @param string|null $email_template_joining_employee Шаблон письма на присоединение учетной записи сотрудника к организации
     *
     * @return self
     */
    public function setEmailTemplateJoiningEmployee($email_template_joining_employee)
    {
        if (is_null($email_template_joining_employee)) {
            throw new \InvalidArgumentException('non-nullable email_template_joining_employee cannot be null');
        }
        $this->container['email_template_joining_employee'] = $email_template_joining_employee;

        return $this;
    }

    /**
     * Gets rules
     *
     * @return string|null
     */
    public function getRules()
    {
        return $this->container['rules'];
    }

    /**
     * Sets rules
     *
     * @param string|null $rules Регламент работы
     *
     * @return self
     */
    public function setRules($rules)
    {
        if (is_null($rules)) {
            throw new \InvalidArgumentException('non-nullable rules cannot be null');
        }
        $this->container['rules'] = $rules;

        return $this;
    }

    /**
     * Gets privacy_policy
     *
     * @return string|null
     */
    public function getPrivacyPolicy()
    {
        return $this->container['privacy_policy'];
    }

    /**
     * Sets privacy_policy
     *
     * @param string|null $privacy_policy Политика конфиденциальности
     *
     * @return self
     */
    public function setPrivacyPolicy($privacy_policy)
    {
        if (is_null($privacy_policy)) {
            throw new \InvalidArgumentException('non-nullable privacy_policy cannot be null');
        }
        $this->container['privacy_policy'] = $privacy_policy;

        return $this;
    }

    /**
     * Gets agreement
     *
     * @return string|null
     */
    public function getAgreement()
    {
        return $this->container['agreement'];
    }

    /**
     * Sets agreement
     *
     * @param string|null $agreement Согласие на обработку персональных данных.
     *
     * @return self
     */
    public function setAgreement($agreement)
    {
        if (is_null($agreement)) {
            throw new \InvalidArgumentException('non-nullable agreement cannot be null');
        }
        $this->container['agreement'] = $agreement;

        return $this;
    }

    /**
     * Gets offer
     *
     * @return string|null
     */
    public function getOffer()
    {
        return $this->container['offer'];
    }

    /**
     * Sets offer
     *
     * @param string|null $offer Публичная оферта
     *
     * @return self
     */
    public function setOffer($offer)
    {
        if (is_null($offer)) {
            throw new \InvalidArgumentException('non-nullable offer cannot be null');
        }
        $this->container['offer'] = $offer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


