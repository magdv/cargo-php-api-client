<?php
/**
 * CompanyInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * CompanyInfo Class Doc Comment
 *
 * @category Class
 * @description Модель данных ЮЛ или ИП
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CompanyInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'company-info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'short_name' => 'string',
        'type' => '\MagDv\Cargomart\Dto\CompanyTypeEnum',
        'logo' => 'string',
        'actual_address' => 'string',
        'phone' => 'string',
        'country_code' => 'string',
        'head_name' => 'string',
        'description' => 'string',
        'activity_type' => 'string',
        'activity_type_name' => 'string',
        'activity_type_id' => 'int',
        'disabled' => '\MagDv\Cargomart\Dto\DisabledFull',
        'orders_by_month' => 'int',
        'is_blocked' => 'bool',
        'partner_status' => '\MagDv\Cargomart\Dto\PartnerStatusEnum',
        'partners' => '\MagDv\Cargomart\Dto\PartnerShortItem[]',
        'client_id' => 'int',
        'email' => 'string',
        'activity_type_alias' => 'string',
        'operating_account' => 'string',
        'bank_name' => 'string',
        'corresponding_account' => 'string',
        'bic' => 'string',
        'count_create_order' => 'int',
        'count_winner_order' => 'int',
        'is_cooperating_general_partner' => 'bool',
        'is_with_vat' => 'bool',
        'is_partnership_allowed' => 'bool',
        'is_with_branch' => 'bool',
        'inn' => 'string',
        'create_date' => 'string',
        'register_date' => '\DateTime',
        'car_count' => 'int',
        'metrics' => '\MagDv\Cargomart\Dto\CompanyMetrics',
        'is_direct_sender' => 'bool',
        'status' => '\MagDv\Cargomart\Dto\CompanyStatusEnum',
        'contract' => '\MagDv\Cargomart\Dto\PartnerContract',
        'partner_contract' => '\MagDv\Cargomart\Dto\PartnerContractWithType[]',
        'is_validated' => 'bool',
        'legal_address' => 'string',
        'legal_status_id' => '\MagDv\Cargomart\Dto\LegalFormEnum',
        'legal_name' => 'string',
        'ogrn' => 'string',
        'okpo' => 'string',
        'kpp' => 'string',
        'url' => 'string',
        'has_company_contact_groups' => 'bool',
        'access' => '\MagDv\Cargomart\Dto\CompanyAccess'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'short_name' => null,
        'type' => null,
        'logo' => null,
        'actual_address' => null,
        'phone' => null,
        'country_code' => null,
        'head_name' => null,
        'description' => null,
        'activity_type' => null,
        'activity_type_name' => null,
        'activity_type_id' => null,
        'disabled' => null,
        'orders_by_month' => null,
        'is_blocked' => null,
        'partner_status' => null,
        'partners' => null,
        'client_id' => null,
        'email' => null,
        'activity_type_alias' => null,
        'operating_account' => null,
        'bank_name' => null,
        'corresponding_account' => null,
        'bic' => null,
        'count_create_order' => null,
        'count_winner_order' => null,
        'is_cooperating_general_partner' => null,
        'is_with_vat' => null,
        'is_partnership_allowed' => null,
        'is_with_branch' => null,
        'inn' => null,
        'create_date' => null,
        'register_date' => 'date',
        'car_count' => null,
        'metrics' => null,
        'is_direct_sender' => null,
        'status' => null,
        'contract' => null,
        'partner_contract' => null,
        'is_validated' => null,
        'legal_address' => null,
        'legal_status_id' => null,
        'legal_name' => null,
        'ogrn' => null,
        'okpo' => null,
        'kpp' => null,
        'url' => null,
        'has_company_contact_groups' => null,
        'access' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'short_name' => false,
        'type' => false,
        'logo' => true,
        'actual_address' => false,
        'phone' => false,
        'country_code' => false,
        'head_name' => true,
        'description' => true,
        'activity_type' => true,
        'activity_type_name' => true,
        'activity_type_id' => true,
        'disabled' => false,
        'orders_by_month' => false,
        'is_blocked' => false,
        'partner_status' => false,
        'partners' => false,
        'client_id' => false,
        'email' => true,
        'activity_type_alias' => true,
        'operating_account' => false,
        'bank_name' => false,
        'corresponding_account' => false,
        'bic' => false,
        'count_create_order' => false,
        'count_winner_order' => false,
        'is_cooperating_general_partner' => false,
        'is_with_vat' => false,
        'is_partnership_allowed' => false,
        'is_with_branch' => false,
        'inn' => false,
        'create_date' => false,
        'register_date' => false,
        'car_count' => false,
        'metrics' => false,
        'is_direct_sender' => false,
        'status' => false,
        'contract' => false,
        'partner_contract' => false,
        'is_validated' => false,
        'legal_address' => false,
        'legal_status_id' => false,
        'legal_name' => true,
        'ogrn' => true,
        'okpo' => true,
        'kpp' => true,
        'url' => true,
        'has_company_contact_groups' => false,
        'access' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'short_name' => 'shortName',
        'type' => 'type',
        'logo' => 'logo',
        'actual_address' => 'actualAddress',
        'phone' => 'phone',
        'country_code' => 'countryCode',
        'head_name' => 'headName',
        'description' => 'description',
        'activity_type' => 'activityType',
        'activity_type_name' => 'activityTypeName',
        'activity_type_id' => 'activityTypeId',
        'disabled' => 'disabled',
        'orders_by_month' => 'ordersByMonth',
        'is_blocked' => 'isBlocked',
        'partner_status' => 'partnerStatus',
        'partners' => 'partners',
        'client_id' => 'clientId',
        'email' => 'email',
        'activity_type_alias' => 'activityTypeAlias',
        'operating_account' => 'operatingAccount',
        'bank_name' => 'bankName',
        'corresponding_account' => 'correspondingAccount',
        'bic' => 'bic',
        'count_create_order' => 'countCreateOrder',
        'count_winner_order' => 'countWinnerOrder',
        'is_cooperating_general_partner' => 'isCooperatingGeneralPartner',
        'is_with_vat' => 'isWithVat',
        'is_partnership_allowed' => 'isPartnershipAllowed',
        'is_with_branch' => 'isWithBranch',
        'inn' => 'inn',
        'create_date' => 'createDate',
        'register_date' => 'registerDate',
        'car_count' => 'carCount',
        'metrics' => 'metrics',
        'is_direct_sender' => 'isDirectSender',
        'status' => 'status',
        'contract' => 'contract',
        'partner_contract' => 'partnerContract',
        'is_validated' => 'isValidated',
        'legal_address' => 'legalAddress',
        'legal_status_id' => 'legalStatusId',
        'legal_name' => 'legalName',
        'ogrn' => 'ogrn',
        'okpo' => 'okpo',
        'kpp' => 'kpp',
        'url' => 'url',
        'has_company_contact_groups' => 'hasCompanyContactGroups',
        'access' => 'access'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'short_name' => 'setShortName',
        'type' => 'setType',
        'logo' => 'setLogo',
        'actual_address' => 'setActualAddress',
        'phone' => 'setPhone',
        'country_code' => 'setCountryCode',
        'head_name' => 'setHeadName',
        'description' => 'setDescription',
        'activity_type' => 'setActivityType',
        'activity_type_name' => 'setActivityTypeName',
        'activity_type_id' => 'setActivityTypeId',
        'disabled' => 'setDisabled',
        'orders_by_month' => 'setOrdersByMonth',
        'is_blocked' => 'setIsBlocked',
        'partner_status' => 'setPartnerStatus',
        'partners' => 'setPartners',
        'client_id' => 'setClientId',
        'email' => 'setEmail',
        'activity_type_alias' => 'setActivityTypeAlias',
        'operating_account' => 'setOperatingAccount',
        'bank_name' => 'setBankName',
        'corresponding_account' => 'setCorrespondingAccount',
        'bic' => 'setBic',
        'count_create_order' => 'setCountCreateOrder',
        'count_winner_order' => 'setCountWinnerOrder',
        'is_cooperating_general_partner' => 'setIsCooperatingGeneralPartner',
        'is_with_vat' => 'setIsWithVat',
        'is_partnership_allowed' => 'setIsPartnershipAllowed',
        'is_with_branch' => 'setIsWithBranch',
        'inn' => 'setInn',
        'create_date' => 'setCreateDate',
        'register_date' => 'setRegisterDate',
        'car_count' => 'setCarCount',
        'metrics' => 'setMetrics',
        'is_direct_sender' => 'setIsDirectSender',
        'status' => 'setStatus',
        'contract' => 'setContract',
        'partner_contract' => 'setPartnerContract',
        'is_validated' => 'setIsValidated',
        'legal_address' => 'setLegalAddress',
        'legal_status_id' => 'setLegalStatusId',
        'legal_name' => 'setLegalName',
        'ogrn' => 'setOgrn',
        'okpo' => 'setOkpo',
        'kpp' => 'setKpp',
        'url' => 'setUrl',
        'has_company_contact_groups' => 'setHasCompanyContactGroups',
        'access' => 'setAccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'short_name' => 'getShortName',
        'type' => 'getType',
        'logo' => 'getLogo',
        'actual_address' => 'getActualAddress',
        'phone' => 'getPhone',
        'country_code' => 'getCountryCode',
        'head_name' => 'getHeadName',
        'description' => 'getDescription',
        'activity_type' => 'getActivityType',
        'activity_type_name' => 'getActivityTypeName',
        'activity_type_id' => 'getActivityTypeId',
        'disabled' => 'getDisabled',
        'orders_by_month' => 'getOrdersByMonth',
        'is_blocked' => 'getIsBlocked',
        'partner_status' => 'getPartnerStatus',
        'partners' => 'getPartners',
        'client_id' => 'getClientId',
        'email' => 'getEmail',
        'activity_type_alias' => 'getActivityTypeAlias',
        'operating_account' => 'getOperatingAccount',
        'bank_name' => 'getBankName',
        'corresponding_account' => 'getCorrespondingAccount',
        'bic' => 'getBic',
        'count_create_order' => 'getCountCreateOrder',
        'count_winner_order' => 'getCountWinnerOrder',
        'is_cooperating_general_partner' => 'getIsCooperatingGeneralPartner',
        'is_with_vat' => 'getIsWithVat',
        'is_partnership_allowed' => 'getIsPartnershipAllowed',
        'is_with_branch' => 'getIsWithBranch',
        'inn' => 'getInn',
        'create_date' => 'getCreateDate',
        'register_date' => 'getRegisterDate',
        'car_count' => 'getCarCount',
        'metrics' => 'getMetrics',
        'is_direct_sender' => 'getIsDirectSender',
        'status' => 'getStatus',
        'contract' => 'getContract',
        'partner_contract' => 'getPartnerContract',
        'is_validated' => 'getIsValidated',
        'legal_address' => 'getLegalAddress',
        'legal_status_id' => 'getLegalStatusId',
        'legal_name' => 'getLegalName',
        'ogrn' => 'getOgrn',
        'okpo' => 'getOkpo',
        'kpp' => 'getKpp',
        'url' => 'getUrl',
        'has_company_contact_groups' => 'getHasCompanyContactGroups',
        'access' => 'getAccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('short_name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('logo', $data ?? [], null);
        $this->setIfExists('actual_address', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('head_name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('activity_type', $data ?? [], null);
        $this->setIfExists('activity_type_name', $data ?? [], null);
        $this->setIfExists('activity_type_id', $data ?? [], null);
        $this->setIfExists('disabled', $data ?? [], null);
        $this->setIfExists('orders_by_month', $data ?? [], null);
        $this->setIfExists('is_blocked', $data ?? [], false);
        $this->setIfExists('partner_status', $data ?? [], null);
        $this->setIfExists('partners', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('activity_type_alias', $data ?? [], null);
        $this->setIfExists('operating_account', $data ?? [], null);
        $this->setIfExists('bank_name', $data ?? [], null);
        $this->setIfExists('corresponding_account', $data ?? [], null);
        $this->setIfExists('bic', $data ?? [], null);
        $this->setIfExists('count_create_order', $data ?? [], null);
        $this->setIfExists('count_winner_order', $data ?? [], null);
        $this->setIfExists('is_cooperating_general_partner', $data ?? [], false);
        $this->setIfExists('is_with_vat', $data ?? [], false);
        $this->setIfExists('is_partnership_allowed', $data ?? [], false);
        $this->setIfExists('is_with_branch', $data ?? [], false);
        $this->setIfExists('inn', $data ?? [], null);
        $this->setIfExists('create_date', $data ?? [], null);
        $this->setIfExists('register_date', $data ?? [], null);
        $this->setIfExists('car_count', $data ?? [], null);
        $this->setIfExists('metrics', $data ?? [], null);
        $this->setIfExists('is_direct_sender', $data ?? [], false);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('contract', $data ?? [], null);
        $this->setIfExists('partner_contract', $data ?? [], null);
        $this->setIfExists('is_validated', $data ?? [], false);
        $this->setIfExists('legal_address', $data ?? [], null);
        $this->setIfExists('legal_status_id', $data ?? [], null);
        $this->setIfExists('legal_name', $data ?? [], null);
        $this->setIfExists('ogrn', $data ?? [], null);
        $this->setIfExists('okpo', $data ?? [], null);
        $this->setIfExists('kpp', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('has_company_contact_groups', $data ?? [], false);
        $this->setIfExists('access', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['short_name'] === null) {
            $invalidProperties[] = "'short_name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['phone'] === null) {
            $invalidProperties[] = "'phone' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Идентификатор (хэш) клиента
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string $short_name Краткое название организации
     *
     * @return self
     */
    public function setShortName($short_name)
    {
        if (is_null($short_name)) {
            throw new \InvalidArgumentException('non-nullable short_name cannot be null');
        }
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \MagDv\Cargomart\Dto\CompanyTypeEnum
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \MagDv\Cargomart\Dto\CompanyTypeEnum $type Тип компании (carrier, consignor)
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string|null $logo logo
     *
     * @return self
     */
    public function setLogo($logo)
    {
        if (is_null($logo)) {
            array_push($this->openAPINullablesSetToNull, 'logo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets actual_address
     *
     * @return string|null
     */
    public function getActualAddress()
    {
        return $this->container['actual_address'];
    }

    /**
     * Sets actual_address
     *
     * @param string|null $actual_address Фактический адрес компании
     *
     * @return self
     */
    public function setActualAddress($actual_address)
    {
        if (is_null($actual_address)) {
            throw new \InvalidArgumentException('non-nullable actual_address cannot be null');
        }
        $this->container['actual_address'] = $actual_address;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Телефон (только цифры)
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code Код страны
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (is_null($country_code)) {
            throw new \InvalidArgumentException('non-nullable country_code cannot be null');
        }
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets head_name
     *
     * @return string|null
     */
    public function getHeadName()
    {
        return $this->container['head_name'];
    }

    /**
     * Sets head_name
     *
     * @param string|null $head_name head_name
     *
     * @return self
     */
    public function setHeadName($head_name)
    {
        if (is_null($head_name)) {
            array_push($this->openAPINullablesSetToNull, 'head_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('head_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['head_name'] = $head_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets activity_type
     *
     * @return string|null
     */
    public function getActivityType()
    {
        return $this->container['activity_type'];
    }

    /**
     * Sets activity_type
     *
     * @param string|null $activity_type activity_type
     *
     * @return self
     */
    public function setActivityType($activity_type)
    {
        if (is_null($activity_type)) {
            array_push($this->openAPINullablesSetToNull, 'activity_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('activity_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['activity_type'] = $activity_type;

        return $this;
    }

    /**
     * Gets activity_type_name
     *
     * @return string|null
     */
    public function getActivityTypeName()
    {
        return $this->container['activity_type_name'];
    }

    /**
     * Sets activity_type_name
     *
     * @param string|null $activity_type_name activity_type_name
     *
     * @return self
     */
    public function setActivityTypeName($activity_type_name)
    {
        if (is_null($activity_type_name)) {
            array_push($this->openAPINullablesSetToNull, 'activity_type_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('activity_type_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['activity_type_name'] = $activity_type_name;

        return $this;
    }

    /**
     * Gets activity_type_id
     *
     * @return int|null
     */
    public function getActivityTypeId()
    {
        return $this->container['activity_type_id'];
    }

    /**
     * Sets activity_type_id
     *
     * @param int|null $activity_type_id activity_type_id
     *
     * @return self
     */
    public function setActivityTypeId($activity_type_id)
    {
        if (is_null($activity_type_id)) {
            array_push($this->openAPINullablesSetToNull, 'activity_type_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('activity_type_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['activity_type_id'] = $activity_type_id;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return \MagDv\Cargomart\Dto\DisabledFull|null
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param \MagDv\Cargomart\Dto\DisabledFull|null $disabled Информация о блокировке перевозчика
     *
     * @return self
     */
    public function setDisabled($disabled)
    {
        if (is_null($disabled)) {
            throw new \InvalidArgumentException('non-nullable disabled cannot be null');
        }
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets orders_by_month
     *
     * @return int|null
     */
    public function getOrdersByMonth()
    {
        return $this->container['orders_by_month'];
    }

    /**
     * Sets orders_by_month
     *
     * @param int|null $orders_by_month Заказов в месяц
     *
     * @return self
     */
    public function setOrdersByMonth($orders_by_month)
    {
        if (is_null($orders_by_month)) {
            throw new \InvalidArgumentException('non-nullable orders_by_month cannot be null');
        }
        $this->container['orders_by_month'] = $orders_by_month;

        return $this;
    }

    /**
     * Gets is_blocked
     *
     * @return bool|null
     */
    public function getIsBlocked()
    {
        return $this->container['is_blocked'];
    }

    /**
     * Sets is_blocked
     *
     * @param bool|null $is_blocked Заблокирован клиент
     *
     * @return self
     */
    public function setIsBlocked($is_blocked)
    {
        if (is_null($is_blocked)) {
            throw new \InvalidArgumentException('non-nullable is_blocked cannot be null');
        }
        $this->container['is_blocked'] = $is_blocked;

        return $this;
    }

    /**
     * Gets partner_status
     *
     * @return \MagDv\Cargomart\Dto\PartnerStatusEnum|null
     */
    public function getPartnerStatus()
    {
        return $this->container['partner_status'];
    }

    /**
     * Sets partner_status
     *
     * @param \MagDv\Cargomart\Dto\PartnerStatusEnum|null $partner_status Статус взаимодействия с компанией
     *
     * @return self
     */
    public function setPartnerStatus($partner_status)
    {
        if (is_null($partner_status)) {
            throw new \InvalidArgumentException('non-nullable partner_status cannot be null');
        }
        $this->container['partner_status'] = $partner_status;

        return $this;
    }

    /**
     * Gets partners
     *
     * @return \MagDv\Cargomart\Dto\PartnerShortItem[]|null
     */
    public function getPartners()
    {
        return $this->container['partners'];
    }

    /**
     * Sets partners
     *
     * @param \MagDv\Cargomart\Dto\PartnerShortItem[]|null $partners Список партнёров
     *
     * @return self
     */
    public function setPartners($partners)
    {
        if (is_null($partners)) {
            throw new \InvalidArgumentException('non-nullable partners cannot be null');
        }
        $this->container['partners'] = $partners;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return int|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param int|null $client_id Числовой идентификатор клиента
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets activity_type_alias
     *
     * @return string|null
     */
    public function getActivityTypeAlias()
    {
        return $this->container['activity_type_alias'];
    }

    /**
     * Sets activity_type_alias
     *
     * @param string|null $activity_type_alias activity_type_alias
     *
     * @return self
     */
    public function setActivityTypeAlias($activity_type_alias)
    {
        if (is_null($activity_type_alias)) {
            array_push($this->openAPINullablesSetToNull, 'activity_type_alias');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('activity_type_alias', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['activity_type_alias'] = $activity_type_alias;

        return $this;
    }

    /**
     * Gets operating_account
     *
     * @return string|null
     */
    public function getOperatingAccount()
    {
        return $this->container['operating_account'];
    }

    /**
     * Sets operating_account
     *
     * @param string|null $operating_account Расчетный счет
     *
     * @return self
     */
    public function setOperatingAccount($operating_account)
    {
        if (is_null($operating_account)) {
            throw new \InvalidArgumentException('non-nullable operating_account cannot be null');
        }
        $this->container['operating_account'] = $operating_account;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string|null
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string|null $bank_name Название банка
     *
     * @return self
     */
    public function setBankName($bank_name)
    {
        if (is_null($bank_name)) {
            throw new \InvalidArgumentException('non-nullable bank_name cannot be null');
        }
        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets corresponding_account
     *
     * @return string|null
     */
    public function getCorrespondingAccount()
    {
        return $this->container['corresponding_account'];
    }

    /**
     * Sets corresponding_account
     *
     * @param string|null $corresponding_account Корреспондентский счет
     *
     * @return self
     */
    public function setCorrespondingAccount($corresponding_account)
    {
        if (is_null($corresponding_account)) {
            throw new \InvalidArgumentException('non-nullable corresponding_account cannot be null');
        }
        $this->container['corresponding_account'] = $corresponding_account;

        return $this;
    }

    /**
     * Gets bic
     *
     * @return string|null
     */
    public function getBic()
    {
        return $this->container['bic'];
    }

    /**
     * Sets bic
     *
     * @param string|null $bic БИК
     *
     * @return self
     */
    public function setBic($bic)
    {
        if (is_null($bic)) {
            throw new \InvalidArgumentException('non-nullable bic cannot be null');
        }
        $this->container['bic'] = $bic;

        return $this;
    }

    /**
     * Gets count_create_order
     *
     * @return int|null
     * @deprecated
     */
    public function getCountCreateOrder()
    {
        return $this->container['count_create_order'];
    }

    /**
     * Sets count_create_order
     *
     * @param int|null $count_create_order @deprecated Количество созданных заказов (только для грузоотправителя). Вместо данного поля использовать metrics.ordersCreated
     *
     * @return self
     * @deprecated
     */
    public function setCountCreateOrder($count_create_order)
    {
        if (is_null($count_create_order)) {
            throw new \InvalidArgumentException('non-nullable count_create_order cannot be null');
        }
        $this->container['count_create_order'] = $count_create_order;

        return $this;
    }

    /**
     * Gets count_winner_order
     *
     * @return int|null
     * @deprecated
     */
    public function getCountWinnerOrder()
    {
        return $this->container['count_winner_order'];
    }

    /**
     * Sets count_winner_order
     *
     * @param int|null $count_winner_order @deprecated Количество выполненных заказов (только для грузоперевозчика). Вместо данного поля использовать metrics.ordersWon
     *
     * @return self
     * @deprecated
     */
    public function setCountWinnerOrder($count_winner_order)
    {
        if (is_null($count_winner_order)) {
            throw new \InvalidArgumentException('non-nullable count_winner_order cannot be null');
        }
        $this->container['count_winner_order'] = $count_winner_order;

        return $this;
    }

    /**
     * Gets is_cooperating_general_partner
     *
     * @return bool|null
     */
    public function getIsCooperatingGeneralPartner()
    {
        return $this->container['is_cooperating_general_partner'];
    }

    /**
     * Sets is_cooperating_general_partner
     *
     * @param bool|null $is_cooperating_general_partner Есть договор с Генеральным партнёром
     *
     * @return self
     */
    public function setIsCooperatingGeneralPartner($is_cooperating_general_partner)
    {
        if (is_null($is_cooperating_general_partner)) {
            throw new \InvalidArgumentException('non-nullable is_cooperating_general_partner cannot be null');
        }
        $this->container['is_cooperating_general_partner'] = $is_cooperating_general_partner;

        return $this;
    }

    /**
     * Gets is_with_vat
     *
     * @return bool|null
     */
    public function getIsWithVat()
    {
        return $this->container['is_with_vat'];
    }

    /**
     * Sets is_with_vat
     *
     * @param bool|null $is_with_vat Флаг того что компания работает с НДС
     *
     * @return self
     */
    public function setIsWithVat($is_with_vat)
    {
        if (is_null($is_with_vat)) {
            throw new \InvalidArgumentException('non-nullable is_with_vat cannot be null');
        }
        $this->container['is_with_vat'] = $is_with_vat;

        return $this;
    }

    /**
     * Gets is_partnership_allowed
     *
     * @return bool|null
     */
    public function getIsPartnershipAllowed()
    {
        return $this->container['is_partnership_allowed'];
    }

    /**
     * Sets is_partnership_allowed
     *
     * @param bool|null $is_partnership_allowed Компания разрешает другим компаниям присылать себе приглашения в партнёры
     *
     * @return self
     */
    public function setIsPartnershipAllowed($is_partnership_allowed)
    {
        if (is_null($is_partnership_allowed)) {
            throw new \InvalidArgumentException('non-nullable is_partnership_allowed cannot be null');
        }
        $this->container['is_partnership_allowed'] = $is_partnership_allowed;

        return $this;
    }

    /**
     * Gets is_with_branch
     *
     * @return bool|null
     */
    public function getIsWithBranch()
    {
        return $this->container['is_with_branch'];
    }

    /**
     * Sets is_with_branch
     *
     * @param bool|null $is_with_branch У компании есть дочернии компании
     *
     * @return self
     */
    public function setIsWithBranch($is_with_branch)
    {
        if (is_null($is_with_branch)) {
            throw new \InvalidArgumentException('non-nullable is_with_branch cannot be null');
        }
        $this->container['is_with_branch'] = $is_with_branch;

        return $this;
    }

    /**
     * Gets inn
     *
     * @return string|null
     */
    public function getInn()
    {
        return $this->container['inn'];
    }

    /**
     * Sets inn
     *
     * @param string|null $inn ИНН
     *
     * @return self
     */
    public function setInn($inn)
    {
        if (is_null($inn)) {
            throw new \InvalidArgumentException('non-nullable inn cannot be null');
        }
        $this->container['inn'] = $inn;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return string|null
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param string|null $create_date Дата регистрации на Каргомрат
     *
     * @return self
     */
    public function setCreateDate($create_date)
    {
        if (is_null($create_date)) {
            throw new \InvalidArgumentException('non-nullable create_date cannot be null');
        }
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets register_date
     *
     * @return \DateTime|null
     */
    public function getRegisterDate()
    {
        return $this->container['register_date'];
    }

    /**
     * Sets register_date
     *
     * @param \DateTime|null $register_date Дата регистрации организации
     *
     * @return self
     */
    public function setRegisterDate($register_date)
    {
        if (is_null($register_date)) {
            throw new \InvalidArgumentException('non-nullable register_date cannot be null');
        }
        $this->container['register_date'] = $register_date;

        return $this;
    }

    /**
     * Gets car_count
     *
     * @return int|null
     */
    public function getCarCount()
    {
        return $this->container['car_count'];
    }

    /**
     * Sets car_count
     *
     * @param int|null $car_count Количество машин
     *
     * @return self
     */
    public function setCarCount($car_count)
    {
        if (is_null($car_count)) {
            throw new \InvalidArgumentException('non-nullable car_count cannot be null');
        }
        $this->container['car_count'] = $car_count;

        return $this;
    }

    /**
     * Gets metrics
     *
     * @return \MagDv\Cargomart\Dto\CompanyMetrics|null
     */
    public function getMetrics()
    {
        return $this->container['metrics'];
    }

    /**
     * Sets metrics
     *
     * @param \MagDv\Cargomart\Dto\CompanyMetrics|null $metrics Показатели работы
     *
     * @return self
     */
    public function setMetrics($metrics)
    {
        if (is_null($metrics)) {
            throw new \InvalidArgumentException('non-nullable metrics cannot be null');
        }
        $this->container['metrics'] = $metrics;

        return $this;
    }

    /**
     * Gets is_direct_sender
     *
     * @return bool|null
     */
    public function getIsDirectSender()
    {
        return $this->container['is_direct_sender'];
    }

    /**
     * Sets is_direct_sender
     *
     * @param bool|null $is_direct_sender Является прямым отправителем
     *
     * @return self
     */
    public function setIsDirectSender($is_direct_sender)
    {
        if (is_null($is_direct_sender)) {
            throw new \InvalidArgumentException('non-nullable is_direct_sender cannot be null');
        }
        $this->container['is_direct_sender'] = $is_direct_sender;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \MagDv\Cargomart\Dto\CompanyStatusEnum|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \MagDv\Cargomart\Dto\CompanyStatusEnum|null $status Статус клиентской валидации: 0 - на валидации, 1- валидный, 2- ожидает доступа к компании, 3-блок. вал. 4- блокирован 5- удалён
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets contract
     *
     * @return \MagDv\Cargomart\Dto\PartnerContract|null
     * @deprecated
     */
    public function getContract()
    {
        return $this->container['contract'];
    }

    /**
     * Sets contract
     *
     * @param \MagDv\Cargomart\Dto\PartnerContract|null $contract Объект договора
     *
     * @return self
     * @deprecated
     */
    public function setContract($contract)
    {
        if (is_null($contract)) {
            throw new \InvalidArgumentException('non-nullable contract cannot be null');
        }
        $this->container['contract'] = $contract;

        return $this;
    }

    /**
     * Gets partner_contract
     *
     * @return \MagDv\Cargomart\Dto\PartnerContractWithType[]|null
     */
    public function getPartnerContract()
    {
        return $this->container['partner_contract'];
    }

    /**
     * Sets partner_contract
     *
     * @param \MagDv\Cargomart\Dto\PartnerContractWithType[]|null $partner_contract Список договоров с информацией о типе
     *
     * @return self
     */
    public function setPartnerContract($partner_contract)
    {
        if (is_null($partner_contract)) {
            throw new \InvalidArgumentException('non-nullable partner_contract cannot be null');
        }
        $this->container['partner_contract'] = $partner_contract;

        return $this;
    }

    /**
     * Gets is_validated
     *
     * @return bool|null
     */
    public function getIsValidated()
    {
        return $this->container['is_validated'];
    }

    /**
     * Sets is_validated
     *
     * @param bool|null $is_validated Валидирована ли компания
     *
     * @return self
     */
    public function setIsValidated($is_validated)
    {
        if (is_null($is_validated)) {
            throw new \InvalidArgumentException('non-nullable is_validated cannot be null');
        }
        $this->container['is_validated'] = $is_validated;

        return $this;
    }

    /**
     * Gets legal_address
     *
     * @return string|null
     */
    public function getLegalAddress()
    {
        return $this->container['legal_address'];
    }

    /**
     * Sets legal_address
     *
     * @param string|null $legal_address Юридический адрес компании
     *
     * @return self
     */
    public function setLegalAddress($legal_address)
    {
        if (is_null($legal_address)) {
            throw new \InvalidArgumentException('non-nullable legal_address cannot be null');
        }
        $this->container['legal_address'] = $legal_address;

        return $this;
    }

    /**
     * Gets legal_status_id
     *
     * @return \MagDv\Cargomart\Dto\LegalFormEnum|null
     */
    public function getLegalStatusId()
    {
        return $this->container['legal_status_id'];
    }

    /**
     * Sets legal_status_id
     *
     * @param \MagDv\Cargomart\Dto\LegalFormEnum|null $legal_status_id Юридический статус: 1- Физическое лицо, 2- Индивидуальный предприниматель, 3- Юридическое лицо
     *
     * @return self
     */
    public function setLegalStatusId($legal_status_id)
    {
        if (is_null($legal_status_id)) {
            throw new \InvalidArgumentException('non-nullable legal_status_id cannot be null');
        }
        $this->container['legal_status_id'] = $legal_status_id;

        return $this;
    }

    /**
     * Gets legal_name
     *
     * @return string|null
     */
    public function getLegalName()
    {
        return $this->container['legal_name'];
    }

    /**
     * Sets legal_name
     *
     * @param string|null $legal_name legal_name
     *
     * @return self
     */
    public function setLegalName($legal_name)
    {
        if (is_null($legal_name)) {
            array_push($this->openAPINullablesSetToNull, 'legal_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legal_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legal_name'] = $legal_name;

        return $this;
    }

    /**
     * Gets ogrn
     *
     * @return string|null
     */
    public function getOgrn()
    {
        return $this->container['ogrn'];
    }

    /**
     * Sets ogrn
     *
     * @param string|null $ogrn ogrn
     *
     * @return self
     */
    public function setOgrn($ogrn)
    {
        if (is_null($ogrn)) {
            array_push($this->openAPINullablesSetToNull, 'ogrn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ogrn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ogrn'] = $ogrn;

        return $this;
    }

    /**
     * Gets okpo
     *
     * @return string|null
     */
    public function getOkpo()
    {
        return $this->container['okpo'];
    }

    /**
     * Sets okpo
     *
     * @param string|null $okpo okpo
     *
     * @return self
     */
    public function setOkpo($okpo)
    {
        if (is_null($okpo)) {
            array_push($this->openAPINullablesSetToNull, 'okpo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('okpo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['okpo'] = $okpo;

        return $this;
    }

    /**
     * Gets kpp
     *
     * @return string|null
     */
    public function getKpp()
    {
        return $this->container['kpp'];
    }

    /**
     * Sets kpp
     *
     * @param string|null $kpp kpp
     *
     * @return self
     */
    public function setKpp($kpp)
    {
        if (is_null($kpp)) {
            array_push($this->openAPINullablesSetToNull, 'kpp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('kpp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['kpp'] = $kpp;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            array_push($this->openAPINullablesSetToNull, 'url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets has_company_contact_groups
     *
     * @return bool|null
     */
    public function getHasCompanyContactGroups()
    {
        return $this->container['has_company_contact_groups'];
    }

    /**
     * Sets has_company_contact_groups
     *
     * @param bool|null $has_company_contact_groups Наличие контактов компании.
     *
     * @return self
     */
    public function setHasCompanyContactGroups($has_company_contact_groups)
    {
        if (is_null($has_company_contact_groups)) {
            throw new \InvalidArgumentException('non-nullable has_company_contact_groups cannot be null');
        }
        $this->container['has_company_contact_groups'] = $has_company_contact_groups;

        return $this;
    }

    /**
     * Gets access
     *
     * @return \MagDv\Cargomart\Dto\CompanyAccess|null
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param \MagDv\Cargomart\Dto\CompanyAccess|null $access Права доступа
     *
     * @return self
     */
    public function setAccess($access)
    {
        if (is_null($access)) {
            throw new \InvalidArgumentException('non-nullable access cannot be null');
        }
        $this->container['access'] = $access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


