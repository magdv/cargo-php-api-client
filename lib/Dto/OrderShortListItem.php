<?php
/**
 * OrderShortListItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * OrderShortListItem Class Doc Comment
 *
 * @category Class
 * @description Объект заказа
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderShortListItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderShortListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'draft_id' => 'string',
        'serial_id' => 'int',
        'status_id' => '\MagDv\Cargomart\Dto\OrderStatusEnum',
        'ext_status_id' => '\MagDv\Cargomart\Dto\OrderStatusEnum',
        'type' => '\MagDv\Cargomart\Dto\OrderType',
        'consignor_id' => 'string',
        'carrier_id' => 'string',
        'expeditor_id' => 'string',
        'truck_search_time_end' => '\DateTime',
        'refuses' => '\MagDv\Cargomart\Dto\ProposalRefuse[]',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'create_date' => '\DateTime',
        'update_date' => '\DateTime',
        'currency_code' => 'string',
        'is_multi_currency' => 'bool',
        'open_price' => 'string',
        'current_price' => 'string',
        'current_price_with_fee' => 'string',
        'is_no_price' => 'bool',
        'vat_rate' => 'float',
        'is_consignor_vat' => 'bool',
        'proposal_proxy' => '\MagDv\Cargomart\Dto\ProposalProxy',
        'proxy_doc_id' => 'int',
        'carrier_doc_id' => 'int',
        'step_bid' => 'string',
        'bid_count' => 'int',
        'truck_type_id' => 'int',
        'point' => '\MagDv\Cargomart\Dto\RoutePointShort[]',
        'access_type_id' => '\MagDv\Cargomart\Dto\OrderAccessType',
        'cargo_weight' => 'float',
        'cargo_capacity' => 'int',
        'load_weight' => 'float',
        'load_capacity' => 'int',
        'tag' => 'string[]',
        'is_auto_moderate' => 'bool',
        'is_archived' => 'bool',
        'is_round' => 'bool',
        'is_pin' => 'bool',
        'is_view' => 'bool',
        'is_last_bid_my' => 'bool',
        'is_was_my_bid' => 'bool',
        'is_current_user_has_bid' => 'bool',
        'is_iam_winner' => 'bool',
        'is_carrier_refuse' => 'bool',
        'is_consignor_refuse' => 'bool',
        'is_refuse_cancel' => 'bool',
        'protected_bid_reason' => '\MagDv\Cargomart\Dto\ProtectedBidReason[]',
        'protected_bid_reason_comment' => '\MagDv\Cargomart\Dto\ProtectedBidReasonComment[]',
        'disabled_deadline' => 'string',
        'comment_count' => 'int',
        'external_id' => 'string',
        'kind' => '\MagDv\Cargomart\Dto\OrderKind',
        'price_type' => '\MagDv\Cargomart\Dto\OrderPriceType',
        'period_from_date' => '\DateTime',
        'period_to_date' => '\DateTime',
        'general_partner_doc_id' => 'int',
        'is_general_partner' => 'bool',
        'general_partner_id' => 'string',
        'general_partner_contract_id' => 'string',
        'expeditor_carrier_contract' => '\MagDv\Cargomart\Dto\ExpeditorContract',
        'driver_id' => 'int',
        'driver' => '\MagDv\Cargomart\Dto\OrderDriver',
        'truck_ids' => 'int[]',
        'truck' => '\MagDv\Cargomart\Dto\OrderTruck',
        'is_repeated' => 'bool',
        'company_branch_id' => 'int',
        'monitoring_ids' => 'int[]',
        'is_proxy_date_end' => 'bool',
        'patch' => '\MagDv\Cargomart\Dto\OrderPatchLastItem',
        'last_patch' => '\MagDv\Cargomart\Dto\OrderPatchLastItem',
        'truck_driver_patch' => '\MagDv\Cargomart\Dto\OrderPatchLastItem',
        'is_truck_driver_changed' => 'bool',
        'is_doc_changed' => 'bool',
        'progress' => '\MagDv\Cargomart\Dto\ProgressItem[]',
        'distance' => 'int',
        'current_offer' => '\MagDv\Cargomart\Dto\OrderOfferCurrent',
        'current_carrier_ask' => '\MagDv\Cargomart\Dto\CarrierAskCurrent',
        'winning_carrier_ask' => '\MagDv\Cargomart\Dto\CarrierAskCurrent',
        'car_request' => '\MagDv\Cargomart\Dto\OrderOfferCarRequest',
        'payments' => '\MagDv\Cargomart\Dto\OrderPayment[]',
        'paid_invoice_date' => '\DateTime',
        'paid_expeditor_payment_date' => '\DateTime',
        'access' => '\MagDv\Cargomart\Dto\OrderAccess',
        'original_document' => '\MagDv\Cargomart\Dto\OriginalDocument',
        'carrier_package_status' => '\MagDv\Cargomart\Dto\OrderDocumentPackageStatus',
        'price_strategy_type' => '\MagDv\Cargomart\Dto\OrderPriceStrategyType',
        'bidding_type' => '\MagDv\Cargomart\Dto\OrderBiddingType',
        'bidding' => '\MagDv\Cargomart\Dto\OrderDraftExpeditorBidding',
        'carrier_asks_count' => 'int',
        'has_carrier_sign' => 'bool',
        'roadmap_events_count' => 'int',
        'payment_invoice_status' => '\MagDv\Cargomart\Dto\PaymentInvoiceStatus[]',
        'is_international' => 'bool',
        'details' => '\MagDv\Cargomart\Dto\OrderDetails[]',
        'conditions' => 'string[]',
        'loading' => 'int[]',
        'device' => 'string[]',
        'cargo_type' => 'string',
        'contract_type_id' => 'int',
        'temperature' => '\MagDv\Cargomart\Dto\TemperatureRange'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'draft_id' => null,
        'serial_id' => null,
        'status_id' => null,
        'ext_status_id' => null,
        'type' => null,
        'consignor_id' => null,
        'carrier_id' => null,
        'expeditor_id' => null,
        'truck_search_time_end' => 'date-time',
        'refuses' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'create_date' => 'date-time',
        'update_date' => 'date-time',
        'currency_code' => null,
        'is_multi_currency' => null,
        'open_price' => 'cm-price',
        'current_price' => 'cm-price',
        'current_price_with_fee' => 'cm-price',
        'is_no_price' => null,
        'vat_rate' => null,
        'is_consignor_vat' => null,
        'proposal_proxy' => null,
        'proxy_doc_id' => null,
        'carrier_doc_id' => null,
        'step_bid' => null,
        'bid_count' => null,
        'truck_type_id' => null,
        'point' => null,
        'access_type_id' => null,
        'cargo_weight' => null,
        'cargo_capacity' => null,
        'load_weight' => null,
        'load_capacity' => null,
        'tag' => null,
        'is_auto_moderate' => null,
        'is_archived' => null,
        'is_round' => null,
        'is_pin' => null,
        'is_view' => null,
        'is_last_bid_my' => null,
        'is_was_my_bid' => null,
        'is_current_user_has_bid' => null,
        'is_iam_winner' => null,
        'is_carrier_refuse' => null,
        'is_consignor_refuse' => null,
        'is_refuse_cancel' => null,
        'protected_bid_reason' => null,
        'protected_bid_reason_comment' => null,
        'disabled_deadline' => null,
        'comment_count' => null,
        'external_id' => null,
        'kind' => null,
        'price_type' => null,
        'period_from_date' => 'date',
        'period_to_date' => 'date',
        'general_partner_doc_id' => null,
        'is_general_partner' => null,
        'general_partner_id' => null,
        'general_partner_contract_id' => null,
        'expeditor_carrier_contract' => null,
        'driver_id' => null,
        'driver' => null,
        'truck_ids' => null,
        'truck' => null,
        'is_repeated' => null,
        'company_branch_id' => null,
        'monitoring_ids' => null,
        'is_proxy_date_end' => null,
        'patch' => null,
        'last_patch' => null,
        'truck_driver_patch' => null,
        'is_truck_driver_changed' => null,
        'is_doc_changed' => null,
        'progress' => null,
        'distance' => null,
        'current_offer' => null,
        'current_carrier_ask' => null,
        'winning_carrier_ask' => null,
        'car_request' => null,
        'payments' => null,
        'paid_invoice_date' => 'date',
        'paid_expeditor_payment_date' => 'date',
        'access' => null,
        'original_document' => null,
        'carrier_package_status' => null,
        'price_strategy_type' => null,
        'bidding_type' => null,
        'bidding' => null,
        'carrier_asks_count' => null,
        'has_carrier_sign' => null,
        'roadmap_events_count' => null,
        'payment_invoice_status' => null,
        'is_international' => null,
        'details' => null,
        'conditions' => null,
        'loading' => null,
        'device' => null,
        'cargo_type' => null,
        'contract_type_id' => null,
        'temperature' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'draft_id' => false,
        'serial_id' => false,
        'status_id' => false,
        'ext_status_id' => false,
        'type' => false,
        'consignor_id' => false,
        'carrier_id' => false,
        'expeditor_id' => false,
        'truck_search_time_end' => false,
        'refuses' => false,
        'start_date' => false,
        'end_date' => false,
        'create_date' => false,
        'update_date' => false,
        'currency_code' => false,
        'is_multi_currency' => false,
        'open_price' => false,
        'current_price' => false,
        'current_price_with_fee' => false,
        'is_no_price' => false,
        'vat_rate' => false,
        'is_consignor_vat' => false,
        'proposal_proxy' => false,
        'proxy_doc_id' => false,
        'carrier_doc_id' => false,
        'step_bid' => false,
        'bid_count' => false,
        'truck_type_id' => false,
        'point' => false,
        'access_type_id' => false,
        'cargo_weight' => false,
        'cargo_capacity' => false,
        'load_weight' => false,
        'load_capacity' => false,
        'tag' => false,
        'is_auto_moderate' => false,
        'is_archived' => false,
        'is_round' => false,
        'is_pin' => false,
        'is_view' => false,
        'is_last_bid_my' => false,
        'is_was_my_bid' => false,
        'is_current_user_has_bid' => false,
        'is_iam_winner' => false,
        'is_carrier_refuse' => false,
        'is_consignor_refuse' => false,
        'is_refuse_cancel' => false,
        'protected_bid_reason' => false,
        'protected_bid_reason_comment' => false,
        'disabled_deadline' => false,
        'comment_count' => false,
        'external_id' => false,
        'kind' => false,
        'price_type' => false,
        'period_from_date' => false,
        'period_to_date' => false,
        'general_partner_doc_id' => false,
        'is_general_partner' => false,
        'general_partner_id' => false,
        'general_partner_contract_id' => false,
        'expeditor_carrier_contract' => false,
        'driver_id' => false,
        'driver' => false,
        'truck_ids' => false,
        'truck' => false,
        'is_repeated' => false,
        'company_branch_id' => false,
        'monitoring_ids' => false,
        'is_proxy_date_end' => false,
        'patch' => false,
        'last_patch' => false,
        'truck_driver_patch' => false,
        'is_truck_driver_changed' => false,
        'is_doc_changed' => false,
        'progress' => false,
        'distance' => false,
        'current_offer' => false,
        'current_carrier_ask' => false,
        'winning_carrier_ask' => false,
        'car_request' => false,
        'payments' => false,
        'paid_invoice_date' => false,
        'paid_expeditor_payment_date' => false,
        'access' => false,
        'original_document' => false,
        'carrier_package_status' => false,
        'price_strategy_type' => false,
        'bidding_type' => false,
        'bidding' => false,
        'carrier_asks_count' => false,
        'has_carrier_sign' => false,
        'roadmap_events_count' => false,
        'payment_invoice_status' => false,
        'is_international' => false,
        'details' => false,
        'conditions' => false,
        'loading' => false,
        'device' => false,
        'cargo_type' => false,
        'contract_type_id' => false,
        'temperature' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'draft_id' => 'draftId',
        'serial_id' => 'serialId',
        'status_id' => 'statusId',
        'ext_status_id' => 'extStatusId',
        'type' => 'type',
        'consignor_id' => 'consignorId',
        'carrier_id' => 'carrierId',
        'expeditor_id' => 'expeditorId',
        'truck_search_time_end' => 'truckSearchTimeEnd',
        'refuses' => 'refuses',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'create_date' => 'createDate',
        'update_date' => 'updateDate',
        'currency_code' => 'currencyCode',
        'is_multi_currency' => 'isMultiCurrency',
        'open_price' => 'openPrice',
        'current_price' => 'currentPrice',
        'current_price_with_fee' => 'currentPriceWithFee',
        'is_no_price' => 'isNoPrice',
        'vat_rate' => 'vatRate',
        'is_consignor_vat' => 'isConsignorVat',
        'proposal_proxy' => 'proposalProxy',
        'proxy_doc_id' => 'proxyDocId',
        'carrier_doc_id' => 'carrierDocId',
        'step_bid' => 'stepBid',
        'bid_count' => 'bidCount',
        'truck_type_id' => 'truckTypeId',
        'point' => 'point',
        'access_type_id' => 'accessTypeId',
        'cargo_weight' => 'cargoWeight',
        'cargo_capacity' => 'cargoCapacity',
        'load_weight' => 'loadWeight',
        'load_capacity' => 'loadCapacity',
        'tag' => 'tag',
        'is_auto_moderate' => 'isAutoModerate',
        'is_archived' => 'isArchived',
        'is_round' => 'isRound',
        'is_pin' => 'isPin',
        'is_view' => 'isView',
        'is_last_bid_my' => 'isLastBidMy',
        'is_was_my_bid' => 'isWasMyBid',
        'is_current_user_has_bid' => 'isCurrentUserHasBid',
        'is_iam_winner' => 'isIamWinner',
        'is_carrier_refuse' => 'isCarrierRefuse',
        'is_consignor_refuse' => 'isConsignorRefuse',
        'is_refuse_cancel' => 'isRefuseCancel',
        'protected_bid_reason' => 'protectedBidReason',
        'protected_bid_reason_comment' => 'protectedBidReasonComment',
        'disabled_deadline' => 'disabledDeadline',
        'comment_count' => 'commentCount',
        'external_id' => 'externalId',
        'kind' => 'kind',
        'price_type' => 'priceType',
        'period_from_date' => 'periodFromDate',
        'period_to_date' => 'periodToDate',
        'general_partner_doc_id' => 'generalPartnerDocId',
        'is_general_partner' => 'isGeneralPartner',
        'general_partner_id' => 'generalPartnerId',
        'general_partner_contract_id' => 'generalPartnerContractId',
        'expeditor_carrier_contract' => 'expeditorCarrierContract',
        'driver_id' => 'driverId',
        'driver' => 'driver',
        'truck_ids' => 'truckIds',
        'truck' => 'truck',
        'is_repeated' => 'isRepeated',
        'company_branch_id' => 'companyBranchId',
        'monitoring_ids' => 'monitoringIds',
        'is_proxy_date_end' => 'isProxyDateEnd',
        'patch' => 'patch',
        'last_patch' => 'lastPatch',
        'truck_driver_patch' => 'truckDriverPatch',
        'is_truck_driver_changed' => 'isTruckDriverChanged',
        'is_doc_changed' => 'isDocChanged',
        'progress' => 'progress',
        'distance' => 'distance',
        'current_offer' => 'currentOffer',
        'current_carrier_ask' => 'currentCarrierAsk',
        'winning_carrier_ask' => 'winningCarrierAsk',
        'car_request' => 'carRequest',
        'payments' => 'payments',
        'paid_invoice_date' => 'paidInvoiceDate',
        'paid_expeditor_payment_date' => 'paidExpeditorPaymentDate',
        'access' => 'access',
        'original_document' => 'originalDocument',
        'carrier_package_status' => 'carrierPackageStatus',
        'price_strategy_type' => 'priceStrategyType',
        'bidding_type' => 'biddingType',
        'bidding' => 'bidding',
        'carrier_asks_count' => 'carrierAsksCount',
        'has_carrier_sign' => 'hasCarrierSign',
        'roadmap_events_count' => 'roadmapEventsCount',
        'payment_invoice_status' => 'paymentInvoiceStatus',
        'is_international' => 'isInternational',
        'details' => 'details',
        'conditions' => 'conditions',
        'loading' => 'loading',
        'device' => 'device',
        'cargo_type' => 'cargoType',
        'contract_type_id' => 'contractTypeId',
        'temperature' => 'temperature'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'draft_id' => 'setDraftId',
        'serial_id' => 'setSerialId',
        'status_id' => 'setStatusId',
        'ext_status_id' => 'setExtStatusId',
        'type' => 'setType',
        'consignor_id' => 'setConsignorId',
        'carrier_id' => 'setCarrierId',
        'expeditor_id' => 'setExpeditorId',
        'truck_search_time_end' => 'setTruckSearchTimeEnd',
        'refuses' => 'setRefuses',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'create_date' => 'setCreateDate',
        'update_date' => 'setUpdateDate',
        'currency_code' => 'setCurrencyCode',
        'is_multi_currency' => 'setIsMultiCurrency',
        'open_price' => 'setOpenPrice',
        'current_price' => 'setCurrentPrice',
        'current_price_with_fee' => 'setCurrentPriceWithFee',
        'is_no_price' => 'setIsNoPrice',
        'vat_rate' => 'setVatRate',
        'is_consignor_vat' => 'setIsConsignorVat',
        'proposal_proxy' => 'setProposalProxy',
        'proxy_doc_id' => 'setProxyDocId',
        'carrier_doc_id' => 'setCarrierDocId',
        'step_bid' => 'setStepBid',
        'bid_count' => 'setBidCount',
        'truck_type_id' => 'setTruckTypeId',
        'point' => 'setPoint',
        'access_type_id' => 'setAccessTypeId',
        'cargo_weight' => 'setCargoWeight',
        'cargo_capacity' => 'setCargoCapacity',
        'load_weight' => 'setLoadWeight',
        'load_capacity' => 'setLoadCapacity',
        'tag' => 'setTag',
        'is_auto_moderate' => 'setIsAutoModerate',
        'is_archived' => 'setIsArchived',
        'is_round' => 'setIsRound',
        'is_pin' => 'setIsPin',
        'is_view' => 'setIsView',
        'is_last_bid_my' => 'setIsLastBidMy',
        'is_was_my_bid' => 'setIsWasMyBid',
        'is_current_user_has_bid' => 'setIsCurrentUserHasBid',
        'is_iam_winner' => 'setIsIamWinner',
        'is_carrier_refuse' => 'setIsCarrierRefuse',
        'is_consignor_refuse' => 'setIsConsignorRefuse',
        'is_refuse_cancel' => 'setIsRefuseCancel',
        'protected_bid_reason' => 'setProtectedBidReason',
        'protected_bid_reason_comment' => 'setProtectedBidReasonComment',
        'disabled_deadline' => 'setDisabledDeadline',
        'comment_count' => 'setCommentCount',
        'external_id' => 'setExternalId',
        'kind' => 'setKind',
        'price_type' => 'setPriceType',
        'period_from_date' => 'setPeriodFromDate',
        'period_to_date' => 'setPeriodToDate',
        'general_partner_doc_id' => 'setGeneralPartnerDocId',
        'is_general_partner' => 'setIsGeneralPartner',
        'general_partner_id' => 'setGeneralPartnerId',
        'general_partner_contract_id' => 'setGeneralPartnerContractId',
        'expeditor_carrier_contract' => 'setExpeditorCarrierContract',
        'driver_id' => 'setDriverId',
        'driver' => 'setDriver',
        'truck_ids' => 'setTruckIds',
        'truck' => 'setTruck',
        'is_repeated' => 'setIsRepeated',
        'company_branch_id' => 'setCompanyBranchId',
        'monitoring_ids' => 'setMonitoringIds',
        'is_proxy_date_end' => 'setIsProxyDateEnd',
        'patch' => 'setPatch',
        'last_patch' => 'setLastPatch',
        'truck_driver_patch' => 'setTruckDriverPatch',
        'is_truck_driver_changed' => 'setIsTruckDriverChanged',
        'is_doc_changed' => 'setIsDocChanged',
        'progress' => 'setProgress',
        'distance' => 'setDistance',
        'current_offer' => 'setCurrentOffer',
        'current_carrier_ask' => 'setCurrentCarrierAsk',
        'winning_carrier_ask' => 'setWinningCarrierAsk',
        'car_request' => 'setCarRequest',
        'payments' => 'setPayments',
        'paid_invoice_date' => 'setPaidInvoiceDate',
        'paid_expeditor_payment_date' => 'setPaidExpeditorPaymentDate',
        'access' => 'setAccess',
        'original_document' => 'setOriginalDocument',
        'carrier_package_status' => 'setCarrierPackageStatus',
        'price_strategy_type' => 'setPriceStrategyType',
        'bidding_type' => 'setBiddingType',
        'bidding' => 'setBidding',
        'carrier_asks_count' => 'setCarrierAsksCount',
        'has_carrier_sign' => 'setHasCarrierSign',
        'roadmap_events_count' => 'setRoadmapEventsCount',
        'payment_invoice_status' => 'setPaymentInvoiceStatus',
        'is_international' => 'setIsInternational',
        'details' => 'setDetails',
        'conditions' => 'setConditions',
        'loading' => 'setLoading',
        'device' => 'setDevice',
        'cargo_type' => 'setCargoType',
        'contract_type_id' => 'setContractTypeId',
        'temperature' => 'setTemperature'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'draft_id' => 'getDraftId',
        'serial_id' => 'getSerialId',
        'status_id' => 'getStatusId',
        'ext_status_id' => 'getExtStatusId',
        'type' => 'getType',
        'consignor_id' => 'getConsignorId',
        'carrier_id' => 'getCarrierId',
        'expeditor_id' => 'getExpeditorId',
        'truck_search_time_end' => 'getTruckSearchTimeEnd',
        'refuses' => 'getRefuses',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'create_date' => 'getCreateDate',
        'update_date' => 'getUpdateDate',
        'currency_code' => 'getCurrencyCode',
        'is_multi_currency' => 'getIsMultiCurrency',
        'open_price' => 'getOpenPrice',
        'current_price' => 'getCurrentPrice',
        'current_price_with_fee' => 'getCurrentPriceWithFee',
        'is_no_price' => 'getIsNoPrice',
        'vat_rate' => 'getVatRate',
        'is_consignor_vat' => 'getIsConsignorVat',
        'proposal_proxy' => 'getProposalProxy',
        'proxy_doc_id' => 'getProxyDocId',
        'carrier_doc_id' => 'getCarrierDocId',
        'step_bid' => 'getStepBid',
        'bid_count' => 'getBidCount',
        'truck_type_id' => 'getTruckTypeId',
        'point' => 'getPoint',
        'access_type_id' => 'getAccessTypeId',
        'cargo_weight' => 'getCargoWeight',
        'cargo_capacity' => 'getCargoCapacity',
        'load_weight' => 'getLoadWeight',
        'load_capacity' => 'getLoadCapacity',
        'tag' => 'getTag',
        'is_auto_moderate' => 'getIsAutoModerate',
        'is_archived' => 'getIsArchived',
        'is_round' => 'getIsRound',
        'is_pin' => 'getIsPin',
        'is_view' => 'getIsView',
        'is_last_bid_my' => 'getIsLastBidMy',
        'is_was_my_bid' => 'getIsWasMyBid',
        'is_current_user_has_bid' => 'getIsCurrentUserHasBid',
        'is_iam_winner' => 'getIsIamWinner',
        'is_carrier_refuse' => 'getIsCarrierRefuse',
        'is_consignor_refuse' => 'getIsConsignorRefuse',
        'is_refuse_cancel' => 'getIsRefuseCancel',
        'protected_bid_reason' => 'getProtectedBidReason',
        'protected_bid_reason_comment' => 'getProtectedBidReasonComment',
        'disabled_deadline' => 'getDisabledDeadline',
        'comment_count' => 'getCommentCount',
        'external_id' => 'getExternalId',
        'kind' => 'getKind',
        'price_type' => 'getPriceType',
        'period_from_date' => 'getPeriodFromDate',
        'period_to_date' => 'getPeriodToDate',
        'general_partner_doc_id' => 'getGeneralPartnerDocId',
        'is_general_partner' => 'getIsGeneralPartner',
        'general_partner_id' => 'getGeneralPartnerId',
        'general_partner_contract_id' => 'getGeneralPartnerContractId',
        'expeditor_carrier_contract' => 'getExpeditorCarrierContract',
        'driver_id' => 'getDriverId',
        'driver' => 'getDriver',
        'truck_ids' => 'getTruckIds',
        'truck' => 'getTruck',
        'is_repeated' => 'getIsRepeated',
        'company_branch_id' => 'getCompanyBranchId',
        'monitoring_ids' => 'getMonitoringIds',
        'is_proxy_date_end' => 'getIsProxyDateEnd',
        'patch' => 'getPatch',
        'last_patch' => 'getLastPatch',
        'truck_driver_patch' => 'getTruckDriverPatch',
        'is_truck_driver_changed' => 'getIsTruckDriverChanged',
        'is_doc_changed' => 'getIsDocChanged',
        'progress' => 'getProgress',
        'distance' => 'getDistance',
        'current_offer' => 'getCurrentOffer',
        'current_carrier_ask' => 'getCurrentCarrierAsk',
        'winning_carrier_ask' => 'getWinningCarrierAsk',
        'car_request' => 'getCarRequest',
        'payments' => 'getPayments',
        'paid_invoice_date' => 'getPaidInvoiceDate',
        'paid_expeditor_payment_date' => 'getPaidExpeditorPaymentDate',
        'access' => 'getAccess',
        'original_document' => 'getOriginalDocument',
        'carrier_package_status' => 'getCarrierPackageStatus',
        'price_strategy_type' => 'getPriceStrategyType',
        'bidding_type' => 'getBiddingType',
        'bidding' => 'getBidding',
        'carrier_asks_count' => 'getCarrierAsksCount',
        'has_carrier_sign' => 'getHasCarrierSign',
        'roadmap_events_count' => 'getRoadmapEventsCount',
        'payment_invoice_status' => 'getPaymentInvoiceStatus',
        'is_international' => 'getIsInternational',
        'details' => 'getDetails',
        'conditions' => 'getConditions',
        'loading' => 'getLoading',
        'device' => 'getDevice',
        'cargo_type' => 'getCargoType',
        'contract_type_id' => 'getContractTypeId',
        'temperature' => 'getTemperature'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('draft_id', $data ?? [], null);
        $this->setIfExists('serial_id', $data ?? [], null);
        $this->setIfExists('status_id', $data ?? [], null);
        $this->setIfExists('ext_status_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('consignor_id', $data ?? [], null);
        $this->setIfExists('carrier_id', $data ?? [], null);
        $this->setIfExists('expeditor_id', $data ?? [], null);
        $this->setIfExists('truck_search_time_end', $data ?? [], null);
        $this->setIfExists('refuses', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('create_date', $data ?? [], null);
        $this->setIfExists('update_date', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('is_multi_currency', $data ?? [], false);
        $this->setIfExists('open_price', $data ?? [], null);
        $this->setIfExists('current_price', $data ?? [], null);
        $this->setIfExists('current_price_with_fee', $data ?? [], null);
        $this->setIfExists('is_no_price', $data ?? [], false);
        $this->setIfExists('vat_rate', $data ?? [], null);
        $this->setIfExists('is_consignor_vat', $data ?? [], false);
        $this->setIfExists('proposal_proxy', $data ?? [], null);
        $this->setIfExists('proxy_doc_id', $data ?? [], null);
        $this->setIfExists('carrier_doc_id', $data ?? [], null);
        $this->setIfExists('step_bid', $data ?? [], null);
        $this->setIfExists('bid_count', $data ?? [], null);
        $this->setIfExists('truck_type_id', $data ?? [], null);
        $this->setIfExists('point', $data ?? [], null);
        $this->setIfExists('access_type_id', $data ?? [], null);
        $this->setIfExists('cargo_weight', $data ?? [], null);
        $this->setIfExists('cargo_capacity', $data ?? [], null);
        $this->setIfExists('load_weight', $data ?? [], null);
        $this->setIfExists('load_capacity', $data ?? [], null);
        $this->setIfExists('tag', $data ?? [], null);
        $this->setIfExists('is_auto_moderate', $data ?? [], false);
        $this->setIfExists('is_archived', $data ?? [], false);
        $this->setIfExists('is_round', $data ?? [], false);
        $this->setIfExists('is_pin', $data ?? [], false);
        $this->setIfExists('is_view', $data ?? [], false);
        $this->setIfExists('is_last_bid_my', $data ?? [], false);
        $this->setIfExists('is_was_my_bid', $data ?? [], false);
        $this->setIfExists('is_current_user_has_bid', $data ?? [], false);
        $this->setIfExists('is_iam_winner', $data ?? [], false);
        $this->setIfExists('is_carrier_refuse', $data ?? [], false);
        $this->setIfExists('is_consignor_refuse', $data ?? [], false);
        $this->setIfExists('is_refuse_cancel', $data ?? [], false);
        $this->setIfExists('protected_bid_reason', $data ?? [], null);
        $this->setIfExists('protected_bid_reason_comment', $data ?? [], null);
        $this->setIfExists('disabled_deadline', $data ?? [], null);
        $this->setIfExists('comment_count', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('kind', $data ?? [], null);
        $this->setIfExists('price_type', $data ?? [], null);
        $this->setIfExists('period_from_date', $data ?? [], null);
        $this->setIfExists('period_to_date', $data ?? [], null);
        $this->setIfExists('general_partner_doc_id', $data ?? [], null);
        $this->setIfExists('is_general_partner', $data ?? [], false);
        $this->setIfExists('general_partner_id', $data ?? [], null);
        $this->setIfExists('general_partner_contract_id', $data ?? [], null);
        $this->setIfExists('expeditor_carrier_contract', $data ?? [], null);
        $this->setIfExists('driver_id', $data ?? [], null);
        $this->setIfExists('driver', $data ?? [], null);
        $this->setIfExists('truck_ids', $data ?? [], null);
        $this->setIfExists('truck', $data ?? [], null);
        $this->setIfExists('is_repeated', $data ?? [], false);
        $this->setIfExists('company_branch_id', $data ?? [], null);
        $this->setIfExists('monitoring_ids', $data ?? [], null);
        $this->setIfExists('is_proxy_date_end', $data ?? [], false);
        $this->setIfExists('patch', $data ?? [], null);
        $this->setIfExists('last_patch', $data ?? [], null);
        $this->setIfExists('truck_driver_patch', $data ?? [], null);
        $this->setIfExists('is_truck_driver_changed', $data ?? [], false);
        $this->setIfExists('is_doc_changed', $data ?? [], false);
        $this->setIfExists('progress', $data ?? [], null);
        $this->setIfExists('distance', $data ?? [], null);
        $this->setIfExists('current_offer', $data ?? [], null);
        $this->setIfExists('current_carrier_ask', $data ?? [], null);
        $this->setIfExists('winning_carrier_ask', $data ?? [], null);
        $this->setIfExists('car_request', $data ?? [], null);
        $this->setIfExists('payments', $data ?? [], null);
        $this->setIfExists('paid_invoice_date', $data ?? [], null);
        $this->setIfExists('paid_expeditor_payment_date', $data ?? [], null);
        $this->setIfExists('access', $data ?? [], null);
        $this->setIfExists('original_document', $data ?? [], null);
        $this->setIfExists('carrier_package_status', $data ?? [], null);
        $this->setIfExists('price_strategy_type', $data ?? [], null);
        $this->setIfExists('bidding_type', $data ?? [], null);
        $this->setIfExists('bidding', $data ?? [], null);
        $this->setIfExists('carrier_asks_count', $data ?? [], null);
        $this->setIfExists('has_carrier_sign', $data ?? [], false);
        $this->setIfExists('roadmap_events_count', $data ?? [], null);
        $this->setIfExists('payment_invoice_status', $data ?? [], null);
        $this->setIfExists('is_international', $data ?? [], false);
        $this->setIfExists('details', $data ?? [], null);
        $this->setIfExists('conditions', $data ?? [], null);
        $this->setIfExists('loading', $data ?? [], null);
        $this->setIfExists('device', $data ?? [], null);
        $this->setIfExists('cargo_type', $data ?? [], null);
        $this->setIfExists('contract_type_id', $data ?? [], null);
        $this->setIfExists('temperature', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['status_id'] === null) {
            $invalidProperties[] = "'status_id' can't be null";
        }
        if ($this->container['ext_status_id'] === null) {
            $invalidProperties[] = "'ext_status_id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['create_date'] === null) {
            $invalidProperties[] = "'create_date' can't be null";
        }
        if (!is_null($this->container['open_price']) && !preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", $this->container['open_price'])) {
            $invalidProperties[] = "invalid value for 'open_price', must be conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.";
        }

        if (!is_null($this->container['current_price']) && !preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", $this->container['current_price'])) {
            $invalidProperties[] = "invalid value for 'current_price', must be conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.";
        }

        if (!is_null($this->container['current_price_with_fee']) && !preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", $this->container['current_price_with_fee'])) {
            $invalidProperties[] = "invalid value for 'current_price_with_fee', must be conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.";
        }

        if ($this->container['kind'] === null) {
            $invalidProperties[] = "'kind' can't be null";
        }
        if ($this->container['price_type'] === null) {
            $invalidProperties[] = "'price_type' can't be null";
        }
        if ($this->container['access'] === null) {
            $invalidProperties[] = "'access' can't be null";
        }
        if (!is_null($this->container['carrier_asks_count']) && ($this->container['carrier_asks_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'carrier_asks_count', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['roadmap_events_count']) && ($this->container['roadmap_events_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'roadmap_events_count', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Идентификатор заказа
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets draft_id
     *
     * @return string|null
     */
    public function getDraftId()
    {
        return $this->container['draft_id'];
    }

    /**
     * Sets draft_id
     *
     * @param string|null $draft_id Идентификатор черновика
     *
     * @return self
     */
    public function setDraftId($draft_id)
    {
        if (is_null($draft_id)) {
            throw new \InvalidArgumentException('non-nullable draft_id cannot be null');
        }
        $this->container['draft_id'] = $draft_id;

        return $this;
    }

    /**
     * Gets serial_id
     *
     * @return int|null
     */
    public function getSerialId()
    {
        return $this->container['serial_id'];
    }

    /**
     * Sets serial_id
     *
     * @param int|null $serial_id Порядковый номер заказа
     *
     * @return self
     */
    public function setSerialId($serial_id)
    {
        if (is_null($serial_id)) {
            throw new \InvalidArgumentException('non-nullable serial_id cannot be null');
        }
        $this->container['serial_id'] = $serial_id;

        return $this;
    }

    /**
     * Gets status_id
     *
     * @return \MagDv\Cargomart\Dto\OrderStatusEnum
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param \MagDv\Cargomart\Dto\OrderStatusEnum $status_id Статуса заказа
     *
     * @return self
     */
    public function setStatusId($status_id)
    {
        if (is_null($status_id)) {
            throw new \InvalidArgumentException('non-nullable status_id cannot be null');
        }
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets ext_status_id
     *
     * @return \MagDv\Cargomart\Dto\OrderStatusEnum
     */
    public function getExtStatusId()
    {
        return $this->container['ext_status_id'];
    }

    /**
     * Sets ext_status_id
     *
     * @param \MagDv\Cargomart\Dto\OrderStatusEnum $ext_status_id Расширенный статус заказа
     *
     * @return self
     */
    public function setExtStatusId($ext_status_id)
    {
        if (is_null($ext_status_id)) {
            throw new \InvalidArgumentException('non-nullable ext_status_id cannot be null');
        }
        $this->container['ext_status_id'] = $ext_status_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \MagDv\Cargomart\Dto\OrderType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \MagDv\Cargomart\Dto\OrderType $type Тип заказа
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets consignor_id
     *
     * @return string|null
     */
    public function getConsignorId()
    {
        return $this->container['consignor_id'];
    }

    /**
     * Sets consignor_id
     *
     * @param string|null $consignor_id Хэш отправителя
     *
     * @return self
     */
    public function setConsignorId($consignor_id)
    {
        if (is_null($consignor_id)) {
            throw new \InvalidArgumentException('non-nullable consignor_id cannot be null');
        }
        $this->container['consignor_id'] = $consignor_id;

        return $this;
    }

    /**
     * Gets carrier_id
     *
     * @return string|null
     */
    public function getCarrierId()
    {
        return $this->container['carrier_id'];
    }

    /**
     * Sets carrier_id
     *
     * @param string|null $carrier_id Хэш перевозчика-победителя
     *
     * @return self
     */
    public function setCarrierId($carrier_id)
    {
        if (is_null($carrier_id)) {
            throw new \InvalidArgumentException('non-nullable carrier_id cannot be null');
        }
        $this->container['carrier_id'] = $carrier_id;

        return $this;
    }

    /**
     * Gets expeditor_id
     *
     * @return string|null
     */
    public function getExpeditorId()
    {
        return $this->container['expeditor_id'];
    }

    /**
     * Sets expeditor_id
     *
     * @param string|null $expeditor_id Хэш экспедитора
     *
     * @return self
     */
    public function setExpeditorId($expeditor_id)
    {
        if (is_null($expeditor_id)) {
            throw new \InvalidArgumentException('non-nullable expeditor_id cannot be null');
        }
        $this->container['expeditor_id'] = $expeditor_id;

        return $this;
    }

    /**
     * Gets truck_search_time_end
     *
     * @return \DateTime|null
     */
    public function getTruckSearchTimeEnd()
    {
        return $this->container['truck_search_time_end'];
    }

    /**
     * Sets truck_search_time_end
     *
     * @param \DateTime|null $truck_search_time_end Крайняя дата назначения машины
     *
     * @return self
     */
    public function setTruckSearchTimeEnd($truck_search_time_end)
    {
        if (is_null($truck_search_time_end)) {
            throw new \InvalidArgumentException('non-nullable truck_search_time_end cannot be null');
        }
        $this->container['truck_search_time_end'] = $truck_search_time_end;

        return $this;
    }

    /**
     * Gets refuses
     *
     * @return \MagDv\Cargomart\Dto\ProposalRefuse[]|null
     */
    public function getRefuses()
    {
        return $this->container['refuses'];
    }

    /**
     * Sets refuses
     *
     * @param \MagDv\Cargomart\Dto\ProposalRefuse[]|null $refuses Отказы от заказа Экспедитора
     *
     * @return self
     */
    public function setRefuses($refuses)
    {
        if (is_null($refuses)) {
            throw new \InvalidArgumentException('non-nullable refuses cannot be null');
        }
        $this->container['refuses'] = $refuses;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date Дата начала торгов
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date Дата окончания торгов
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date Дата создания торгов
     *
     * @return self
     */
    public function setCreateDate($create_date)
    {
        if (is_null($create_date)) {
            throw new \InvalidArgumentException('non-nullable create_date cannot be null');
        }
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime|null
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime|null $update_date Дата обновления торгов
     *
     * @return self
     */
    public function setUpdateDate($update_date)
    {
        if (is_null($update_date)) {
            throw new \InvalidArgumentException('non-nullable update_date cannot be null');
        }
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code Код валюты заказа
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets is_multi_currency
     *
     * @return bool|null
     */
    public function getIsMultiCurrency()
    {
        return $this->container['is_multi_currency'];
    }

    /**
     * Sets is_multi_currency
     *
     * @param bool|null $is_multi_currency Флаг мультивалютности
     *
     * @return self
     */
    public function setIsMultiCurrency($is_multi_currency)
    {
        if (is_null($is_multi_currency)) {
            throw new \InvalidArgumentException('non-nullable is_multi_currency cannot be null');
        }
        $this->container['is_multi_currency'] = $is_multi_currency;

        return $this;
    }

    /**
     * Gets open_price
     *
     * @return string|null
     */
    public function getOpenPrice()
    {
        return $this->container['open_price'];
    }

    /**
     * Sets open_price
     *
     * @param string|null $open_price Начальная цена заказа
     *
     * @return self
     */
    public function setOpenPrice($open_price)
    {
        if (is_null($open_price)) {
            throw new \InvalidArgumentException('non-nullable open_price cannot be null');
        }

        if ((!preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", ObjectSerializer::toString($open_price)))) {
            throw new \InvalidArgumentException("invalid value for \$open_price when calling OrderShortListItem., must conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.");
        }

        $this->container['open_price'] = $open_price;

        return $this;
    }

    /**
     * Gets current_price
     *
     * @return string|null
     */
    public function getCurrentPrice()
    {
        return $this->container['current_price'];
    }

    /**
     * Sets current_price
     *
     * @param string|null $current_price Текущая цена заказа
     *
     * @return self
     */
    public function setCurrentPrice($current_price)
    {
        if (is_null($current_price)) {
            throw new \InvalidArgumentException('non-nullable current_price cannot be null');
        }

        if ((!preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", ObjectSerializer::toString($current_price)))) {
            throw new \InvalidArgumentException("invalid value for \$current_price when calling OrderShortListItem., must conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.");
        }

        $this->container['current_price'] = $current_price;

        return $this;
    }

    /**
     * Gets current_price_with_fee
     *
     * @return string|null
     */
    public function getCurrentPriceWithFee()
    {
        return $this->container['current_price_with_fee'];
    }

    /**
     * Sets current_price_with_fee
     *
     * @param string|null $current_price_with_fee Текущая цена заказа с комиссией
     *
     * @return self
     */
    public function setCurrentPriceWithFee($current_price_with_fee)
    {
        if (is_null($current_price_with_fee)) {
            throw new \InvalidArgumentException('non-nullable current_price_with_fee cannot be null');
        }

        if ((!preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", ObjectSerializer::toString($current_price_with_fee)))) {
            throw new \InvalidArgumentException("invalid value for \$current_price_with_fee when calling OrderShortListItem., must conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.");
        }

        $this->container['current_price_with_fee'] = $current_price_with_fee;

        return $this;
    }

    /**
     * Gets is_no_price
     *
     * @return bool|null
     * @deprecated
     */
    public function getIsNoPrice()
    {
        return $this->container['is_no_price'];
    }

    /**
     * Sets is_no_price
     *
     * @param bool|null $is_no_price @deprecated Флаг заказ без цены
     *
     * @return self
     * @deprecated
     */
    public function setIsNoPrice($is_no_price)
    {
        if (is_null($is_no_price)) {
            throw new \InvalidArgumentException('non-nullable is_no_price cannot be null');
        }
        $this->container['is_no_price'] = $is_no_price;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return float|null
     */
    public function getVatRate()
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param float|null $vat_rate Ставка ндс
     *
     * @return self
     */
    public function setVatRate($vat_rate)
    {
        if (is_null($vat_rate)) {
            throw new \InvalidArgumentException('non-nullable vat_rate cannot be null');
        }
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }

    /**
     * Gets is_consignor_vat
     *
     * @return bool|null
     */
    public function getIsConsignorVat()
    {
        return $this->container['is_consignor_vat'];
    }

    /**
     * Sets is_consignor_vat
     *
     * @param bool|null $is_consignor_vat Отправитель работает с НДС
     *
     * @return self
     */
    public function setIsConsignorVat($is_consignor_vat)
    {
        if (is_null($is_consignor_vat)) {
            throw new \InvalidArgumentException('non-nullable is_consignor_vat cannot be null');
        }
        $this->container['is_consignor_vat'] = $is_consignor_vat;

        return $this;
    }

    /**
     * Gets proposal_proxy
     *
     * @return \MagDv\Cargomart\Dto\ProposalProxy|null
     */
    public function getProposalProxy()
    {
        return $this->container['proposal_proxy'];
    }

    /**
     * Sets proposal_proxy
     *
     * @param \MagDv\Cargomart\Dto\ProposalProxy|null $proposal_proxy proposal_proxy
     *
     * @return self
     */
    public function setProposalProxy($proposal_proxy)
    {
        if (is_null($proposal_proxy)) {
            throw new \InvalidArgumentException('non-nullable proposal_proxy cannot be null');
        }
        $this->container['proposal_proxy'] = $proposal_proxy;

        return $this;
    }

    /**
     * Gets proxy_doc_id
     *
     * @return int|null
     * @deprecated
     */
    public function getProxyDocId()
    {
        return $this->container['proxy_doc_id'];
    }

    /**
     * Sets proxy_doc_id
     *
     * @param int|null $proxy_doc_id @deprecated Идентификатор документа доверенности
     *
     * @return self
     * @deprecated
     */
    public function setProxyDocId($proxy_doc_id)
    {
        if (is_null($proxy_doc_id)) {
            throw new \InvalidArgumentException('non-nullable proxy_doc_id cannot be null');
        }
        $this->container['proxy_doc_id'] = $proxy_doc_id;

        return $this;
    }

    /**
     * Gets carrier_doc_id
     *
     * @return int|null
     */
    public function getCarrierDocId()
    {
        return $this->container['carrier_doc_id'];
    }

    /**
     * Sets carrier_doc_id
     *
     * @param int|null $carrier_doc_id Идентификатор документа доверенности
     *
     * @return self
     */
    public function setCarrierDocId($carrier_doc_id)
    {
        if (is_null($carrier_doc_id)) {
            throw new \InvalidArgumentException('non-nullable carrier_doc_id cannot be null');
        }
        $this->container['carrier_doc_id'] = $carrier_doc_id;

        return $this;
    }

    /**
     * Gets step_bid
     *
     * @return string|null
     */
    public function getStepBid()
    {
        return $this->container['step_bid'];
    }

    /**
     * Sets step_bid
     *
     * @param string|null $step_bid Шаг понижения
     *
     * @return self
     */
    public function setStepBid($step_bid)
    {
        if (is_null($step_bid)) {
            throw new \InvalidArgumentException('non-nullable step_bid cannot be null');
        }
        $this->container['step_bid'] = $step_bid;

        return $this;
    }

    /**
     * Gets bid_count
     *
     * @return int|null
     */
    public function getBidCount()
    {
        return $this->container['bid_count'];
    }

    /**
     * Sets bid_count
     *
     * @param int|null $bid_count Количество ставок на заказ
     *
     * @return self
     */
    public function setBidCount($bid_count)
    {
        if (is_null($bid_count)) {
            throw new \InvalidArgumentException('non-nullable bid_count cannot be null');
        }
        $this->container['bid_count'] = $bid_count;

        return $this;
    }

    /**
     * Gets truck_type_id
     *
     * @return int|null
     */
    public function getTruckTypeId()
    {
        return $this->container['truck_type_id'];
    }

    /**
     * Sets truck_type_id
     *
     * @param int|null $truck_type_id Идентификатор типа кузова
     *
     * @return self
     */
    public function setTruckTypeId($truck_type_id)
    {
        if (is_null($truck_type_id)) {
            throw new \InvalidArgumentException('non-nullable truck_type_id cannot be null');
        }
        $this->container['truck_type_id'] = $truck_type_id;

        return $this;
    }

    /**
     * Gets point
     *
     * @return \MagDv\Cargomart\Dto\RoutePointShort[]|null
     */
    public function getPoint()
    {
        return $this->container['point'];
    }

    /**
     * Sets point
     *
     * @param \MagDv\Cargomart\Dto\RoutePointShort[]|null $point Массив маршрутных точек заказа.
     *
     * @return self
     */
    public function setPoint($point)
    {
        if (is_null($point)) {
            throw new \InvalidArgumentException('non-nullable point cannot be null');
        }
        $this->container['point'] = $point;

        return $this;
    }

    /**
     * Gets access_type_id
     *
     * @return \MagDv\Cargomart\Dto\OrderAccessType|null
     */
    public function getAccessTypeId()
    {
        return $this->container['access_type_id'];
    }

    /**
     * Sets access_type_id
     *
     * @param \MagDv\Cargomart\Dto\OrderAccessType|null $access_type_id access_type_id
     *
     * @return self
     */
    public function setAccessTypeId($access_type_id)
    {
        if (is_null($access_type_id)) {
            throw new \InvalidArgumentException('non-nullable access_type_id cannot be null');
        }
        $this->container['access_type_id'] = $access_type_id;

        return $this;
    }

    /**
     * Gets cargo_weight
     *
     * @return float|null
     */
    public function getCargoWeight()
    {
        return $this->container['cargo_weight'];
    }

    /**
     * Sets cargo_weight
     *
     * @param float|null $cargo_weight Тоннаж авто из условий заказа(в тоннах)
     *
     * @return self
     */
    public function setCargoWeight($cargo_weight)
    {
        if (is_null($cargo_weight)) {
            throw new \InvalidArgumentException('non-nullable cargo_weight cannot be null');
        }
        $this->container['cargo_weight'] = $cargo_weight;

        return $this;
    }

    /**
     * Gets cargo_capacity
     *
     * @return int|null
     */
    public function getCargoCapacity()
    {
        return $this->container['cargo_capacity'];
    }

    /**
     * Sets cargo_capacity
     *
     * @param int|null $cargo_capacity Кубатура авто из условий заказа(в м3)
     *
     * @return self
     */
    public function setCargoCapacity($cargo_capacity)
    {
        if (is_null($cargo_capacity)) {
            throw new \InvalidArgumentException('non-nullable cargo_capacity cannot be null');
        }
        $this->container['cargo_capacity'] = $cargo_capacity;

        return $this;
    }

    /**
     * Gets load_weight
     *
     * @return float|null
     */
    public function getLoadWeight()
    {
        return $this->container['load_weight'];
    }

    /**
     * Sets load_weight
     *
     * @param float|null $load_weight Вес груза(в тоннах)
     *
     * @return self
     */
    public function setLoadWeight($load_weight)
    {
        if (is_null($load_weight)) {
            throw new \InvalidArgumentException('non-nullable load_weight cannot be null');
        }
        $this->container['load_weight'] = $load_weight;

        return $this;
    }

    /**
     * Gets load_capacity
     *
     * @return int|null
     */
    public function getLoadCapacity()
    {
        return $this->container['load_capacity'];
    }

    /**
     * Sets load_capacity
     *
     * @param int|null $load_capacity Объём груза(в м3)
     *
     * @return self
     */
    public function setLoadCapacity($load_capacity)
    {
        if (is_null($load_capacity)) {
            throw new \InvalidArgumentException('non-nullable load_capacity cannot be null');
        }
        $this->container['load_capacity'] = $load_capacity;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string[]|null
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string[]|null $tag Теги заказа
     *
     * @return self
     */
    public function setTag($tag)
    {
        if (is_null($tag)) {
            throw new \InvalidArgumentException('non-nullable tag cannot be null');
        }
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets is_auto_moderate
     *
     * @return bool|null
     */
    public function getIsAutoModerate()
    {
        return $this->container['is_auto_moderate'];
    }

    /**
     * Sets is_auto_moderate
     *
     * @param bool|null $is_auto_moderate Заказ прошел автомодерацию
     *
     * @return self
     */
    public function setIsAutoModerate($is_auto_moderate)
    {
        if (is_null($is_auto_moderate)) {
            throw new \InvalidArgumentException('non-nullable is_auto_moderate cannot be null');
        }
        $this->container['is_auto_moderate'] = $is_auto_moderate;

        return $this;
    }

    /**
     * Gets is_archived
     *
     * @return bool|null
     */
    public function getIsArchived()
    {
        return $this->container['is_archived'];
    }

    /**
     * Sets is_archived
     *
     * @param bool|null $is_archived Заказ в архиве
     *
     * @return self
     */
    public function setIsArchived($is_archived)
    {
        if (is_null($is_archived)) {
            throw new \InvalidArgumentException('non-nullable is_archived cannot be null');
        }
        $this->container['is_archived'] = $is_archived;

        return $this;
    }

    /**
     * Gets is_round
     *
     * @return bool|null
     */
    public function getIsRound()
    {
        return $this->container['is_round'];
    }

    /**
     * Sets is_round
     *
     * @param bool|null $is_round Является кругорейсом
     *
     * @return self
     */
    public function setIsRound($is_round)
    {
        if (is_null($is_round)) {
            throw new \InvalidArgumentException('non-nullable is_round cannot be null');
        }
        $this->container['is_round'] = $is_round;

        return $this;
    }

    /**
     * Gets is_pin
     *
     * @return bool|null
     */
    public function getIsPin()
    {
        return $this->container['is_pin'];
    }

    /**
     * Sets is_pin
     *
     * @param bool|null $is_pin Заказ закреплен
     *
     * @return self
     */
    public function setIsPin($is_pin)
    {
        if (is_null($is_pin)) {
            throw new \InvalidArgumentException('non-nullable is_pin cannot be null');
        }
        $this->container['is_pin'] = $is_pin;

        return $this;
    }

    /**
     * Gets is_view
     *
     * @return bool|null
     */
    public function getIsView()
    {
        return $this->container['is_view'];
    }

    /**
     * Sets is_view
     *
     * @param bool|null $is_view Был ли заказ просмотрен пользователем
     *
     * @return self
     */
    public function setIsView($is_view)
    {
        if (is_null($is_view)) {
            throw new \InvalidArgumentException('non-nullable is_view cannot be null');
        }
        $this->container['is_view'] = $is_view;

        return $this;
    }

    /**
     * Gets is_last_bid_my
     *
     * @return bool|null
     */
    public function getIsLastBidMy()
    {
        return $this->container['is_last_bid_my'];
    }

    /**
     * Sets is_last_bid_my
     *
     * @param bool|null $is_last_bid_my Последния ставка моей компании
     *
     * @return self
     */
    public function setIsLastBidMy($is_last_bid_my)
    {
        if (is_null($is_last_bid_my)) {
            throw new \InvalidArgumentException('non-nullable is_last_bid_my cannot be null');
        }
        $this->container['is_last_bid_my'] = $is_last_bid_my;

        return $this;
    }

    /**
     * Gets is_was_my_bid
     *
     * @return bool|null
     */
    public function getIsWasMyBid()
    {
        return $this->container['is_was_my_bid'];
    }

    /**
     * Sets is_was_my_bid
     *
     * @param bool|null $is_was_my_bid Я делал ставку
     *
     * @return self
     */
    public function setIsWasMyBid($is_was_my_bid)
    {
        if (is_null($is_was_my_bid)) {
            throw new \InvalidArgumentException('non-nullable is_was_my_bid cannot be null');
        }
        $this->container['is_was_my_bid'] = $is_was_my_bid;

        return $this;
    }

    /**
     * Gets is_current_user_has_bid
     *
     * @return bool|null
     */
    public function getIsCurrentUserHasBid()
    {
        return $this->container['is_current_user_has_bid'];
    }

    /**
     * Sets is_current_user_has_bid
     *
     * @param bool|null $is_current_user_has_bid Текущий пользователь делал ставку
     *
     * @return self
     */
    public function setIsCurrentUserHasBid($is_current_user_has_bid)
    {
        if (is_null($is_current_user_has_bid)) {
            throw new \InvalidArgumentException('non-nullable is_current_user_has_bid cannot be null');
        }
        $this->container['is_current_user_has_bid'] = $is_current_user_has_bid;

        return $this;
    }

    /**
     * Gets is_iam_winner
     *
     * @return bool|null
     */
    public function getIsIamWinner()
    {
        return $this->container['is_iam_winner'];
    }

    /**
     * Sets is_iam_winner
     *
     * @param bool|null $is_iam_winner Я победитель
     *
     * @return self
     */
    public function setIsIamWinner($is_iam_winner)
    {
        if (is_null($is_iam_winner)) {
            throw new \InvalidArgumentException('non-nullable is_iam_winner cannot be null');
        }
        $this->container['is_iam_winner'] = $is_iam_winner;

        return $this;
    }

    /**
     * Gets is_carrier_refuse
     *
     * @return bool|null
     */
    public function getIsCarrierRefuse()
    {
        return $this->container['is_carrier_refuse'];
    }

    /**
     * Sets is_carrier_refuse
     *
     * @param bool|null $is_carrier_refuse Отправитель сообщил об отказе перевозчика
     *
     * @return self
     */
    public function setIsCarrierRefuse($is_carrier_refuse)
    {
        if (is_null($is_carrier_refuse)) {
            throw new \InvalidArgumentException('non-nullable is_carrier_refuse cannot be null');
        }
        $this->container['is_carrier_refuse'] = $is_carrier_refuse;

        return $this;
    }

    /**
     * Gets is_consignor_refuse
     *
     * @return bool|null
     */
    public function getIsConsignorRefuse()
    {
        return $this->container['is_consignor_refuse'];
    }

    /**
     * Sets is_consignor_refuse
     *
     * @param bool|null $is_consignor_refuse Перевозчик сообщил об отказе отправителя
     *
     * @return self
     */
    public function setIsConsignorRefuse($is_consignor_refuse)
    {
        if (is_null($is_consignor_refuse)) {
            throw new \InvalidArgumentException('non-nullable is_consignor_refuse cannot be null');
        }
        $this->container['is_consignor_refuse'] = $is_consignor_refuse;

        return $this;
    }

    /**
     * Gets is_refuse_cancel
     *
     * @return bool|null
     */
    public function getIsRefuseCancel()
    {
        return $this->container['is_refuse_cancel'];
    }

    /**
     * Sets is_refuse_cancel
     *
     * @param bool|null $is_refuse_cancel Был возврат заказа после отказа
     *
     * @return self
     */
    public function setIsRefuseCancel($is_refuse_cancel)
    {
        if (is_null($is_refuse_cancel)) {
            throw new \InvalidArgumentException('non-nullable is_refuse_cancel cannot be null');
        }
        $this->container['is_refuse_cancel'] = $is_refuse_cancel;

        return $this;
    }

    /**
     * Gets protected_bid_reason
     *
     * @return \MagDv\Cargomart\Dto\ProtectedBidReason[]|null
     */
    public function getProtectedBidReason()
    {
        return $this->container['protected_bid_reason'];
    }

    /**
     * Sets protected_bid_reason
     *
     * @param \MagDv\Cargomart\Dto\ProtectedBidReason[]|null $protected_bid_reason Массив причин, по которым нельзя поставить ставку
     *
     * @return self
     */
    public function setProtectedBidReason($protected_bid_reason)
    {
        if (is_null($protected_bid_reason)) {
            throw new \InvalidArgumentException('non-nullable protected_bid_reason cannot be null');
        }
        $this->container['protected_bid_reason'] = $protected_bid_reason;

        return $this;
    }

    /**
     * Gets protected_bid_reason_comment
     *
     * @return \MagDv\Cargomart\Dto\ProtectedBidReasonComment[]|null
     */
    public function getProtectedBidReasonComment()
    {
        return $this->container['protected_bid_reason_comment'];
    }

    /**
     * Sets protected_bid_reason_comment
     *
     * @param \MagDv\Cargomart\Dto\ProtectedBidReasonComment[]|null $protected_bid_reason_comment Массив дополнительных комментариев, к причинам по которым нельзя поставить ставку
     *
     * @return self
     */
    public function setProtectedBidReasonComment($protected_bid_reason_comment)
    {
        if (is_null($protected_bid_reason_comment)) {
            throw new \InvalidArgumentException('non-nullable protected_bid_reason_comment cannot be null');
        }
        $this->container['protected_bid_reason_comment'] = $protected_bid_reason_comment;

        return $this;
    }

    /**
     * Gets disabled_deadline
     *
     * @return string|null
     */
    public function getDisabledDeadline()
    {
        return $this->container['disabled_deadline'];
    }

    /**
     * Sets disabled_deadline
     *
     * @param string|null $disabled_deadline Дата, до которой я, как перевозчик, занесен в чёрный список отправителя. Может быть не задана.
     *
     * @return self
     */
    public function setDisabledDeadline($disabled_deadline)
    {
        if (is_null($disabled_deadline)) {
            throw new \InvalidArgumentException('non-nullable disabled_deadline cannot be null');
        }
        $this->container['disabled_deadline'] = $disabled_deadline;

        return $this;
    }

    /**
     * Gets comment_count
     *
     * @return int|null
     */
    public function getCommentCount()
    {
        return $this->container['comment_count'];
    }

    /**
     * Sets comment_count
     *
     * @param int|null $comment_count Количество комментариев заказа
     *
     * @return self
     */
    public function setCommentCount($comment_count)
    {
        if (is_null($comment_count)) {
            throw new \InvalidArgumentException('non-nullable comment_count cannot be null');
        }
        $this->container['comment_count'] = $comment_count;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id Внешний идентификатор
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return \MagDv\Cargomart\Dto\OrderKind
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param \MagDv\Cargomart\Dto\OrderKind $kind Класс заказа
     *
     * @return self
     */
    public function setKind($kind)
    {
        if (is_null($kind)) {
            throw new \InvalidArgumentException('non-nullable kind cannot be null');
        }
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets price_type
     *
     * @return \MagDv\Cargomart\Dto\OrderPriceType
     */
    public function getPriceType()
    {
        return $this->container['price_type'];
    }

    /**
     * Sets price_type
     *
     * @param \MagDv\Cargomart\Dto\OrderPriceType $price_type Тип цены
     *
     * @return self
     */
    public function setPriceType($price_type)
    {
        if (is_null($price_type)) {
            throw new \InvalidArgumentException('non-nullable price_type cannot be null');
        }
        $this->container['price_type'] = $price_type;

        return $this;
    }

    /**
     * Gets period_from_date
     *
     * @return \DateTime|null
     */
    public function getPeriodFromDate()
    {
        return $this->container['period_from_date'];
    }

    /**
     * Sets period_from_date
     *
     * @param \DateTime|null $period_from_date Период исполнения грузоперевозки От
     *
     * @return self
     */
    public function setPeriodFromDate($period_from_date)
    {
        if (is_null($period_from_date)) {
            throw new \InvalidArgumentException('non-nullable period_from_date cannot be null');
        }
        $this->container['period_from_date'] = $period_from_date;

        return $this;
    }

    /**
     * Gets period_to_date
     *
     * @return \DateTime|null
     */
    public function getPeriodToDate()
    {
        return $this->container['period_to_date'];
    }

    /**
     * Sets period_to_date
     *
     * @param \DateTime|null $period_to_date Период исполнения грузоперевозки До
     *
     * @return self
     */
    public function setPeriodToDate($period_to_date)
    {
        if (is_null($period_to_date)) {
            throw new \InvalidArgumentException('non-nullable period_to_date cannot be null');
        }
        $this->container['period_to_date'] = $period_to_date;

        return $this;
    }

    /**
     * Gets general_partner_doc_id
     *
     * @return int|null
     */
    public function getGeneralPartnerDocId()
    {
        return $this->container['general_partner_doc_id'];
    }

    /**
     * Sets general_partner_doc_id
     *
     * @param int|null $general_partner_doc_id Идентификатор пакета документов загруженных ГП
     *
     * @return self
     */
    public function setGeneralPartnerDocId($general_partner_doc_id)
    {
        if (is_null($general_partner_doc_id)) {
            throw new \InvalidArgumentException('non-nullable general_partner_doc_id cannot be null');
        }
        $this->container['general_partner_doc_id'] = $general_partner_doc_id;

        return $this;
    }

    /**
     * Gets is_general_partner
     *
     * @return bool|null
     */
    public function getIsGeneralPartner()
    {
        return $this->container['is_general_partner'];
    }

    /**
     * Sets is_general_partner
     *
     * @param bool|null $is_general_partner Флаг того что заказ под ГП
     *
     * @return self
     */
    public function setIsGeneralPartner($is_general_partner)
    {
        if (is_null($is_general_partner)) {
            throw new \InvalidArgumentException('non-nullable is_general_partner cannot be null');
        }
        $this->container['is_general_partner'] = $is_general_partner;

        return $this;
    }

    /**
     * Gets general_partner_id
     *
     * @return string|null
     */
    public function getGeneralPartnerId()
    {
        return $this->container['general_partner_id'];
    }

    /**
     * Sets general_partner_id
     *
     * @param string|null $general_partner_id Идентификатор ГП
     *
     * @return self
     */
    public function setGeneralPartnerId($general_partner_id)
    {
        if (is_null($general_partner_id)) {
            throw new \InvalidArgumentException('non-nullable general_partner_id cannot be null');
        }
        $this->container['general_partner_id'] = $general_partner_id;

        return $this;
    }

    /**
     * Gets general_partner_contract_id
     *
     * @return string|null
     */
    public function getGeneralPartnerContractId()
    {
        return $this->container['general_partner_contract_id'];
    }

    /**
     * Sets general_partner_contract_id
     *
     * @param string|null $general_partner_contract_id Идентификатор условий договора с ГП
     *
     * @return self
     */
    public function setGeneralPartnerContractId($general_partner_contract_id)
    {
        if (is_null($general_partner_contract_id)) {
            throw new \InvalidArgumentException('non-nullable general_partner_contract_id cannot be null');
        }
        $this->container['general_partner_contract_id'] = $general_partner_contract_id;

        return $this;
    }

    /**
     * Gets expeditor_carrier_contract
     *
     * @return \MagDv\Cargomart\Dto\ExpeditorContract|null
     */
    public function getExpeditorCarrierContract()
    {
        return $this->container['expeditor_carrier_contract'];
    }

    /**
     * Sets expeditor_carrier_contract
     *
     * @param \MagDv\Cargomart\Dto\ExpeditorContract|null $expeditor_carrier_contract Данные договора
     *
     * @return self
     */
    public function setExpeditorCarrierContract($expeditor_carrier_contract)
    {
        if (is_null($expeditor_carrier_contract)) {
            throw new \InvalidArgumentException('non-nullable expeditor_carrier_contract cannot be null');
        }
        $this->container['expeditor_carrier_contract'] = $expeditor_carrier_contract;

        return $this;
    }

    /**
     * Gets driver_id
     *
     * @return int|null
     * @deprecated
     */
    public function getDriverId()
    {
        return $this->container['driver_id'];
    }

    /**
     * Sets driver_id
     *
     * @param int|null $driver_id @deprecated Идентификатор водителя
     *
     * @return self
     * @deprecated
     */
    public function setDriverId($driver_id)
    {
        if (is_null($driver_id)) {
            throw new \InvalidArgumentException('non-nullable driver_id cannot be null');
        }
        $this->container['driver_id'] = $driver_id;

        return $this;
    }

    /**
     * Gets driver
     *
     * @return \MagDv\Cargomart\Dto\OrderDriver|null
     */
    public function getDriver()
    {
        return $this->container['driver'];
    }

    /**
     * Sets driver
     *
     * @param \MagDv\Cargomart\Dto\OrderDriver|null $driver Информация о водителе
     *
     * @return self
     */
    public function setDriver($driver)
    {
        if (is_null($driver)) {
            throw new \InvalidArgumentException('non-nullable driver cannot be null');
        }
        $this->container['driver'] = $driver;

        return $this;
    }

    /**
     * Gets truck_ids
     *
     * @return int[]|null
     */
    public function getTruckIds()
    {
        return $this->container['truck_ids'];
    }

    /**
     * Sets truck_ids
     *
     * @param int[]|null $truck_ids @deprecated Идентификаторы машин
     *
     * @return self
     */
    public function setTruckIds($truck_ids)
    {
        if (is_null($truck_ids)) {
            throw new \InvalidArgumentException('non-nullable truck_ids cannot be null');
        }
        $this->container['truck_ids'] = $truck_ids;

        return $this;
    }

    /**
     * Gets truck
     *
     * @return \MagDv\Cargomart\Dto\OrderTruck|null
     */
    public function getTruck()
    {
        return $this->container['truck'];
    }

    /**
     * Sets truck
     *
     * @param \MagDv\Cargomart\Dto\OrderTruck|null $truck Информация о машине
     *
     * @return self
     */
    public function setTruck($truck)
    {
        if (is_null($truck)) {
            throw new \InvalidArgumentException('non-nullable truck cannot be null');
        }
        $this->container['truck'] = $truck;

        return $this;
    }

    /**
     * Gets is_repeated
     *
     * @return bool|null
     */
    public function getIsRepeated()
    {
        return $this->container['is_repeated'];
    }

    /**
     * Sets is_repeated
     *
     * @param bool|null $is_repeated Данный заказ переразмещен, существует еще один заказ с данным serialId
     *
     * @return self
     */
    public function setIsRepeated($is_repeated)
    {
        if (is_null($is_repeated)) {
            throw new \InvalidArgumentException('non-nullable is_repeated cannot be null');
        }
        $this->container['is_repeated'] = $is_repeated;

        return $this;
    }

    /**
     * Gets company_branch_id
     *
     * @return int|null
     */
    public function getCompanyBranchId()
    {
        return $this->container['company_branch_id'];
    }

    /**
     * Sets company_branch_id
     *
     * @param int|null $company_branch_id Идентификатор дочерней компании
     *
     * @return self
     */
    public function setCompanyBranchId($company_branch_id)
    {
        if (is_null($company_branch_id)) {
            throw new \InvalidArgumentException('non-nullable company_branch_id cannot be null');
        }
        $this->container['company_branch_id'] = $company_branch_id;

        return $this;
    }

    /**
     * Gets monitoring_ids
     *
     * @return int[]|null
     */
    public function getMonitoringIds()
    {
        return $this->container['monitoring_ids'];
    }

    /**
     * Sets monitoring_ids
     *
     * @param int[]|null $monitoring_ids Идентификаторы ссылок на GPS/Глонасс мониторинг
     *
     * @return self
     */
    public function setMonitoringIds($monitoring_ids)
    {
        if (is_null($monitoring_ids)) {
            throw new \InvalidArgumentException('non-nullable monitoring_ids cannot be null');
        }
        $this->container['monitoring_ids'] = $monitoring_ids;

        return $this;
    }

    /**
     * Gets is_proxy_date_end
     *
     * @return bool|null
     */
    public function getIsProxyDateEnd()
    {
        return $this->container['is_proxy_date_end'];
    }

    /**
     * Sets is_proxy_date_end
     *
     * @param bool|null $is_proxy_date_end Наступила дата, когда нельзя загрузить доверенность
     *
     * @return self
     */
    public function setIsProxyDateEnd($is_proxy_date_end)
    {
        if (is_null($is_proxy_date_end)) {
            throw new \InvalidArgumentException('non-nullable is_proxy_date_end cannot be null');
        }
        $this->container['is_proxy_date_end'] = $is_proxy_date_end;

        return $this;
    }

    /**
     * Gets patch
     *
     * @return \MagDv\Cargomart\Dto\OrderPatchLastItem|null
     */
    public function getPatch()
    {
        return $this->container['patch'];
    }

    /**
     * Sets patch
     *
     * @param \MagDv\Cargomart\Dto\OrderPatchLastItem|null $patch Запрос на изменение заказа
     *
     * @return self
     */
    public function setPatch($patch)
    {
        if (is_null($patch)) {
            throw new \InvalidArgumentException('non-nullable patch cannot be null');
        }
        $this->container['patch'] = $patch;

        return $this;
    }

    /**
     * Gets last_patch
     *
     * @return \MagDv\Cargomart\Dto\OrderPatchLastItem|null
     * @deprecated
     */
    public function getLastPatch()
    {
        return $this->container['last_patch'];
    }

    /**
     * Sets last_patch
     *
     * @param \MagDv\Cargomart\Dto\OrderPatchLastItem|null $last_patch @deprecated Запрос на изменение заказа от экспедитора (использовать patch)
     *
     * @return self
     * @deprecated
     */
    public function setLastPatch($last_patch)
    {
        if (is_null($last_patch)) {
            throw new \InvalidArgumentException('non-nullable last_patch cannot be null');
        }
        $this->container['last_patch'] = $last_patch;

        return $this;
    }

    /**
     * Gets truck_driver_patch
     *
     * @return \MagDv\Cargomart\Dto\OrderPatchLastItem|null
     * @deprecated
     */
    public function getTruckDriverPatch()
    {
        return $this->container['truck_driver_patch'];
    }

    /**
     * Sets truck_driver_patch
     *
     * @param \MagDv\Cargomart\Dto\OrderPatchLastItem|null $truck_driver_patch @deprecated Запрос на изменение машины и водителя в заказе (использовать patch)
     *
     * @return self
     * @deprecated
     */
    public function setTruckDriverPatch($truck_driver_patch)
    {
        if (is_null($truck_driver_patch)) {
            throw new \InvalidArgumentException('non-nullable truck_driver_patch cannot be null');
        }
        $this->container['truck_driver_patch'] = $truck_driver_patch;

        return $this;
    }

    /**
     * Gets is_truck_driver_changed
     *
     * @return bool|null
     */
    public function getIsTruckDriverChanged()
    {
        return $this->container['is_truck_driver_changed'];
    }

    /**
     * Sets is_truck_driver_changed
     *
     * @param bool|null $is_truck_driver_changed В заказе были замены водителя или машины
     *
     * @return self
     */
    public function setIsTruckDriverChanged($is_truck_driver_changed)
    {
        if (is_null($is_truck_driver_changed)) {
            throw new \InvalidArgumentException('non-nullable is_truck_driver_changed cannot be null');
        }
        $this->container['is_truck_driver_changed'] = $is_truck_driver_changed;

        return $this;
    }

    /**
     * Gets is_doc_changed
     *
     * @return bool|null
     */
    public function getIsDocChanged()
    {
        return $this->container['is_doc_changed'];
    }

    /**
     * Sets is_doc_changed
     *
     * @param bool|null $is_doc_changed В заказе были замены документов
     *
     * @return self
     */
    public function setIsDocChanged($is_doc_changed)
    {
        if (is_null($is_doc_changed)) {
            throw new \InvalidArgumentException('non-nullable is_doc_changed cannot be null');
        }
        $this->container['is_doc_changed'] = $is_doc_changed;

        return $this;
    }

    /**
     * Gets progress
     *
     * @return \MagDv\Cargomart\Dto\ProgressItem[]|null
     */
    public function getProgress()
    {
        return $this->container['progress'];
    }

    /**
     * Sets progress
     *
     * @param \MagDv\Cargomart\Dto\ProgressItem[]|null $progress Элемент прогресса
     *
     * @return self
     */
    public function setProgress($progress)
    {
        if (is_null($progress)) {
            throw new \InvalidArgumentException('non-nullable progress cannot be null');
        }
        $this->container['progress'] = $progress;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return int|null
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param int|null $distance Общее расстояние по заказу (м)
     *
     * @return self
     */
    public function setDistance($distance)
    {
        if (is_null($distance)) {
            throw new \InvalidArgumentException('non-nullable distance cannot be null');
        }
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets current_offer
     *
     * @return \MagDv\Cargomart\Dto\OrderOfferCurrent|null
     */
    public function getCurrentOffer()
    {
        return $this->container['current_offer'];
    }

    /**
     * Sets current_offer
     *
     * @param \MagDv\Cargomart\Dto\OrderOfferCurrent|null $current_offer Текущее предложение компании
     *
     * @return self
     */
    public function setCurrentOffer($current_offer)
    {
        if (is_null($current_offer)) {
            throw new \InvalidArgumentException('non-nullable current_offer cannot be null');
        }
        $this->container['current_offer'] = $current_offer;

        return $this;
    }

    /**
     * Gets current_carrier_ask
     *
     * @return \MagDv\Cargomart\Dto\CarrierAskCurrent|null
     */
    public function getCurrentCarrierAsk()
    {
        return $this->container['current_carrier_ask'];
    }

    /**
     * Sets current_carrier_ask
     *
     * @param \MagDv\Cargomart\Dto\CarrierAskCurrent|null $current_carrier_ask Своя ставка перевозчика
     *
     * @return self
     */
    public function setCurrentCarrierAsk($current_carrier_ask)
    {
        if (is_null($current_carrier_ask)) {
            throw new \InvalidArgumentException('non-nullable current_carrier_ask cannot be null');
        }
        $this->container['current_carrier_ask'] = $current_carrier_ask;

        return $this;
    }

    /**
     * Gets winning_carrier_ask
     *
     * @return \MagDv\Cargomart\Dto\CarrierAskCurrent|null
     */
    public function getWinningCarrierAsk()
    {
        return $this->container['winning_carrier_ask'];
    }

    /**
     * Sets winning_carrier_ask
     *
     * @param \MagDv\Cargomart\Dto\CarrierAskCurrent|null $winning_carrier_ask Победная ставка перевозчика
     *
     * @return self
     */
    public function setWinningCarrierAsk($winning_carrier_ask)
    {
        if (is_null($winning_carrier_ask)) {
            throw new \InvalidArgumentException('non-nullable winning_carrier_ask cannot be null');
        }
        $this->container['winning_carrier_ask'] = $winning_carrier_ask;

        return $this;
    }

    /**
     * Gets car_request
     *
     * @return \MagDv\Cargomart\Dto\OrderOfferCarRequest|null
     */
    public function getCarRequest()
    {
        return $this->container['car_request'];
    }

    /**
     * Sets car_request
     *
     * @param \MagDv\Cargomart\Dto\OrderOfferCarRequest|null $car_request Запрос количества машин
     *
     * @return self
     */
    public function setCarRequest($car_request)
    {
        if (is_null($car_request)) {
            throw new \InvalidArgumentException('non-nullable car_request cannot be null');
        }
        $this->container['car_request'] = $car_request;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \MagDv\Cargomart\Dto\OrderPayment[]|null
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \MagDv\Cargomart\Dto\OrderPayment[]|null $payments Список платежей по заказу
     *
     * @return self
     */
    public function setPayments($payments)
    {
        if (is_null($payments)) {
            throw new \InvalidArgumentException('non-nullable payments cannot be null');
        }
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets paid_invoice_date
     *
     * @return \DateTime|null
     */
    public function getPaidInvoiceDate()
    {
        return $this->container['paid_invoice_date'];
    }

    /**
     * Sets paid_invoice_date
     *
     * @param \DateTime|null $paid_invoice_date Дата оплаченного счета (от ГП)
     *
     * @return self
     */
    public function setPaidInvoiceDate($paid_invoice_date)
    {
        if (is_null($paid_invoice_date)) {
            throw new \InvalidArgumentException('non-nullable paid_invoice_date cannot be null');
        }
        $this->container['paid_invoice_date'] = $paid_invoice_date;

        return $this;
    }

    /**
     * Gets paid_expeditor_payment_date
     *
     * @return \DateTime|null
     */
    public function getPaidExpeditorPaymentDate()
    {
        return $this->container['paid_expeditor_payment_date'];
    }

    /**
     * Sets paid_expeditor_payment_date
     *
     * @param \DateTime|null $paid_expeditor_payment_date Дата оплаченного счета от экспедитора
     *
     * @return self
     */
    public function setPaidExpeditorPaymentDate($paid_expeditor_payment_date)
    {
        if (is_null($paid_expeditor_payment_date)) {
            throw new \InvalidArgumentException('non-nullable paid_expeditor_payment_date cannot be null');
        }
        $this->container['paid_expeditor_payment_date'] = $paid_expeditor_payment_date;

        return $this;
    }

    /**
     * Gets access
     *
     * @return \MagDv\Cargomart\Dto\OrderAccess
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param \MagDv\Cargomart\Dto\OrderAccess $access Описание доступных действий по объекту.
     *
     * @return self
     */
    public function setAccess($access)
    {
        if (is_null($access)) {
            throw new \InvalidArgumentException('non-nullable access cannot be null');
        }
        $this->container['access'] = $access;

        return $this;
    }

    /**
     * Gets original_document
     *
     * @return \MagDv\Cargomart\Dto\OriginalDocument|null
     */
    public function getOriginalDocument()
    {
        return $this->container['original_document'];
    }

    /**
     * Sets original_document
     *
     * @param \MagDv\Cargomart\Dto\OriginalDocument|null $original_document Информация по отправленным оригиналам документов
     *
     * @return self
     */
    public function setOriginalDocument($original_document)
    {
        if (is_null($original_document)) {
            throw new \InvalidArgumentException('non-nullable original_document cannot be null');
        }
        $this->container['original_document'] = $original_document;

        return $this;
    }

    /**
     * Gets carrier_package_status
     *
     * @return \MagDv\Cargomart\Dto\OrderDocumentPackageStatus|null
     */
    public function getCarrierPackageStatus()
    {
        return $this->container['carrier_package_status'];
    }

    /**
     * Sets carrier_package_status
     *
     * @param \MagDv\Cargomart\Dto\OrderDocumentPackageStatus|null $carrier_package_status carrier_package_status
     *
     * @return self
     */
    public function setCarrierPackageStatus($carrier_package_status)
    {
        if (is_null($carrier_package_status)) {
            throw new \InvalidArgumentException('non-nullable carrier_package_status cannot be null');
        }
        $this->container['carrier_package_status'] = $carrier_package_status;

        return $this;
    }

    /**
     * Gets price_strategy_type
     *
     * @return \MagDv\Cargomart\Dto\OrderPriceStrategyType|null
     */
    public function getPriceStrategyType()
    {
        return $this->container['price_strategy_type'];
    }

    /**
     * Sets price_strategy_type
     *
     * @param \MagDv\Cargomart\Dto\OrderPriceStrategyType|null $price_strategy_type price_strategy_type
     *
     * @return self
     */
    public function setPriceStrategyType($price_strategy_type)
    {
        if (is_null($price_strategy_type)) {
            throw new \InvalidArgumentException('non-nullable price_strategy_type cannot be null');
        }
        $this->container['price_strategy_type'] = $price_strategy_type;

        return $this;
    }

    /**
     * Gets bidding_type
     *
     * @return \MagDv\Cargomart\Dto\OrderBiddingType|null
     */
    public function getBiddingType()
    {
        return $this->container['bidding_type'];
    }

    /**
     * Sets bidding_type
     *
     * @param \MagDv\Cargomart\Dto\OrderBiddingType|null $bidding_type bidding_type
     *
     * @return self
     */
    public function setBiddingType($bidding_type)
    {
        if (is_null($bidding_type)) {
            throw new \InvalidArgumentException('non-nullable bidding_type cannot be null');
        }
        $this->container['bidding_type'] = $bidding_type;

        return $this;
    }

    /**
     * Gets bidding
     *
     * @return \MagDv\Cargomart\Dto\OrderDraftExpeditorBidding|null
     */
    public function getBidding()
    {
        return $this->container['bidding'];
    }

    /**
     * Sets bidding
     *
     * @param \MagDv\Cargomart\Dto\OrderDraftExpeditorBidding|null $bidding Настройки торгов
     *
     * @return self
     */
    public function setBidding($bidding)
    {
        if (is_null($bidding)) {
            throw new \InvalidArgumentException('non-nullable bidding cannot be null');
        }
        $this->container['bidding'] = $bidding;

        return $this;
    }

    /**
     * Gets carrier_asks_count
     *
     * @return int|null
     */
    public function getCarrierAsksCount()
    {
        return $this->container['carrier_asks_count'];
    }

    /**
     * Sets carrier_asks_count
     *
     * @param int|null $carrier_asks_count Количество оставленных ставок перевозчиков по заявке
     *
     * @return self
     */
    public function setCarrierAsksCount($carrier_asks_count)
    {
        if (is_null($carrier_asks_count)) {
            throw new \InvalidArgumentException('non-nullable carrier_asks_count cannot be null');
        }

        if (($carrier_asks_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $carrier_asks_count when calling OrderShortListItem., must be bigger than or equal to 0.');
        }

        $this->container['carrier_asks_count'] = $carrier_asks_count;

        return $this;
    }

    /**
     * Gets has_carrier_sign
     *
     * @return bool|null
     */
    public function getHasCarrierSign()
    {
        return $this->container['has_carrier_sign'];
    }

    /**
     * Sets has_carrier_sign
     *
     * @param bool|null $has_carrier_sign Подписана заявка перевозчиком-победителем
     *
     * @return self
     */
    public function setHasCarrierSign($has_carrier_sign)
    {
        if (is_null($has_carrier_sign)) {
            throw new \InvalidArgumentException('non-nullable has_carrier_sign cannot be null');
        }
        $this->container['has_carrier_sign'] = $has_carrier_sign;

        return $this;
    }

    /**
     * Gets roadmap_events_count
     *
     * @return int|null
     */
    public function getRoadmapEventsCount()
    {
        return $this->container['roadmap_events_count'];
    }

    /**
     * Sets roadmap_events_count
     *
     * @param int|null $roadmap_events_count Количество событий требующих действия
     *
     * @return self
     */
    public function setRoadmapEventsCount($roadmap_events_count)
    {
        if (is_null($roadmap_events_count)) {
            throw new \InvalidArgumentException('non-nullable roadmap_events_count cannot be null');
        }

        if (($roadmap_events_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $roadmap_events_count when calling OrderShortListItem., must be bigger than or equal to 0.');
        }

        $this->container['roadmap_events_count'] = $roadmap_events_count;

        return $this;
    }

    /**
     * Gets payment_invoice_status
     *
     * @return \MagDv\Cargomart\Dto\PaymentInvoiceStatus[]|null
     */
    public function getPaymentInvoiceStatus()
    {
        return $this->container['payment_invoice_status'];
    }

    /**
     * Sets payment_invoice_status
     *
     * @param \MagDv\Cargomart\Dto\PaymentInvoiceStatus[]|null $payment_invoice_status payment_invoice_status
     *
     * @return self
     */
    public function setPaymentInvoiceStatus($payment_invoice_status)
    {
        if (is_null($payment_invoice_status)) {
            throw new \InvalidArgumentException('non-nullable payment_invoice_status cannot be null');
        }
        $this->container['payment_invoice_status'] = $payment_invoice_status;

        return $this;
    }

    /**
     * Gets is_international
     *
     * @return bool|null
     */
    public function getIsInternational()
    {
        return $this->container['is_international'];
    }

    /**
     * Sets is_international
     *
     * @param bool|null $is_international Является ли перевозка международной (не ограничивается пределами РФ)
     *
     * @return self
     */
    public function setIsInternational($is_international)
    {
        if (is_null($is_international)) {
            throw new \InvalidArgumentException('non-nullable is_international cannot be null');
        }
        $this->container['is_international'] = $is_international;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \MagDv\Cargomart\Dto\OrderDetails[]|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \MagDv\Cargomart\Dto\OrderDetails[]|null $details Список деталей/комментариев/описаний заказа
     *
     * @return self
     */
    public function setDetails($details)
    {
        if (is_null($details)) {
            throw new \InvalidArgumentException('non-nullable details cannot be null');
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return string[]|null
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param string[]|null $conditions Условия перевозки
     *
     * @return self
     */
    public function setConditions($conditions)
    {
        if (is_null($conditions)) {
            throw new \InvalidArgumentException('non-nullable conditions cannot be null');
        }
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets loading
     *
     * @return int[]|null
     */
    public function getLoading()
    {
        return $this->container['loading'];
    }

    /**
     * Sets loading
     *
     * @param int[]|null $loading Требуемые типы погрузки-выгрузки
     *
     * @return self
     */
    public function setLoading($loading)
    {
        if (is_null($loading)) {
            throw new \InvalidArgumentException('non-nullable loading cannot be null');
        }
        $this->container['loading'] = $loading;

        return $this;
    }

    /**
     * Gets device
     *
     * @return string[]|null
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param string[]|null $device Дополнительное оборудование машины
     *
     * @return self
     */
    public function setDevice($device)
    {
        if (is_null($device)) {
            throw new \InvalidArgumentException('non-nullable device cannot be null');
        }
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets cargo_type
     *
     * @return string|null
     */
    public function getCargoType()
    {
        return $this->container['cargo_type'];
    }

    /**
     * Sets cargo_type
     *
     * @param string|null $cargo_type Описание груза
     *
     * @return self
     */
    public function setCargoType($cargo_type)
    {
        if (is_null($cargo_type)) {
            throw new \InvalidArgumentException('non-nullable cargo_type cannot be null');
        }
        $this->container['cargo_type'] = $cargo_type;

        return $this;
    }

    /**
     * Gets contract_type_id
     *
     * @return int|null
     */
    public function getContractTypeId()
    {
        return $this->container['contract_type_id'];
    }

    /**
     * Sets contract_type_id
     *
     * @param int|null $contract_type_id Идентификатор типа договора, при ограничении доступа prt_contract_exclude
     *
     * @return self
     */
    public function setContractTypeId($contract_type_id)
    {
        if (is_null($contract_type_id)) {
            throw new \InvalidArgumentException('non-nullable contract_type_id cannot be null');
        }
        $this->container['contract_type_id'] = $contract_type_id;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return \MagDv\Cargomart\Dto\TemperatureRange|null
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param \MagDv\Cargomart\Dto\TemperatureRange|null $temperature Температурный режим в цельсиях
     *
     * @return self
     */
    public function setTemperature($temperature)
    {
        if (is_null($temperature)) {
            throw new \InvalidArgumentException('non-nullable temperature cannot be null');
        }
        $this->container['temperature'] = $temperature;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


