<?php
/**
 * ChatPostPayloadOrderPatch
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * ChatPostPayloadOrderPatch Class Doc Comment
 *
 * @category Class
 * @description Данные вложения - идентификаторы заказа и запроса на изменение заказа
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChatPostPayloadOrderPatch implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'chat-post-payload-order-patch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => '\MagDv\Cargomart\Dto\ChatPostTypeEnum',
        'order_hash' => 'string',
        'order_patch_id' => 'string',
        'comment' => 'string',
        'comment_for_consignor' => 'string',
        'comment_for_carrier' => 'string',
        'new_values' => '\MagDv\Cargomart\Dto\ChatPostPayloadOrderPatchNewValues'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'order_hash' => null,
        'order_patch_id' => null,
        'comment' => null,
        'comment_for_consignor' => null,
        'comment_for_carrier' => null,
        'new_values' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'order_hash' => false,
        'order_patch_id' => false,
        'comment' => false,
        'comment_for_consignor' => false,
        'comment_for_carrier' => false,
        'new_values' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'order_hash' => 'orderHash',
        'order_patch_id' => 'orderPatchId',
        'comment' => 'comment',
        'comment_for_consignor' => 'commentForConsignor',
        'comment_for_carrier' => 'commentForCarrier',
        'new_values' => 'newValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'order_hash' => 'setOrderHash',
        'order_patch_id' => 'setOrderPatchId',
        'comment' => 'setComment',
        'comment_for_consignor' => 'setCommentForConsignor',
        'comment_for_carrier' => 'setCommentForCarrier',
        'new_values' => 'setNewValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'order_hash' => 'getOrderHash',
        'order_patch_id' => 'getOrderPatchId',
        'comment' => 'getComment',
        'comment_for_consignor' => 'getCommentForConsignor',
        'comment_for_carrier' => 'getCommentForCarrier',
        'new_values' => 'getNewValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('order_hash', $data ?? [], null);
        $this->setIfExists('order_patch_id', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('comment_for_consignor', $data ?? [], null);
        $this->setIfExists('comment_for_carrier', $data ?? [], null);
        $this->setIfExists('new_values', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['order_hash'] === null) {
            $invalidProperties[] = "'order_hash' can't be null";
        }
        if ($this->container['order_patch_id'] === null) {
            $invalidProperties[] = "'order_patch_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return \MagDv\Cargomart\Dto\ChatPostTypeEnum
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \MagDv\Cargomart\Dto\ChatPostTypeEnum $type Тип сообщения чата
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets order_hash
     *
     * @return string
     */
    public function getOrderHash()
    {
        return $this->container['order_hash'];
    }

    /**
     * Sets order_hash
     *
     * @param string $order_hash Хеш заказа
     *
     * @return self
     */
    public function setOrderHash($order_hash)
    {
        if (is_null($order_hash)) {
            throw new \InvalidArgumentException('non-nullable order_hash cannot be null');
        }
        $this->container['order_hash'] = $order_hash;

        return $this;
    }

    /**
     * Gets order_patch_id
     *
     * @return string
     */
    public function getOrderPatchId()
    {
        return $this->container['order_patch_id'];
    }

    /**
     * Sets order_patch_id
     *
     * @param string $order_patch_id Идентификатор запрос на изменение заказа
     *
     * @return self
     */
    public function setOrderPatchId($order_patch_id)
    {
        if (is_null($order_patch_id)) {
            throw new \InvalidArgumentException('non-nullable order_patch_id cannot be null');
        }
        $this->container['order_patch_id'] = $order_patch_id;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Комментарий
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets comment_for_consignor
     *
     * @return string|null
     */
    public function getCommentForConsignor()
    {
        return $this->container['comment_for_consignor'];
    }

    /**
     * Sets comment_for_consignor
     *
     * @param string|null $comment_for_consignor Комментарий для отправителя
     *
     * @return self
     */
    public function setCommentForConsignor($comment_for_consignor)
    {
        if (is_null($comment_for_consignor)) {
            throw new \InvalidArgumentException('non-nullable comment_for_consignor cannot be null');
        }
        $this->container['comment_for_consignor'] = $comment_for_consignor;

        return $this;
    }

    /**
     * Gets comment_for_carrier
     *
     * @return string|null
     */
    public function getCommentForCarrier()
    {
        return $this->container['comment_for_carrier'];
    }

    /**
     * Sets comment_for_carrier
     *
     * @param string|null $comment_for_carrier Комментарий для перевозчика
     *
     * @return self
     */
    public function setCommentForCarrier($comment_for_carrier)
    {
        if (is_null($comment_for_carrier)) {
            throw new \InvalidArgumentException('non-nullable comment_for_carrier cannot be null');
        }
        $this->container['comment_for_carrier'] = $comment_for_carrier;

        return $this;
    }

    /**
     * Gets new_values
     *
     * @return \MagDv\Cargomart\Dto\ChatPostPayloadOrderPatchNewValues|null
     */
    public function getNewValues()
    {
        return $this->container['new_values'];
    }

    /**
     * Sets new_values
     *
     * @param \MagDv\Cargomart\Dto\ChatPostPayloadOrderPatchNewValues|null $new_values new_values
     *
     * @return self
     */
    public function setNewValues($new_values)
    {
        if (is_null($new_values)) {
            throw new \InvalidArgumentException('non-nullable new_values cannot be null');
        }
        $this->container['new_values'] = $new_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


