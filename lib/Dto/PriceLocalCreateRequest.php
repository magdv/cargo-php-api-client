<?php
/**
 * PriceLocalCreateRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * PriceLocalCreateRequest Class Doc Comment
 *
 * @category Class
 * @description Данные для создания элемента справочника цен
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PriceLocalCreateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'price-local-create-request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pool_id' => 'int',
        'truck_type_id' => 'int',
        'consignor_price' => 'string',
        'carrier_price' => 'string',
        'carrier_price_tomorrow' => 'string',
        'is_active' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pool_id' => null,
        'truck_type_id' => null,
        'consignor_price' => 'cm-price',
        'carrier_price' => 'cm-price',
        'carrier_price_tomorrow' => 'cm-price',
        'is_active' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pool_id' => false,
        'truck_type_id' => false,
        'consignor_price' => false,
        'carrier_price' => false,
        'carrier_price_tomorrow' => false,
        'is_active' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pool_id' => 'poolId',
        'truck_type_id' => 'truckTypeId',
        'consignor_price' => 'consignorPrice',
        'carrier_price' => 'carrierPrice',
        'carrier_price_tomorrow' => 'carrierPriceTomorrow',
        'is_active' => 'isActive'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pool_id' => 'setPoolId',
        'truck_type_id' => 'setTruckTypeId',
        'consignor_price' => 'setConsignorPrice',
        'carrier_price' => 'setCarrierPrice',
        'carrier_price_tomorrow' => 'setCarrierPriceTomorrow',
        'is_active' => 'setIsActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pool_id' => 'getPoolId',
        'truck_type_id' => 'getTruckTypeId',
        'consignor_price' => 'getConsignorPrice',
        'carrier_price' => 'getCarrierPrice',
        'carrier_price_tomorrow' => 'getCarrierPriceTomorrow',
        'is_active' => 'getIsActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('pool_id', $data ?? [], null);
        $this->setIfExists('truck_type_id', $data ?? [], null);
        $this->setIfExists('consignor_price', $data ?? [], null);
        $this->setIfExists('carrier_price', $data ?? [], null);
        $this->setIfExists('carrier_price_tomorrow', $data ?? [], null);
        $this->setIfExists('is_active', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pool_id'] === null) {
            $invalidProperties[] = "'pool_id' can't be null";
        }
        if ($this->container['truck_type_id'] === null) {
            $invalidProperties[] = "'truck_type_id' can't be null";
        }
        if ($this->container['consignor_price'] === null) {
            $invalidProperties[] = "'consignor_price' can't be null";
        }
        if (!preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", $this->container['consignor_price'])) {
            $invalidProperties[] = "invalid value for 'consignor_price', must be conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.";
        }

        if ($this->container['carrier_price'] === null) {
            $invalidProperties[] = "'carrier_price' can't be null";
        }
        if (!preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", $this->container['carrier_price'])) {
            $invalidProperties[] = "invalid value for 'carrier_price', must be conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.";
        }

        if ($this->container['carrier_price_tomorrow'] === null) {
            $invalidProperties[] = "'carrier_price_tomorrow' can't be null";
        }
        if (!preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", $this->container['carrier_price_tomorrow'])) {
            $invalidProperties[] = "invalid value for 'carrier_price_tomorrow', must be conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pool_id
     *
     * @return int
     */
    public function getPoolId()
    {
        return $this->container['pool_id'];
    }

    /**
     * Sets pool_id
     *
     * @param int $pool_id Идентификатор пула направлений и цен
     *
     * @return self
     */
    public function setPoolId($pool_id)
    {
        if (is_null($pool_id)) {
            throw new \InvalidArgumentException('non-nullable pool_id cannot be null');
        }
        $this->container['pool_id'] = $pool_id;

        return $this;
    }

    /**
     * Gets truck_type_id
     *
     * @return int
     */
    public function getTruckTypeId()
    {
        return $this->container['truck_type_id'];
    }

    /**
     * Sets truck_type_id
     *
     * @param int $truck_type_id Идентификатор типа кузова
     *
     * @return self
     */
    public function setTruckTypeId($truck_type_id)
    {
        if (is_null($truck_type_id)) {
            throw new \InvalidArgumentException('non-nullable truck_type_id cannot be null');
        }
        $this->container['truck_type_id'] = $truck_type_id;

        return $this;
    }

    /**
     * Gets consignor_price
     *
     * @return string
     */
    public function getConsignorPrice()
    {
        return $this->container['consignor_price'];
    }

    /**
     * Sets consignor_price
     *
     * @param string $consignor_price Цена для отправителя по всем направлениям данного элемента справочника цен
     *
     * @return self
     */
    public function setConsignorPrice($consignor_price)
    {
        if (is_null($consignor_price)) {
            throw new \InvalidArgumentException('non-nullable consignor_price cannot be null');
        }

        if ((!preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", ObjectSerializer::toString($consignor_price)))) {
            throw new \InvalidArgumentException("invalid value for \$consignor_price when calling PriceLocalCreateRequest., must conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.");
        }

        $this->container['consignor_price'] = $consignor_price;

        return $this;
    }

    /**
     * Gets carrier_price
     *
     * @return string
     */
    public function getCarrierPrice()
    {
        return $this->container['carrier_price'];
    }

    /**
     * Sets carrier_price
     *
     * @param string $carrier_price Цена для перевозчика (меньше суток) по всем направлениям данного элемента справочника цен
     *
     * @return self
     */
    public function setCarrierPrice($carrier_price)
    {
        if (is_null($carrier_price)) {
            throw new \InvalidArgumentException('non-nullable carrier_price cannot be null');
        }

        if ((!preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", ObjectSerializer::toString($carrier_price)))) {
            throw new \InvalidArgumentException("invalid value for \$carrier_price when calling PriceLocalCreateRequest., must conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.");
        }

        $this->container['carrier_price'] = $carrier_price;

        return $this;
    }

    /**
     * Gets carrier_price_tomorrow
     *
     * @return string
     */
    public function getCarrierPriceTomorrow()
    {
        return $this->container['carrier_price_tomorrow'];
    }

    /**
     * Sets carrier_price_tomorrow
     *
     * @param string $carrier_price_tomorrow Цена для перевозчика (больше суток) по всем направлениям данного элемента справочника цен
     *
     * @return self
     */
    public function setCarrierPriceTomorrow($carrier_price_tomorrow)
    {
        if (is_null($carrier_price_tomorrow)) {
            throw new \InvalidArgumentException('non-nullable carrier_price_tomorrow cannot be null');
        }

        if ((!preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", ObjectSerializer::toString($carrier_price_tomorrow)))) {
            throw new \InvalidArgumentException("invalid value for \$carrier_price_tomorrow when calling PriceLocalCreateRequest., must conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.");
        }

        $this->container['carrier_price_tomorrow'] = $carrier_price_tomorrow;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool|null
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool|null $is_active Статус элемента справочника цен (активен или нет)
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        if (is_null($is_active)) {
            throw new \InvalidArgumentException('non-nullable is_active cannot be null');
        }
        $this->container['is_active'] = $is_active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


