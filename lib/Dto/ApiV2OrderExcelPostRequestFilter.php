<?php
/**
 * ApiV2OrderExcelPostRequestFilter
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * ApiV2OrderExcelPostRequestFilter Class Doc Comment
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiV2OrderExcelPostRequestFilter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_api_v2_order_excel_post_request_filter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => '\MagDv\Cargomart\Dto\OrderFilterPortStateEnum',
        'order_type' => '\MagDv\Cargomart\Dto\OrderFilterPortOrderTypeEnum[]',
        'belong' => '\MagDv\Cargomart\Dto\OrderFilterBelongEnum',
        'serial' => 'string',
        'departure' => 'string',
        'departure_radius' => 'int',
        'destination' => 'string',
        'destination_radius' => 'int',
        'tag' => 'string[]',
        'loading_from' => '\DateTime',
        'loading_to' => '\DateTime',
        'start_from' => '\DateTime',
        'start_to' => '\DateTime',
        'worker' => 'int',
        'truck_type' => 'int[]',
        'weight_from' => 'int',
        'weight_to' => 'int',
        'capacity_from' => 'int',
        'capacity_to' => 'int',
        'price_from' => 'int',
        'price_to' => 'int',
        'status' => 'int[]',
        'carrier' => 'string',
        'consignor' => 'string',
        'order' => 'string[]',
        'create_from' => '\DateTime',
        'create_to' => '\DateTime',
        'available' => 'bool',
        'kind' => '\MagDv\Cargomart\Dto\OrderFilterPortKindEnum[]',
        'is_general_partner' => 'bool',
        'is_truck' => 'bool',
        'is_carrier_document' => 'bool',
        'is_general_partner_document' => 'bool',
        'branch_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'order_type' => null,
        'belong' => null,
        'serial' => null,
        'departure' => null,
        'departure_radius' => null,
        'destination' => null,
        'destination_radius' => null,
        'tag' => null,
        'loading_from' => 'date',
        'loading_to' => 'date',
        'start_from' => 'date',
        'start_to' => 'date',
        'worker' => null,
        'truck_type' => null,
        'weight_from' => null,
        'weight_to' => null,
        'capacity_from' => null,
        'capacity_to' => null,
        'price_from' => null,
        'price_to' => null,
        'status' => null,
        'carrier' => null,
        'consignor' => null,
        'order' => null,
        'create_from' => 'date',
        'create_to' => 'date',
        'available' => null,
        'kind' => null,
        'is_general_partner' => null,
        'is_truck' => null,
        'is_carrier_document' => null,
        'is_general_partner_document' => null,
        'branch_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'order_type' => false,
        'belong' => false,
        'serial' => false,
        'departure' => false,
        'departure_radius' => false,
        'destination' => false,
        'destination_radius' => false,
        'tag' => false,
        'loading_from' => false,
        'loading_to' => false,
        'start_from' => false,
        'start_to' => false,
        'worker' => false,
        'truck_type' => false,
        'weight_from' => false,
        'weight_to' => false,
        'capacity_from' => false,
        'capacity_to' => false,
        'price_from' => false,
        'price_to' => false,
        'status' => false,
        'carrier' => false,
        'consignor' => false,
        'order' => false,
        'create_from' => false,
        'create_to' => false,
        'available' => false,
        'kind' => false,
        'is_general_partner' => false,
        'is_truck' => false,
        'is_carrier_document' => false,
        'is_general_partner_document' => false,
        'branch_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'order_type' => 'orderType',
        'belong' => 'belong',
        'serial' => 'serial',
        'departure' => 'departure',
        'departure_radius' => 'departureRadius',
        'destination' => 'destination',
        'destination_radius' => 'destinationRadius',
        'tag' => 'tag',
        'loading_from' => 'loadingFrom',
        'loading_to' => 'loadingTo',
        'start_from' => 'startFrom',
        'start_to' => 'startTo',
        'worker' => 'worker',
        'truck_type' => 'truckType',
        'weight_from' => 'weightFrom',
        'weight_to' => 'weightTo',
        'capacity_from' => 'capacityFrom',
        'capacity_to' => 'capacityTo',
        'price_from' => 'priceFrom',
        'price_to' => 'priceTo',
        'status' => 'status',
        'carrier' => 'carrier',
        'consignor' => 'consignor',
        'order' => 'order',
        'create_from' => 'createFrom',
        'create_to' => 'createTo',
        'available' => 'available',
        'kind' => 'kind',
        'is_general_partner' => 'isGeneralPartner',
        'is_truck' => 'isTruck',
        'is_carrier_document' => 'isCarrierDocument',
        'is_general_partner_document' => 'isGeneralPartnerDocument',
        'branch_id' => 'branchId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'order_type' => 'setOrderType',
        'belong' => 'setBelong',
        'serial' => 'setSerial',
        'departure' => 'setDeparture',
        'departure_radius' => 'setDepartureRadius',
        'destination' => 'setDestination',
        'destination_radius' => 'setDestinationRadius',
        'tag' => 'setTag',
        'loading_from' => 'setLoadingFrom',
        'loading_to' => 'setLoadingTo',
        'start_from' => 'setStartFrom',
        'start_to' => 'setStartTo',
        'worker' => 'setWorker',
        'truck_type' => 'setTruckType',
        'weight_from' => 'setWeightFrom',
        'weight_to' => 'setWeightTo',
        'capacity_from' => 'setCapacityFrom',
        'capacity_to' => 'setCapacityTo',
        'price_from' => 'setPriceFrom',
        'price_to' => 'setPriceTo',
        'status' => 'setStatus',
        'carrier' => 'setCarrier',
        'consignor' => 'setConsignor',
        'order' => 'setOrder',
        'create_from' => 'setCreateFrom',
        'create_to' => 'setCreateTo',
        'available' => 'setAvailable',
        'kind' => 'setKind',
        'is_general_partner' => 'setIsGeneralPartner',
        'is_truck' => 'setIsTruck',
        'is_carrier_document' => 'setIsCarrierDocument',
        'is_general_partner_document' => 'setIsGeneralPartnerDocument',
        'branch_id' => 'setBranchId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'order_type' => 'getOrderType',
        'belong' => 'getBelong',
        'serial' => 'getSerial',
        'departure' => 'getDeparture',
        'departure_radius' => 'getDepartureRadius',
        'destination' => 'getDestination',
        'destination_radius' => 'getDestinationRadius',
        'tag' => 'getTag',
        'loading_from' => 'getLoadingFrom',
        'loading_to' => 'getLoadingTo',
        'start_from' => 'getStartFrom',
        'start_to' => 'getStartTo',
        'worker' => 'getWorker',
        'truck_type' => 'getTruckType',
        'weight_from' => 'getWeightFrom',
        'weight_to' => 'getWeightTo',
        'capacity_from' => 'getCapacityFrom',
        'capacity_to' => 'getCapacityTo',
        'price_from' => 'getPriceFrom',
        'price_to' => 'getPriceTo',
        'status' => 'getStatus',
        'carrier' => 'getCarrier',
        'consignor' => 'getConsignor',
        'order' => 'getOrder',
        'create_from' => 'getCreateFrom',
        'create_to' => 'getCreateTo',
        'available' => 'getAvailable',
        'kind' => 'getKind',
        'is_general_partner' => 'getIsGeneralPartner',
        'is_truck' => 'getIsTruck',
        'is_carrier_document' => 'getIsCarrierDocument',
        'is_general_partner_document' => 'getIsGeneralPartnerDocument',
        'branch_id' => 'getBranchId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('order_type', $data ?? [], null);
        $this->setIfExists('belong', $data ?? [], null);
        $this->setIfExists('serial', $data ?? [], null);
        $this->setIfExists('departure', $data ?? [], null);
        $this->setIfExists('departure_radius', $data ?? [], null);
        $this->setIfExists('destination', $data ?? [], null);
        $this->setIfExists('destination_radius', $data ?? [], null);
        $this->setIfExists('tag', $data ?? [], null);
        $this->setIfExists('loading_from', $data ?? [], null);
        $this->setIfExists('loading_to', $data ?? [], null);
        $this->setIfExists('start_from', $data ?? [], null);
        $this->setIfExists('start_to', $data ?? [], null);
        $this->setIfExists('worker', $data ?? [], null);
        $this->setIfExists('truck_type', $data ?? [], null);
        $this->setIfExists('weight_from', $data ?? [], null);
        $this->setIfExists('weight_to', $data ?? [], null);
        $this->setIfExists('capacity_from', $data ?? [], null);
        $this->setIfExists('capacity_to', $data ?? [], null);
        $this->setIfExists('price_from', $data ?? [], null);
        $this->setIfExists('price_to', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('carrier', $data ?? [], null);
        $this->setIfExists('consignor', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('create_from', $data ?? [], null);
        $this->setIfExists('create_to', $data ?? [], null);
        $this->setIfExists('available', $data ?? [], null);
        $this->setIfExists('kind', $data ?? [], null);
        $this->setIfExists('is_general_partner', $data ?? [], null);
        $this->setIfExists('is_truck', $data ?? [], null);
        $this->setIfExists('is_carrier_document', $data ?? [], null);
        $this->setIfExists('is_general_partner_document', $data ?? [], null);
        $this->setIfExists('branch_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return \MagDv\Cargomart\Dto\OrderFilterPortStateEnum|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \MagDv\Cargomart\Dto\OrderFilterPortStateEnum|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return \MagDv\Cargomart\Dto\OrderFilterPortOrderTypeEnum[]|null
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param \MagDv\Cargomart\Dto\OrderFilterPortOrderTypeEnum[]|null $order_type order_type
     *
     * @return self
     */
    public function setOrderType($order_type)
    {
        if (is_null($order_type)) {
            throw new \InvalidArgumentException('non-nullable order_type cannot be null');
        }
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets belong
     *
     * @return \MagDv\Cargomart\Dto\OrderFilterBelongEnum|null
     */
    public function getBelong()
    {
        return $this->container['belong'];
    }

    /**
     * Sets belong
     *
     * @param \MagDv\Cargomart\Dto\OrderFilterBelongEnum|null $belong belong
     *
     * @return self
     */
    public function setBelong($belong)
    {
        if (is_null($belong)) {
            throw new \InvalidArgumentException('non-nullable belong cannot be null');
        }
        $this->container['belong'] = $belong;

        return $this;
    }

    /**
     * Gets serial
     *
     * @return string|null
     */
    public function getSerial()
    {
        return $this->container['serial'];
    }

    /**
     * Sets serial
     *
     * @param string|null $serial Порядковый номер заказа.
     *
     * @return self
     */
    public function setSerial($serial)
    {
        if (is_null($serial)) {
            throw new \InvalidArgumentException('non-nullable serial cannot be null');
        }
        $this->container['serial'] = $serial;

        return $this;
    }

    /**
     * Gets departure
     *
     * @return string|null
     */
    public function getDeparture()
    {
        return $this->container['departure'];
    }

    /**
     * Sets departure
     *
     * @param string|null $departure Код кладр пункта отправления.
     *
     * @return self
     */
    public function setDeparture($departure)
    {
        if (is_null($departure)) {
            throw new \InvalidArgumentException('non-nullable departure cannot be null');
        }
        $this->container['departure'] = $departure;

        return $this;
    }

    /**
     * Gets departure_radius
     *
     * @return int|null
     */
    public function getDepartureRadius()
    {
        return $this->container['departure_radius'];
    }

    /**
     * Sets departure_radius
     *
     * @param int|null $departure_radius Радиус точки отправления.
     *
     * @return self
     */
    public function setDepartureRadius($departure_radius)
    {
        if (is_null($departure_radius)) {
            throw new \InvalidArgumentException('non-nullable departure_radius cannot be null');
        }
        $this->container['departure_radius'] = $departure_radius;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return string|null
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param string|null $destination Код кладр пункта назначения.
     *
     * @return self
     */
    public function setDestination($destination)
    {
        if (is_null($destination)) {
            throw new \InvalidArgumentException('non-nullable destination cannot be null');
        }
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets destination_radius
     *
     * @return int|null
     */
    public function getDestinationRadius()
    {
        return $this->container['destination_radius'];
    }

    /**
     * Sets destination_radius
     *
     * @param int|null $destination_radius Радиус точки назначения.
     *
     * @return self
     */
    public function setDestinationRadius($destination_radius)
    {
        if (is_null($destination_radius)) {
            throw new \InvalidArgumentException('non-nullable destination_radius cannot be null');
        }
        $this->container['destination_radius'] = $destination_radius;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string[]|null
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string[]|null $tag Массив тэгов, только для отправителя.
     *
     * @return self
     */
    public function setTag($tag)
    {
        if (is_null($tag)) {
            throw new \InvalidArgumentException('non-nullable tag cannot be null');
        }
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets loading_from
     *
     * @return \DateTime|null
     */
    public function getLoadingFrom()
    {
        return $this->container['loading_from'];
    }

    /**
     * Sets loading_from
     *
     * @param \DateTime|null $loading_from Дата погрузки ОТ.
     *
     * @return self
     */
    public function setLoadingFrom($loading_from)
    {
        if (is_null($loading_from)) {
            throw new \InvalidArgumentException('non-nullable loading_from cannot be null');
        }
        $this->container['loading_from'] = $loading_from;

        return $this;
    }

    /**
     * Gets loading_to
     *
     * @return \DateTime|null
     */
    public function getLoadingTo()
    {
        return $this->container['loading_to'];
    }

    /**
     * Sets loading_to
     *
     * @param \DateTime|null $loading_to Дата погрузки ДО.
     *
     * @return self
     */
    public function setLoadingTo($loading_to)
    {
        if (is_null($loading_to)) {
            throw new \InvalidArgumentException('non-nullable loading_to cannot be null');
        }
        $this->container['loading_to'] = $loading_to;

        return $this;
    }

    /**
     * Gets start_from
     *
     * @return \DateTime|null
     */
    public function getStartFrom()
    {
        return $this->container['start_from'];
    }

    /**
     * Sets start_from
     *
     * @param \DateTime|null $start_from Дата начала розыгрыша ОТ.
     *
     * @return self
     */
    public function setStartFrom($start_from)
    {
        if (is_null($start_from)) {
            throw new \InvalidArgumentException('non-nullable start_from cannot be null');
        }
        $this->container['start_from'] = $start_from;

        return $this;
    }

    /**
     * Gets start_to
     *
     * @return \DateTime|null
     */
    public function getStartTo()
    {
        return $this->container['start_to'];
    }

    /**
     * Sets start_to
     *
     * @param \DateTime|null $start_to Дата начала розыгрыша ДО.
     *
     * @return self
     */
    public function setStartTo($start_to)
    {
        if (is_null($start_to)) {
            throw new \InvalidArgumentException('non-nullable start_to cannot be null');
        }
        $this->container['start_to'] = $start_to;

        return $this;
    }

    /**
     * Gets worker
     *
     * @return int|null
     */
    public function getWorker()
    {
        return $this->container['worker'];
    }

    /**
     * Sets worker
     *
     * @param int|null $worker Идентификатор сотрудника создателя для отправителя и сотрудника закрепителя для перевозчика.
     *
     * @return self
     */
    public function setWorker($worker)
    {
        if (is_null($worker)) {
            throw new \InvalidArgumentException('non-nullable worker cannot be null');
        }
        $this->container['worker'] = $worker;

        return $this;
    }

    /**
     * Gets truck_type
     *
     * @return int[]|null
     */
    public function getTruckType()
    {
        return $this->container['truck_type'];
    }

    /**
     * Sets truck_type
     *
     * @param int[]|null $truck_type Список идентификаторов типов ТС.
     *
     * @return self
     */
    public function setTruckType($truck_type)
    {
        if (is_null($truck_type)) {
            throw new \InvalidArgumentException('non-nullable truck_type cannot be null');
        }
        $this->container['truck_type'] = $truck_type;

        return $this;
    }

    /**
     * Gets weight_from
     *
     * @return int|null
     */
    public function getWeightFrom()
    {
        return $this->container['weight_from'];
    }

    /**
     * Sets weight_from
     *
     * @param int|null $weight_from Вес груза в ОТ, кг.
     *
     * @return self
     */
    public function setWeightFrom($weight_from)
    {
        if (is_null($weight_from)) {
            throw new \InvalidArgumentException('non-nullable weight_from cannot be null');
        }
        $this->container['weight_from'] = $weight_from;

        return $this;
    }

    /**
     * Gets weight_to
     *
     * @return int|null
     */
    public function getWeightTo()
    {
        return $this->container['weight_to'];
    }

    /**
     * Sets weight_to
     *
     * @param int|null $weight_to Вес груза в ДО, кг.
     *
     * @return self
     */
    public function setWeightTo($weight_to)
    {
        if (is_null($weight_to)) {
            throw new \InvalidArgumentException('non-nullable weight_to cannot be null');
        }
        $this->container['weight_to'] = $weight_to;

        return $this;
    }

    /**
     * Gets capacity_from
     *
     * @return int|null
     */
    public function getCapacityFrom()
    {
        return $this->container['capacity_from'];
    }

    /**
     * Sets capacity_from
     *
     * @param int|null $capacity_from Объём груза в ОТ, м3.
     *
     * @return self
     */
    public function setCapacityFrom($capacity_from)
    {
        if (is_null($capacity_from)) {
            throw new \InvalidArgumentException('non-nullable capacity_from cannot be null');
        }
        $this->container['capacity_from'] = $capacity_from;

        return $this;
    }

    /**
     * Gets capacity_to
     *
     * @return int|null
     */
    public function getCapacityTo()
    {
        return $this->container['capacity_to'];
    }

    /**
     * Sets capacity_to
     *
     * @param int|null $capacity_to Объём груза в ДО, м3.
     *
     * @return self
     */
    public function setCapacityTo($capacity_to)
    {
        if (is_null($capacity_to)) {
            throw new \InvalidArgumentException('non-nullable capacity_to cannot be null');
        }
        $this->container['capacity_to'] = $capacity_to;

        return $this;
    }

    /**
     * Gets price_from
     *
     * @return int|null
     */
    public function getPriceFrom()
    {
        return $this->container['price_from'];
    }

    /**
     * Sets price_from
     *
     * @param int|null $price_from Текущая цена заказа ОТ.
     *
     * @return self
     */
    public function setPriceFrom($price_from)
    {
        if (is_null($price_from)) {
            throw new \InvalidArgumentException('non-nullable price_from cannot be null');
        }
        $this->container['price_from'] = $price_from;

        return $this;
    }

    /**
     * Gets price_to
     *
     * @return int|null
     */
    public function getPriceTo()
    {
        return $this->container['price_to'];
    }

    /**
     * Sets price_to
     *
     * @param int|null $price_to Текущая цена заказа ДО.
     *
     * @return self
     */
    public function setPriceTo($price_to)
    {
        if (is_null($price_to)) {
            throw new \InvalidArgumentException('non-nullable price_to cannot be null');
        }
        $this->container['price_to'] = $price_to;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int[]|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int[]|null $status Массив id статусов заказов.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return string|null
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string|null $carrier Хэш код компании победителя.
     *
     * @return self
     */
    public function setCarrier($carrier)
    {
        if (is_null($carrier)) {
            throw new \InvalidArgumentException('non-nullable carrier cannot be null');
        }
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets consignor
     *
     * @return string|null
     */
    public function getConsignor()
    {
        return $this->container['consignor'];
    }

    /**
     * Sets consignor
     *
     * @param string|null $consignor Хэш код компании отправителя.
     *
     * @return self
     */
    public function setConsignor($consignor)
    {
        if (is_null($consignor)) {
            throw new \InvalidArgumentException('non-nullable consignor cannot be null');
        }
        $this->container['consignor'] = $consignor;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string[]|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string[]|null $order Массив id хэшей заказов.
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets create_from
     *
     * @return \DateTime|null
     */
    public function getCreateFrom()
    {
        return $this->container['create_from'];
    }

    /**
     * Sets create_from
     *
     * @param \DateTime|null $create_from Дата создания заказа ОТ.
     *
     * @return self
     */
    public function setCreateFrom($create_from)
    {
        if (is_null($create_from)) {
            throw new \InvalidArgumentException('non-nullable create_from cannot be null');
        }
        $this->container['create_from'] = $create_from;

        return $this;
    }

    /**
     * Gets create_to
     *
     * @return \DateTime|null
     */
    public function getCreateTo()
    {
        return $this->container['create_to'];
    }

    /**
     * Sets create_to
     *
     * @param \DateTime|null $create_to Дата создания заказа ДО.
     *
     * @return self
     */
    public function setCreateTo($create_to)
    {
        if (is_null($create_to)) {
            throw new \InvalidArgumentException('non-nullable create_to cannot be null');
        }
        $this->container['create_to'] = $create_to;

        return $this;
    }

    /**
     * Gets available
     *
     * @return bool|null
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param bool|null $available Только доступные мне заказы. Только для перевозчика.
     *
     * @return self
     */
    public function setAvailable($available)
    {
        if (is_null($available)) {
            throw new \InvalidArgumentException('non-nullable available cannot be null');
        }
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return \MagDv\Cargomart\Dto\OrderFilterPortKindEnum[]|null
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param \MagDv\Cargomart\Dto\OrderFilterPortKindEnum[]|null $kind kind
     *
     * @return self
     */
    public function setKind($kind)
    {
        if (is_null($kind)) {
            throw new \InvalidArgumentException('non-nullable kind cannot be null');
        }
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets is_general_partner
     *
     * @return bool|null
     */
    public function getIsGeneralPartner()
    {
        return $this->container['is_general_partner'];
    }

    /**
     * Sets is_general_partner
     *
     * @param bool|null $is_general_partner Фильтр по статусу генерального партнера.
     *
     * @return self
     */
    public function setIsGeneralPartner($is_general_partner)
    {
        if (is_null($is_general_partner)) {
            throw new \InvalidArgumentException('non-nullable is_general_partner cannot be null');
        }
        $this->container['is_general_partner'] = $is_general_partner;

        return $this;
    }

    /**
     * Gets is_truck
     *
     * @return bool|null
     */
    public function getIsTruck()
    {
        return $this->container['is_truck'];
    }

    /**
     * Sets is_truck
     *
     * @param bool|null $is_truck Только заказы в которых прикреплен водитель/машина.
     *
     * @return self
     */
    public function setIsTruck($is_truck)
    {
        if (is_null($is_truck)) {
            throw new \InvalidArgumentException('non-nullable is_truck cannot be null');
        }
        $this->container['is_truck'] = $is_truck;

        return $this;
    }

    /**
     * Gets is_carrier_document
     *
     * @return bool|null
     */
    public function getIsCarrierDocument()
    {
        return $this->container['is_carrier_document'];
    }

    /**
     * Sets is_carrier_document
     *
     * @param bool|null $is_carrier_document Только заказы в которых перевозчик прикрепил документы.
     *
     * @return self
     */
    public function setIsCarrierDocument($is_carrier_document)
    {
        if (is_null($is_carrier_document)) {
            throw new \InvalidArgumentException('non-nullable is_carrier_document cannot be null');
        }
        $this->container['is_carrier_document'] = $is_carrier_document;

        return $this;
    }

    /**
     * Gets is_general_partner_document
     *
     * @return bool|null
     */
    public function getIsGeneralPartnerDocument()
    {
        return $this->container['is_general_partner_document'];
    }

    /**
     * Sets is_general_partner_document
     *
     * @param bool|null $is_general_partner_document Только заказы в которых ГП прикрепил документы.
     *
     * @return self
     */
    public function setIsGeneralPartnerDocument($is_general_partner_document)
    {
        if (is_null($is_general_partner_document)) {
            throw new \InvalidArgumentException('non-nullable is_general_partner_document cannot be null');
        }
        $this->container['is_general_partner_document'] = $is_general_partner_document;

        return $this;
    }

    /**
     * Gets branch_id
     *
     * @return int|null
     */
    public function getBranchId()
    {
        return $this->container['branch_id'];
    }

    /**
     * Sets branch_id
     *
     * @param int|null $branch_id Заказы дочерней компании.
     *
     * @return self
     */
    public function setBranchId($branch_id)
    {
        if (is_null($branch_id)) {
            throw new \InvalidArgumentException('non-nullable branch_id cannot be null');
        }
        $this->container['branch_id'] = $branch_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


