<?php
/**
 * OrderAccess
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * OrderAccess Class Doc Comment
 *
 * @category Class
 * @description Описание доступов к заказу
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderAccess implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'order-access';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'clone' => 'bool',
        'edit' => 'bool',
        'update' => 'bool',
        'delete' => 'bool',
        'point' => 'bool',
        'point_swap' => 'bool',
        'update_client_access' => 'bool',
        'delete_client_access' => 'bool',
        'view_client_access' => 'bool',
        'update_contact' => 'bool',
        'delete_contact' => 'bool',
        'view_contact' => 'bool',
        'update_tag' => 'bool',
        'view_tag' => 'bool',
        'validate' => 'bool',
        'publish' => 'bool',
        'view' => 'bool',
        'create_archive' => 'bool',
        'create_unarchive' => 'bool',
        'create_pin' => 'bool',
        'delete_pin' => 'bool',
        'bid_last' => 'bool',
        'view_bid' => 'bool',
        'create_bid' => 'bool',
        'create_carrier_refuse' => 'bool',
        'create_consignor_refuse' => 'bool',
        'create_refuse' => 'bool',
        'create_refuse_appeal' => 'bool',
        'create_refuse_cancel' => 'bool',
        'proposal' => 'bool',
        'proxy_consignor_carrier' => 'bool',
        'proxy_consignor_carrier_with_facsimile' => 'bool',
        'proxy_template' => 'bool',
        'create_proxy' => 'bool',
        'view_proxy' => 'bool',
        'create_document' => 'bool',
        'view_document' => 'bool',
        'update_carrier_document_tracking_number' => 'bool',
        'view_carrier_document_tracking_number' => 'bool',
        'cancel' => 'bool',
        'use_broker' => 'bool',
        'update_truck_driver' => 'bool',
        'create_comment' => 'bool',
        'view_comment' => 'bool',
        'create_moderation' => 'bool',
        'delete_moderation' => 'bool',
        'create_moderation_reject' => 'bool',
        'create_moderation_approve' => 'bool',
        'create_general_partner_document' => 'bool',
        'create_general_partner_template_approve' => 'bool',
        'view_general_partner_proxy_template' => 'bool',
        'view_general_partner_proposal_template' => 'bool',
        'create_repeat' => 'bool',
        'view_pin' => 'bool',
        'view_visitor' => 'bool',
        'view_monitoring' => 'bool',
        'create_monitoring' => 'bool',
        'view_chat' => 'bool',
        'view_offer' => 'bool',
        'create_offer' => 'bool',
        'view_offer_excel' => 'bool',
        'create_consignor_document' => 'bool',
        'view_consignor_document' => 'bool',
        'update_carrier_contacts' => 'bool',
        'create_finishing' => 'bool',
        'update_invoice_gp_carrier' => 'bool',
        'view_invoice_gp_carrier' => 'bool',
        'view_client_list' => 'bool',
        'waybill_view' => 'bool',
        'waybill_gp_view' => 'bool',
        'waybill_edit' => 'bool',
        'view_ecn' => 'bool',
        'view_ecn_list' => 'bool',
        'create_ecn' => 'bool',
        'update_proxy_consignor_carrier_additional_info' => 'bool',
        'view_proxy_consignor_carrier_additional_info' => 'bool',
        'view_download_expeditor_assignment' => 'bool',
        'view_download_request_assignment' => 'bool',
        'view_expeditor_payment' => 'bool',
        'update_expeditor_payment' => 'bool',
        'view_simple_document' => 'bool',
        'view_signed_documents' => 'bool',
        'create_customer_patch' => 'bool',
        'create_truck_driver_patch' => 'bool',
        'create_refuse_revert_patch' => 'bool',
        'view_expeditor_offers' => 'bool',
        'create_expeditor_offer' => 'bool',
        'create_carrier_ask' => 'bool',
        'view_expeditor_recommendations' => 'bool',
        'create_expeditor_offer_negotiate' => 'bool',
        'create_expeditor_order_negotiate' => 'bool',
        'create_carrier_sign' => 'bool',
        'create_downtime_claim' => 'bool',
        'view_claim_list' => 'bool',
        'create_order_reuse' => 'bool',
        'view_consignor_expeditor_payment' => 'bool',
        'view_act_non_delivery_car' => 'bool',
        'create_customer_docs_tracking' => 'bool',
        'create_act_non_delivery_car' => 'bool',
        'create_act_non_delivery_car_cancel' => 'bool',
        'view_digital_act_non_delivery_car' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'clone' => null,
        'edit' => null,
        'update' => null,
        'delete' => null,
        'point' => null,
        'point_swap' => null,
        'update_client_access' => null,
        'delete_client_access' => null,
        'view_client_access' => null,
        'update_contact' => null,
        'delete_contact' => null,
        'view_contact' => null,
        'update_tag' => null,
        'view_tag' => null,
        'validate' => null,
        'publish' => null,
        'view' => null,
        'create_archive' => null,
        'create_unarchive' => null,
        'create_pin' => null,
        'delete_pin' => null,
        'bid_last' => null,
        'view_bid' => null,
        'create_bid' => null,
        'create_carrier_refuse' => null,
        'create_consignor_refuse' => null,
        'create_refuse' => null,
        'create_refuse_appeal' => null,
        'create_refuse_cancel' => null,
        'proposal' => null,
        'proxy_consignor_carrier' => null,
        'proxy_consignor_carrier_with_facsimile' => null,
        'proxy_template' => null,
        'create_proxy' => null,
        'view_proxy' => null,
        'create_document' => null,
        'view_document' => null,
        'update_carrier_document_tracking_number' => null,
        'view_carrier_document_tracking_number' => null,
        'cancel' => null,
        'use_broker' => null,
        'update_truck_driver' => null,
        'create_comment' => null,
        'view_comment' => null,
        'create_moderation' => null,
        'delete_moderation' => null,
        'create_moderation_reject' => null,
        'create_moderation_approve' => null,
        'create_general_partner_document' => null,
        'create_general_partner_template_approve' => null,
        'view_general_partner_proxy_template' => null,
        'view_general_partner_proposal_template' => null,
        'create_repeat' => null,
        'view_pin' => null,
        'view_visitor' => null,
        'view_monitoring' => null,
        'create_monitoring' => null,
        'view_chat' => null,
        'view_offer' => null,
        'create_offer' => null,
        'view_offer_excel' => null,
        'create_consignor_document' => null,
        'view_consignor_document' => null,
        'update_carrier_contacts' => null,
        'create_finishing' => null,
        'update_invoice_gp_carrier' => null,
        'view_invoice_gp_carrier' => null,
        'view_client_list' => null,
        'waybill_view' => null,
        'waybill_gp_view' => null,
        'waybill_edit' => null,
        'view_ecn' => null,
        'view_ecn_list' => null,
        'create_ecn' => null,
        'update_proxy_consignor_carrier_additional_info' => null,
        'view_proxy_consignor_carrier_additional_info' => null,
        'view_download_expeditor_assignment' => null,
        'view_download_request_assignment' => null,
        'view_expeditor_payment' => null,
        'update_expeditor_payment' => null,
        'view_simple_document' => null,
        'view_signed_documents' => null,
        'create_customer_patch' => null,
        'create_truck_driver_patch' => null,
        'create_refuse_revert_patch' => null,
        'view_expeditor_offers' => null,
        'create_expeditor_offer' => null,
        'create_carrier_ask' => null,
        'view_expeditor_recommendations' => null,
        'create_expeditor_offer_negotiate' => null,
        'create_expeditor_order_negotiate' => null,
        'create_carrier_sign' => null,
        'create_downtime_claim' => null,
        'view_claim_list' => null,
        'create_order_reuse' => null,
        'view_consignor_expeditor_payment' => null,
        'view_act_non_delivery_car' => null,
        'create_customer_docs_tracking' => null,
        'create_act_non_delivery_car' => null,
        'create_act_non_delivery_car_cancel' => null,
        'view_digital_act_non_delivery_car' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'clone' => false,
        'edit' => false,
        'update' => false,
        'delete' => false,
        'point' => false,
        'point_swap' => false,
        'update_client_access' => false,
        'delete_client_access' => false,
        'view_client_access' => false,
        'update_contact' => false,
        'delete_contact' => false,
        'view_contact' => false,
        'update_tag' => false,
        'view_tag' => false,
        'validate' => false,
        'publish' => false,
        'view' => false,
        'create_archive' => false,
        'create_unarchive' => false,
        'create_pin' => false,
        'delete_pin' => false,
        'bid_last' => false,
        'view_bid' => false,
        'create_bid' => false,
        'create_carrier_refuse' => false,
        'create_consignor_refuse' => false,
        'create_refuse' => false,
        'create_refuse_appeal' => false,
        'create_refuse_cancel' => false,
        'proposal' => false,
        'proxy_consignor_carrier' => false,
        'proxy_consignor_carrier_with_facsimile' => false,
        'proxy_template' => false,
        'create_proxy' => false,
        'view_proxy' => false,
        'create_document' => false,
        'view_document' => false,
        'update_carrier_document_tracking_number' => false,
        'view_carrier_document_tracking_number' => false,
        'cancel' => false,
        'use_broker' => false,
        'update_truck_driver' => false,
        'create_comment' => false,
        'view_comment' => false,
        'create_moderation' => false,
        'delete_moderation' => false,
        'create_moderation_reject' => false,
        'create_moderation_approve' => false,
        'create_general_partner_document' => false,
        'create_general_partner_template_approve' => false,
        'view_general_partner_proxy_template' => false,
        'view_general_partner_proposal_template' => false,
        'create_repeat' => false,
        'view_pin' => false,
        'view_visitor' => false,
        'view_monitoring' => false,
        'create_monitoring' => false,
        'view_chat' => false,
        'view_offer' => false,
        'create_offer' => false,
        'view_offer_excel' => false,
        'create_consignor_document' => false,
        'view_consignor_document' => false,
        'update_carrier_contacts' => false,
        'create_finishing' => false,
        'update_invoice_gp_carrier' => false,
        'view_invoice_gp_carrier' => false,
        'view_client_list' => false,
        'waybill_view' => false,
        'waybill_gp_view' => false,
        'waybill_edit' => false,
        'view_ecn' => false,
        'view_ecn_list' => false,
        'create_ecn' => false,
        'update_proxy_consignor_carrier_additional_info' => false,
        'view_proxy_consignor_carrier_additional_info' => false,
        'view_download_expeditor_assignment' => false,
        'view_download_request_assignment' => false,
        'view_expeditor_payment' => false,
        'update_expeditor_payment' => false,
        'view_simple_document' => false,
        'view_signed_documents' => false,
        'create_customer_patch' => false,
        'create_truck_driver_patch' => false,
        'create_refuse_revert_patch' => false,
        'view_expeditor_offers' => false,
        'create_expeditor_offer' => false,
        'create_carrier_ask' => false,
        'view_expeditor_recommendations' => false,
        'create_expeditor_offer_negotiate' => false,
        'create_expeditor_order_negotiate' => false,
        'create_carrier_sign' => false,
        'create_downtime_claim' => false,
        'view_claim_list' => false,
        'create_order_reuse' => false,
        'view_consignor_expeditor_payment' => false,
        'view_act_non_delivery_car' => false,
        'create_customer_docs_tracking' => false,
        'create_act_non_delivery_car' => false,
        'create_act_non_delivery_car_cancel' => false,
        'view_digital_act_non_delivery_car' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clone' => 'clone',
        'edit' => 'edit',
        'update' => 'update',
        'delete' => 'delete',
        'point' => 'point',
        'point_swap' => 'pointSwap',
        'update_client_access' => 'updateClientAccess',
        'delete_client_access' => 'deleteClientAccess',
        'view_client_access' => 'viewClientAccess',
        'update_contact' => 'updateContact',
        'delete_contact' => 'deleteContact',
        'view_contact' => 'viewContact',
        'update_tag' => 'updateTag',
        'view_tag' => 'viewTag',
        'validate' => 'validate',
        'publish' => 'publish',
        'view' => 'view',
        'create_archive' => 'createArchive',
        'create_unarchive' => 'createUnarchive',
        'create_pin' => 'createPin',
        'delete_pin' => 'deletePin',
        'bid_last' => 'bidLast',
        'view_bid' => 'viewBid',
        'create_bid' => 'createBid',
        'create_carrier_refuse' => 'createCarrierRefuse',
        'create_consignor_refuse' => 'createConsignorRefuse',
        'create_refuse' => 'createRefuse',
        'create_refuse_appeal' => 'createRefuseAppeal',
        'create_refuse_cancel' => 'createRefuseCancel',
        'proposal' => 'proposal',
        'proxy_consignor_carrier' => 'proxyConsignorCarrier',
        'proxy_consignor_carrier_with_facsimile' => 'proxyConsignorCarrierWithFacsimile',
        'proxy_template' => 'proxyTemplate',
        'create_proxy' => 'createProxy',
        'view_proxy' => 'viewProxy',
        'create_document' => 'createDocument',
        'view_document' => 'viewDocument',
        'update_carrier_document_tracking_number' => 'updateCarrierDocumentTrackingNumber',
        'view_carrier_document_tracking_number' => 'viewCarrierDocumentTrackingNumber',
        'cancel' => 'cancel',
        'use_broker' => 'useBroker',
        'update_truck_driver' => 'updateTruckDriver',
        'create_comment' => 'createComment',
        'view_comment' => 'viewComment',
        'create_moderation' => 'createModeration',
        'delete_moderation' => 'deleteModeration',
        'create_moderation_reject' => 'createModerationReject',
        'create_moderation_approve' => 'createModerationApprove',
        'create_general_partner_document' => 'createGeneralPartnerDocument',
        'create_general_partner_template_approve' => 'createGeneralPartnerTemplateApprove',
        'view_general_partner_proxy_template' => 'viewGeneralPartnerProxyTemplate',
        'view_general_partner_proposal_template' => 'viewGeneralPartnerProposalTemplate',
        'create_repeat' => 'createRepeat',
        'view_pin' => 'viewPin',
        'view_visitor' => 'viewVisitor',
        'view_monitoring' => 'viewMonitoring',
        'create_monitoring' => 'createMonitoring',
        'view_chat' => 'viewChat',
        'view_offer' => 'viewOffer',
        'create_offer' => 'createOffer',
        'view_offer_excel' => 'viewOfferExcel',
        'create_consignor_document' => 'createConsignorDocument',
        'view_consignor_document' => 'viewConsignorDocument',
        'update_carrier_contacts' => 'updateCarrierContacts',
        'create_finishing' => 'createFinishing',
        'update_invoice_gp_carrier' => 'updateInvoiceGpCarrier',
        'view_invoice_gp_carrier' => 'viewInvoiceGpCarrier',
        'view_client_list' => 'viewClientList',
        'waybill_view' => 'waybillView',
        'waybill_gp_view' => 'waybillGpView',
        'waybill_edit' => 'waybillEdit',
        'view_ecn' => 'viewEcn',
        'view_ecn_list' => 'viewEcnList',
        'create_ecn' => 'createEcn',
        'update_proxy_consignor_carrier_additional_info' => 'updateProxyConsignorCarrierAdditionalInfo',
        'view_proxy_consignor_carrier_additional_info' => 'viewProxyConsignorCarrierAdditionalInfo',
        'view_download_expeditor_assignment' => 'viewDownloadExpeditorAssignment',
        'view_download_request_assignment' => 'viewDownloadRequestAssignment',
        'view_expeditor_payment' => 'viewExpeditorPayment',
        'update_expeditor_payment' => 'updateExpeditorPayment',
        'view_simple_document' => 'viewSimpleDocument',
        'view_signed_documents' => 'viewSignedDocuments',
        'create_customer_patch' => 'createCustomerPatch',
        'create_truck_driver_patch' => 'createTruckDriverPatch',
        'create_refuse_revert_patch' => 'createRefuseRevertPatch',
        'view_expeditor_offers' => 'viewExpeditorOffers',
        'create_expeditor_offer' => 'createExpeditorOffer',
        'create_carrier_ask' => 'createCarrierAsk',
        'view_expeditor_recommendations' => 'viewExpeditorRecommendations',
        'create_expeditor_offer_negotiate' => 'createExpeditorOfferNegotiate',
        'create_expeditor_order_negotiate' => 'createExpeditorOrderNegotiate',
        'create_carrier_sign' => 'createCarrierSign',
        'create_downtime_claim' => 'createDowntimeClaim',
        'view_claim_list' => 'viewClaimList',
        'create_order_reuse' => 'createOrderReuse',
        'view_consignor_expeditor_payment' => 'viewConsignorExpeditorPayment',
        'view_act_non_delivery_car' => 'viewActNonDeliveryCar',
        'create_customer_docs_tracking' => 'createCustomerDocsTracking',
        'create_act_non_delivery_car' => 'createActNonDeliveryCar',
        'create_act_non_delivery_car_cancel' => 'createActNonDeliveryCarCancel',
        'view_digital_act_non_delivery_car' => 'viewDigitalActNonDeliveryCar'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clone' => 'setClone',
        'edit' => 'setEdit',
        'update' => 'setUpdate',
        'delete' => 'setDelete',
        'point' => 'setPoint',
        'point_swap' => 'setPointSwap',
        'update_client_access' => 'setUpdateClientAccess',
        'delete_client_access' => 'setDeleteClientAccess',
        'view_client_access' => 'setViewClientAccess',
        'update_contact' => 'setUpdateContact',
        'delete_contact' => 'setDeleteContact',
        'view_contact' => 'setViewContact',
        'update_tag' => 'setUpdateTag',
        'view_tag' => 'setViewTag',
        'validate' => 'setValidate',
        'publish' => 'setPublish',
        'view' => 'setView',
        'create_archive' => 'setCreateArchive',
        'create_unarchive' => 'setCreateUnarchive',
        'create_pin' => 'setCreatePin',
        'delete_pin' => 'setDeletePin',
        'bid_last' => 'setBidLast',
        'view_bid' => 'setViewBid',
        'create_bid' => 'setCreateBid',
        'create_carrier_refuse' => 'setCreateCarrierRefuse',
        'create_consignor_refuse' => 'setCreateConsignorRefuse',
        'create_refuse' => 'setCreateRefuse',
        'create_refuse_appeal' => 'setCreateRefuseAppeal',
        'create_refuse_cancel' => 'setCreateRefuseCancel',
        'proposal' => 'setProposal',
        'proxy_consignor_carrier' => 'setProxyConsignorCarrier',
        'proxy_consignor_carrier_with_facsimile' => 'setProxyConsignorCarrierWithFacsimile',
        'proxy_template' => 'setProxyTemplate',
        'create_proxy' => 'setCreateProxy',
        'view_proxy' => 'setViewProxy',
        'create_document' => 'setCreateDocument',
        'view_document' => 'setViewDocument',
        'update_carrier_document_tracking_number' => 'setUpdateCarrierDocumentTrackingNumber',
        'view_carrier_document_tracking_number' => 'setViewCarrierDocumentTrackingNumber',
        'cancel' => 'setCancel',
        'use_broker' => 'setUseBroker',
        'update_truck_driver' => 'setUpdateTruckDriver',
        'create_comment' => 'setCreateComment',
        'view_comment' => 'setViewComment',
        'create_moderation' => 'setCreateModeration',
        'delete_moderation' => 'setDeleteModeration',
        'create_moderation_reject' => 'setCreateModerationReject',
        'create_moderation_approve' => 'setCreateModerationApprove',
        'create_general_partner_document' => 'setCreateGeneralPartnerDocument',
        'create_general_partner_template_approve' => 'setCreateGeneralPartnerTemplateApprove',
        'view_general_partner_proxy_template' => 'setViewGeneralPartnerProxyTemplate',
        'view_general_partner_proposal_template' => 'setViewGeneralPartnerProposalTemplate',
        'create_repeat' => 'setCreateRepeat',
        'view_pin' => 'setViewPin',
        'view_visitor' => 'setViewVisitor',
        'view_monitoring' => 'setViewMonitoring',
        'create_monitoring' => 'setCreateMonitoring',
        'view_chat' => 'setViewChat',
        'view_offer' => 'setViewOffer',
        'create_offer' => 'setCreateOffer',
        'view_offer_excel' => 'setViewOfferExcel',
        'create_consignor_document' => 'setCreateConsignorDocument',
        'view_consignor_document' => 'setViewConsignorDocument',
        'update_carrier_contacts' => 'setUpdateCarrierContacts',
        'create_finishing' => 'setCreateFinishing',
        'update_invoice_gp_carrier' => 'setUpdateInvoiceGpCarrier',
        'view_invoice_gp_carrier' => 'setViewInvoiceGpCarrier',
        'view_client_list' => 'setViewClientList',
        'waybill_view' => 'setWaybillView',
        'waybill_gp_view' => 'setWaybillGpView',
        'waybill_edit' => 'setWaybillEdit',
        'view_ecn' => 'setViewEcn',
        'view_ecn_list' => 'setViewEcnList',
        'create_ecn' => 'setCreateEcn',
        'update_proxy_consignor_carrier_additional_info' => 'setUpdateProxyConsignorCarrierAdditionalInfo',
        'view_proxy_consignor_carrier_additional_info' => 'setViewProxyConsignorCarrierAdditionalInfo',
        'view_download_expeditor_assignment' => 'setViewDownloadExpeditorAssignment',
        'view_download_request_assignment' => 'setViewDownloadRequestAssignment',
        'view_expeditor_payment' => 'setViewExpeditorPayment',
        'update_expeditor_payment' => 'setUpdateExpeditorPayment',
        'view_simple_document' => 'setViewSimpleDocument',
        'view_signed_documents' => 'setViewSignedDocuments',
        'create_customer_patch' => 'setCreateCustomerPatch',
        'create_truck_driver_patch' => 'setCreateTruckDriverPatch',
        'create_refuse_revert_patch' => 'setCreateRefuseRevertPatch',
        'view_expeditor_offers' => 'setViewExpeditorOffers',
        'create_expeditor_offer' => 'setCreateExpeditorOffer',
        'create_carrier_ask' => 'setCreateCarrierAsk',
        'view_expeditor_recommendations' => 'setViewExpeditorRecommendations',
        'create_expeditor_offer_negotiate' => 'setCreateExpeditorOfferNegotiate',
        'create_expeditor_order_negotiate' => 'setCreateExpeditorOrderNegotiate',
        'create_carrier_sign' => 'setCreateCarrierSign',
        'create_downtime_claim' => 'setCreateDowntimeClaim',
        'view_claim_list' => 'setViewClaimList',
        'create_order_reuse' => 'setCreateOrderReuse',
        'view_consignor_expeditor_payment' => 'setViewConsignorExpeditorPayment',
        'view_act_non_delivery_car' => 'setViewActNonDeliveryCar',
        'create_customer_docs_tracking' => 'setCreateCustomerDocsTracking',
        'create_act_non_delivery_car' => 'setCreateActNonDeliveryCar',
        'create_act_non_delivery_car_cancel' => 'setCreateActNonDeliveryCarCancel',
        'view_digital_act_non_delivery_car' => 'setViewDigitalActNonDeliveryCar'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clone' => 'getClone',
        'edit' => 'getEdit',
        'update' => 'getUpdate',
        'delete' => 'getDelete',
        'point' => 'getPoint',
        'point_swap' => 'getPointSwap',
        'update_client_access' => 'getUpdateClientAccess',
        'delete_client_access' => 'getDeleteClientAccess',
        'view_client_access' => 'getViewClientAccess',
        'update_contact' => 'getUpdateContact',
        'delete_contact' => 'getDeleteContact',
        'view_contact' => 'getViewContact',
        'update_tag' => 'getUpdateTag',
        'view_tag' => 'getViewTag',
        'validate' => 'getValidate',
        'publish' => 'getPublish',
        'view' => 'getView',
        'create_archive' => 'getCreateArchive',
        'create_unarchive' => 'getCreateUnarchive',
        'create_pin' => 'getCreatePin',
        'delete_pin' => 'getDeletePin',
        'bid_last' => 'getBidLast',
        'view_bid' => 'getViewBid',
        'create_bid' => 'getCreateBid',
        'create_carrier_refuse' => 'getCreateCarrierRefuse',
        'create_consignor_refuse' => 'getCreateConsignorRefuse',
        'create_refuse' => 'getCreateRefuse',
        'create_refuse_appeal' => 'getCreateRefuseAppeal',
        'create_refuse_cancel' => 'getCreateRefuseCancel',
        'proposal' => 'getProposal',
        'proxy_consignor_carrier' => 'getProxyConsignorCarrier',
        'proxy_consignor_carrier_with_facsimile' => 'getProxyConsignorCarrierWithFacsimile',
        'proxy_template' => 'getProxyTemplate',
        'create_proxy' => 'getCreateProxy',
        'view_proxy' => 'getViewProxy',
        'create_document' => 'getCreateDocument',
        'view_document' => 'getViewDocument',
        'update_carrier_document_tracking_number' => 'getUpdateCarrierDocumentTrackingNumber',
        'view_carrier_document_tracking_number' => 'getViewCarrierDocumentTrackingNumber',
        'cancel' => 'getCancel',
        'use_broker' => 'getUseBroker',
        'update_truck_driver' => 'getUpdateTruckDriver',
        'create_comment' => 'getCreateComment',
        'view_comment' => 'getViewComment',
        'create_moderation' => 'getCreateModeration',
        'delete_moderation' => 'getDeleteModeration',
        'create_moderation_reject' => 'getCreateModerationReject',
        'create_moderation_approve' => 'getCreateModerationApprove',
        'create_general_partner_document' => 'getCreateGeneralPartnerDocument',
        'create_general_partner_template_approve' => 'getCreateGeneralPartnerTemplateApprove',
        'view_general_partner_proxy_template' => 'getViewGeneralPartnerProxyTemplate',
        'view_general_partner_proposal_template' => 'getViewGeneralPartnerProposalTemplate',
        'create_repeat' => 'getCreateRepeat',
        'view_pin' => 'getViewPin',
        'view_visitor' => 'getViewVisitor',
        'view_monitoring' => 'getViewMonitoring',
        'create_monitoring' => 'getCreateMonitoring',
        'view_chat' => 'getViewChat',
        'view_offer' => 'getViewOffer',
        'create_offer' => 'getCreateOffer',
        'view_offer_excel' => 'getViewOfferExcel',
        'create_consignor_document' => 'getCreateConsignorDocument',
        'view_consignor_document' => 'getViewConsignorDocument',
        'update_carrier_contacts' => 'getUpdateCarrierContacts',
        'create_finishing' => 'getCreateFinishing',
        'update_invoice_gp_carrier' => 'getUpdateInvoiceGpCarrier',
        'view_invoice_gp_carrier' => 'getViewInvoiceGpCarrier',
        'view_client_list' => 'getViewClientList',
        'waybill_view' => 'getWaybillView',
        'waybill_gp_view' => 'getWaybillGpView',
        'waybill_edit' => 'getWaybillEdit',
        'view_ecn' => 'getViewEcn',
        'view_ecn_list' => 'getViewEcnList',
        'create_ecn' => 'getCreateEcn',
        'update_proxy_consignor_carrier_additional_info' => 'getUpdateProxyConsignorCarrierAdditionalInfo',
        'view_proxy_consignor_carrier_additional_info' => 'getViewProxyConsignorCarrierAdditionalInfo',
        'view_download_expeditor_assignment' => 'getViewDownloadExpeditorAssignment',
        'view_download_request_assignment' => 'getViewDownloadRequestAssignment',
        'view_expeditor_payment' => 'getViewExpeditorPayment',
        'update_expeditor_payment' => 'getUpdateExpeditorPayment',
        'view_simple_document' => 'getViewSimpleDocument',
        'view_signed_documents' => 'getViewSignedDocuments',
        'create_customer_patch' => 'getCreateCustomerPatch',
        'create_truck_driver_patch' => 'getCreateTruckDriverPatch',
        'create_refuse_revert_patch' => 'getCreateRefuseRevertPatch',
        'view_expeditor_offers' => 'getViewExpeditorOffers',
        'create_expeditor_offer' => 'getCreateExpeditorOffer',
        'create_carrier_ask' => 'getCreateCarrierAsk',
        'view_expeditor_recommendations' => 'getViewExpeditorRecommendations',
        'create_expeditor_offer_negotiate' => 'getCreateExpeditorOfferNegotiate',
        'create_expeditor_order_negotiate' => 'getCreateExpeditorOrderNegotiate',
        'create_carrier_sign' => 'getCreateCarrierSign',
        'create_downtime_claim' => 'getCreateDowntimeClaim',
        'view_claim_list' => 'getViewClaimList',
        'create_order_reuse' => 'getCreateOrderReuse',
        'view_consignor_expeditor_payment' => 'getViewConsignorExpeditorPayment',
        'view_act_non_delivery_car' => 'getViewActNonDeliveryCar',
        'create_customer_docs_tracking' => 'getCreateCustomerDocsTracking',
        'create_act_non_delivery_car' => 'getCreateActNonDeliveryCar',
        'create_act_non_delivery_car_cancel' => 'getCreateActNonDeliveryCarCancel',
        'view_digital_act_non_delivery_car' => 'getViewDigitalActNonDeliveryCar'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('clone', $data ?? [], false);
        $this->setIfExists('edit', $data ?? [], false);
        $this->setIfExists('update', $data ?? [], false);
        $this->setIfExists('delete', $data ?? [], false);
        $this->setIfExists('point', $data ?? [], false);
        $this->setIfExists('point_swap', $data ?? [], false);
        $this->setIfExists('update_client_access', $data ?? [], false);
        $this->setIfExists('delete_client_access', $data ?? [], false);
        $this->setIfExists('view_client_access', $data ?? [], false);
        $this->setIfExists('update_contact', $data ?? [], false);
        $this->setIfExists('delete_contact', $data ?? [], false);
        $this->setIfExists('view_contact', $data ?? [], false);
        $this->setIfExists('update_tag', $data ?? [], false);
        $this->setIfExists('view_tag', $data ?? [], false);
        $this->setIfExists('validate', $data ?? [], false);
        $this->setIfExists('publish', $data ?? [], false);
        $this->setIfExists('view', $data ?? [], false);
        $this->setIfExists('create_archive', $data ?? [], false);
        $this->setIfExists('create_unarchive', $data ?? [], false);
        $this->setIfExists('create_pin', $data ?? [], false);
        $this->setIfExists('delete_pin', $data ?? [], false);
        $this->setIfExists('bid_last', $data ?? [], false);
        $this->setIfExists('view_bid', $data ?? [], false);
        $this->setIfExists('create_bid', $data ?? [], false);
        $this->setIfExists('create_carrier_refuse', $data ?? [], false);
        $this->setIfExists('create_consignor_refuse', $data ?? [], false);
        $this->setIfExists('create_refuse', $data ?? [], false);
        $this->setIfExists('create_refuse_appeal', $data ?? [], false);
        $this->setIfExists('create_refuse_cancel', $data ?? [], false);
        $this->setIfExists('proposal', $data ?? [], false);
        $this->setIfExists('proxy_consignor_carrier', $data ?? [], false);
        $this->setIfExists('proxy_consignor_carrier_with_facsimile', $data ?? [], false);
        $this->setIfExists('proxy_template', $data ?? [], false);
        $this->setIfExists('create_proxy', $data ?? [], false);
        $this->setIfExists('view_proxy', $data ?? [], false);
        $this->setIfExists('create_document', $data ?? [], false);
        $this->setIfExists('view_document', $data ?? [], false);
        $this->setIfExists('update_carrier_document_tracking_number', $data ?? [], false);
        $this->setIfExists('view_carrier_document_tracking_number', $data ?? [], false);
        $this->setIfExists('cancel', $data ?? [], false);
        $this->setIfExists('use_broker', $data ?? [], false);
        $this->setIfExists('update_truck_driver', $data ?? [], false);
        $this->setIfExists('create_comment', $data ?? [], false);
        $this->setIfExists('view_comment', $data ?? [], false);
        $this->setIfExists('create_moderation', $data ?? [], false);
        $this->setIfExists('delete_moderation', $data ?? [], false);
        $this->setIfExists('create_moderation_reject', $data ?? [], false);
        $this->setIfExists('create_moderation_approve', $data ?? [], false);
        $this->setIfExists('create_general_partner_document', $data ?? [], false);
        $this->setIfExists('create_general_partner_template_approve', $data ?? [], false);
        $this->setIfExists('view_general_partner_proxy_template', $data ?? [], false);
        $this->setIfExists('view_general_partner_proposal_template', $data ?? [], false);
        $this->setIfExists('create_repeat', $data ?? [], false);
        $this->setIfExists('view_pin', $data ?? [], false);
        $this->setIfExists('view_visitor', $data ?? [], false);
        $this->setIfExists('view_monitoring', $data ?? [], false);
        $this->setIfExists('create_monitoring', $data ?? [], false);
        $this->setIfExists('view_chat', $data ?? [], false);
        $this->setIfExists('view_offer', $data ?? [], false);
        $this->setIfExists('create_offer', $data ?? [], false);
        $this->setIfExists('view_offer_excel', $data ?? [], false);
        $this->setIfExists('create_consignor_document', $data ?? [], false);
        $this->setIfExists('view_consignor_document', $data ?? [], false);
        $this->setIfExists('update_carrier_contacts', $data ?? [], false);
        $this->setIfExists('create_finishing', $data ?? [], false);
        $this->setIfExists('update_invoice_gp_carrier', $data ?? [], false);
        $this->setIfExists('view_invoice_gp_carrier', $data ?? [], false);
        $this->setIfExists('view_client_list', $data ?? [], false);
        $this->setIfExists('waybill_view', $data ?? [], false);
        $this->setIfExists('waybill_gp_view', $data ?? [], false);
        $this->setIfExists('waybill_edit', $data ?? [], false);
        $this->setIfExists('view_ecn', $data ?? [], false);
        $this->setIfExists('view_ecn_list', $data ?? [], false);
        $this->setIfExists('create_ecn', $data ?? [], false);
        $this->setIfExists('update_proxy_consignor_carrier_additional_info', $data ?? [], false);
        $this->setIfExists('view_proxy_consignor_carrier_additional_info', $data ?? [], false);
        $this->setIfExists('view_download_expeditor_assignment', $data ?? [], false);
        $this->setIfExists('view_download_request_assignment', $data ?? [], false);
        $this->setIfExists('view_expeditor_payment', $data ?? [], false);
        $this->setIfExists('update_expeditor_payment', $data ?? [], false);
        $this->setIfExists('view_simple_document', $data ?? [], false);
        $this->setIfExists('view_signed_documents', $data ?? [], false);
        $this->setIfExists('create_customer_patch', $data ?? [], false);
        $this->setIfExists('create_truck_driver_patch', $data ?? [], false);
        $this->setIfExists('create_refuse_revert_patch', $data ?? [], false);
        $this->setIfExists('view_expeditor_offers', $data ?? [], false);
        $this->setIfExists('create_expeditor_offer', $data ?? [], false);
        $this->setIfExists('create_carrier_ask', $data ?? [], false);
        $this->setIfExists('view_expeditor_recommendations', $data ?? [], false);
        $this->setIfExists('create_expeditor_offer_negotiate', $data ?? [], false);
        $this->setIfExists('create_expeditor_order_negotiate', $data ?? [], false);
        $this->setIfExists('create_carrier_sign', $data ?? [], false);
        $this->setIfExists('create_downtime_claim', $data ?? [], false);
        $this->setIfExists('view_claim_list', $data ?? [], false);
        $this->setIfExists('create_order_reuse', $data ?? [], false);
        $this->setIfExists('view_consignor_expeditor_payment', $data ?? [], false);
        $this->setIfExists('view_act_non_delivery_car', $data ?? [], false);
        $this->setIfExists('create_customer_docs_tracking', $data ?? [], false);
        $this->setIfExists('create_act_non_delivery_car', $data ?? [], false);
        $this->setIfExists('create_act_non_delivery_car_cancel', $data ?? [], false);
        $this->setIfExists('view_digital_act_non_delivery_car', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clone
     *
     * @return bool|null
     */
    public function getClone()
    {
        return $this->container['clone'];
    }

    /**
     * Sets clone
     *
     * @param bool|null $clone Возможность скопировать заказ
     *
     * @return self
     */
    public function setClone($clone)
    {
        if (is_null($clone)) {
            throw new \InvalidArgumentException('non-nullable clone cannot be null');
        }
        $this->container['clone'] = $clone;

        return $this;
    }

    /**
     * Gets edit
     *
     * @return bool|null
     */
    public function getEdit()
    {
        return $this->container['edit'];
    }

    /**
     * Sets edit
     *
     * @param bool|null $edit Возможность получить данные для редактирования
     *
     * @return self
     */
    public function setEdit($edit)
    {
        if (is_null($edit)) {
            throw new \InvalidArgumentException('non-nullable edit cannot be null');
        }
        $this->container['edit'] = $edit;

        return $this;
    }

    /**
     * Gets update
     *
     * @return bool|null
     */
    public function getUpdate()
    {
        return $this->container['update'];
    }

    /**
     * Sets update
     *
     * @param bool|null $update Возможность сохранить данные заказа
     *
     * @return self
     */
    public function setUpdate($update)
    {
        if (is_null($update)) {
            throw new \InvalidArgumentException('non-nullable update cannot be null');
        }
        $this->container['update'] = $update;

        return $this;
    }

    /**
     * Gets delete
     *
     * @return bool|null
     */
    public function getDelete()
    {
        return $this->container['delete'];
    }

    /**
     * Sets delete
     *
     * @param bool|null $delete Возможность удалить заказ
     *
     * @return self
     */
    public function setDelete($delete)
    {
        if (is_null($delete)) {
            throw new \InvalidArgumentException('non-nullable delete cannot be null');
        }
        $this->container['delete'] = $delete;

        return $this;
    }

    /**
     * Gets point
     *
     * @return bool|null
     */
    public function getPoint()
    {
        return $this->container['point'];
    }

    /**
     * Sets point
     *
     * @param bool|null $point Возможность добавить точку
     *
     * @return self
     */
    public function setPoint($point)
    {
        if (is_null($point)) {
            throw new \InvalidArgumentException('non-nullable point cannot be null');
        }
        $this->container['point'] = $point;

        return $this;
    }

    /**
     * Gets point_swap
     *
     * @return bool|null
     */
    public function getPointSwap()
    {
        return $this->container['point_swap'];
    }

    /**
     * Sets point_swap
     *
     * @param bool|null $point_swap Возможность сортировать точки местами
     *
     * @return self
     */
    public function setPointSwap($point_swap)
    {
        if (is_null($point_swap)) {
            throw new \InvalidArgumentException('non-nullable point_swap cannot be null');
        }
        $this->container['point_swap'] = $point_swap;

        return $this;
    }

    /**
     * Gets update_client_access
     *
     * @return bool|null
     */
    public function getUpdateClientAccess()
    {
        return $this->container['update_client_access'];
    }

    /**
     * Sets update_client_access
     *
     * @param bool|null $update_client_access Добавить клиентов к списку
     *
     * @return self
     */
    public function setUpdateClientAccess($update_client_access)
    {
        if (is_null($update_client_access)) {
            throw new \InvalidArgumentException('non-nullable update_client_access cannot be null');
        }
        $this->container['update_client_access'] = $update_client_access;

        return $this;
    }

    /**
     * Gets delete_client_access
     *
     * @return bool|null
     */
    public function getDeleteClientAccess()
    {
        return $this->container['delete_client_access'];
    }

    /**
     * Sets delete_client_access
     *
     * @param bool|null $delete_client_access Удалить клиентов из списка
     *
     * @return self
     */
    public function setDeleteClientAccess($delete_client_access)
    {
        if (is_null($delete_client_access)) {
            throw new \InvalidArgumentException('non-nullable delete_client_access cannot be null');
        }
        $this->container['delete_client_access'] = $delete_client_access;

        return $this;
    }

    /**
     * Gets view_client_access
     *
     * @return bool|null
     */
    public function getViewClientAccess()
    {
        return $this->container['view_client_access'];
    }

    /**
     * Sets view_client_access
     *
     * @param bool|null $view_client_access Получить список клиентов
     *
     * @return self
     */
    public function setViewClientAccess($view_client_access)
    {
        if (is_null($view_client_access)) {
            throw new \InvalidArgumentException('non-nullable view_client_access cannot be null');
        }
        $this->container['view_client_access'] = $view_client_access;

        return $this;
    }

    /**
     * Gets update_contact
     *
     * @return bool|null
     */
    public function getUpdateContact()
    {
        return $this->container['update_contact'];
    }

    /**
     * Sets update_contact
     *
     * @param bool|null $update_contact Добавить контакты к списку
     *
     * @return self
     */
    public function setUpdateContact($update_contact)
    {
        if (is_null($update_contact)) {
            throw new \InvalidArgumentException('non-nullable update_contact cannot be null');
        }
        $this->container['update_contact'] = $update_contact;

        return $this;
    }

    /**
     * Gets delete_contact
     *
     * @return bool|null
     */
    public function getDeleteContact()
    {
        return $this->container['delete_contact'];
    }

    /**
     * Sets delete_contact
     *
     * @param bool|null $delete_contact Удалить контакты из списка
     *
     * @return self
     */
    public function setDeleteContact($delete_contact)
    {
        if (is_null($delete_contact)) {
            throw new \InvalidArgumentException('non-nullable delete_contact cannot be null');
        }
        $this->container['delete_contact'] = $delete_contact;

        return $this;
    }

    /**
     * Gets view_contact
     *
     * @return bool|null
     */
    public function getViewContact()
    {
        return $this->container['view_contact'];
    }

    /**
     * Sets view_contact
     *
     * @param bool|null $view_contact Получить список контактов
     *
     * @return self
     */
    public function setViewContact($view_contact)
    {
        if (is_null($view_contact)) {
            throw new \InvalidArgumentException('non-nullable view_contact cannot be null');
        }
        $this->container['view_contact'] = $view_contact;

        return $this;
    }

    /**
     * Gets update_tag
     *
     * @return bool|null
     */
    public function getUpdateTag()
    {
        return $this->container['update_tag'];
    }

    /**
     * Sets update_tag
     *
     * @param bool|null $update_tag Обновить тэги
     *
     * @return self
     */
    public function setUpdateTag($update_tag)
    {
        if (is_null($update_tag)) {
            throw new \InvalidArgumentException('non-nullable update_tag cannot be null');
        }
        $this->container['update_tag'] = $update_tag;

        return $this;
    }

    /**
     * Gets view_tag
     *
     * @return bool|null
     */
    public function getViewTag()
    {
        return $this->container['view_tag'];
    }

    /**
     * Sets view_tag
     *
     * @param bool|null $view_tag Получить тэги
     *
     * @return self
     */
    public function setViewTag($view_tag)
    {
        if (is_null($view_tag)) {
            throw new \InvalidArgumentException('non-nullable view_tag cannot be null');
        }
        $this->container['view_tag'] = $view_tag;

        return $this;
    }

    /**
     * Gets validate
     *
     * @return bool|null
     */
    public function getValidate()
    {
        return $this->container['validate'];
    }

    /**
     * Sets validate
     *
     * @param bool|null $validate Валидация заказа
     *
     * @return self
     */
    public function setValidate($validate)
    {
        if (is_null($validate)) {
            throw new \InvalidArgumentException('non-nullable validate cannot be null');
        }
        $this->container['validate'] = $validate;

        return $this;
    }

    /**
     * Gets publish
     *
     * @return bool|null
     */
    public function getPublish()
    {
        return $this->container['publish'];
    }

    /**
     * Sets publish
     *
     * @param bool|null $publish Публикация заказа
     *
     * @return self
     */
    public function setPublish($publish)
    {
        if (is_null($publish)) {
            throw new \InvalidArgumentException('non-nullable publish cannot be null');
        }
        $this->container['publish'] = $publish;

        return $this;
    }

    /**
     * Gets view
     *
     * @return bool|null
     */
    public function getView()
    {
        return $this->container['view'];
    }

    /**
     * Sets view
     *
     * @param bool|null $view Просмотр карточки заказа
     *
     * @return self
     */
    public function setView($view)
    {
        if (is_null($view)) {
            throw new \InvalidArgumentException('non-nullable view cannot be null');
        }
        $this->container['view'] = $view;

        return $this;
    }

    /**
     * Gets create_archive
     *
     * @return bool|null
     */
    public function getCreateArchive()
    {
        return $this->container['create_archive'];
    }

    /**
     * Sets create_archive
     *
     * @param bool|null $create_archive Добавить в архив
     *
     * @return self
     */
    public function setCreateArchive($create_archive)
    {
        if (is_null($create_archive)) {
            throw new \InvalidArgumentException('non-nullable create_archive cannot be null');
        }
        $this->container['create_archive'] = $create_archive;

        return $this;
    }

    /**
     * Gets create_unarchive
     *
     * @return bool|null
     */
    public function getCreateUnarchive()
    {
        return $this->container['create_unarchive'];
    }

    /**
     * Sets create_unarchive
     *
     * @param bool|null $create_unarchive Вернуть заказ из архива в работу
     *
     * @return self
     */
    public function setCreateUnarchive($create_unarchive)
    {
        if (is_null($create_unarchive)) {
            throw new \InvalidArgumentException('non-nullable create_unarchive cannot be null');
        }
        $this->container['create_unarchive'] = $create_unarchive;

        return $this;
    }

    /**
     * Gets create_pin
     *
     * @return bool|null
     */
    public function getCreatePin()
    {
        return $this->container['create_pin'];
    }

    /**
     * Sets create_pin
     *
     * @param bool|null $create_pin Добавить в пины
     *
     * @return self
     */
    public function setCreatePin($create_pin)
    {
        if (is_null($create_pin)) {
            throw new \InvalidArgumentException('non-nullable create_pin cannot be null');
        }
        $this->container['create_pin'] = $create_pin;

        return $this;
    }

    /**
     * Gets delete_pin
     *
     * @return bool|null
     */
    public function getDeletePin()
    {
        return $this->container['delete_pin'];
    }

    /**
     * Sets delete_pin
     *
     * @param bool|null $delete_pin Удалить из пинов
     *
     * @return self
     */
    public function setDeletePin($delete_pin)
    {
        if (is_null($delete_pin)) {
            throw new \InvalidArgumentException('non-nullable delete_pin cannot be null');
        }
        $this->container['delete_pin'] = $delete_pin;

        return $this;
    }

    /**
     * Gets bid_last
     *
     * @return bool|null
     */
    public function getBidLast()
    {
        return $this->container['bid_last'];
    }

    /**
     * Sets bid_last
     *
     * @param bool|null $bid_last Просмотр данных по ставке заказа
     *
     * @return self
     */
    public function setBidLast($bid_last)
    {
        if (is_null($bid_last)) {
            throw new \InvalidArgumentException('non-nullable bid_last cannot be null');
        }
        $this->container['bid_last'] = $bid_last;

        return $this;
    }

    /**
     * Gets view_bid
     *
     * @return bool|null
     */
    public function getViewBid()
    {
        return $this->container['view_bid'];
    }

    /**
     * Sets view_bid
     *
     * @param bool|null $view_bid Просмотреть список ставок
     *
     * @return self
     */
    public function setViewBid($view_bid)
    {
        if (is_null($view_bid)) {
            throw new \InvalidArgumentException('non-nullable view_bid cannot be null');
        }
        $this->container['view_bid'] = $view_bid;

        return $this;
    }

    /**
     * Gets create_bid
     *
     * @return bool|null
     */
    public function getCreateBid()
    {
        return $this->container['create_bid'];
    }

    /**
     * Sets create_bid
     *
     * @param bool|null $create_bid Сделать ставку
     *
     * @return self
     */
    public function setCreateBid($create_bid)
    {
        if (is_null($create_bid)) {
            throw new \InvalidArgumentException('non-nullable create_bid cannot be null');
        }
        $this->container['create_bid'] = $create_bid;

        return $this;
    }

    /**
     * Gets create_carrier_refuse
     *
     * @return bool|null
     */
    public function getCreateCarrierRefuse()
    {
        return $this->container['create_carrier_refuse'];
    }

    /**
     * Sets create_carrier_refuse
     *
     * @param bool|null $create_carrier_refuse Оформить отказ перевозчика
     *
     * @return self
     */
    public function setCreateCarrierRefuse($create_carrier_refuse)
    {
        if (is_null($create_carrier_refuse)) {
            throw new \InvalidArgumentException('non-nullable create_carrier_refuse cannot be null');
        }
        $this->container['create_carrier_refuse'] = $create_carrier_refuse;

        return $this;
    }

    /**
     * Gets create_consignor_refuse
     *
     * @return bool|null
     */
    public function getCreateConsignorRefuse()
    {
        return $this->container['create_consignor_refuse'];
    }

    /**
     * Sets create_consignor_refuse
     *
     * @param bool|null $create_consignor_refuse Оформить отказ отправителя
     *
     * @return self
     */
    public function setCreateConsignorRefuse($create_consignor_refuse)
    {
        if (is_null($create_consignor_refuse)) {
            throw new \InvalidArgumentException('non-nullable create_consignor_refuse cannot be null');
        }
        $this->container['create_consignor_refuse'] = $create_consignor_refuse;

        return $this;
    }

    /**
     * Gets create_refuse
     *
     * @return bool|null
     */
    public function getCreateRefuse()
    {
        return $this->container['create_refuse'];
    }

    /**
     * Sets create_refuse
     *
     * @param bool|null $create_refuse Оформить отказ
     *
     * @return self
     */
    public function setCreateRefuse($create_refuse)
    {
        if (is_null($create_refuse)) {
            throw new \InvalidArgumentException('non-nullable create_refuse cannot be null');
        }
        $this->container['create_refuse'] = $create_refuse;

        return $this;
    }

    /**
     * Gets create_refuse_appeal
     *
     * @return bool|null
     */
    public function getCreateRefuseAppeal()
    {
        return $this->container['create_refuse_appeal'];
    }

    /**
     * Sets create_refuse_appeal
     *
     * @param bool|null $create_refuse_appeal Оформить жалобу на отказ
     *
     * @return self
     */
    public function setCreateRefuseAppeal($create_refuse_appeal)
    {
        if (is_null($create_refuse_appeal)) {
            throw new \InvalidArgumentException('non-nullable create_refuse_appeal cannot be null');
        }
        $this->container['create_refuse_appeal'] = $create_refuse_appeal;

        return $this;
    }

    /**
     * Gets create_refuse_cancel
     *
     * @return bool|null
     */
    public function getCreateRefuseCancel()
    {
        return $this->container['create_refuse_cancel'];
    }

    /**
     * Sets create_refuse_cancel
     *
     * @param bool|null $create_refuse_cancel Отменить отказ заказа
     *
     * @return self
     */
    public function setCreateRefuseCancel($create_refuse_cancel)
    {
        if (is_null($create_refuse_cancel)) {
            throw new \InvalidArgumentException('non-nullable create_refuse_cancel cannot be null');
        }
        $this->container['create_refuse_cancel'] = $create_refuse_cancel;

        return $this;
    }

    /**
     * Gets proposal
     *
     * @return bool|null
     */
    public function getProposal()
    {
        return $this->container['proposal'];
    }

    /**
     * Sets proposal
     *
     * @param bool|null $proposal Получить ссылку на заявку на заказ
     *
     * @return self
     */
    public function setProposal($proposal)
    {
        if (is_null($proposal)) {
            throw new \InvalidArgumentException('non-nullable proposal cannot be null');
        }
        $this->container['proposal'] = $proposal;

        return $this;
    }

    /**
     * Gets proxy_consignor_carrier
     *
     * @return bool|null
     */
    public function getProxyConsignorCarrier()
    {
        return $this->container['proxy_consignor_carrier'];
    }

    /**
     * Sets proxy_consignor_carrier
     *
     * @param bool|null $proxy_consignor_carrier Получить ссылку на доверенность на заказ для заказчика
     *
     * @return self
     */
    public function setProxyConsignorCarrier($proxy_consignor_carrier)
    {
        if (is_null($proxy_consignor_carrier)) {
            throw new \InvalidArgumentException('non-nullable proxy_consignor_carrier cannot be null');
        }
        $this->container['proxy_consignor_carrier'] = $proxy_consignor_carrier;

        return $this;
    }

    /**
     * Gets proxy_consignor_carrier_with_facsimile
     *
     * @return bool|null
     */
    public function getProxyConsignorCarrierWithFacsimile()
    {
        return $this->container['proxy_consignor_carrier_with_facsimile'];
    }

    /**
     * Sets proxy_consignor_carrier_with_facsimile
     *
     * @param bool|null $proxy_consignor_carrier_with_facsimile Получить ссылку на доверенность на заказ для заказчика с факсимиле
     *
     * @return self
     */
    public function setProxyConsignorCarrierWithFacsimile($proxy_consignor_carrier_with_facsimile)
    {
        if (is_null($proxy_consignor_carrier_with_facsimile)) {
            throw new \InvalidArgumentException('non-nullable proxy_consignor_carrier_with_facsimile cannot be null');
        }
        $this->container['proxy_consignor_carrier_with_facsimile'] = $proxy_consignor_carrier_with_facsimile;

        return $this;
    }

    /**
     * Gets proxy_template
     *
     * @return bool|null
     */
    public function getProxyTemplate()
    {
        return $this->container['proxy_template'];
    }

    /**
     * Sets proxy_template
     *
     * @param bool|null $proxy_template Получить ссылку на шаблон доверенности на заказ
     *
     * @return self
     */
    public function setProxyTemplate($proxy_template)
    {
        if (is_null($proxy_template)) {
            throw new \InvalidArgumentException('non-nullable proxy_template cannot be null');
        }
        $this->container['proxy_template'] = $proxy_template;

        return $this;
    }

    /**
     * Gets create_proxy
     *
     * @return bool|null
     */
    public function getCreateProxy()
    {
        return $this->container['create_proxy'];
    }

    /**
     * Sets create_proxy
     *
     * @param bool|null $create_proxy Возможность прикрепить документы к заказу (deprecated)
     *
     * @return self
     */
    public function setCreateProxy($create_proxy)
    {
        if (is_null($create_proxy)) {
            throw new \InvalidArgumentException('non-nullable create_proxy cannot be null');
        }
        $this->container['create_proxy'] = $create_proxy;

        return $this;
    }

    /**
     * Gets view_proxy
     *
     * @return bool|null
     */
    public function getViewProxy()
    {
        return $this->container['view_proxy'];
    }

    /**
     * Sets view_proxy
     *
     * @param bool|null $view_proxy Получить ссылку на документы (deprecated)
     *
     * @return self
     */
    public function setViewProxy($view_proxy)
    {
        if (is_null($view_proxy)) {
            throw new \InvalidArgumentException('non-nullable view_proxy cannot be null');
        }
        $this->container['view_proxy'] = $view_proxy;

        return $this;
    }

    /**
     * Gets create_document
     *
     * @return bool|null
     */
    public function getCreateDocument()
    {
        return $this->container['create_document'];
    }

    /**
     * Sets create_document
     *
     * @param bool|null $create_document Возможность прикрепить документы к заказу
     *
     * @return self
     */
    public function setCreateDocument($create_document)
    {
        if (is_null($create_document)) {
            throw new \InvalidArgumentException('non-nullable create_document cannot be null');
        }
        $this->container['create_document'] = $create_document;

        return $this;
    }

    /**
     * Gets view_document
     *
     * @return bool|null
     */
    public function getViewDocument()
    {
        return $this->container['view_document'];
    }

    /**
     * Sets view_document
     *
     * @param bool|null $view_document Получить ссылку на документы
     *
     * @return self
     */
    public function setViewDocument($view_document)
    {
        if (is_null($view_document)) {
            throw new \InvalidArgumentException('non-nullable view_document cannot be null');
        }
        $this->container['view_document'] = $view_document;

        return $this;
    }

    /**
     * Gets update_carrier_document_tracking_number
     *
     * @return bool|null
     */
    public function getUpdateCarrierDocumentTrackingNumber()
    {
        return $this->container['update_carrier_document_tracking_number'];
    }

    /**
     * Sets update_carrier_document_tracking_number
     *
     * @param bool|null $update_carrier_document_tracking_number Обновить трек-номер прикреплённых к заказу документов перевозчика
     *
     * @return self
     */
    public function setUpdateCarrierDocumentTrackingNumber($update_carrier_document_tracking_number)
    {
        if (is_null($update_carrier_document_tracking_number)) {
            throw new \InvalidArgumentException('non-nullable update_carrier_document_tracking_number cannot be null');
        }
        $this->container['update_carrier_document_tracking_number'] = $update_carrier_document_tracking_number;

        return $this;
    }

    /**
     * Gets view_carrier_document_tracking_number
     *
     * @return bool|null
     */
    public function getViewCarrierDocumentTrackingNumber()
    {
        return $this->container['view_carrier_document_tracking_number'];
    }

    /**
     * Sets view_carrier_document_tracking_number
     *
     * @param bool|null $view_carrier_document_tracking_number Просмотр трек-номера прикреплённых к заказу документов перевозчика
     *
     * @return self
     */
    public function setViewCarrierDocumentTrackingNumber($view_carrier_document_tracking_number)
    {
        if (is_null($view_carrier_document_tracking_number)) {
            throw new \InvalidArgumentException('non-nullable view_carrier_document_tracking_number cannot be null');
        }
        $this->container['view_carrier_document_tracking_number'] = $view_carrier_document_tracking_number;

        return $this;
    }

    /**
     * Gets cancel
     *
     * @return bool|null
     */
    public function getCancel()
    {
        return $this->container['cancel'];
    }

    /**
     * Sets cancel
     *
     * @param bool|null $cancel Отменить заказ
     *
     * @return self
     */
    public function setCancel($cancel)
    {
        if (is_null($cancel)) {
            throw new \InvalidArgumentException('non-nullable cancel cannot be null');
        }
        $this->container['cancel'] = $cancel;

        return $this;
    }

    /**
     * Gets use_broker
     *
     * @return bool|null
     */
    public function getUseBroker()
    {
        return $this->container['use_broker'];
    }

    /**
     * Sets use_broker
     *
     * @param bool|null $use_broker Использовать брокер
     *
     * @return self
     */
    public function setUseBroker($use_broker)
    {
        if (is_null($use_broker)) {
            throw new \InvalidArgumentException('non-nullable use_broker cannot be null');
        }
        $this->container['use_broker'] = $use_broker;

        return $this;
    }

    /**
     * Gets update_truck_driver
     *
     * @return bool|null
     */
    public function getUpdateTruckDriver()
    {
        return $this->container['update_truck_driver'];
    }

    /**
     * Sets update_truck_driver
     *
     * @param bool|null $update_truck_driver Прикрепить водителя и машину
     *
     * @return self
     */
    public function setUpdateTruckDriver($update_truck_driver)
    {
        if (is_null($update_truck_driver)) {
            throw new \InvalidArgumentException('non-nullable update_truck_driver cannot be null');
        }
        $this->container['update_truck_driver'] = $update_truck_driver;

        return $this;
    }

    /**
     * Gets create_comment
     *
     * @return bool|null
     */
    public function getCreateComment()
    {
        return $this->container['create_comment'];
    }

    /**
     * Sets create_comment
     *
     * @param bool|null $create_comment Создать комментарий заказа
     *
     * @return self
     */
    public function setCreateComment($create_comment)
    {
        if (is_null($create_comment)) {
            throw new \InvalidArgumentException('non-nullable create_comment cannot be null');
        }
        $this->container['create_comment'] = $create_comment;

        return $this;
    }

    /**
     * Gets view_comment
     *
     * @return bool|null
     */
    public function getViewComment()
    {
        return $this->container['view_comment'];
    }

    /**
     * Sets view_comment
     *
     * @param bool|null $view_comment Просмотр комментариев заказа
     *
     * @return self
     */
    public function setViewComment($view_comment)
    {
        if (is_null($view_comment)) {
            throw new \InvalidArgumentException('non-nullable view_comment cannot be null');
        }
        $this->container['view_comment'] = $view_comment;

        return $this;
    }

    /**
     * Gets create_moderation
     *
     * @return bool|null
     */
    public function getCreateModeration()
    {
        return $this->container['create_moderation'];
    }

    /**
     * Sets create_moderation
     *
     * @param bool|null $create_moderation Отправитель: Отправить на модерацию
     *
     * @return self
     */
    public function setCreateModeration($create_moderation)
    {
        if (is_null($create_moderation)) {
            throw new \InvalidArgumentException('non-nullable create_moderation cannot be null');
        }
        $this->container['create_moderation'] = $create_moderation;

        return $this;
    }

    /**
     * Gets delete_moderation
     *
     * @return bool|null
     */
    public function getDeleteModeration()
    {
        return $this->container['delete_moderation'];
    }

    /**
     * Sets delete_moderation
     *
     * @param bool|null $delete_moderation Отправитель: Забрать с модерации
     *
     * @return self
     */
    public function setDeleteModeration($delete_moderation)
    {
        if (is_null($delete_moderation)) {
            throw new \InvalidArgumentException('non-nullable delete_moderation cannot be null');
        }
        $this->container['delete_moderation'] = $delete_moderation;

        return $this;
    }

    /**
     * Gets create_moderation_reject
     *
     * @return bool|null
     */
    public function getCreateModerationReject()
    {
        return $this->container['create_moderation_reject'];
    }

    /**
     * Sets create_moderation_reject
     *
     * @param bool|null $create_moderation_reject Модератор: Отклонить заказ
     *
     * @return self
     */
    public function setCreateModerationReject($create_moderation_reject)
    {
        if (is_null($create_moderation_reject)) {
            throw new \InvalidArgumentException('non-nullable create_moderation_reject cannot be null');
        }
        $this->container['create_moderation_reject'] = $create_moderation_reject;

        return $this;
    }

    /**
     * Gets create_moderation_approve
     *
     * @return bool|null
     */
    public function getCreateModerationApprove()
    {
        return $this->container['create_moderation_approve'];
    }

    /**
     * Sets create_moderation_approve
     *
     * @param bool|null $create_moderation_approve Модератор: Одобрить заказ
     *
     * @return self
     */
    public function setCreateModerationApprove($create_moderation_approve)
    {
        if (is_null($create_moderation_approve)) {
            throw new \InvalidArgumentException('non-nullable create_moderation_approve cannot be null');
        }
        $this->container['create_moderation_approve'] = $create_moderation_approve;

        return $this;
    }

    /**
     * Gets create_general_partner_document
     *
     * @return bool|null
     */
    public function getCreateGeneralPartnerDocument()
    {
        return $this->container['create_general_partner_document'];
    }

    /**
     * Sets create_general_partner_document
     *
     * @param bool|null $create_general_partner_document Загрузить документы ГП
     *
     * @return self
     */
    public function setCreateGeneralPartnerDocument($create_general_partner_document)
    {
        if (is_null($create_general_partner_document)) {
            throw new \InvalidArgumentException('non-nullable create_general_partner_document cannot be null');
        }
        $this->container['create_general_partner_document'] = $create_general_partner_document;

        return $this;
    }

    /**
     * Gets create_general_partner_template_approve
     *
     * @return bool|null
     */
    public function getCreateGeneralPartnerTemplateApprove()
    {
        return $this->container['create_general_partner_template_approve'];
    }

    /**
     * Sets create_general_partner_template_approve
     *
     * @param bool|null $create_general_partner_template_approve Одобрить документы ГП из шаблонов
     *
     * @return self
     */
    public function setCreateGeneralPartnerTemplateApprove($create_general_partner_template_approve)
    {
        if (is_null($create_general_partner_template_approve)) {
            throw new \InvalidArgumentException('non-nullable create_general_partner_template_approve cannot be null');
        }
        $this->container['create_general_partner_template_approve'] = $create_general_partner_template_approve;

        return $this;
    }

    /**
     * Gets view_general_partner_proxy_template
     *
     * @return bool|null
     */
    public function getViewGeneralPartnerProxyTemplate()
    {
        return $this->container['view_general_partner_proxy_template'];
    }

    /**
     * Sets view_general_partner_proxy_template
     *
     * @param bool|null $view_general_partner_proxy_template Скачать доверенность для ГП
     *
     * @return self
     */
    public function setViewGeneralPartnerProxyTemplate($view_general_partner_proxy_template)
    {
        if (is_null($view_general_partner_proxy_template)) {
            throw new \InvalidArgumentException('non-nullable view_general_partner_proxy_template cannot be null');
        }
        $this->container['view_general_partner_proxy_template'] = $view_general_partner_proxy_template;

        return $this;
    }

    /**
     * Gets view_general_partner_proposal_template
     *
     * @return bool|null
     */
    public function getViewGeneralPartnerProposalTemplate()
    {
        return $this->container['view_general_partner_proposal_template'];
    }

    /**
     * Sets view_general_partner_proposal_template
     *
     * @param bool|null $view_general_partner_proposal_template Скачать заявку для ГП
     *
     * @return self
     */
    public function setViewGeneralPartnerProposalTemplate($view_general_partner_proposal_template)
    {
        if (is_null($view_general_partner_proposal_template)) {
            throw new \InvalidArgumentException('non-nullable view_general_partner_proposal_template cannot be null');
        }
        $this->container['view_general_partner_proposal_template'] = $view_general_partner_proposal_template;

        return $this;
    }

    /**
     * Gets create_repeat
     *
     * @return bool|null
     */
    public function getCreateRepeat()
    {
        return $this->container['create_repeat'];
    }

    /**
     * Sets create_repeat
     *
     * @param bool|null $create_repeat Переразместить заказ
     *
     * @return self
     */
    public function setCreateRepeat($create_repeat)
    {
        if (is_null($create_repeat)) {
            throw new \InvalidArgumentException('non-nullable create_repeat cannot be null');
        }
        $this->container['create_repeat'] = $create_repeat;

        return $this;
    }

    /**
     * Gets view_pin
     *
     * @return bool|null
     */
    public function getViewPin()
    {
        return $this->container['view_pin'];
    }

    /**
     * Sets view_pin
     *
     * @param bool|null $view_pin Просмотреть список пользователей закрепивших заказ
     *
     * @return self
     */
    public function setViewPin($view_pin)
    {
        if (is_null($view_pin)) {
            throw new \InvalidArgumentException('non-nullable view_pin cannot be null');
        }
        $this->container['view_pin'] = $view_pin;

        return $this;
    }

    /**
     * Gets view_visitor
     *
     * @return bool|null
     */
    public function getViewVisitor()
    {
        return $this->container['view_visitor'];
    }

    /**
     * Sets view_visitor
     *
     * @param bool|null $view_visitor Просмотреть список пользователей открывавших карточку заказа
     *
     * @return self
     */
    public function setViewVisitor($view_visitor)
    {
        if (is_null($view_visitor)) {
            throw new \InvalidArgumentException('non-nullable view_visitor cannot be null');
        }
        $this->container['view_visitor'] = $view_visitor;

        return $this;
    }

    /**
     * Gets view_monitoring
     *
     * @return bool|null
     */
    public function getViewMonitoring()
    {
        return $this->container['view_monitoring'];
    }

    /**
     * Sets view_monitoring
     *
     * @param bool|null $view_monitoring Просмотреть ссылки на GPS/Глонасс мониторинг
     *
     * @return self
     */
    public function setViewMonitoring($view_monitoring)
    {
        if (is_null($view_monitoring)) {
            throw new \InvalidArgumentException('non-nullable view_monitoring cannot be null');
        }
        $this->container['view_monitoring'] = $view_monitoring;

        return $this;
    }

    /**
     * Gets create_monitoring
     *
     * @return bool|null
     */
    public function getCreateMonitoring()
    {
        return $this->container['create_monitoring'];
    }

    /**
     * Sets create_monitoring
     *
     * @param bool|null $create_monitoring Добавить ссылку на GPS/Глонасс мониторинг
     *
     * @return self
     */
    public function setCreateMonitoring($create_monitoring)
    {
        if (is_null($create_monitoring)) {
            throw new \InvalidArgumentException('non-nullable create_monitoring cannot be null');
        }
        $this->container['create_monitoring'] = $create_monitoring;

        return $this;
    }

    /**
     * Gets view_chat
     *
     * @return bool|null
     */
    public function getViewChat()
    {
        return $this->container['view_chat'];
    }

    /**
     * Sets view_chat
     *
     * @param bool|null $view_chat Возможность просмотра списка чатов
     *
     * @return self
     */
    public function setViewChat($view_chat)
    {
        if (is_null($view_chat)) {
            throw new \InvalidArgumentException('non-nullable view_chat cannot be null');
        }
        $this->container['view_chat'] = $view_chat;

        return $this;
    }

    /**
     * Gets view_offer
     *
     * @return bool|null
     */
    public function getViewOffer()
    {
        return $this->container['view_offer'];
    }

    /**
     * Sets view_offer
     *
     * @param bool|null $view_offer Просмотр списка предложений перевозчиков для отправителя
     *
     * @return self
     */
    public function setViewOffer($view_offer)
    {
        if (is_null($view_offer)) {
            throw new \InvalidArgumentException('non-nullable view_offer cannot be null');
        }
        $this->container['view_offer'] = $view_offer;

        return $this;
    }

    /**
     * Gets create_offer
     *
     * @return bool|null
     */
    public function getCreateOffer()
    {
        return $this->container['create_offer'];
    }

    /**
     * Sets create_offer
     *
     * @param bool|null $create_offer Возможность установить предложение на запрос цен
     *
     * @return self
     */
    public function setCreateOffer($create_offer)
    {
        if (is_null($create_offer)) {
            throw new \InvalidArgumentException('non-nullable create_offer cannot be null');
        }
        $this->container['create_offer'] = $create_offer;

        return $this;
    }

    /**
     * Gets view_offer_excel
     *
     * @return bool|null
     */
    public function getViewOfferExcel()
    {
        return $this->container['view_offer_excel'];
    }

    /**
     * Sets view_offer_excel
     *
     * @param bool|null $view_offer_excel Возможность скачать список предложений в xlsx
     *
     * @return self
     */
    public function setViewOfferExcel($view_offer_excel)
    {
        if (is_null($view_offer_excel)) {
            throw new \InvalidArgumentException('non-nullable view_offer_excel cannot be null');
        }
        $this->container['view_offer_excel'] = $view_offer_excel;

        return $this;
    }

    /**
     * Gets create_consignor_document
     *
     * @return bool|null
     */
    public function getCreateConsignorDocument()
    {
        return $this->container['create_consignor_document'];
    }

    /**
     * Sets create_consignor_document
     *
     * @param bool|null $create_consignor_document Отправитель: Возможность прикрепить документы к заказу
     *
     * @return self
     */
    public function setCreateConsignorDocument($create_consignor_document)
    {
        if (is_null($create_consignor_document)) {
            throw new \InvalidArgumentException('non-nullable create_consignor_document cannot be null');
        }
        $this->container['create_consignor_document'] = $create_consignor_document;

        return $this;
    }

    /**
     * Gets view_consignor_document
     *
     * @return bool|null
     */
    public function getViewConsignorDocument()
    {
        return $this->container['view_consignor_document'];
    }

    /**
     * Sets view_consignor_document
     *
     * @param bool|null $view_consignor_document Получить ссылку на документы отправителя
     *
     * @return self
     */
    public function setViewConsignorDocument($view_consignor_document)
    {
        if (is_null($view_consignor_document)) {
            throw new \InvalidArgumentException('non-nullable view_consignor_document cannot be null');
        }
        $this->container['view_consignor_document'] = $view_consignor_document;

        return $this;
    }

    /**
     * Gets update_carrier_contacts
     *
     * @return bool|null
     */
    public function getUpdateCarrierContacts()
    {
        return $this->container['update_carrier_contacts'];
    }

    /**
     * Sets update_carrier_contacts
     *
     * @param bool|null $update_carrier_contacts Возможность отредактировать кураторов перевозика у заказа
     *
     * @return self
     */
    public function setUpdateCarrierContacts($update_carrier_contacts)
    {
        if (is_null($update_carrier_contacts)) {
            throw new \InvalidArgumentException('non-nullable update_carrier_contacts cannot be null');
        }
        $this->container['update_carrier_contacts'] = $update_carrier_contacts;

        return $this;
    }

    /**
     * Gets create_finishing
     *
     * @return bool|null
     */
    public function getCreateFinishing()
    {
        return $this->container['create_finishing'];
    }

    /**
     * Sets create_finishing
     *
     * @param bool|null $create_finishing Возможность завершить заказ досрочно
     *
     * @return self
     */
    public function setCreateFinishing($create_finishing)
    {
        if (is_null($create_finishing)) {
            throw new \InvalidArgumentException('non-nullable create_finishing cannot be null');
        }
        $this->container['create_finishing'] = $create_finishing;

        return $this;
    }

    /**
     * Gets update_invoice_gp_carrier
     *
     * @return bool|null
     */
    public function getUpdateInvoiceGpCarrier()
    {
        return $this->container['update_invoice_gp_carrier'];
    }

    /**
     * Sets update_invoice_gp_carrier
     *
     * @param bool|null $update_invoice_gp_carrier Возможность присылать информацию об оплате от генерального партнера для перевозчика
     *
     * @return self
     */
    public function setUpdateInvoiceGpCarrier($update_invoice_gp_carrier)
    {
        if (is_null($update_invoice_gp_carrier)) {
            throw new \InvalidArgumentException('non-nullable update_invoice_gp_carrier cannot be null');
        }
        $this->container['update_invoice_gp_carrier'] = $update_invoice_gp_carrier;

        return $this;
    }

    /**
     * Gets view_invoice_gp_carrier
     *
     * @return bool|null
     */
    public function getViewInvoiceGpCarrier()
    {
        return $this->container['view_invoice_gp_carrier'];
    }

    /**
     * Sets view_invoice_gp_carrier
     *
     * @param bool|null $view_invoice_gp_carrier Возможность просмотра информацию об оплате от генерального партнера для перевозчика
     *
     * @return self
     */
    public function setViewInvoiceGpCarrier($view_invoice_gp_carrier)
    {
        if (is_null($view_invoice_gp_carrier)) {
            throw new \InvalidArgumentException('non-nullable view_invoice_gp_carrier cannot be null');
        }
        $this->container['view_invoice_gp_carrier'] = $view_invoice_gp_carrier;

        return $this;
    }

    /**
     * Gets view_client_list
     *
     * @return bool|null
     */
    public function getViewClientList()
    {
        return $this->container['view_client_list'];
    }

    /**
     * Sets view_client_list
     *
     * @param bool|null $view_client_list Возможность видеть список избранных перевозчиков
     *
     * @return self
     */
    public function setViewClientList($view_client_list)
    {
        if (is_null($view_client_list)) {
            throw new \InvalidArgumentException('non-nullable view_client_list cannot be null');
        }
        $this->container['view_client_list'] = $view_client_list;

        return $this;
    }

    /**
     * Gets waybill_view
     *
     * @return bool|null
     */
    public function getWaybillView()
    {
        return $this->container['waybill_view'];
    }

    /**
     * Sets waybill_view
     *
     * @param bool|null $waybill_view Возможность скачивать транспортную накладную не под ГП
     *
     * @return self
     */
    public function setWaybillView($waybill_view)
    {
        if (is_null($waybill_view)) {
            throw new \InvalidArgumentException('non-nullable waybill_view cannot be null');
        }
        $this->container['waybill_view'] = $waybill_view;

        return $this;
    }

    /**
     * Gets waybill_gp_view
     *
     * @return bool|null
     */
    public function getWaybillGpView()
    {
        return $this->container['waybill_gp_view'];
    }

    /**
     * Sets waybill_gp_view
     *
     * @param bool|null $waybill_gp_view Возможность скачивать транспортную накладную под ГП
     *
     * @return self
     */
    public function setWaybillGpView($waybill_gp_view)
    {
        if (is_null($waybill_gp_view)) {
            throw new \InvalidArgumentException('non-nullable waybill_gp_view cannot be null');
        }
        $this->container['waybill_gp_view'] = $waybill_gp_view;

        return $this;
    }

    /**
     * Gets waybill_edit
     *
     * @return bool|null
     */
    public function getWaybillEdit()
    {
        return $this->container['waybill_edit'];
    }

    /**
     * Sets waybill_edit
     *
     * @param bool|null $waybill_edit Возможность редактировать транспортную накладную
     *
     * @return self
     */
    public function setWaybillEdit($waybill_edit)
    {
        if (is_null($waybill_edit)) {
            throw new \InvalidArgumentException('non-nullable waybill_edit cannot be null');
        }
        $this->container['waybill_edit'] = $waybill_edit;

        return $this;
    }

    /**
     * Gets view_ecn
     *
     * @return bool|null
     */
    public function getViewEcn()
    {
        return $this->container['view_ecn'];
    }

    /**
     * Sets view_ecn
     *
     * @param bool|null $view_ecn Возможность просмотра ЭТрН заказа
     *
     * @return self
     */
    public function setViewEcn($view_ecn)
    {
        if (is_null($view_ecn)) {
            throw new \InvalidArgumentException('non-nullable view_ecn cannot be null');
        }
        $this->container['view_ecn'] = $view_ecn;

        return $this;
    }

    /**
     * Gets view_ecn_list
     *
     * @return bool|null
     */
    public function getViewEcnList()
    {
        return $this->container['view_ecn_list'];
    }

    /**
     * Sets view_ecn_list
     *
     * @param bool|null $view_ecn_list Возможность просмотра списка ЭТрН заказа
     *
     * @return self
     */
    public function setViewEcnList($view_ecn_list)
    {
        if (is_null($view_ecn_list)) {
            throw new \InvalidArgumentException('non-nullable view_ecn_list cannot be null');
        }
        $this->container['view_ecn_list'] = $view_ecn_list;

        return $this;
    }

    /**
     * Gets create_ecn
     *
     * @return bool|null
     */
    public function getCreateEcn()
    {
        return $this->container['create_ecn'];
    }

    /**
     * Sets create_ecn
     *
     * @param bool|null $create_ecn Возможность создать ЭТрН заказа
     *
     * @return self
     */
    public function setCreateEcn($create_ecn)
    {
        if (is_null($create_ecn)) {
            throw new \InvalidArgumentException('non-nullable create_ecn cannot be null');
        }
        $this->container['create_ecn'] = $create_ecn;

        return $this;
    }

    /**
     * Gets update_proxy_consignor_carrier_additional_info
     *
     * @return bool|null
     */
    public function getUpdateProxyConsignorCarrierAdditionalInfo()
    {
        return $this->container['update_proxy_consignor_carrier_additional_info'];
    }

    /**
     * Sets update_proxy_consignor_carrier_additional_info
     *
     * @param bool|null $update_proxy_consignor_carrier_additional_info Возможность изменять добавочные данные для документов
     *
     * @return self
     */
    public function setUpdateProxyConsignorCarrierAdditionalInfo($update_proxy_consignor_carrier_additional_info)
    {
        if (is_null($update_proxy_consignor_carrier_additional_info)) {
            throw new \InvalidArgumentException('non-nullable update_proxy_consignor_carrier_additional_info cannot be null');
        }
        $this->container['update_proxy_consignor_carrier_additional_info'] = $update_proxy_consignor_carrier_additional_info;

        return $this;
    }

    /**
     * Gets view_proxy_consignor_carrier_additional_info
     *
     * @return bool|null
     */
    public function getViewProxyConsignorCarrierAdditionalInfo()
    {
        return $this->container['view_proxy_consignor_carrier_additional_info'];
    }

    /**
     * Sets view_proxy_consignor_carrier_additional_info
     *
     * @param bool|null $view_proxy_consignor_carrier_additional_info Возможность читать добавочные данные для документов
     *
     * @return self
     */
    public function setViewProxyConsignorCarrierAdditionalInfo($view_proxy_consignor_carrier_additional_info)
    {
        if (is_null($view_proxy_consignor_carrier_additional_info)) {
            throw new \InvalidArgumentException('non-nullable view_proxy_consignor_carrier_additional_info cannot be null');
        }
        $this->container['view_proxy_consignor_carrier_additional_info'] = $view_proxy_consignor_carrier_additional_info;

        return $this;
    }

    /**
     * Gets view_download_expeditor_assignment
     *
     * @return bool|null
     */
    public function getViewDownloadExpeditorAssignment()
    {
        return $this->container['view_download_expeditor_assignment'];
    }

    /**
     * Sets view_download_expeditor_assignment
     *
     * @param bool|null $view_download_expeditor_assignment Возможность скачать документ Поручение экспедитору
     *
     * @return self
     */
    public function setViewDownloadExpeditorAssignment($view_download_expeditor_assignment)
    {
        if (is_null($view_download_expeditor_assignment)) {
            throw new \InvalidArgumentException('non-nullable view_download_expeditor_assignment cannot be null');
        }
        $this->container['view_download_expeditor_assignment'] = $view_download_expeditor_assignment;

        return $this;
    }

    /**
     * Gets view_download_request_assignment
     *
     * @return bool|null
     */
    public function getViewDownloadRequestAssignment()
    {
        return $this->container['view_download_request_assignment'];
    }

    /**
     * Sets view_download_request_assignment
     *
     * @param bool|null $view_download_request_assignment Возможность скачать заявку-поручение
     *
     * @return self
     */
    public function setViewDownloadRequestAssignment($view_download_request_assignment)
    {
        if (is_null($view_download_request_assignment)) {
            throw new \InvalidArgumentException('non-nullable view_download_request_assignment cannot be null');
        }
        $this->container['view_download_request_assignment'] = $view_download_request_assignment;

        return $this;
    }

    /**
     * Gets view_expeditor_payment
     *
     * @return bool|null
     */
    public function getViewExpeditorPayment()
    {
        return $this->container['view_expeditor_payment'];
    }

    /**
     * Sets view_expeditor_payment
     *
     * @param bool|null $view_expeditor_payment Возможность просмотра оплат экспедитора перевозчику
     *
     * @return self
     */
    public function setViewExpeditorPayment($view_expeditor_payment)
    {
        if (is_null($view_expeditor_payment)) {
            throw new \InvalidArgumentException('non-nullable view_expeditor_payment cannot be null');
        }
        $this->container['view_expeditor_payment'] = $view_expeditor_payment;

        return $this;
    }

    /**
     * Gets update_expeditor_payment
     *
     * @return bool|null
     */
    public function getUpdateExpeditorPayment()
    {
        return $this->container['update_expeditor_payment'];
    }

    /**
     * Sets update_expeditor_payment
     *
     * @param bool|null $update_expeditor_payment Возможность апдейтить оплату экспедитора перевозчику
     *
     * @return self
     */
    public function setUpdateExpeditorPayment($update_expeditor_payment)
    {
        if (is_null($update_expeditor_payment)) {
            throw new \InvalidArgumentException('non-nullable update_expeditor_payment cannot be null');
        }
        $this->container['update_expeditor_payment'] = $update_expeditor_payment;

        return $this;
    }

    /**
     * Gets view_simple_document
     *
     * @return bool|null
     */
    public function getViewSimpleDocument()
    {
        return $this->container['view_simple_document'];
    }

    /**
     * Sets view_simple_document
     *
     * @param bool|null $view_simple_document Возможность просматривать документ с титулами по заказу
     *
     * @return self
     */
    public function setViewSimpleDocument($view_simple_document)
    {
        if (is_null($view_simple_document)) {
            throw new \InvalidArgumentException('non-nullable view_simple_document cannot be null');
        }
        $this->container['view_simple_document'] = $view_simple_document;

        return $this;
    }

    /**
     * Gets view_signed_documents
     *
     * @return bool|null
     */
    public function getViewSignedDocuments()
    {
        return $this->container['view_signed_documents'];
    }

    /**
     * Sets view_signed_documents
     *
     * @param bool|null $view_signed_documents Возможность просматривать список документов, подписанных пэп, по заказу
     *
     * @return self
     */
    public function setViewSignedDocuments($view_signed_documents)
    {
        if (is_null($view_signed_documents)) {
            throw new \InvalidArgumentException('non-nullable view_signed_documents cannot be null');
        }
        $this->container['view_signed_documents'] = $view_signed_documents;

        return $this;
    }

    /**
     * Gets create_customer_patch
     *
     * @return bool|null
     */
    public function getCreateCustomerPatch()
    {
        return $this->container['create_customer_patch'];
    }

    /**
     * Sets create_customer_patch
     *
     * @param bool|null $create_customer_patch Возможность создания запроса на изменение отправителем
     *
     * @return self
     */
    public function setCreateCustomerPatch($create_customer_patch)
    {
        if (is_null($create_customer_patch)) {
            throw new \InvalidArgumentException('non-nullable create_customer_patch cannot be null');
        }
        $this->container['create_customer_patch'] = $create_customer_patch;

        return $this;
    }

    /**
     * Gets create_truck_driver_patch
     *
     * @return bool|null
     */
    public function getCreateTruckDriverPatch()
    {
        return $this->container['create_truck_driver_patch'];
    }

    /**
     * Sets create_truck_driver_patch
     *
     * @param bool|null $create_truck_driver_patch Возможность создания запроса на изменение водителя или машины
     *
     * @return self
     */
    public function setCreateTruckDriverPatch($create_truck_driver_patch)
    {
        if (is_null($create_truck_driver_patch)) {
            throw new \InvalidArgumentException('non-nullable create_truck_driver_patch cannot be null');
        }
        $this->container['create_truck_driver_patch'] = $create_truck_driver_patch;

        return $this;
    }

    /**
     * Gets create_refuse_revert_patch
     *
     * @return bool|null
     */
    public function getCreateRefuseRevertPatch()
    {
        return $this->container['create_refuse_revert_patch'];
    }

    /**
     * Sets create_refuse_revert_patch
     *
     * @param bool|null $create_refuse_revert_patch Возможность создания Отправителем запроса на возвращение заявки Экспедитора с победителем в работу после отказа
     *
     * @return self
     */
    public function setCreateRefuseRevertPatch($create_refuse_revert_patch)
    {
        if (is_null($create_refuse_revert_patch)) {
            throw new \InvalidArgumentException('non-nullable create_refuse_revert_patch cannot be null');
        }
        $this->container['create_refuse_revert_patch'] = $create_refuse_revert_patch;

        return $this;
    }

    /**
     * Gets view_expeditor_offers
     *
     * @return bool|null
     */
    public function getViewExpeditorOffers()
    {
        return $this->container['view_expeditor_offers'];
    }

    /**
     * Sets view_expeditor_offers
     *
     * @param bool|null $view_expeditor_offers Возможность просмотра отправителем предложений цен от перевозчиков
     *
     * @return self
     */
    public function setViewExpeditorOffers($view_expeditor_offers)
    {
        if (is_null($view_expeditor_offers)) {
            throw new \InvalidArgumentException('non-nullable view_expeditor_offers cannot be null');
        }
        $this->container['view_expeditor_offers'] = $view_expeditor_offers;

        return $this;
    }

    /**
     * Gets create_expeditor_offer
     *
     * @return bool|null
     */
    public function getCreateExpeditorOffer()
    {
        return $this->container['create_expeditor_offer'];
    }

    /**
     * Sets create_expeditor_offer
     *
     * @param bool|null $create_expeditor_offer Возможность создания предложения цены
     *
     * @return self
     */
    public function setCreateExpeditorOffer($create_expeditor_offer)
    {
        if (is_null($create_expeditor_offer)) {
            throw new \InvalidArgumentException('non-nullable create_expeditor_offer cannot be null');
        }
        $this->container['create_expeditor_offer'] = $create_expeditor_offer;

        return $this;
    }

    /**
     * Gets create_carrier_ask
     *
     * @return bool|null
     */
    public function getCreateCarrierAsk()
    {
        return $this->container['create_carrier_ask'];
    }

    /**
     * Sets create_carrier_ask
     *
     * @param bool|null $create_carrier_ask Возможность создания ставки перевозчика
     *
     * @return self
     */
    public function setCreateCarrierAsk($create_carrier_ask)
    {
        if (is_null($create_carrier_ask)) {
            throw new \InvalidArgumentException('non-nullable create_carrier_ask cannot be null');
        }
        $this->container['create_carrier_ask'] = $create_carrier_ask;

        return $this;
    }

    /**
     * Gets view_expeditor_recommendations
     *
     * @return bool|null
     */
    public function getViewExpeditorRecommendations()
    {
        return $this->container['view_expeditor_recommendations'];
    }

    /**
     * Sets view_expeditor_recommendations
     *
     * @param bool|null $view_expeditor_recommendations Возможность просмотра Отправителем рекомендаций Экспедитора
     *
     * @return self
     */
    public function setViewExpeditorRecommendations($view_expeditor_recommendations)
    {
        if (is_null($view_expeditor_recommendations)) {
            throw new \InvalidArgumentException('non-nullable view_expeditor_recommendations cannot be null');
        }
        $this->container['view_expeditor_recommendations'] = $view_expeditor_recommendations;

        return $this;
    }

    /**
     * Gets create_expeditor_offer_negotiate
     *
     * @return bool|null
     * @deprecated
     */
    public function getCreateExpeditorOfferNegotiate()
    {
        return $this->container['create_expeditor_offer_negotiate'];
    }

    /**
     * Sets create_expeditor_offer_negotiate
     *
     * @param bool|null $create_expeditor_offer_negotiate @deprecated в пользу createExpeditorOrderNegotiate. Возможность принятия предложения цены отправителем
     *
     * @return self
     * @deprecated
     */
    public function setCreateExpeditorOfferNegotiate($create_expeditor_offer_negotiate)
    {
        if (is_null($create_expeditor_offer_negotiate)) {
            throw new \InvalidArgumentException('non-nullable create_expeditor_offer_negotiate cannot be null');
        }
        $this->container['create_expeditor_offer_negotiate'] = $create_expeditor_offer_negotiate;

        return $this;
    }

    /**
     * Gets create_expeditor_order_negotiate
     *
     * @return bool|null
     */
    public function getCreateExpeditorOrderNegotiate()
    {
        return $this->container['create_expeditor_order_negotiate'];
    }

    /**
     * Sets create_expeditor_order_negotiate
     *
     * @param bool|null $create_expeditor_order_negotiate Возможность Отправителя изменить заявку навстречу рекомендациям Экспедитора
     *
     * @return self
     */
    public function setCreateExpeditorOrderNegotiate($create_expeditor_order_negotiate)
    {
        if (is_null($create_expeditor_order_negotiate)) {
            throw new \InvalidArgumentException('non-nullable create_expeditor_order_negotiate cannot be null');
        }
        $this->container['create_expeditor_order_negotiate'] = $create_expeditor_order_negotiate;

        return $this;
    }

    /**
     * Gets create_carrier_sign
     *
     * @return bool|null
     */
    public function getCreateCarrierSign()
    {
        return $this->container['create_carrier_sign'];
    }

    /**
     * Sets create_carrier_sign
     *
     * @param bool|null $create_carrier_sign Возможность подписать заказ перевозчиком
     *
     * @return self
     */
    public function setCreateCarrierSign($create_carrier_sign)
    {
        if (is_null($create_carrier_sign)) {
            throw new \InvalidArgumentException('non-nullable create_carrier_sign cannot be null');
        }
        $this->container['create_carrier_sign'] = $create_carrier_sign;

        return $this;
    }

    /**
     * Gets create_downtime_claim
     *
     * @return bool|null
     */
    public function getCreateDowntimeClaim()
    {
        return $this->container['create_downtime_claim'];
    }

    /**
     * Sets create_downtime_claim
     *
     * @param bool|null $create_downtime_claim Возможность создать претензию Перевозчика о простое по заявке
     *
     * @return self
     */
    public function setCreateDowntimeClaim($create_downtime_claim)
    {
        if (is_null($create_downtime_claim)) {
            throw new \InvalidArgumentException('non-nullable create_downtime_claim cannot be null');
        }
        $this->container['create_downtime_claim'] = $create_downtime_claim;

        return $this;
    }

    /**
     * Gets view_claim_list
     *
     * @return bool|null
     */
    public function getViewClaimList()
    {
        return $this->container['view_claim_list'];
    }

    /**
     * Sets view_claim_list
     *
     * @param bool|null $view_claim_list Возможность просмотра списка претензий по заявке
     *
     * @return self
     */
    public function setViewClaimList($view_claim_list)
    {
        if (is_null($view_claim_list)) {
            throw new \InvalidArgumentException('non-nullable view_claim_list cannot be null');
        }
        $this->container['view_claim_list'] = $view_claim_list;

        return $this;
    }

    /**
     * Gets create_order_reuse
     *
     * @return bool|null
     */
    public function getCreateOrderReuse()
    {
        return $this->container['create_order_reuse'];
    }

    /**
     * Sets create_order_reuse
     *
     * @param bool|null $create_order_reuse Возможность переразмещения заказа отправителя
     *
     * @return self
     */
    public function setCreateOrderReuse($create_order_reuse)
    {
        if (is_null($create_order_reuse)) {
            throw new \InvalidArgumentException('non-nullable create_order_reuse cannot be null');
        }
        $this->container['create_order_reuse'] = $create_order_reuse;

        return $this;
    }

    /**
     * Gets view_consignor_expeditor_payment
     *
     * @return bool|null
     */
    public function getViewConsignorExpeditorPayment()
    {
        return $this->container['view_consignor_expeditor_payment'];
    }

    /**
     * Sets view_consignor_expeditor_payment
     *
     * @param bool|null $view_consignor_expeditor_payment Возможность просматривать информацию об оплате счёта
     *
     * @return self
     */
    public function setViewConsignorExpeditorPayment($view_consignor_expeditor_payment)
    {
        if (is_null($view_consignor_expeditor_payment)) {
            throw new \InvalidArgumentException('non-nullable view_consignor_expeditor_payment cannot be null');
        }
        $this->container['view_consignor_expeditor_payment'] = $view_consignor_expeditor_payment;

        return $this;
    }

    /**
     * Gets view_act_non_delivery_car
     *
     * @return bool|null
     */
    public function getViewActNonDeliveryCar()
    {
        return $this->container['view_act_non_delivery_car'];
    }

    /**
     * Sets view_act_non_delivery_car
     *
     * @param bool|null $view_act_non_delivery_car Получить ссылку на скачивание акта о неподаче машины на погрузку
     *
     * @return self
     */
    public function setViewActNonDeliveryCar($view_act_non_delivery_car)
    {
        if (is_null($view_act_non_delivery_car)) {
            throw new \InvalidArgumentException('non-nullable view_act_non_delivery_car cannot be null');
        }
        $this->container['view_act_non_delivery_car'] = $view_act_non_delivery_car;

        return $this;
    }

    /**
     * Gets create_customer_docs_tracking
     *
     * @return bool|null
     */
    public function getCreateCustomerDocsTracking()
    {
        return $this->container['create_customer_docs_tracking'];
    }

    /**
     * Sets create_customer_docs_tracking
     *
     * @param bool|null $create_customer_docs_tracking Возможность создания трек-номера отслеживания отправления с документами для заказчика
     *
     * @return self
     */
    public function setCreateCustomerDocsTracking($create_customer_docs_tracking)
    {
        if (is_null($create_customer_docs_tracking)) {
            throw new \InvalidArgumentException('non-nullable create_customer_docs_tracking cannot be null');
        }
        $this->container['create_customer_docs_tracking'] = $create_customer_docs_tracking;

        return $this;
    }

    /**
     * Gets create_act_non_delivery_car
     *
     * @return bool|null
     */
    public function getCreateActNonDeliveryCar()
    {
        return $this->container['create_act_non_delivery_car'];
    }

    /**
     * Sets create_act_non_delivery_car
     *
     * @param bool|null $create_act_non_delivery_car Возможность создания акта о неподаче машины
     *
     * @return self
     */
    public function setCreateActNonDeliveryCar($create_act_non_delivery_car)
    {
        if (is_null($create_act_non_delivery_car)) {
            throw new \InvalidArgumentException('non-nullable create_act_non_delivery_car cannot be null');
        }
        $this->container['create_act_non_delivery_car'] = $create_act_non_delivery_car;

        return $this;
    }

    /**
     * Gets create_act_non_delivery_car_cancel
     *
     * @return bool|null
     */
    public function getCreateActNonDeliveryCarCancel()
    {
        return $this->container['create_act_non_delivery_car_cancel'];
    }

    /**
     * Sets create_act_non_delivery_car_cancel
     *
     * @param bool|null $create_act_non_delivery_car_cancel Возможность отзыва акта о неподаче машины
     *
     * @return self
     */
    public function setCreateActNonDeliveryCarCancel($create_act_non_delivery_car_cancel)
    {
        if (is_null($create_act_non_delivery_car_cancel)) {
            throw new \InvalidArgumentException('non-nullable create_act_non_delivery_car_cancel cannot be null');
        }
        $this->container['create_act_non_delivery_car_cancel'] = $create_act_non_delivery_car_cancel;

        return $this;
    }

    /**
     * Gets view_digital_act_non_delivery_car
     *
     * @return bool|null
     */
    public function getViewDigitalActNonDeliveryCar()
    {
        return $this->container['view_digital_act_non_delivery_car'];
    }

    /**
     * Sets view_digital_act_non_delivery_car
     *
     * @param bool|null $view_digital_act_non_delivery_car Возможность просмотра данных акта о неподаче машины
     *
     * @return self
     */
    public function setViewDigitalActNonDeliveryCar($view_digital_act_non_delivery_car)
    {
        if (is_null($view_digital_act_non_delivery_car)) {
            throw new \InvalidArgumentException('non-nullable view_digital_act_non_delivery_car cannot be null');
        }
        $this->container['view_digital_act_non_delivery_car'] = $view_digital_act_non_delivery_car;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


