<?php
/**
 * ChatPostPayload
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * ChatPostPayload Class Doc Comment
 *
 * @category Class
 * @description Дополнительные данные сообщения
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChatPostPayload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = 'type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChatPostPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => '\MagDv\Cargomart\Dto\ChatPostTypeEnum',
        'carrier' => '\MagDv\Cargomart\Dto\ChatPostPayloadBookingCarrier',
        'comment' => 'string',
        'id' => 'string',
        'short_name' => 'string',
        'logo' => 'string',
        'create' => '\MagDv\Cargomart\Dto\ChatPostPayloadContactChangeCreate',
        'delete' => '\MagDv\Cargomart\Dto\ChatPostPayloadContactChangeCreate',
        'history_id' => 'int',
        'operation' => '\MagDv\Cargomart\Dto\ChatPostOperationEnum',
        'document_id' => 'int',
        'url' => 'string',
        'files' => '\MagDv\Cargomart\Dto\FileV1[]',
        'driver' => '\MagDv\Cargomart\Dto\ChatPostPayloadDriverChangeDriver',
        'emails' => 'string[]',
        'signer_fio' => 'string',
        'sign_date' => 'string',
        'file_url' => 'string',
        'sign_file_url' => 'string',
        'proxy_pack_url' => 'string',
        'number' => 'string',
        'date' => '\DateTime',
        'value' => 'string',
        'currency_code' => 'string',
        'payments' => '\MagDv\Cargomart\Dto\ChatPostPayloadInvoicePaymentsInner[]',
        'cert_id' => 'string',
        'serial_id' => 'int',
        'message' => 'string',
        'changes' => '\MagDv\Cargomart\Dto\ChatPostPayloadModelFieldChangeChangesInner[]',
        'point' => '\MagDv\Cargomart\Dto\ChatPostPayloadOrderPointInner[]',
        'order_id' => 'string',
        'correction_id' => 'int',
        'comment_for_consignor' => 'string',
        'comment_for_carrier' => 'string',
        'package_id' => 'string',
        'reason' => 'string',
        'file_ids' => 'string[]',
        'file_urls' => 'string[]',
        'creator_fio' => 'string',
        'event_date' => '\DateTime',
        'ecn_type' => '\MagDv\Cargomart\Dto\EcnType',
        'ecn_date' => 'string',
        'old_ecn_type' => '\MagDv\Cargomart\Dto\EcnType',
        'old_ecn_number' => 'string',
        'operator' => '\MagDv\Cargomart\Dto\EcnOperatorEnum',
        'old_ecn_date' => 'string',
        'old_pdf_version_file' => '\MagDv\Cargomart\Dto\FileUrl',
        'order_hash' => 'string',
        'order_patch_id' => 'string',
        'new_values' => '\MagDv\Cargomart\Dto\ChatPostPayloadOrderPatchNewValues',
        'code' => 'string',
        'tracking_number' => 'string',
        'post_service_name' => 'string',
        'transactions' => '\MagDv\Cargomart\Dto\ChatPostPayloadPaymentConsignorToExpeditorTransactionsInner[]',
        'truck' => '\MagDv\Cargomart\Dto\ChatPostPayloadTruckChangeV2Truck',
        'name' => 'string',
        'status' => '\MagDv\Cargomart\Dto\UserCertificateStatusEnum',
        'phone' => 'string',
        'driver_name' => 'string',
        'point_name' => 'string',
        'driver_app_order_point_status' => '\MagDv\Cargomart\Dto\ChatPostDriverAppOrderPointStatusEnum',
        'resolution' => '\MagDv\Cargomart\Dto\ExpeditorTaskResolutionEnum',
        'task_type' => '\MagDv\Cargomart\Dto\ExpeditorTaskTypeEnum',
        'first_storage_point_title' => 'string',
        'title' => 'string',
        'step_bid' => 'string',
        'end_date' => 'string',
        'text_price' => 'string',
        'loading_date_time' => 'string',
        'consignor_pay_value' => '\MagDv\Cargomart\Dto\PayValue',
        'carrier_pay_value' => '\MagDv\Cargomart\Dto\PayValue',
        'file' => '\MagDv\Cargomart\Dto\FileV2'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'carrier' => null,
        'comment' => null,
        'id' => null,
        'short_name' => null,
        'logo' => 'uri',
        'create' => null,
        'delete' => null,
        'history_id' => null,
        'operation' => null,
        'document_id' => null,
        'url' => 'uri',
        'files' => null,
        'driver' => null,
        'emails' => 'email',
        'signer_fio' => null,
        'sign_date' => null,
        'file_url' => 'uri',
        'sign_file_url' => 'uri',
        'proxy_pack_url' => 'uri',
        'number' => null,
        'date' => 'date',
        'value' => 'cm-price',
        'currency_code' => null,
        'payments' => null,
        'cert_id' => 'uuid',
        'serial_id' => null,
        'message' => null,
        'changes' => null,
        'point' => null,
        'order_id' => null,
        'correction_id' => null,
        'comment_for_consignor' => null,
        'comment_for_carrier' => null,
        'package_id' => 'uuid',
        'reason' => null,
        'file_ids' => 'uuid',
        'file_urls' => 'uri',
        'creator_fio' => null,
        'event_date' => 'date-time',
        'ecn_type' => null,
        'ecn_date' => null,
        'old_ecn_type' => null,
        'old_ecn_number' => null,
        'operator' => null,
        'old_ecn_date' => null,
        'old_pdf_version_file' => null,
        'order_hash' => null,
        'order_patch_id' => null,
        'new_values' => null,
        'code' => null,
        'tracking_number' => null,
        'post_service_name' => null,
        'transactions' => null,
        'truck' => null,
        'name' => null,
        'status' => null,
        'phone' => null,
        'driver_name' => null,
        'point_name' => null,
        'driver_app_order_point_status' => null,
        'resolution' => null,
        'task_type' => null,
        'first_storage_point_title' => null,
        'title' => null,
        'step_bid' => null,
        'end_date' => null,
        'text_price' => null,
        'loading_date_time' => null,
        'consignor_pay_value' => null,
        'carrier_pay_value' => null,
        'file' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'carrier' => false,
        'comment' => false,
        'id' => false,
        'short_name' => false,
        'logo' => false,
        'create' => false,
        'delete' => false,
        'history_id' => false,
        'operation' => false,
        'document_id' => false,
        'url' => false,
        'files' => false,
        'driver' => false,
        'emails' => false,
        'signer_fio' => false,
        'sign_date' => false,
        'file_url' => false,
        'sign_file_url' => false,
        'proxy_pack_url' => false,
        'number' => false,
        'date' => false,
        'value' => false,
        'currency_code' => false,
        'payments' => false,
        'cert_id' => false,
        'serial_id' => false,
        'message' => false,
        'changes' => false,
        'point' => false,
        'order_id' => false,
        'correction_id' => false,
        'comment_for_consignor' => false,
        'comment_for_carrier' => false,
        'package_id' => false,
        'reason' => false,
        'file_ids' => false,
        'file_urls' => false,
        'creator_fio' => false,
        'event_date' => false,
        'ecn_type' => false,
        'ecn_date' => false,
        'old_ecn_type' => false,
        'old_ecn_number' => false,
        'operator' => false,
        'old_ecn_date' => false,
        'old_pdf_version_file' => false,
        'order_hash' => false,
        'order_patch_id' => false,
        'new_values' => false,
        'code' => false,
        'tracking_number' => false,
        'post_service_name' => false,
        'transactions' => false,
        'truck' => false,
        'name' => false,
        'status' => false,
        'phone' => false,
        'driver_name' => false,
        'point_name' => false,
        'driver_app_order_point_status' => false,
        'resolution' => false,
        'task_type' => false,
        'first_storage_point_title' => false,
        'title' => false,
        'step_bid' => false,
        'end_date' => false,
        'text_price' => false,
        'loading_date_time' => false,
        'consignor_pay_value' => false,
        'carrier_pay_value' => false,
        'file' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'carrier' => 'carrier',
        'comment' => 'comment',
        'id' => 'id',
        'short_name' => 'shortName',
        'logo' => 'logo',
        'create' => 'create',
        'delete' => 'delete',
        'history_id' => 'historyId',
        'operation' => 'operation',
        'document_id' => 'documentId',
        'url' => 'url',
        'files' => 'files',
        'driver' => 'driver',
        'emails' => 'emails',
        'signer_fio' => 'signerFio',
        'sign_date' => 'signDate',
        'file_url' => 'fileUrl',
        'sign_file_url' => 'signFileUrl',
        'proxy_pack_url' => 'proxyPackUrl',
        'number' => 'number',
        'date' => 'date',
        'value' => 'value',
        'currency_code' => 'currencyCode',
        'payments' => 'payments',
        'cert_id' => 'certId',
        'serial_id' => 'serialId',
        'message' => 'message',
        'changes' => 'changes',
        'point' => 'point',
        'order_id' => 'orderId',
        'correction_id' => 'correctionId',
        'comment_for_consignor' => 'commentForConsignor',
        'comment_for_carrier' => 'commentForCarrier',
        'package_id' => 'packageId',
        'reason' => 'reason',
        'file_ids' => 'fileIds',
        'file_urls' => 'fileUrls',
        'creator_fio' => 'creatorFio',
        'event_date' => 'eventDate',
        'ecn_type' => 'ecnType',
        'ecn_date' => 'ecnDate',
        'old_ecn_type' => 'oldEcnType',
        'old_ecn_number' => 'oldEcnNumber',
        'operator' => 'operator',
        'old_ecn_date' => 'oldEcnDate',
        'old_pdf_version_file' => 'oldPdfVersionFile',
        'order_hash' => 'orderHash',
        'order_patch_id' => 'orderPatchId',
        'new_values' => 'newValues',
        'code' => 'code',
        'tracking_number' => 'trackingNumber',
        'post_service_name' => 'postServiceName',
        'transactions' => 'transactions',
        'truck' => 'truck',
        'name' => 'name',
        'status' => 'status',
        'phone' => 'phone',
        'driver_name' => 'driverName',
        'point_name' => 'pointName',
        'driver_app_order_point_status' => 'driverAppOrderPointStatus',
        'resolution' => 'resolution',
        'task_type' => 'taskType',
        'first_storage_point_title' => 'firstStoragePointTitle',
        'title' => 'title',
        'step_bid' => 'stepBid',
        'end_date' => 'endDate',
        'text_price' => 'textPrice',
        'loading_date_time' => 'loadingDateTime',
        'consignor_pay_value' => 'consignorPayValue',
        'carrier_pay_value' => 'carrierPayValue',
        'file' => 'file'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'carrier' => 'setCarrier',
        'comment' => 'setComment',
        'id' => 'setId',
        'short_name' => 'setShortName',
        'logo' => 'setLogo',
        'create' => 'setCreate',
        'delete' => 'setDelete',
        'history_id' => 'setHistoryId',
        'operation' => 'setOperation',
        'document_id' => 'setDocumentId',
        'url' => 'setUrl',
        'files' => 'setFiles',
        'driver' => 'setDriver',
        'emails' => 'setEmails',
        'signer_fio' => 'setSignerFio',
        'sign_date' => 'setSignDate',
        'file_url' => 'setFileUrl',
        'sign_file_url' => 'setSignFileUrl',
        'proxy_pack_url' => 'setProxyPackUrl',
        'number' => 'setNumber',
        'date' => 'setDate',
        'value' => 'setValue',
        'currency_code' => 'setCurrencyCode',
        'payments' => 'setPayments',
        'cert_id' => 'setCertId',
        'serial_id' => 'setSerialId',
        'message' => 'setMessage',
        'changes' => 'setChanges',
        'point' => 'setPoint',
        'order_id' => 'setOrderId',
        'correction_id' => 'setCorrectionId',
        'comment_for_consignor' => 'setCommentForConsignor',
        'comment_for_carrier' => 'setCommentForCarrier',
        'package_id' => 'setPackageId',
        'reason' => 'setReason',
        'file_ids' => 'setFileIds',
        'file_urls' => 'setFileUrls',
        'creator_fio' => 'setCreatorFio',
        'event_date' => 'setEventDate',
        'ecn_type' => 'setEcnType',
        'ecn_date' => 'setEcnDate',
        'old_ecn_type' => 'setOldEcnType',
        'old_ecn_number' => 'setOldEcnNumber',
        'operator' => 'setOperator',
        'old_ecn_date' => 'setOldEcnDate',
        'old_pdf_version_file' => 'setOldPdfVersionFile',
        'order_hash' => 'setOrderHash',
        'order_patch_id' => 'setOrderPatchId',
        'new_values' => 'setNewValues',
        'code' => 'setCode',
        'tracking_number' => 'setTrackingNumber',
        'post_service_name' => 'setPostServiceName',
        'transactions' => 'setTransactions',
        'truck' => 'setTruck',
        'name' => 'setName',
        'status' => 'setStatus',
        'phone' => 'setPhone',
        'driver_name' => 'setDriverName',
        'point_name' => 'setPointName',
        'driver_app_order_point_status' => 'setDriverAppOrderPointStatus',
        'resolution' => 'setResolution',
        'task_type' => 'setTaskType',
        'first_storage_point_title' => 'setFirstStoragePointTitle',
        'title' => 'setTitle',
        'step_bid' => 'setStepBid',
        'end_date' => 'setEndDate',
        'text_price' => 'setTextPrice',
        'loading_date_time' => 'setLoadingDateTime',
        'consignor_pay_value' => 'setConsignorPayValue',
        'carrier_pay_value' => 'setCarrierPayValue',
        'file' => 'setFile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'carrier' => 'getCarrier',
        'comment' => 'getComment',
        'id' => 'getId',
        'short_name' => 'getShortName',
        'logo' => 'getLogo',
        'create' => 'getCreate',
        'delete' => 'getDelete',
        'history_id' => 'getHistoryId',
        'operation' => 'getOperation',
        'document_id' => 'getDocumentId',
        'url' => 'getUrl',
        'files' => 'getFiles',
        'driver' => 'getDriver',
        'emails' => 'getEmails',
        'signer_fio' => 'getSignerFio',
        'sign_date' => 'getSignDate',
        'file_url' => 'getFileUrl',
        'sign_file_url' => 'getSignFileUrl',
        'proxy_pack_url' => 'getProxyPackUrl',
        'number' => 'getNumber',
        'date' => 'getDate',
        'value' => 'getValue',
        'currency_code' => 'getCurrencyCode',
        'payments' => 'getPayments',
        'cert_id' => 'getCertId',
        'serial_id' => 'getSerialId',
        'message' => 'getMessage',
        'changes' => 'getChanges',
        'point' => 'getPoint',
        'order_id' => 'getOrderId',
        'correction_id' => 'getCorrectionId',
        'comment_for_consignor' => 'getCommentForConsignor',
        'comment_for_carrier' => 'getCommentForCarrier',
        'package_id' => 'getPackageId',
        'reason' => 'getReason',
        'file_ids' => 'getFileIds',
        'file_urls' => 'getFileUrls',
        'creator_fio' => 'getCreatorFio',
        'event_date' => 'getEventDate',
        'ecn_type' => 'getEcnType',
        'ecn_date' => 'getEcnDate',
        'old_ecn_type' => 'getOldEcnType',
        'old_ecn_number' => 'getOldEcnNumber',
        'operator' => 'getOperator',
        'old_ecn_date' => 'getOldEcnDate',
        'old_pdf_version_file' => 'getOldPdfVersionFile',
        'order_hash' => 'getOrderHash',
        'order_patch_id' => 'getOrderPatchId',
        'new_values' => 'getNewValues',
        'code' => 'getCode',
        'tracking_number' => 'getTrackingNumber',
        'post_service_name' => 'getPostServiceName',
        'transactions' => 'getTransactions',
        'truck' => 'getTruck',
        'name' => 'getName',
        'status' => 'getStatus',
        'phone' => 'getPhone',
        'driver_name' => 'getDriverName',
        'point_name' => 'getPointName',
        'driver_app_order_point_status' => 'getDriverAppOrderPointStatus',
        'resolution' => 'getResolution',
        'task_type' => 'getTaskType',
        'first_storage_point_title' => 'getFirstStoragePointTitle',
        'title' => 'getTitle',
        'step_bid' => 'getStepBid',
        'end_date' => 'getEndDate',
        'text_price' => 'getTextPrice',
        'loading_date_time' => 'getLoadingDateTime',
        'consignor_pay_value' => 'getConsignorPayValue',
        'carrier_pay_value' => 'getCarrierPayValue',
        'file' => 'getFile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('carrier', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('short_name', $data ?? [], null);
        $this->setIfExists('logo', $data ?? [], null);
        $this->setIfExists('create', $data ?? [], null);
        $this->setIfExists('delete', $data ?? [], null);
        $this->setIfExists('history_id', $data ?? [], null);
        $this->setIfExists('operation', $data ?? [], null);
        $this->setIfExists('document_id', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
        $this->setIfExists('driver', $data ?? [], null);
        $this->setIfExists('emails', $data ?? [], null);
        $this->setIfExists('signer_fio', $data ?? [], null);
        $this->setIfExists('sign_date', $data ?? [], null);
        $this->setIfExists('file_url', $data ?? [], null);
        $this->setIfExists('sign_file_url', $data ?? [], null);
        $this->setIfExists('proxy_pack_url', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('payments', $data ?? [], null);
        $this->setIfExists('cert_id', $data ?? [], null);
        $this->setIfExists('serial_id', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('changes', $data ?? [], null);
        $this->setIfExists('point', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('correction_id', $data ?? [], null);
        $this->setIfExists('comment_for_consignor', $data ?? [], null);
        $this->setIfExists('comment_for_carrier', $data ?? [], null);
        $this->setIfExists('package_id', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('file_ids', $data ?? [], null);
        $this->setIfExists('file_urls', $data ?? [], null);
        $this->setIfExists('creator_fio', $data ?? [], null);
        $this->setIfExists('event_date', $data ?? [], null);
        $this->setIfExists('ecn_type', $data ?? [], null);
        $this->setIfExists('ecn_date', $data ?? [], null);
        $this->setIfExists('old_ecn_type', $data ?? [], null);
        $this->setIfExists('old_ecn_number', $data ?? [], null);
        $this->setIfExists('operator', $data ?? [], null);
        $this->setIfExists('old_ecn_date', $data ?? [], null);
        $this->setIfExists('old_pdf_version_file', $data ?? [], null);
        $this->setIfExists('order_hash', $data ?? [], null);
        $this->setIfExists('order_patch_id', $data ?? [], null);
        $this->setIfExists('new_values', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('tracking_number', $data ?? [], null);
        $this->setIfExists('post_service_name', $data ?? [], null);
        $this->setIfExists('transactions', $data ?? [], null);
        $this->setIfExists('truck', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('driver_name', $data ?? [], null);
        $this->setIfExists('point_name', $data ?? [], null);
        $this->setIfExists('driver_app_order_point_status', $data ?? [], null);
        $this->setIfExists('resolution', $data ?? [], null);
        $this->setIfExists('task_type', $data ?? [], null);
        $this->setIfExists('first_storage_point_title', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('step_bid', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('text_price', $data ?? [], null);
        $this->setIfExists('loading_date_time', $data ?? [], null);
        $this->setIfExists('consignor_pay_value', $data ?? [], null);
        $this->setIfExists('carrier_pay_value', $data ?? [], null);
        $this->setIfExists('file', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['type'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['carrier'] === null) {
            $invalidProperties[] = "'carrier' can't be null";
        }
        if ($this->container['comment'] === null) {
            $invalidProperties[] = "'comment' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['short_name'] === null) {
            $invalidProperties[] = "'short_name' can't be null";
        }
        if ($this->container['logo'] === null) {
            $invalidProperties[] = "'logo' can't be null";
        }
        if ($this->container['history_id'] === null) {
            $invalidProperties[] = "'history_id' can't be null";
        }
        if ($this->container['operation'] === null) {
            $invalidProperties[] = "'operation' can't be null";
        }
        if ($this->container['emails'] === null) {
            $invalidProperties[] = "'emails' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        if (!preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", $this->container['value'])) {
            $invalidProperties[] = "invalid value for 'value', must be conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.";
        }

        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ($this->container['cert_id'] === null) {
            $invalidProperties[] = "'cert_id' can't be null";
        }
        if ($this->container['message'] === null) {
            $invalidProperties[] = "'message' can't be null";
        }
        if ($this->container['changes'] === null) {
            $invalidProperties[] = "'changes' can't be null";
        }
        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['correction_id'] === null) {
            $invalidProperties[] = "'correction_id' can't be null";
        }
        if ($this->container['creator_fio'] === null) {
            $invalidProperties[] = "'creator_fio' can't be null";
        }
        if ($this->container['ecn_type'] === null) {
            $invalidProperties[] = "'ecn_type' can't be null";
        }
        if ($this->container['old_ecn_type'] === null) {
            $invalidProperties[] = "'old_ecn_type' can't be null";
        }
        if ($this->container['old_ecn_number'] === null) {
            $invalidProperties[] = "'old_ecn_number' can't be null";
        }
        if ($this->container['old_pdf_version_file'] === null) {
            $invalidProperties[] = "'old_pdf_version_file' can't be null";
        }
        if ($this->container['order_hash'] === null) {
            $invalidProperties[] = "'order_hash' can't be null";
        }
        if ($this->container['order_patch_id'] === null) {
            $invalidProperties[] = "'order_patch_id' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['phone'] === null) {
            $invalidProperties[] = "'phone' can't be null";
        }
        if ($this->container['driver_name'] === null) {
            $invalidProperties[] = "'driver_name' can't be null";
        }
        if ($this->container['point_name'] === null) {
            $invalidProperties[] = "'point_name' can't be null";
        }
        if ($this->container['resolution'] === null) {
            $invalidProperties[] = "'resolution' can't be null";
        }
        if ($this->container['task_type'] === null) {
            $invalidProperties[] = "'task_type' can't be null";
        }
        if ($this->container['first_storage_point_title'] === null) {
            $invalidProperties[] = "'first_storage_point_title' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return \MagDv\Cargomart\Dto\ChatPostTypeEnum
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \MagDv\Cargomart\Dto\ChatPostTypeEnum $type Тип сообщения чата
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return \MagDv\Cargomart\Dto\ChatPostPayloadBookingCarrier
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param \MagDv\Cargomart\Dto\ChatPostPayloadBookingCarrier $carrier carrier
     *
     * @return self
     */
    public function setCarrier($carrier)
    {
        if (is_null($carrier)) {
            throw new \InvalidArgumentException('non-nullable carrier cannot be null');
        }
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Комментарий
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Идентификатор запроса на сертификат
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string $short_name Название компании
     *
     * @return self
     */
    public function setShortName($short_name)
    {
        if (is_null($short_name)) {
            throw new \InvalidArgumentException('non-nullable short_name cannot be null');
        }
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string $logo Url логотипа компании
     *
     * @return self
     */
    public function setLogo($logo)
    {
        if (is_null($logo)) {
            throw new \InvalidArgumentException('non-nullable logo cannot be null');
        }
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets create
     *
     * @return \MagDv\Cargomart\Dto\ChatPostPayloadContactChangeCreate|null
     */
    public function getCreate()
    {
        return $this->container['create'];
    }

    /**
     * Sets create
     *
     * @param \MagDv\Cargomart\Dto\ChatPostPayloadContactChangeCreate|null $create create
     *
     * @return self
     */
    public function setCreate($create)
    {
        if (is_null($create)) {
            throw new \InvalidArgumentException('non-nullable create cannot be null');
        }
        $this->container['create'] = $create;

        return $this;
    }

    /**
     * Gets delete
     *
     * @return \MagDv\Cargomart\Dto\ChatPostPayloadContactChangeCreate|null
     */
    public function getDelete()
    {
        return $this->container['delete'];
    }

    /**
     * Sets delete
     *
     * @param \MagDv\Cargomart\Dto\ChatPostPayloadContactChangeCreate|null $delete delete
     *
     * @return self
     */
    public function setDelete($delete)
    {
        if (is_null($delete)) {
            throw new \InvalidArgumentException('non-nullable delete cannot be null');
        }
        $this->container['delete'] = $delete;

        return $this;
    }

    /**
     * Gets history_id
     *
     * @return int
     */
    public function getHistoryId()
    {
        return $this->container['history_id'];
    }

    /**
     * Sets history_id
     *
     * @param int $history_id ID истории контрагента
     *
     * @return self
     */
    public function setHistoryId($history_id)
    {
        if (is_null($history_id)) {
            throw new \InvalidArgumentException('non-nullable history_id cannot be null');
        }
        $this->container['history_id'] = $history_id;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return \MagDv\Cargomart\Dto\ChatPostOperationEnum
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param \MagDv\Cargomart\Dto\ChatPostOperationEnum $operation Тип операции
     *
     * @return self
     */
    public function setOperation($operation)
    {
        if (is_null($operation)) {
            throw new \InvalidArgumentException('non-nullable operation cannot be null');
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets document_id
     *
     * @return int|null
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param int|null $document_id Идентификатор документа
     *
     * @return self
     */
    public function setDocumentId($document_id)
    {
        if (is_null($document_id)) {
            throw new \InvalidArgumentException('non-nullable document_id cannot be null');
        }
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url ссылка
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \MagDv\Cargomart\Dto\FileV1[]|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \MagDv\Cargomart\Dto\FileV1[]|null $files Список файлов
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            throw new \InvalidArgumentException('non-nullable files cannot be null');
        }
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets driver
     *
     * @return \MagDv\Cargomart\Dto\ChatPostPayloadDriverChangeDriver|null
     */
    public function getDriver()
    {
        return $this->container['driver'];
    }

    /**
     * Sets driver
     *
     * @param \MagDv\Cargomart\Dto\ChatPostPayloadDriverChangeDriver|null $driver driver
     *
     * @return self
     */
    public function setDriver($driver)
    {
        if (is_null($driver)) {
            throw new \InvalidArgumentException('non-nullable driver cannot be null');
        }
        $this->container['driver'] = $driver;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return string[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param string[] $emails Электронные ящики
     *
     * @return self
     */
    public function setEmails($emails)
    {
        if (is_null($emails)) {
            throw new \InvalidArgumentException('non-nullable emails cannot be null');
        }
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets signer_fio
     *
     * @return string|null
     */
    public function getSignerFio()
    {
        return $this->container['signer_fio'];
    }

    /**
     * Sets signer_fio
     *
     * @param string|null $signer_fio ФИО инициатора действия
     *
     * @return self
     */
    public function setSignerFio($signer_fio)
    {
        if (is_null($signer_fio)) {
            throw new \InvalidArgumentException('non-nullable signer_fio cannot be null');
        }
        $this->container['signer_fio'] = $signer_fio;

        return $this;
    }

    /**
     * Gets sign_date
     *
     * @return string|null
     */
    public function getSignDate()
    {
        return $this->container['sign_date'];
    }

    /**
     * Sets sign_date
     *
     * @param string|null $sign_date Дата подписания
     *
     * @return self
     */
    public function setSignDate($sign_date)
    {
        if (is_null($sign_date)) {
            throw new \InvalidArgumentException('non-nullable sign_date cannot be null');
        }
        $this->container['sign_date'] = $sign_date;

        return $this;
    }

    /**
     * Gets file_url
     *
     * @return string|null
     */
    public function getFileUrl()
    {
        return $this->container['file_url'];
    }

    /**
     * Sets file_url
     *
     * @param string|null $file_url Файл доверенности
     *
     * @return self
     */
    public function setFileUrl($file_url)
    {
        if (is_null($file_url)) {
            throw new \InvalidArgumentException('non-nullable file_url cannot be null');
        }
        $this->container['file_url'] = $file_url;

        return $this;
    }

    /**
     * Gets sign_file_url
     *
     * @return string|null
     */
    public function getSignFileUrl()
    {
        return $this->container['sign_file_url'];
    }

    /**
     * Sets sign_file_url
     *
     * @param string|null $sign_file_url Файл подписи
     *
     * @return self
     */
    public function setSignFileUrl($sign_file_url)
    {
        if (is_null($sign_file_url)) {
            throw new \InvalidArgumentException('non-nullable sign_file_url cannot be null');
        }
        $this->container['sign_file_url'] = $sign_file_url;

        return $this;
    }

    /**
     * Gets proxy_pack_url
     *
     * @return string|null
     */
    public function getProxyPackUrl()
    {
        return $this->container['proxy_pack_url'];
    }

    /**
     * Sets proxy_pack_url
     *
     * @param string|null $proxy_pack_url Ссылка на архив
     *
     * @return self
     */
    public function setProxyPackUrl($proxy_pack_url)
    {
        if (is_null($proxy_pack_url)) {
            throw new \InvalidArgumentException('non-nullable proxy_pack_url cannot be null');
        }
        $this->container['proxy_pack_url'] = $proxy_pack_url;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Номер счета
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Дата оплаты
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value Сумма оплаты
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }

        if ((!preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", ObjectSerializer::toString($value)))) {
            throw new \InvalidArgumentException("invalid value for \$value when calling ChatPostPayload., must conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.");
        }

        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Валюта
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \MagDv\Cargomart\Dto\ChatPostPayloadInvoicePaymentsInner[]|null
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \MagDv\Cargomart\Dto\ChatPostPayloadInvoicePaymentsInner[]|null $payments payments
     *
     * @return self
     */
    public function setPayments($payments)
    {
        if (is_null($payments)) {
            throw new \InvalidArgumentException('non-nullable payments cannot be null');
        }
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets cert_id
     *
     * @return string
     */
    public function getCertId()
    {
        return $this->container['cert_id'];
    }

    /**
     * Sets cert_id
     *
     * @param string $cert_id Идентификатор сертификата
     *
     * @return self
     */
    public function setCertId($cert_id)
    {
        if (is_null($cert_id)) {
            throw new \InvalidArgumentException('non-nullable cert_id cannot be null');
        }
        $this->container['cert_id'] = $cert_id;

        return $this;
    }

    /**
     * Gets serial_id
     *
     * @return int|null
     */
    public function getSerialId()
    {
        return $this->container['serial_id'];
    }

    /**
     * Sets serial_id
     *
     * @param int|null $serial_id Порядковый номер заказа
     *
     * @return self
     */
    public function setSerialId($serial_id)
    {
        if (is_null($serial_id)) {
            throw new \InvalidArgumentException('non-nullable serial_id cannot be null');
        }
        $this->container['serial_id'] = $serial_id;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Сообщение об изменении
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets changes
     *
     * @return \MagDv\Cargomart\Dto\ChatPostPayloadModelFieldChangeChangesInner[]
     */
    public function getChanges()
    {
        return $this->container['changes'];
    }

    /**
     * Sets changes
     *
     * @param \MagDv\Cargomart\Dto\ChatPostPayloadModelFieldChangeChangesInner[] $changes Список изменений
     *
     * @return self
     */
    public function setChanges($changes)
    {
        if (is_null($changes)) {
            throw new \InvalidArgumentException('non-nullable changes cannot be null');
        }
        $this->container['changes'] = $changes;

        return $this;
    }

    /**
     * Gets point
     *
     * @return \MagDv\Cargomart\Dto\ChatPostPayloadOrderPointInner[]|null
     */
    public function getPoint()
    {
        return $this->container['point'];
    }

    /**
     * Sets point
     *
     * @param \MagDv\Cargomart\Dto\ChatPostPayloadOrderPointInner[]|null $point Данные пунктов погрузки
     *
     * @return self
     */
    public function setPoint($point)
    {
        if (is_null($point)) {
            throw new \InvalidArgumentException('non-nullable point cannot be null');
        }
        $this->container['point'] = $point;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id Идентификатор заказа
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets correction_id
     *
     * @return int
     */
    public function getCorrectionId()
    {
        return $this->container['correction_id'];
    }

    /**
     * Sets correction_id
     *
     * @param int $correction_id Идентификатор запроса на изменение водителя и машины
     *
     * @return self
     */
    public function setCorrectionId($correction_id)
    {
        if (is_null($correction_id)) {
            throw new \InvalidArgumentException('non-nullable correction_id cannot be null');
        }
        $this->container['correction_id'] = $correction_id;

        return $this;
    }

    /**
     * Gets comment_for_consignor
     *
     * @return string|null
     */
    public function getCommentForConsignor()
    {
        return $this->container['comment_for_consignor'];
    }

    /**
     * Sets comment_for_consignor
     *
     * @param string|null $comment_for_consignor Комментарий для отправителя
     *
     * @return self
     */
    public function setCommentForConsignor($comment_for_consignor)
    {
        if (is_null($comment_for_consignor)) {
            throw new \InvalidArgumentException('non-nullable comment_for_consignor cannot be null');
        }
        $this->container['comment_for_consignor'] = $comment_for_consignor;

        return $this;
    }

    /**
     * Gets comment_for_carrier
     *
     * @return string|null
     */
    public function getCommentForCarrier()
    {
        return $this->container['comment_for_carrier'];
    }

    /**
     * Sets comment_for_carrier
     *
     * @param string|null $comment_for_carrier Комментарий для перевозчика
     *
     * @return self
     */
    public function setCommentForCarrier($comment_for_carrier)
    {
        if (is_null($comment_for_carrier)) {
            throw new \InvalidArgumentException('non-nullable comment_for_carrier cannot be null');
        }
        $this->container['comment_for_carrier'] = $comment_for_carrier;

        return $this;
    }

    /**
     * Gets package_id
     *
     * @return string|null
     */
    public function getPackageId()
    {
        return $this->container['package_id'];
    }

    /**
     * Sets package_id
     *
     * @param string|null $package_id Идентификатор пакета документов
     *
     * @return self
     */
    public function setPackageId($package_id)
    {
        if (is_null($package_id)) {
            throw new \InvalidArgumentException('non-nullable package_id cannot be null');
        }
        $this->container['package_id'] = $package_id;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason Причина отклонения
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            throw new \InvalidArgumentException('non-nullable reason cannot be null');
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets file_ids
     *
     * @return string[]|null
     */
    public function getFileIds()
    {
        return $this->container['file_ids'];
    }

    /**
     * Sets file_ids
     *
     * @param string[]|null $file_ids Идентификаторы файлов на модерации
     *
     * @return self
     */
    public function setFileIds($file_ids)
    {
        if (is_null($file_ids)) {
            throw new \InvalidArgumentException('non-nullable file_ids cannot be null');
        }
        $this->container['file_ids'] = $file_ids;

        return $this;
    }

    /**
     * Gets file_urls
     *
     * @return string[]|null
     */
    public function getFileUrls()
    {
        return $this->container['file_urls'];
    }

    /**
     * Sets file_urls
     *
     * @param string[]|null $file_urls Ссылки на файлы на модерации
     *
     * @return self
     */
    public function setFileUrls($file_urls)
    {
        if (is_null($file_urls)) {
            throw new \InvalidArgumentException('non-nullable file_urls cannot be null');
        }
        $this->container['file_urls'] = $file_urls;

        return $this;
    }

    /**
     * Gets creator_fio
     *
     * @return string
     */
    public function getCreatorFio()
    {
        return $this->container['creator_fio'];
    }

    /**
     * Sets creator_fio
     *
     * @param string $creator_fio ФИО автора
     *
     * @return self
     */
    public function setCreatorFio($creator_fio)
    {
        if (is_null($creator_fio)) {
            throw new \InvalidArgumentException('non-nullable creator_fio cannot be null');
        }
        $this->container['creator_fio'] = $creator_fio;

        return $this;
    }

    /**
     * Gets event_date
     *
     * @return \DateTime|null
     */
    public function getEventDate()
    {
        return $this->container['event_date'];
    }

    /**
     * Sets event_date
     *
     * @param \DateTime|null $event_date Дата события
     *
     * @return self
     */
    public function setEventDate($event_date)
    {
        if (is_null($event_date)) {
            throw new \InvalidArgumentException('non-nullable event_date cannot be null');
        }
        $this->container['event_date'] = $event_date;

        return $this;
    }

    /**
     * Gets ecn_type
     *
     * @return \MagDv\Cargomart\Dto\EcnType
     */
    public function getEcnType()
    {
        return $this->container['ecn_type'];
    }

    /**
     * Sets ecn_type
     *
     * @param \MagDv\Cargomart\Dto\EcnType $ecn_type ecn_type
     *
     * @return self
     */
    public function setEcnType($ecn_type)
    {
        if (is_null($ecn_type)) {
            throw new \InvalidArgumentException('non-nullable ecn_type cannot be null');
        }
        $this->container['ecn_type'] = $ecn_type;

        return $this;
    }

    /**
     * Gets ecn_date
     *
     * @return string|null
     */
    public function getEcnDate()
    {
        return $this->container['ecn_date'];
    }

    /**
     * Sets ecn_date
     *
     * @param string|null $ecn_date Дата ТРН. Формат: DD.MM.YYYY.
     *
     * @return self
     */
    public function setEcnDate($ecn_date)
    {
        if (is_null($ecn_date)) {
            throw new \InvalidArgumentException('non-nullable ecn_date cannot be null');
        }
        $this->container['ecn_date'] = $ecn_date;

        return $this;
    }

    /**
     * Gets old_ecn_type
     *
     * @return \MagDv\Cargomart\Dto\EcnType
     */
    public function getOldEcnType()
    {
        return $this->container['old_ecn_type'];
    }

    /**
     * Sets old_ecn_type
     *
     * @param \MagDv\Cargomart\Dto\EcnType $old_ecn_type old_ecn_type
     *
     * @return self
     */
    public function setOldEcnType($old_ecn_type)
    {
        if (is_null($old_ecn_type)) {
            throw new \InvalidArgumentException('non-nullable old_ecn_type cannot be null');
        }
        $this->container['old_ecn_type'] = $old_ecn_type;

        return $this;
    }

    /**
     * Gets old_ecn_number
     *
     * @return string
     */
    public function getOldEcnNumber()
    {
        return $this->container['old_ecn_number'];
    }

    /**
     * Sets old_ecn_number
     *
     * @param string $old_ecn_number Номер отмененной ТРН
     *
     * @return self
     */
    public function setOldEcnNumber($old_ecn_number)
    {
        if (is_null($old_ecn_number)) {
            throw new \InvalidArgumentException('non-nullable old_ecn_number cannot be null');
        }
        $this->container['old_ecn_number'] = $old_ecn_number;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return \MagDv\Cargomart\Dto\EcnOperatorEnum|null
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param \MagDv\Cargomart\Dto\EcnOperatorEnum|null $operator operator
     *
     * @return self
     */
    public function setOperator($operator)
    {
        if (is_null($operator)) {
            throw new \InvalidArgumentException('non-nullable operator cannot be null');
        }
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets old_ecn_date
     *
     * @return string|null
     */
    public function getOldEcnDate()
    {
        return $this->container['old_ecn_date'];
    }

    /**
     * Sets old_ecn_date
     *
     * @param string|null $old_ecn_date Дата отмененной ТРН. Формат: DD.MM.YYYY.
     *
     * @return self
     */
    public function setOldEcnDate($old_ecn_date)
    {
        if (is_null($old_ecn_date)) {
            throw new \InvalidArgumentException('non-nullable old_ecn_date cannot be null');
        }
        $this->container['old_ecn_date'] = $old_ecn_date;

        return $this;
    }

    /**
     * Gets old_pdf_version_file
     *
     * @return \MagDv\Cargomart\Dto\FileUrl
     */
    public function getOldPdfVersionFile()
    {
        return $this->container['old_pdf_version_file'];
    }

    /**
     * Sets old_pdf_version_file
     *
     * @param \MagDv\Cargomart\Dto\FileUrl $old_pdf_version_file Ссылка на скачивание предыдущей версии ТРН
     *
     * @return self
     */
    public function setOldPdfVersionFile($old_pdf_version_file)
    {
        if (is_null($old_pdf_version_file)) {
            throw new \InvalidArgumentException('non-nullable old_pdf_version_file cannot be null');
        }
        $this->container['old_pdf_version_file'] = $old_pdf_version_file;

        return $this;
    }

    /**
     * Gets order_hash
     *
     * @return string
     */
    public function getOrderHash()
    {
        return $this->container['order_hash'];
    }

    /**
     * Sets order_hash
     *
     * @param string $order_hash Хеш заказа
     *
     * @return self
     */
    public function setOrderHash($order_hash)
    {
        if (is_null($order_hash)) {
            throw new \InvalidArgumentException('non-nullable order_hash cannot be null');
        }
        $this->container['order_hash'] = $order_hash;

        return $this;
    }

    /**
     * Gets order_patch_id
     *
     * @return string
     */
    public function getOrderPatchId()
    {
        return $this->container['order_patch_id'];
    }

    /**
     * Sets order_patch_id
     *
     * @param string $order_patch_id Идентификатор запрос на изменение заказа
     *
     * @return self
     */
    public function setOrderPatchId($order_patch_id)
    {
        if (is_null($order_patch_id)) {
            throw new \InvalidArgumentException('non-nullable order_patch_id cannot be null');
        }
        $this->container['order_patch_id'] = $order_patch_id;

        return $this;
    }

    /**
     * Gets new_values
     *
     * @return \MagDv\Cargomart\Dto\ChatPostPayloadOrderPatchNewValues|null
     */
    public function getNewValues()
    {
        return $this->container['new_values'];
    }

    /**
     * Sets new_values
     *
     * @param \MagDv\Cargomart\Dto\ChatPostPayloadOrderPatchNewValues|null $new_values new_values
     *
     * @return self
     */
    public function setNewValues($new_values)
    {
        if (is_null($new_values)) {
            throw new \InvalidArgumentException('non-nullable new_values cannot be null');
        }
        $this->container['new_values'] = $new_values;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Идентификатор причины
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return string|null
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string|null $tracking_number Трек номер отправления
     *
     * @return self
     */
    public function setTrackingNumber($tracking_number)
    {
        if (is_null($tracking_number)) {
            throw new \InvalidArgumentException('non-nullable tracking_number cannot be null');
        }
        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets post_service_name
     *
     * @return string|null
     */
    public function getPostServiceName()
    {
        return $this->container['post_service_name'];
    }

    /**
     * Sets post_service_name
     *
     * @param string|null $post_service_name Почтовая служба
     *
     * @return self
     */
    public function setPostServiceName($post_service_name)
    {
        if (is_null($post_service_name)) {
            throw new \InvalidArgumentException('non-nullable post_service_name cannot be null');
        }
        $this->container['post_service_name'] = $post_service_name;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \MagDv\Cargomart\Dto\ChatPostPayloadPaymentConsignorToExpeditorTransactionsInner[]|null
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \MagDv\Cargomart\Dto\ChatPostPayloadPaymentConsignorToExpeditorTransactionsInner[]|null $transactions transactions
     *
     * @return self
     */
    public function setTransactions($transactions)
    {
        if (is_null($transactions)) {
            throw new \InvalidArgumentException('non-nullable transactions cannot be null');
        }
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets truck
     *
     * @return \MagDv\Cargomart\Dto\ChatPostPayloadTruckChangeV2Truck|null
     */
    public function getTruck()
    {
        return $this->container['truck'];
    }

    /**
     * Sets truck
     *
     * @param \MagDv\Cargomart\Dto\ChatPostPayloadTruckChangeV2Truck|null $truck truck
     *
     * @return self
     */
    public function setTruck($truck)
    {
        if (is_null($truck)) {
            throw new \InvalidArgumentException('non-nullable truck cannot be null');
        }
        $this->container['truck'] = $truck;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name ФИО пользователя, на которого выдается сертификат
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \MagDv\Cargomart\Dto\UserCertificateStatusEnum
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \MagDv\Cargomart\Dto\UserCertificateStatusEnum $status Статус выдачи сертификата
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Телефон подтверждения выдачи сертификата
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets driver_name
     *
     * @return string
     */
    public function getDriverName()
    {
        return $this->container['driver_name'];
    }

    /**
     * Sets driver_name
     *
     * @param string $driver_name ФИО водителя
     *
     * @return self
     */
    public function setDriverName($driver_name)
    {
        if (is_null($driver_name)) {
            throw new \InvalidArgumentException('non-nullable driver_name cannot be null');
        }
        $this->container['driver_name'] = $driver_name;

        return $this;
    }

    /**
     * Gets point_name
     *
     * @return string
     */
    public function getPointName()
    {
        return $this->container['point_name'];
    }

    /**
     * Sets point_name
     *
     * @param string $point_name Название пункта маршрута
     *
     * @return self
     */
    public function setPointName($point_name)
    {
        if (is_null($point_name)) {
            throw new \InvalidArgumentException('non-nullable point_name cannot be null');
        }
        $this->container['point_name'] = $point_name;

        return $this;
    }

    /**
     * Gets driver_app_order_point_status
     *
     * @return \MagDv\Cargomart\Dto\ChatPostDriverAppOrderPointStatusEnum|null
     */
    public function getDriverAppOrderPointStatus()
    {
        return $this->container['driver_app_order_point_status'];
    }

    /**
     * Sets driver_app_order_point_status
     *
     * @param \MagDv\Cargomart\Dto\ChatPostDriverAppOrderPointStatusEnum|null $driver_app_order_point_status driver_app_order_point_status
     *
     * @return self
     */
    public function setDriverAppOrderPointStatus($driver_app_order_point_status)
    {
        if (is_null($driver_app_order_point_status)) {
            throw new \InvalidArgumentException('non-nullable driver_app_order_point_status cannot be null');
        }
        $this->container['driver_app_order_point_status'] = $driver_app_order_point_status;

        return $this;
    }

    /**
     * Gets resolution
     *
     * @return \MagDv\Cargomart\Dto\ExpeditorTaskResolutionEnum
     */
    public function getResolution()
    {
        return $this->container['resolution'];
    }

    /**
     * Sets resolution
     *
     * @param \MagDv\Cargomart\Dto\ExpeditorTaskResolutionEnum $resolution Резолюция
     *
     * @return self
     */
    public function setResolution($resolution)
    {
        if (is_null($resolution)) {
            throw new \InvalidArgumentException('non-nullable resolution cannot be null');
        }
        $this->container['resolution'] = $resolution;

        return $this;
    }

    /**
     * Gets task_type
     *
     * @return \MagDv\Cargomart\Dto\ExpeditorTaskTypeEnum
     */
    public function getTaskType()
    {
        return $this->container['task_type'];
    }

    /**
     * Sets task_type
     *
     * @param \MagDv\Cargomart\Dto\ExpeditorTaskTypeEnum $task_type Тип задачи
     *
     * @return self
     */
    public function setTaskType($task_type)
    {
        if (is_null($task_type)) {
            throw new \InvalidArgumentException('non-nullable task_type cannot be null');
        }
        $this->container['task_type'] = $task_type;

        return $this;
    }

    /**
     * Gets first_storage_point_title
     *
     * @return string
     */
    public function getFirstStoragePointTitle()
    {
        return $this->container['first_storage_point_title'];
    }

    /**
     * Sets first_storage_point_title
     *
     * @param string $first_storage_point_title Название пункта погрузки
     *
     * @return self
     */
    public function setFirstStoragePointTitle($first_storage_point_title)
    {
        if (is_null($first_storage_point_title)) {
            throw new \InvalidArgumentException('non-nullable first_storage_point_title cannot be null');
        }
        $this->container['first_storage_point_title'] = $first_storage_point_title;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Название события
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets step_bid
     *
     * @return string|null
     */
    public function getStepBid()
    {
        return $this->container['step_bid'];
    }

    /**
     * Sets step_bid
     *
     * @param string|null $step_bid Шаг ставки
     *
     * @return self
     */
    public function setStepBid($step_bid)
    {
        if (is_null($step_bid)) {
            throw new \InvalidArgumentException('non-nullable step_bid cannot be null');
        }
        $this->container['step_bid'] = $step_bid;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string|null $end_date Дата окончания торгов
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets text_price
     *
     * @return string|null
     */
    public function getTextPrice()
    {
        return $this->container['text_price'];
    }

    /**
     * Sets text_price
     *
     * @param string|null $text_price Стоимость
     *
     * @return self
     */
    public function setTextPrice($text_price)
    {
        if (is_null($text_price)) {
            throw new \InvalidArgumentException('non-nullable text_price cannot be null');
        }
        $this->container['text_price'] = $text_price;

        return $this;
    }

    /**
     * Gets loading_date_time
     *
     * @return string|null
     */
    public function getLoadingDateTime()
    {
        return $this->container['loading_date_time'];
    }

    /**
     * Sets loading_date_time
     *
     * @param string|null $loading_date_time Время погрузки
     *
     * @return self
     */
    public function setLoadingDateTime($loading_date_time)
    {
        if (is_null($loading_date_time)) {
            throw new \InvalidArgumentException('non-nullable loading_date_time cannot be null');
        }
        $this->container['loading_date_time'] = $loading_date_time;

        return $this;
    }

    /**
     * Gets consignor_pay_value
     *
     * @return \MagDv\Cargomart\Dto\PayValue|null
     */
    public function getConsignorPayValue()
    {
        return $this->container['consignor_pay_value'];
    }

    /**
     * Sets consignor_pay_value
     *
     * @param \MagDv\Cargomart\Dto\PayValue|null $consignor_pay_value Цена заказчика
     *
     * @return self
     */
    public function setConsignorPayValue($consignor_pay_value)
    {
        if (is_null($consignor_pay_value)) {
            throw new \InvalidArgumentException('non-nullable consignor_pay_value cannot be null');
        }
        $this->container['consignor_pay_value'] = $consignor_pay_value;

        return $this;
    }

    /**
     * Gets carrier_pay_value
     *
     * @return \MagDv\Cargomart\Dto\PayValue|null
     */
    public function getCarrierPayValue()
    {
        return $this->container['carrier_pay_value'];
    }

    /**
     * Sets carrier_pay_value
     *
     * @param \MagDv\Cargomart\Dto\PayValue|null $carrier_pay_value Цена перевозчика
     *
     * @return self
     */
    public function setCarrierPayValue($carrier_pay_value)
    {
        if (is_null($carrier_pay_value)) {
            throw new \InvalidArgumentException('non-nullable carrier_pay_value cannot be null');
        }
        $this->container['carrier_pay_value'] = $carrier_pay_value;

        return $this;
    }

    /**
     * Gets file
     *
     * @return \MagDv\Cargomart\Dto\FileV2|null
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param \MagDv\Cargomart\Dto\FileV2|null $file Файл акта о неподачи машины
     *
     * @return self
     */
    public function setFile($file)
    {
        if (is_null($file)) {
            throw new \InvalidArgumentException('non-nullable file cannot be null');
        }
        $this->container['file'] = $file;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


