<?php
/**
 * UserProfileFull
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * UserProfileFull Class Doc Comment
 *
 * @category Class
 * @description Профиль пользователя
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserProfileFull implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'user-profile-full';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'last_name' => 'string',
        'first_name' => 'string',
        'second_name' => 'string',
        'position' => 'string',
        'email' => 'string',
        'contact_email' => 'string',
        'contact_email_status' => '\MagDv\Cargomart\Dto\UserContactEmailStatusEnum',
        'contact_email_resend_code_after_date' => '\DateTime',
        'contact_email_confirm_before_date' => '\DateTime',
        'phone' => 'string',
        'contact_phone' => 'string',
        'contact_phone_ext' => 'string',
        'email_un_confirmed' => 'string',
        'email_confirm_before_date' => '\DateTime',
        'phone_un_confirmed' => 'string',
        'phone_confirm_before_date' => '\DateTime',
        'timezone' => 'string',
        'role' => '\MagDv\Cargomart\Dto\CompanyTypeEnum',
        'role_id' => '\MagDv\Cargomart\Dto\UserRoleEnum',
        'is_blocked' => 'bool',
        'locked_profile' => 'bool',
        'is_phone_verified' => 'bool',
        'verified_phone' => 'string',
        'is_validated' => 'bool',
        'legal_status_id' => '\MagDv\Cargomart\Dto\LegalFormEnum',
        'is_have_bid' => 'bool',
        'is_have_general_partner' => 'bool',
        'delay_send_sms' => 'int',
        'delay_send_email' => 'int',
        'available_resend_email_code_date' => '\DateTime',
        'available_resend_sms_code_date' => '\DateTime',
        'company' => '\MagDv\Cargomart\Dto\CompanyInfo',
        'access' => '\MagDv\Cargomart\Dto\UserAccess',
        'personal_manager' => '\MagDv\Cargomart\Dto\PersonalManager[]',
        'issue_certificate' => '\MagDv\Cargomart\Dto\IssueCertificate',
        'simple_signature_phone_verification' => '\MagDv\Cargomart\Dto\ValueWithCodeVerification'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'last_name' => null,
        'first_name' => null,
        'second_name' => null,
        'position' => null,
        'email' => 'email',
        'contact_email' => 'email',
        'contact_email_status' => null,
        'contact_email_resend_code_after_date' => 'date-time',
        'contact_email_confirm_before_date' => 'date-time',
        'phone' => null,
        'contact_phone' => null,
        'contact_phone_ext' => null,
        'email_un_confirmed' => null,
        'email_confirm_before_date' => 'date-time',
        'phone_un_confirmed' => null,
        'phone_confirm_before_date' => 'date-time',
        'timezone' => null,
        'role' => null,
        'role_id' => null,
        'is_blocked' => null,
        'locked_profile' => null,
        'is_phone_verified' => null,
        'verified_phone' => null,
        'is_validated' => null,
        'legal_status_id' => null,
        'is_have_bid' => null,
        'is_have_general_partner' => null,
        'delay_send_sms' => null,
        'delay_send_email' => null,
        'available_resend_email_code_date' => 'date-time',
        'available_resend_sms_code_date' => 'date-time',
        'company' => null,
        'access' => null,
        'personal_manager' => null,
        'issue_certificate' => null,
        'simple_signature_phone_verification' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'last_name' => false,
        'first_name' => false,
        'second_name' => false,
        'position' => false,
        'email' => false,
        'contact_email' => false,
        'contact_email_status' => false,
        'contact_email_resend_code_after_date' => false,
        'contact_email_confirm_before_date' => false,
        'phone' => false,
        'contact_phone' => false,
        'contact_phone_ext' => false,
        'email_un_confirmed' => false,
        'email_confirm_before_date' => false,
        'phone_un_confirmed' => false,
        'phone_confirm_before_date' => false,
        'timezone' => false,
        'role' => false,
        'role_id' => false,
        'is_blocked' => false,
        'locked_profile' => false,
        'is_phone_verified' => false,
        'verified_phone' => false,
        'is_validated' => false,
        'legal_status_id' => false,
        'is_have_bid' => false,
        'is_have_general_partner' => false,
        'delay_send_sms' => false,
        'delay_send_email' => false,
        'available_resend_email_code_date' => false,
        'available_resend_sms_code_date' => false,
        'company' => false,
        'access' => false,
        'personal_manager' => false,
        'issue_certificate' => false,
        'simple_signature_phone_verification' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'last_name' => 'lastName',
        'first_name' => 'firstName',
        'second_name' => 'secondName',
        'position' => 'position',
        'email' => 'email',
        'contact_email' => 'contactEmail',
        'contact_email_status' => 'contactEmailStatus',
        'contact_email_resend_code_after_date' => 'contactEmailResendCodeAfterDate',
        'contact_email_confirm_before_date' => 'contactEmailConfirmBeforeDate',
        'phone' => 'phone',
        'contact_phone' => 'contactPhone',
        'contact_phone_ext' => 'contactPhoneExt',
        'email_un_confirmed' => 'emailUnConfirmed',
        'email_confirm_before_date' => 'emailConfirmBeforeDate',
        'phone_un_confirmed' => 'phoneUnConfirmed',
        'phone_confirm_before_date' => 'phoneConfirmBeforeDate',
        'timezone' => 'timezone',
        'role' => 'role',
        'role_id' => 'roleId',
        'is_blocked' => 'isBlocked',
        'locked_profile' => 'lockedProfile',
        'is_phone_verified' => 'isPhoneVerified',
        'verified_phone' => 'verifiedPhone',
        'is_validated' => 'isValidated',
        'legal_status_id' => 'legalStatusId',
        'is_have_bid' => 'isHaveBid',
        'is_have_general_partner' => 'isHaveGeneralPartner',
        'delay_send_sms' => 'delaySendSms',
        'delay_send_email' => 'delaySendEmail',
        'available_resend_email_code_date' => 'availableResendEmailCodeDate',
        'available_resend_sms_code_date' => 'availableResendSmsCodeDate',
        'company' => 'company',
        'access' => 'access',
        'personal_manager' => 'personalManager',
        'issue_certificate' => 'issueCertificate',
        'simple_signature_phone_verification' => 'simpleSignaturePhoneVerification'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'last_name' => 'setLastName',
        'first_name' => 'setFirstName',
        'second_name' => 'setSecondName',
        'position' => 'setPosition',
        'email' => 'setEmail',
        'contact_email' => 'setContactEmail',
        'contact_email_status' => 'setContactEmailStatus',
        'contact_email_resend_code_after_date' => 'setContactEmailResendCodeAfterDate',
        'contact_email_confirm_before_date' => 'setContactEmailConfirmBeforeDate',
        'phone' => 'setPhone',
        'contact_phone' => 'setContactPhone',
        'contact_phone_ext' => 'setContactPhoneExt',
        'email_un_confirmed' => 'setEmailUnConfirmed',
        'email_confirm_before_date' => 'setEmailConfirmBeforeDate',
        'phone_un_confirmed' => 'setPhoneUnConfirmed',
        'phone_confirm_before_date' => 'setPhoneConfirmBeforeDate',
        'timezone' => 'setTimezone',
        'role' => 'setRole',
        'role_id' => 'setRoleId',
        'is_blocked' => 'setIsBlocked',
        'locked_profile' => 'setLockedProfile',
        'is_phone_verified' => 'setIsPhoneVerified',
        'verified_phone' => 'setVerifiedPhone',
        'is_validated' => 'setIsValidated',
        'legal_status_id' => 'setLegalStatusId',
        'is_have_bid' => 'setIsHaveBid',
        'is_have_general_partner' => 'setIsHaveGeneralPartner',
        'delay_send_sms' => 'setDelaySendSms',
        'delay_send_email' => 'setDelaySendEmail',
        'available_resend_email_code_date' => 'setAvailableResendEmailCodeDate',
        'available_resend_sms_code_date' => 'setAvailableResendSmsCodeDate',
        'company' => 'setCompany',
        'access' => 'setAccess',
        'personal_manager' => 'setPersonalManager',
        'issue_certificate' => 'setIssueCertificate',
        'simple_signature_phone_verification' => 'setSimpleSignaturePhoneVerification'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'last_name' => 'getLastName',
        'first_name' => 'getFirstName',
        'second_name' => 'getSecondName',
        'position' => 'getPosition',
        'email' => 'getEmail',
        'contact_email' => 'getContactEmail',
        'contact_email_status' => 'getContactEmailStatus',
        'contact_email_resend_code_after_date' => 'getContactEmailResendCodeAfterDate',
        'contact_email_confirm_before_date' => 'getContactEmailConfirmBeforeDate',
        'phone' => 'getPhone',
        'contact_phone' => 'getContactPhone',
        'contact_phone_ext' => 'getContactPhoneExt',
        'email_un_confirmed' => 'getEmailUnConfirmed',
        'email_confirm_before_date' => 'getEmailConfirmBeforeDate',
        'phone_un_confirmed' => 'getPhoneUnConfirmed',
        'phone_confirm_before_date' => 'getPhoneConfirmBeforeDate',
        'timezone' => 'getTimezone',
        'role' => 'getRole',
        'role_id' => 'getRoleId',
        'is_blocked' => 'getIsBlocked',
        'locked_profile' => 'getLockedProfile',
        'is_phone_verified' => 'getIsPhoneVerified',
        'verified_phone' => 'getVerifiedPhone',
        'is_validated' => 'getIsValidated',
        'legal_status_id' => 'getLegalStatusId',
        'is_have_bid' => 'getIsHaveBid',
        'is_have_general_partner' => 'getIsHaveGeneralPartner',
        'delay_send_sms' => 'getDelaySendSms',
        'delay_send_email' => 'getDelaySendEmail',
        'available_resend_email_code_date' => 'getAvailableResendEmailCodeDate',
        'available_resend_sms_code_date' => 'getAvailableResendSmsCodeDate',
        'company' => 'getCompany',
        'access' => 'getAccess',
        'personal_manager' => 'getPersonalManager',
        'issue_certificate' => 'getIssueCertificate',
        'simple_signature_phone_verification' => 'getSimpleSignaturePhoneVerification'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('second_name', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('contact_email', $data ?? [], null);
        $this->setIfExists('contact_email_status', $data ?? [], null);
        $this->setIfExists('contact_email_resend_code_after_date', $data ?? [], null);
        $this->setIfExists('contact_email_confirm_before_date', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('contact_phone', $data ?? [], null);
        $this->setIfExists('contact_phone_ext', $data ?? [], null);
        $this->setIfExists('email_un_confirmed', $data ?? [], null);
        $this->setIfExists('email_confirm_before_date', $data ?? [], null);
        $this->setIfExists('phone_un_confirmed', $data ?? [], null);
        $this->setIfExists('phone_confirm_before_date', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('role_id', $data ?? [], null);
        $this->setIfExists('is_blocked', $data ?? [], false);
        $this->setIfExists('locked_profile', $data ?? [], false);
        $this->setIfExists('is_phone_verified', $data ?? [], false);
        $this->setIfExists('verified_phone', $data ?? [], null);
        $this->setIfExists('is_validated', $data ?? [], false);
        $this->setIfExists('legal_status_id', $data ?? [], null);
        $this->setIfExists('is_have_bid', $data ?? [], false);
        $this->setIfExists('is_have_general_partner', $data ?? [], false);
        $this->setIfExists('delay_send_sms', $data ?? [], null);
        $this->setIfExists('delay_send_email', $data ?? [], null);
        $this->setIfExists('available_resend_email_code_date', $data ?? [], null);
        $this->setIfExists('available_resend_sms_code_date', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('access', $data ?? [], null);
        $this->setIfExists('personal_manager', $data ?? [], null);
        $this->setIfExists('issue_certificate', $data ?? [], null);
        $this->setIfExists('simple_signature_phone_verification', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        if ($this->container['role_id'] === null) {
            $invalidProperties[] = "'role_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Идентификатор
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Фамилия
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name Имя
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets second_name
     *
     * @return string|null
     */
    public function getSecondName()
    {
        return $this->container['second_name'];
    }

    /**
     * Sets second_name
     *
     * @param string|null $second_name Отчество
     *
     * @return self
     */
    public function setSecondName($second_name)
    {
        if (is_null($second_name)) {
            throw new \InvalidArgumentException('non-nullable second_name cannot be null');
        }
        $this->container['second_name'] = $second_name;

        return $this;
    }

    /**
     * Gets position
     *
     * @return string|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param string|null $position Должность
     *
     * @return self
     */
    public function setPosition($position)
    {
        if (is_null($position)) {
            throw new \InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string|null
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string|null $contact_email Контактный Email адрес
     *
     * @return self
     */
    public function setContactEmail($contact_email)
    {
        if (is_null($contact_email)) {
            throw new \InvalidArgumentException('non-nullable contact_email cannot be null');
        }
        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets contact_email_status
     *
     * @return \MagDv\Cargomart\Dto\UserContactEmailStatusEnum|null
     */
    public function getContactEmailStatus()
    {
        return $this->container['contact_email_status'];
    }

    /**
     * Sets contact_email_status
     *
     * @param \MagDv\Cargomart\Dto\UserContactEmailStatusEnum|null $contact_email_status Статус контактного Email
     *
     * @return self
     */
    public function setContactEmailStatus($contact_email_status)
    {
        if (is_null($contact_email_status)) {
            throw new \InvalidArgumentException('non-nullable contact_email_status cannot be null');
        }
        $this->container['contact_email_status'] = $contact_email_status;

        return $this;
    }

    /**
     * Gets contact_email_resend_code_after_date
     *
     * @return \DateTime|null
     */
    public function getContactEmailResendCodeAfterDate()
    {
        return $this->container['contact_email_resend_code_after_date'];
    }

    /**
     * Sets contact_email_resend_code_after_date
     *
     * @param \DateTime|null $contact_email_resend_code_after_date Дата когда след. раз можно будет отправить повторно код
     *
     * @return self
     */
    public function setContactEmailResendCodeAfterDate($contact_email_resend_code_after_date)
    {
        if (is_null($contact_email_resend_code_after_date)) {
            throw new \InvalidArgumentException('non-nullable contact_email_resend_code_after_date cannot be null');
        }
        $this->container['contact_email_resend_code_after_date'] = $contact_email_resend_code_after_date;

        return $this;
    }

    /**
     * Gets contact_email_confirm_before_date
     *
     * @return \DateTime|null
     */
    public function getContactEmailConfirmBeforeDate()
    {
        return $this->container['contact_email_confirm_before_date'];
    }

    /**
     * Sets contact_email_confirm_before_date
     *
     * @param \DateTime|null $contact_email_confirm_before_date Дата до которой надо подтвердить email
     *
     * @return self
     */
    public function setContactEmailConfirmBeforeDate($contact_email_confirm_before_date)
    {
        if (is_null($contact_email_confirm_before_date)) {
            throw new \InvalidArgumentException('non-nullable contact_email_confirm_before_date cannot be null');
        }
        $this->container['contact_email_confirm_before_date'] = $contact_email_confirm_before_date;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Телефон, только цифры
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets contact_phone
     *
     * @return string|null
     */
    public function getContactPhone()
    {
        return $this->container['contact_phone'];
    }

    /**
     * Sets contact_phone
     *
     * @param string|null $contact_phone Телефон, только цифры
     *
     * @return self
     */
    public function setContactPhone($contact_phone)
    {
        if (is_null($contact_phone)) {
            throw new \InvalidArgumentException('non-nullable contact_phone cannot be null');
        }
        $this->container['contact_phone'] = $contact_phone;

        return $this;
    }

    /**
     * Gets contact_phone_ext
     *
     * @return string|null
     */
    public function getContactPhoneExt()
    {
        return $this->container['contact_phone_ext'];
    }

    /**
     * Sets contact_phone_ext
     *
     * @param string|null $contact_phone_ext Контактный телефон(добавочный номер)
     *
     * @return self
     */
    public function setContactPhoneExt($contact_phone_ext)
    {
        if (is_null($contact_phone_ext)) {
            throw new \InvalidArgumentException('non-nullable contact_phone_ext cannot be null');
        }
        $this->container['contact_phone_ext'] = $contact_phone_ext;

        return $this;
    }

    /**
     * Gets email_un_confirmed
     *
     * @return string|null
     */
    public function getEmailUnConfirmed()
    {
        return $this->container['email_un_confirmed'];
    }

    /**
     * Sets email_un_confirmed
     *
     * @param string|null $email_un_confirmed Новая почта
     *
     * @return self
     */
    public function setEmailUnConfirmed($email_un_confirmed)
    {
        if (is_null($email_un_confirmed)) {
            throw new \InvalidArgumentException('non-nullable email_un_confirmed cannot be null');
        }
        $this->container['email_un_confirmed'] = $email_un_confirmed;

        return $this;
    }

    /**
     * Gets email_confirm_before_date
     *
     * @return \DateTime|null
     */
    public function getEmailConfirmBeforeDate()
    {
        return $this->container['email_confirm_before_date'];
    }

    /**
     * Sets email_confirm_before_date
     *
     * @param \DateTime|null $email_confirm_before_date Дата, до которой активен запрос на смену email (только при наличии запроса на смену)
     *
     * @return self
     */
    public function setEmailConfirmBeforeDate($email_confirm_before_date)
    {
        if (is_null($email_confirm_before_date)) {
            throw new \InvalidArgumentException('non-nullable email_confirm_before_date cannot be null');
        }
        $this->container['email_confirm_before_date'] = $email_confirm_before_date;

        return $this;
    }

    /**
     * Gets phone_un_confirmed
     *
     * @return string|null
     */
    public function getPhoneUnConfirmed()
    {
        return $this->container['phone_un_confirmed'];
    }

    /**
     * Sets phone_un_confirmed
     *
     * @param string|null $phone_un_confirmed Новый телефон
     *
     * @return self
     */
    public function setPhoneUnConfirmed($phone_un_confirmed)
    {
        if (is_null($phone_un_confirmed)) {
            throw new \InvalidArgumentException('non-nullable phone_un_confirmed cannot be null');
        }
        $this->container['phone_un_confirmed'] = $phone_un_confirmed;

        return $this;
    }

    /**
     * Gets phone_confirm_before_date
     *
     * @return \DateTime|null
     */
    public function getPhoneConfirmBeforeDate()
    {
        return $this->container['phone_confirm_before_date'];
    }

    /**
     * Sets phone_confirm_before_date
     *
     * @param \DateTime|null $phone_confirm_before_date Дата, до которой активен запрос на смену телефона (только при наличии запроса на смену)
     *
     * @return self
     */
    public function setPhoneConfirmBeforeDate($phone_confirm_before_date)
    {
        if (is_null($phone_confirm_before_date)) {
            throw new \InvalidArgumentException('non-nullable phone_confirm_before_date cannot be null');
        }
        $this->container['phone_confirm_before_date'] = $phone_confirm_before_date;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone Часовой пояс
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets role
     *
     * @return \MagDv\Cargomart\Dto\CompanyTypeEnum|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param \MagDv\Cargomart\Dto\CompanyTypeEnum|null $role Роль клиента
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            throw new \InvalidArgumentException('non-nullable role cannot be null');
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets role_id
     *
     * @return \MagDv\Cargomart\Dto\UserRoleEnum
     */
    public function getRoleId()
    {
        return $this->container['role_id'];
    }

    /**
     * Sets role_id
     *
     * @param \MagDv\Cargomart\Dto\UserRoleEnum $role_id Роль в организации: 0- контакт, 1- читатель, 2- редактор, 3- владелец
     *
     * @return self
     */
    public function setRoleId($role_id)
    {
        if (is_null($role_id)) {
            throw new \InvalidArgumentException('non-nullable role_id cannot be null');
        }
        $this->container['role_id'] = $role_id;

        return $this;
    }

    /**
     * Gets is_blocked
     *
     * @return bool|null
     */
    public function getIsBlocked()
    {
        return $this->container['is_blocked'];
    }

    /**
     * Sets is_blocked
     *
     * @param bool|null $is_blocked Заблокирован ли пользователь
     *
     * @return self
     */
    public function setIsBlocked($is_blocked)
    {
        if (is_null($is_blocked)) {
            throw new \InvalidArgumentException('non-nullable is_blocked cannot be null');
        }
        $this->container['is_blocked'] = $is_blocked;

        return $this;
    }

    /**
     * Gets locked_profile
     *
     * @return bool|null
     */
    public function getLockedProfile()
    {
        return $this->container['locked_profile'];
    }

    /**
     * Sets locked_profile
     *
     * @param bool|null $locked_profile Заблокирована ли возможность редактирования пользовательских данных
     *
     * @return self
     */
    public function setLockedProfile($locked_profile)
    {
        if (is_null($locked_profile)) {
            throw new \InvalidArgumentException('non-nullable locked_profile cannot be null');
        }
        $this->container['locked_profile'] = $locked_profile;

        return $this;
    }

    /**
     * Gets is_phone_verified
     *
     * @return bool|null
     */
    public function getIsPhoneVerified()
    {
        return $this->container['is_phone_verified'];
    }

    /**
     * Sets is_phone_verified
     *
     * @param bool|null $is_phone_verified Подтверждена ли личность по телефону
     *
     * @return self
     */
    public function setIsPhoneVerified($is_phone_verified)
    {
        if (is_null($is_phone_verified)) {
            throw new \InvalidArgumentException('non-nullable is_phone_verified cannot be null');
        }
        $this->container['is_phone_verified'] = $is_phone_verified;

        return $this;
    }

    /**
     * Gets verified_phone
     *
     * @return string|null
     */
    public function getVerifiedPhone()
    {
        return $this->container['verified_phone'];
    }

    /**
     * Sets verified_phone
     *
     * @param string|null $verified_phone Подтверждённый номер телефона
     *
     * @return self
     */
    public function setVerifiedPhone($verified_phone)
    {
        if (is_null($verified_phone)) {
            throw new \InvalidArgumentException('non-nullable verified_phone cannot be null');
        }
        $this->container['verified_phone'] = $verified_phone;

        return $this;
    }

    /**
     * Gets is_validated
     *
     * @return bool|null
     * @deprecated
     */
    public function getIsValidated()
    {
        return $this->container['is_validated'];
    }

    /**
     * Sets is_validated
     *
     * @param bool|null $is_validated @deprecated. Прошел ли пользователь валидацию
     *
     * @return self
     * @deprecated
     */
    public function setIsValidated($is_validated)
    {
        if (is_null($is_validated)) {
            throw new \InvalidArgumentException('non-nullable is_validated cannot be null');
        }
        $this->container['is_validated'] = $is_validated;

        return $this;
    }

    /**
     * Gets legal_status_id
     *
     * @return \MagDv\Cargomart\Dto\LegalFormEnum|null
     * @deprecated
     */
    public function getLegalStatusId()
    {
        return $this->container['legal_status_id'];
    }

    /**
     * Sets legal_status_id
     *
     * @param \MagDv\Cargomart\Dto\LegalFormEnum|null $legal_status_id @deprecated. Юридический статус: 1- Физическое лицо, 2- Индивидуальный предприниматель, 3- Юридическое лицо
     *
     * @return self
     * @deprecated
     */
    public function setLegalStatusId($legal_status_id)
    {
        if (is_null($legal_status_id)) {
            throw new \InvalidArgumentException('non-nullable legal_status_id cannot be null');
        }
        $this->container['legal_status_id'] = $legal_status_id;

        return $this;
    }

    /**
     * Gets is_have_bid
     *
     * @return bool|null
     */
    public function getIsHaveBid()
    {
        return $this->container['is_have_bid'];
    }

    /**
     * Sets is_have_bid
     *
     * @param bool|null $is_have_bid пользователь сделал хотя бы одну ставку (только для перевозчика)
     *
     * @return self
     */
    public function setIsHaveBid($is_have_bid)
    {
        if (is_null($is_have_bid)) {
            throw new \InvalidArgumentException('non-nullable is_have_bid cannot be null');
        }
        $this->container['is_have_bid'] = $is_have_bid;

        return $this;
    }

    /**
     * Gets is_have_general_partner
     *
     * @return bool|null
     */
    public function getIsHaveGeneralPartner()
    {
        return $this->container['is_have_general_partner'];
    }

    /**
     * Sets is_have_general_partner
     *
     * @param bool|null $is_have_general_partner в партнерах у пользователя есть хотя бы один из крупных отправителей (только для перевозчика)
     *
     * @return self
     */
    public function setIsHaveGeneralPartner($is_have_general_partner)
    {
        if (is_null($is_have_general_partner)) {
            throw new \InvalidArgumentException('non-nullable is_have_general_partner cannot be null');
        }
        $this->container['is_have_general_partner'] = $is_have_general_partner;

        return $this;
    }

    /**
     * Gets delay_send_sms
     *
     * @return int|null
     * @deprecated
     */
    public function getDelaySendSms()
    {
        return $this->container['delay_send_sms'];
    }

    /**
     * Sets delay_send_sms
     *
     * @param int|null $delay_send_sms @deprecated. Смотреть на дату. Время ожидания до возможности повторной отправки смс(сек)
     *
     * @return self
     * @deprecated
     */
    public function setDelaySendSms($delay_send_sms)
    {
        if (is_null($delay_send_sms)) {
            throw new \InvalidArgumentException('non-nullable delay_send_sms cannot be null');
        }
        $this->container['delay_send_sms'] = $delay_send_sms;

        return $this;
    }

    /**
     * Gets delay_send_email
     *
     * @return int|null
     * @deprecated
     */
    public function getDelaySendEmail()
    {
        return $this->container['delay_send_email'];
    }

    /**
     * Sets delay_send_email
     *
     * @param int|null $delay_send_email @deprecated. Смотреть на дату. Время ожидания до возможности повторной отправки email(сек)
     *
     * @return self
     * @deprecated
     */
    public function setDelaySendEmail($delay_send_email)
    {
        if (is_null($delay_send_email)) {
            throw new \InvalidArgumentException('non-nullable delay_send_email cannot be null');
        }
        $this->container['delay_send_email'] = $delay_send_email;

        return $this;
    }

    /**
     * Gets available_resend_email_code_date
     *
     * @return \DateTime|null
     */
    public function getAvailableResendEmailCodeDate()
    {
        return $this->container['available_resend_email_code_date'];
    }

    /**
     * Sets available_resend_email_code_date
     *
     * @param \DateTime|null $available_resend_email_code_date Время возможности повторной отправки email
     *
     * @return self
     */
    public function setAvailableResendEmailCodeDate($available_resend_email_code_date)
    {
        if (is_null($available_resend_email_code_date)) {
            throw new \InvalidArgumentException('non-nullable available_resend_email_code_date cannot be null');
        }
        $this->container['available_resend_email_code_date'] = $available_resend_email_code_date;

        return $this;
    }

    /**
     * Gets available_resend_sms_code_date
     *
     * @return \DateTime|null
     */
    public function getAvailableResendSmsCodeDate()
    {
        return $this->container['available_resend_sms_code_date'];
    }

    /**
     * Sets available_resend_sms_code_date
     *
     * @param \DateTime|null $available_resend_sms_code_date Время возможности повторной отправки СМС
     *
     * @return self
     */
    public function setAvailableResendSmsCodeDate($available_resend_sms_code_date)
    {
        if (is_null($available_resend_sms_code_date)) {
            throw new \InvalidArgumentException('non-nullable available_resend_sms_code_date cannot be null');
        }
        $this->container['available_resend_sms_code_date'] = $available_resend_sms_code_date;

        return $this;
    }

    /**
     * Gets company
     *
     * @return \MagDv\Cargomart\Dto\CompanyInfo|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \MagDv\Cargomart\Dto\CompanyInfo|null $company Данные компании пользователя
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets access
     *
     * @return \MagDv\Cargomart\Dto\UserAccess|null
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param \MagDv\Cargomart\Dto\UserAccess|null $access access
     *
     * @return self
     */
    public function setAccess($access)
    {
        if (is_null($access)) {
            throw new \InvalidArgumentException('non-nullable access cannot be null');
        }
        $this->container['access'] = $access;

        return $this;
    }

    /**
     * Gets personal_manager
     *
     * @return \MagDv\Cargomart\Dto\PersonalManager[]|null
     */
    public function getPersonalManager()
    {
        return $this->container['personal_manager'];
    }

    /**
     * Sets personal_manager
     *
     * @param \MagDv\Cargomart\Dto\PersonalManager[]|null $personal_manager Список персональных менеджеров компании пользователя
     *
     * @return self
     */
    public function setPersonalManager($personal_manager)
    {
        if (is_null($personal_manager)) {
            throw new \InvalidArgumentException('non-nullable personal_manager cannot be null');
        }
        $this->container['personal_manager'] = $personal_manager;

        return $this;
    }

    /**
     * Gets issue_certificate
     *
     * @return \MagDv\Cargomart\Dto\IssueCertificate|null
     */
    public function getIssueCertificate()
    {
        return $this->container['issue_certificate'];
    }

    /**
     * Sets issue_certificate
     *
     * @param \MagDv\Cargomart\Dto\IssueCertificate|null $issue_certificate issue_certificate
     *
     * @return self
     */
    public function setIssueCertificate($issue_certificate)
    {
        if (is_null($issue_certificate)) {
            throw new \InvalidArgumentException('non-nullable issue_certificate cannot be null');
        }
        $this->container['issue_certificate'] = $issue_certificate;

        return $this;
    }

    /**
     * Gets simple_signature_phone_verification
     *
     * @return \MagDv\Cargomart\Dto\ValueWithCodeVerification|null
     */
    public function getSimpleSignaturePhoneVerification()
    {
        return $this->container['simple_signature_phone_verification'];
    }

    /**
     * Sets simple_signature_phone_verification
     *
     * @param \MagDv\Cargomart\Dto\ValueWithCodeVerification|null $simple_signature_phone_verification simple_signature_phone_verification
     *
     * @return self
     */
    public function setSimpleSignaturePhoneVerification($simple_signature_phone_verification)
    {
        if (is_null($simple_signature_phone_verification)) {
            throw new \InvalidArgumentException('non-nullable simple_signature_phone_verification cannot be null');
        }
        $this->container['simple_signature_phone_verification'] = $simple_signature_phone_verification;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


