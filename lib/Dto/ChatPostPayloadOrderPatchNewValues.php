<?php
/**
 * ChatPostPayloadOrderPatchNewValues
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * ChatPostPayloadOrderPatchNewValues Class Doc Comment
 *
 * @category Class
 * @description Новые данные
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChatPostPayloadOrderPatchNewValues implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = 'type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChatPostPayloadOrderPatch_newValues';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => '\MagDv\Cargomart\Dto\OrderPatchDiffValuesEnum',
        'consignor_price' => 'string',
        'consignor_price_vat_less' => 'string',
        'carrier_price' => 'string',
        'carrier_price_vat_less' => 'string',
        'currency_code' => 'string',
        'truck_type_id' => 'int',
        'company_branch_id' => 'int',
        'cargo_weight' => 'float',
        'cargo_capacity' => 'int',
        'load_weight' => 'float',
        'load_capacity' => 'int',
        'cargo_type' => 'string',
        'temperature' => '\MagDv\Cargomart\Dto\TemperatureRange',
        'loading' => 'int[]',
        'device' => 'string[]',
        'conditions' => 'string[]',
        'comment' => 'string',
        'point' => '\MagDv\Cargomart\Dto\OrderPatchRoutePointCard[]',
        'external_id' => 'string',
        'tag' => 'string[]',
        'truck' => '\MagDv\Cargomart\Dto\OrderTruck',
        'driver' => '\MagDv\Cargomart\Dto\OrderDriver'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'consignor_price' => 'cm-price',
        'consignor_price_vat_less' => 'cm-price',
        'carrier_price' => 'cm-price',
        'carrier_price_vat_less' => 'cm-price',
        'currency_code' => null,
        'truck_type_id' => null,
        'company_branch_id' => null,
        'cargo_weight' => null,
        'cargo_capacity' => null,
        'load_weight' => null,
        'load_capacity' => null,
        'cargo_type' => null,
        'temperature' => null,
        'loading' => null,
        'device' => null,
        'conditions' => null,
        'comment' => null,
        'point' => null,
        'external_id' => null,
        'tag' => null,
        'truck' => null,
        'driver' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'consignor_price' => false,
        'consignor_price_vat_less' => false,
        'carrier_price' => false,
        'carrier_price_vat_less' => false,
        'currency_code' => false,
        'truck_type_id' => false,
        'company_branch_id' => false,
        'cargo_weight' => false,
        'cargo_capacity' => false,
        'load_weight' => false,
        'load_capacity' => false,
        'cargo_type' => false,
        'temperature' => false,
        'loading' => false,
        'device' => false,
        'conditions' => false,
        'comment' => false,
        'point' => false,
        'external_id' => false,
        'tag' => false,
        'truck' => false,
        'driver' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'consignor_price' => 'consignorPrice',
        'consignor_price_vat_less' => 'consignorPriceVatLess',
        'carrier_price' => 'carrierPrice',
        'carrier_price_vat_less' => 'carrierPriceVatLess',
        'currency_code' => 'currencyCode',
        'truck_type_id' => 'truckTypeId',
        'company_branch_id' => 'companyBranchId',
        'cargo_weight' => 'cargoWeight',
        'cargo_capacity' => 'cargoCapacity',
        'load_weight' => 'loadWeight',
        'load_capacity' => 'loadCapacity',
        'cargo_type' => 'cargoType',
        'temperature' => 'temperature',
        'loading' => 'loading',
        'device' => 'device',
        'conditions' => 'conditions',
        'comment' => 'comment',
        'point' => 'point',
        'external_id' => 'externalId',
        'tag' => 'tag',
        'truck' => 'truck',
        'driver' => 'driver'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'consignor_price' => 'setConsignorPrice',
        'consignor_price_vat_less' => 'setConsignorPriceVatLess',
        'carrier_price' => 'setCarrierPrice',
        'carrier_price_vat_less' => 'setCarrierPriceVatLess',
        'currency_code' => 'setCurrencyCode',
        'truck_type_id' => 'setTruckTypeId',
        'company_branch_id' => 'setCompanyBranchId',
        'cargo_weight' => 'setCargoWeight',
        'cargo_capacity' => 'setCargoCapacity',
        'load_weight' => 'setLoadWeight',
        'load_capacity' => 'setLoadCapacity',
        'cargo_type' => 'setCargoType',
        'temperature' => 'setTemperature',
        'loading' => 'setLoading',
        'device' => 'setDevice',
        'conditions' => 'setConditions',
        'comment' => 'setComment',
        'point' => 'setPoint',
        'external_id' => 'setExternalId',
        'tag' => 'setTag',
        'truck' => 'setTruck',
        'driver' => 'setDriver'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'consignor_price' => 'getConsignorPrice',
        'consignor_price_vat_less' => 'getConsignorPriceVatLess',
        'carrier_price' => 'getCarrierPrice',
        'carrier_price_vat_less' => 'getCarrierPriceVatLess',
        'currency_code' => 'getCurrencyCode',
        'truck_type_id' => 'getTruckTypeId',
        'company_branch_id' => 'getCompanyBranchId',
        'cargo_weight' => 'getCargoWeight',
        'cargo_capacity' => 'getCargoCapacity',
        'load_weight' => 'getLoadWeight',
        'load_capacity' => 'getLoadCapacity',
        'cargo_type' => 'getCargoType',
        'temperature' => 'getTemperature',
        'loading' => 'getLoading',
        'device' => 'getDevice',
        'conditions' => 'getConditions',
        'comment' => 'getComment',
        'point' => 'getPoint',
        'external_id' => 'getExternalId',
        'tag' => 'getTag',
        'truck' => 'getTruck',
        'driver' => 'getDriver'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('consignor_price', $data ?? [], null);
        $this->setIfExists('consignor_price_vat_less', $data ?? [], null);
        $this->setIfExists('carrier_price', $data ?? [], null);
        $this->setIfExists('carrier_price_vat_less', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('truck_type_id', $data ?? [], null);
        $this->setIfExists('company_branch_id', $data ?? [], null);
        $this->setIfExists('cargo_weight', $data ?? [], null);
        $this->setIfExists('cargo_capacity', $data ?? [], null);
        $this->setIfExists('load_weight', $data ?? [], null);
        $this->setIfExists('load_capacity', $data ?? [], null);
        $this->setIfExists('cargo_type', $data ?? [], null);
        $this->setIfExists('temperature', $data ?? [], null);
        $this->setIfExists('loading', $data ?? [], null);
        $this->setIfExists('device', $data ?? [], null);
        $this->setIfExists('conditions', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('point', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('tag', $data ?? [], null);
        $this->setIfExists('truck', $data ?? [], null);
        $this->setIfExists('driver', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['type'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['consignor_price']) && !preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", $this->container['consignor_price'])) {
            $invalidProperties[] = "invalid value for 'consignor_price', must be conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.";
        }

        if (!is_null($this->container['consignor_price_vat_less']) && !preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", $this->container['consignor_price_vat_less'])) {
            $invalidProperties[] = "invalid value for 'consignor_price_vat_less', must be conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.";
        }

        if (!is_null($this->container['carrier_price']) && !preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", $this->container['carrier_price'])) {
            $invalidProperties[] = "invalid value for 'carrier_price', must be conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.";
        }

        if (!is_null($this->container['carrier_price_vat_less']) && !preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", $this->container['carrier_price_vat_less'])) {
            $invalidProperties[] = "invalid value for 'carrier_price_vat_less', must be conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return \MagDv\Cargomart\Dto\OrderPatchDiffValuesEnum|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \MagDv\Cargomart\Dto\OrderPatchDiffValuesEnum|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets consignor_price
     *
     * @return string|null
     */
    public function getConsignorPrice()
    {
        return $this->container['consignor_price'];
    }

    /**
     * Sets consignor_price
     *
     * @param string|null $consignor_price Цена для отправителя
     *
     * @return self
     */
    public function setConsignorPrice($consignor_price)
    {
        if (is_null($consignor_price)) {
            throw new \InvalidArgumentException('non-nullable consignor_price cannot be null');
        }

        if ((!preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", ObjectSerializer::toString($consignor_price)))) {
            throw new \InvalidArgumentException("invalid value for \$consignor_price when calling ChatPostPayloadOrderPatchNewValues., must conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.");
        }

        $this->container['consignor_price'] = $consignor_price;

        return $this;
    }

    /**
     * Gets consignor_price_vat_less
     *
     * @return string|null
     */
    public function getConsignorPriceVatLess()
    {
        return $this->container['consignor_price_vat_less'];
    }

    /**
     * Sets consignor_price_vat_less
     *
     * @param string|null $consignor_price_vat_less Цена для отправителя без НДС
     *
     * @return self
     */
    public function setConsignorPriceVatLess($consignor_price_vat_less)
    {
        if (is_null($consignor_price_vat_less)) {
            throw new \InvalidArgumentException('non-nullable consignor_price_vat_less cannot be null');
        }

        if ((!preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", ObjectSerializer::toString($consignor_price_vat_less)))) {
            throw new \InvalidArgumentException("invalid value for \$consignor_price_vat_less when calling ChatPostPayloadOrderPatchNewValues., must conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.");
        }

        $this->container['consignor_price_vat_less'] = $consignor_price_vat_less;

        return $this;
    }

    /**
     * Gets carrier_price
     *
     * @return string|null
     */
    public function getCarrierPrice()
    {
        return $this->container['carrier_price'];
    }

    /**
     * Sets carrier_price
     *
     * @param string|null $carrier_price Цена для перевозчика
     *
     * @return self
     */
    public function setCarrierPrice($carrier_price)
    {
        if (is_null($carrier_price)) {
            throw new \InvalidArgumentException('non-nullable carrier_price cannot be null');
        }

        if ((!preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", ObjectSerializer::toString($carrier_price)))) {
            throw new \InvalidArgumentException("invalid value for \$carrier_price when calling ChatPostPayloadOrderPatchNewValues., must conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.");
        }

        $this->container['carrier_price'] = $carrier_price;

        return $this;
    }

    /**
     * Gets carrier_price_vat_less
     *
     * @return string|null
     */
    public function getCarrierPriceVatLess()
    {
        return $this->container['carrier_price_vat_less'];
    }

    /**
     * Sets carrier_price_vat_less
     *
     * @param string|null $carrier_price_vat_less Цена для перевозчика без НДС
     *
     * @return self
     */
    public function setCarrierPriceVatLess($carrier_price_vat_less)
    {
        if (is_null($carrier_price_vat_less)) {
            throw new \InvalidArgumentException('non-nullable carrier_price_vat_less cannot be null');
        }

        if ((!preg_match("/^(0|([1-9]\\d*))([.]\\d{1,4})?$/", ObjectSerializer::toString($carrier_price_vat_less)))) {
            throw new \InvalidArgumentException("invalid value for \$carrier_price_vat_less when calling ChatPostPayloadOrderPatchNewValues., must conform to the pattern /^(0|([1-9]\\d*))([.]\\d{1,4})?$/.");
        }

        $this->container['carrier_price_vat_less'] = $carrier_price_vat_less;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code Код валюты заказа
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets truck_type_id
     *
     * @return int|null
     */
    public function getTruckTypeId()
    {
        return $this->container['truck_type_id'];
    }

    /**
     * Sets truck_type_id
     *
     * @param int|null $truck_type_id Идентификатор типа транспорта
     *
     * @return self
     */
    public function setTruckTypeId($truck_type_id)
    {
        if (is_null($truck_type_id)) {
            throw new \InvalidArgumentException('non-nullable truck_type_id cannot be null');
        }
        $this->container['truck_type_id'] = $truck_type_id;

        return $this;
    }

    /**
     * Gets company_branch_id
     *
     * @return int|null
     */
    public function getCompanyBranchId()
    {
        return $this->container['company_branch_id'];
    }

    /**
     * Sets company_branch_id
     *
     * @param int|null $company_branch_id company_branch_id
     *
     * @return self
     */
    public function setCompanyBranchId($company_branch_id)
    {
        if (is_null($company_branch_id)) {
            throw new \InvalidArgumentException('non-nullable company_branch_id cannot be null');
        }
        $this->container['company_branch_id'] = $company_branch_id;

        return $this;
    }

    /**
     * Gets cargo_weight
     *
     * @return float|null
     */
    public function getCargoWeight()
    {
        return $this->container['cargo_weight'];
    }

    /**
     * Sets cargo_weight
     *
     * @param float|null $cargo_weight Тоннаж авто из условий заказа(в тоннах)
     *
     * @return self
     */
    public function setCargoWeight($cargo_weight)
    {
        if (is_null($cargo_weight)) {
            throw new \InvalidArgumentException('non-nullable cargo_weight cannot be null');
        }
        $this->container['cargo_weight'] = $cargo_weight;

        return $this;
    }

    /**
     * Gets cargo_capacity
     *
     * @return int|null
     */
    public function getCargoCapacity()
    {
        return $this->container['cargo_capacity'];
    }

    /**
     * Sets cargo_capacity
     *
     * @param int|null $cargo_capacity Кубатура авто из условий заказа(в м3)
     *
     * @return self
     */
    public function setCargoCapacity($cargo_capacity)
    {
        if (is_null($cargo_capacity)) {
            throw new \InvalidArgumentException('non-nullable cargo_capacity cannot be null');
        }
        $this->container['cargo_capacity'] = $cargo_capacity;

        return $this;
    }

    /**
     * Gets load_weight
     *
     * @return float|null
     */
    public function getLoadWeight()
    {
        return $this->container['load_weight'];
    }

    /**
     * Sets load_weight
     *
     * @param float|null $load_weight Вес груза(в тоннах)
     *
     * @return self
     */
    public function setLoadWeight($load_weight)
    {
        if (is_null($load_weight)) {
            throw new \InvalidArgumentException('non-nullable load_weight cannot be null');
        }
        $this->container['load_weight'] = $load_weight;

        return $this;
    }

    /**
     * Gets load_capacity
     *
     * @return int|null
     */
    public function getLoadCapacity()
    {
        return $this->container['load_capacity'];
    }

    /**
     * Sets load_capacity
     *
     * @param int|null $load_capacity Объём груза(в м3)
     *
     * @return self
     */
    public function setLoadCapacity($load_capacity)
    {
        if (is_null($load_capacity)) {
            throw new \InvalidArgumentException('non-nullable load_capacity cannot be null');
        }
        $this->container['load_capacity'] = $load_capacity;

        return $this;
    }

    /**
     * Gets cargo_type
     *
     * @return string|null
     */
    public function getCargoType()
    {
        return $this->container['cargo_type'];
    }

    /**
     * Sets cargo_type
     *
     * @param string|null $cargo_type Описание груза
     *
     * @return self
     */
    public function setCargoType($cargo_type)
    {
        if (is_null($cargo_type)) {
            throw new \InvalidArgumentException('non-nullable cargo_type cannot be null');
        }
        $this->container['cargo_type'] = $cargo_type;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return \MagDv\Cargomart\Dto\TemperatureRange|null
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param \MagDv\Cargomart\Dto\TemperatureRange|null $temperature Температурный режим в цельсиях
     *
     * @return self
     */
    public function setTemperature($temperature)
    {
        if (is_null($temperature)) {
            throw new \InvalidArgumentException('non-nullable temperature cannot be null');
        }
        $this->container['temperature'] = $temperature;

        return $this;
    }

    /**
     * Gets loading
     *
     * @return int[]|null
     */
    public function getLoading()
    {
        return $this->container['loading'];
    }

    /**
     * Sets loading
     *
     * @param int[]|null $loading Требуемые типы погрузки-выгрузки
     *
     * @return self
     */
    public function setLoading($loading)
    {
        if (is_null($loading)) {
            throw new \InvalidArgumentException('non-nullable loading cannot be null');
        }
        $this->container['loading'] = $loading;

        return $this;
    }

    /**
     * Gets device
     *
     * @return string[]|null
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param string[]|null $device Дополнительное оборудование машины
     *
     * @return self
     */
    public function setDevice($device)
    {
        if (is_null($device)) {
            throw new \InvalidArgumentException('non-nullable device cannot be null');
        }
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return string[]|null
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param string[]|null $conditions Условия перевозки
     *
     * @return self
     */
    public function setConditions($conditions)
    {
        if (is_null($conditions)) {
            throw new \InvalidArgumentException('non-nullable conditions cannot be null');
        }
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Комментарий
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets point
     *
     * @return \MagDv\Cargomart\Dto\OrderPatchRoutePointCard[]|null
     */
    public function getPoint()
    {
        return $this->container['point'];
    }

    /**
     * Sets point
     *
     * @param \MagDv\Cargomart\Dto\OrderPatchRoutePointCard[]|null $point Список маршрутных точек заказа
     *
     * @return self
     */
    public function setPoint($point)
    {
        if (is_null($point)) {
            throw new \InvalidArgumentException('non-nullable point cannot be null');
        }
        $this->container['point'] = $point;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id Внешний идентификатор заказа
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string[]|null
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string[]|null $tag Тэги для заказа
     *
     * @return self
     */
    public function setTag($tag)
    {
        if (is_null($tag)) {
            throw new \InvalidArgumentException('non-nullable tag cannot be null');
        }
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets truck
     *
     * @return \MagDv\Cargomart\Dto\OrderTruck|null
     */
    public function getTruck()
    {
        return $this->container['truck'];
    }

    /**
     * Sets truck
     *
     * @param \MagDv\Cargomart\Dto\OrderTruck|null $truck Информация о ТС
     *
     * @return self
     */
    public function setTruck($truck)
    {
        if (is_null($truck)) {
            throw new \InvalidArgumentException('non-nullable truck cannot be null');
        }
        $this->container['truck'] = $truck;

        return $this;
    }

    /**
     * Gets driver
     *
     * @return \MagDv\Cargomart\Dto\OrderDriver|null
     */
    public function getDriver()
    {
        return $this->container['driver'];
    }

    /**
     * Sets driver
     *
     * @param \MagDv\Cargomart\Dto\OrderDriver|null $driver Информация о водителе
     *
     * @return self
     */
    public function setDriver($driver)
    {
        if (is_null($driver)) {
            throw new \InvalidArgumentException('non-nullable driver cannot be null');
        }
        $this->container['driver'] = $driver;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


