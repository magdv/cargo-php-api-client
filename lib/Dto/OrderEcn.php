<?php
/**
 * OrderEcn
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * OrderEcn Class Doc Comment
 *
 * @category Class
 * @description Объект ЭТрН заказа
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderEcn implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'order-ecn';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'order_id' => 'string',
        'serial_id' => 'int',
        'departure_name' => 'string',
        'departure_legal_name' => 'string',
        'destination_name' => 'string',
        'destination_legal_name' => 'string',
        'type' => '\MagDv\Cargomart\Dto\EcnType',
        'number' => 'string',
        'external_number' => 'string',
        'version' => 'int',
        'point_index_from' => 'int',
        'point_index_to' => 'int',
        'status' => '\MagDv\Cargomart\Dto\EcnStatus',
        'edm_operator_status' => '\MagDv\Cargomart\Dto\OrderEcnItemEdmOperatorStatus',
        'status_group' => '\MagDv\Cargomart\Dto\EcnStatusGroup',
        'update_date' => '\DateTime',
        'additional_data' => '\MagDv\Cargomart\Dto\EcnAdditionalData',
        'ecn_file' => '\MagDv\Cargomart\Dto\FileV2',
        'pdf' => '\MagDv\Cargomart\Dto\FileUrl',
        'xls' => '\MagDv\Cargomart\Dto\FileUrl',
        'xml' => '\MagDv\Cargomart\Dto\FileUrl',
        'notify_params' => '\MagDv\Cargomart\Dto\NotifyParamItem[]',
        'access' => '\MagDv\Cargomart\Dto\OrderEcnAccess'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'order_id' => null,
        'serial_id' => null,
        'departure_name' => null,
        'departure_legal_name' => null,
        'destination_name' => null,
        'destination_legal_name' => null,
        'type' => null,
        'number' => null,
        'external_number' => null,
        'version' => null,
        'point_index_from' => null,
        'point_index_to' => null,
        'status' => null,
        'edm_operator_status' => null,
        'status_group' => null,
        'update_date' => 'date-time',
        'additional_data' => null,
        'ecn_file' => null,
        'pdf' => null,
        'xls' => null,
        'xml' => null,
        'notify_params' => null,
        'access' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'order_id' => false,
        'serial_id' => false,
        'departure_name' => false,
        'departure_legal_name' => false,
        'destination_name' => false,
        'destination_legal_name' => false,
        'type' => false,
        'number' => false,
        'external_number' => false,
        'version' => false,
        'point_index_from' => false,
        'point_index_to' => false,
        'status' => false,
        'edm_operator_status' => false,
        'status_group' => false,
        'update_date' => false,
        'additional_data' => false,
        'ecn_file' => false,
        'pdf' => false,
        'xls' => false,
        'xml' => false,
        'notify_params' => false,
        'access' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'order_id' => 'orderId',
        'serial_id' => 'serialId',
        'departure_name' => 'departureName',
        'departure_legal_name' => 'departureLegalName',
        'destination_name' => 'destinationName',
        'destination_legal_name' => 'destinationLegalName',
        'type' => 'type',
        'number' => 'number',
        'external_number' => 'externalNumber',
        'version' => 'version',
        'point_index_from' => 'pointIndexFrom',
        'point_index_to' => 'pointIndexTo',
        'status' => 'status',
        'edm_operator_status' => 'edmOperatorStatus',
        'status_group' => 'statusGroup',
        'update_date' => 'updateDate',
        'additional_data' => 'additionalData',
        'ecn_file' => 'ecnFile',
        'pdf' => 'pdf',
        'xls' => 'xls',
        'xml' => 'xml',
        'notify_params' => 'notifyParams',
        'access' => 'access'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'order_id' => 'setOrderId',
        'serial_id' => 'setSerialId',
        'departure_name' => 'setDepartureName',
        'departure_legal_name' => 'setDepartureLegalName',
        'destination_name' => 'setDestinationName',
        'destination_legal_name' => 'setDestinationLegalName',
        'type' => 'setType',
        'number' => 'setNumber',
        'external_number' => 'setExternalNumber',
        'version' => 'setVersion',
        'point_index_from' => 'setPointIndexFrom',
        'point_index_to' => 'setPointIndexTo',
        'status' => 'setStatus',
        'edm_operator_status' => 'setEdmOperatorStatus',
        'status_group' => 'setStatusGroup',
        'update_date' => 'setUpdateDate',
        'additional_data' => 'setAdditionalData',
        'ecn_file' => 'setEcnFile',
        'pdf' => 'setPdf',
        'xls' => 'setXls',
        'xml' => 'setXml',
        'notify_params' => 'setNotifyParams',
        'access' => 'setAccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'order_id' => 'getOrderId',
        'serial_id' => 'getSerialId',
        'departure_name' => 'getDepartureName',
        'departure_legal_name' => 'getDepartureLegalName',
        'destination_name' => 'getDestinationName',
        'destination_legal_name' => 'getDestinationLegalName',
        'type' => 'getType',
        'number' => 'getNumber',
        'external_number' => 'getExternalNumber',
        'version' => 'getVersion',
        'point_index_from' => 'getPointIndexFrom',
        'point_index_to' => 'getPointIndexTo',
        'status' => 'getStatus',
        'edm_operator_status' => 'getEdmOperatorStatus',
        'status_group' => 'getStatusGroup',
        'update_date' => 'getUpdateDate',
        'additional_data' => 'getAdditionalData',
        'ecn_file' => 'getEcnFile',
        'pdf' => 'getPdf',
        'xls' => 'getXls',
        'xml' => 'getXml',
        'notify_params' => 'getNotifyParams',
        'access' => 'getAccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('serial_id', $data ?? [], null);
        $this->setIfExists('departure_name', $data ?? [], null);
        $this->setIfExists('departure_legal_name', $data ?? [], null);
        $this->setIfExists('destination_name', $data ?? [], null);
        $this->setIfExists('destination_legal_name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('external_number', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('point_index_from', $data ?? [], null);
        $this->setIfExists('point_index_to', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('edm_operator_status', $data ?? [], null);
        $this->setIfExists('status_group', $data ?? [], null);
        $this->setIfExists('update_date', $data ?? [], null);
        $this->setIfExists('additional_data', $data ?? [], null);
        $this->setIfExists('ecn_file', $data ?? [], null);
        $this->setIfExists('pdf', $data ?? [], null);
        $this->setIfExists('xls', $data ?? [], null);
        $this->setIfExists('xml', $data ?? [], null);
        $this->setIfExists('notify_params', $data ?? [], null);
        $this->setIfExists('access', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['departure_name'] === null) {
            $invalidProperties[] = "'departure_name' can't be null";
        }
        if ($this->container['destination_name'] === null) {
            $invalidProperties[] = "'destination_name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['point_index_from'] === null) {
            $invalidProperties[] = "'point_index_from' can't be null";
        }
        if ($this->container['point_index_to'] === null) {
            $invalidProperties[] = "'point_index_to' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['additional_data'] === null) {
            $invalidProperties[] = "'additional_data' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Идентификатор Этрн
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id Идентификатор заказа
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets serial_id
     *
     * @return int|null
     */
    public function getSerialId()
    {
        return $this->container['serial_id'];
    }

    /**
     * Sets serial_id
     *
     * @param int|null $serial_id Порядковый номер заказа
     *
     * @return self
     */
    public function setSerialId($serial_id)
    {
        if (is_null($serial_id)) {
            throw new \InvalidArgumentException('non-nullable serial_id cannot be null');
        }
        $this->container['serial_id'] = $serial_id;

        return $this;
    }

    /**
     * Gets departure_name
     *
     * @return string
     */
    public function getDepartureName()
    {
        return $this->container['departure_name'];
    }

    /**
     * Sets departure_name
     *
     * @param string $departure_name Название места погрузки
     *
     * @return self
     */
    public function setDepartureName($departure_name)
    {
        if (is_null($departure_name)) {
            throw new \InvalidArgumentException('non-nullable departure_name cannot be null');
        }
        $this->container['departure_name'] = $departure_name;

        return $this;
    }

    /**
     * Gets departure_legal_name
     *
     * @return string|null
     */
    public function getDepartureLegalName()
    {
        return $this->container['departure_legal_name'];
    }

    /**
     * Sets departure_legal_name
     *
     * @param string|null $departure_legal_name Наименование грузоотправителя
     *
     * @return self
     */
    public function setDepartureLegalName($departure_legal_name)
    {
        if (is_null($departure_legal_name)) {
            throw new \InvalidArgumentException('non-nullable departure_legal_name cannot be null');
        }
        $this->container['departure_legal_name'] = $departure_legal_name;

        return $this;
    }

    /**
     * Gets destination_name
     *
     * @return string
     */
    public function getDestinationName()
    {
        return $this->container['destination_name'];
    }

    /**
     * Sets destination_name
     *
     * @param string $destination_name Название места выгрузки
     *
     * @return self
     */
    public function setDestinationName($destination_name)
    {
        if (is_null($destination_name)) {
            throw new \InvalidArgumentException('non-nullable destination_name cannot be null');
        }
        $this->container['destination_name'] = $destination_name;

        return $this;
    }

    /**
     * Gets destination_legal_name
     *
     * @return string|null
     */
    public function getDestinationLegalName()
    {
        return $this->container['destination_legal_name'];
    }

    /**
     * Sets destination_legal_name
     *
     * @param string|null $destination_legal_name Наименование грузополучателя
     *
     * @return self
     */
    public function setDestinationLegalName($destination_legal_name)
    {
        if (is_null($destination_legal_name)) {
            throw new \InvalidArgumentException('non-nullable destination_legal_name cannot be null');
        }
        $this->container['destination_legal_name'] = $destination_legal_name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \MagDv\Cargomart\Dto\EcnType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \MagDv\Cargomart\Dto\EcnType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Номер документа
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets external_number
     *
     * @return string|null
     */
    public function getExternalNumber()
    {
        return $this->container['external_number'];
    }

    /**
     * Sets external_number
     *
     * @param string|null $external_number Внешний номер ТРН
     *
     * @return self
     */
    public function setExternalNumber($external_number)
    {
        if (is_null($external_number)) {
            throw new \InvalidArgumentException('non-nullable external_number cannot be null');
        }
        $this->container['external_number'] = $external_number;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version Версия документа
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets point_index_from
     *
     * @return int
     */
    public function getPointIndexFrom()
    {
        return $this->container['point_index_from'];
    }

    /**
     * Sets point_index_from
     *
     * @param int $point_index_from Индекс пункта погрузки из маршрута
     *
     * @return self
     */
    public function setPointIndexFrom($point_index_from)
    {
        if (is_null($point_index_from)) {
            throw new \InvalidArgumentException('non-nullable point_index_from cannot be null');
        }
        $this->container['point_index_from'] = $point_index_from;

        return $this;
    }

    /**
     * Gets point_index_to
     *
     * @return int
     */
    public function getPointIndexTo()
    {
        return $this->container['point_index_to'];
    }

    /**
     * Sets point_index_to
     *
     * @param int $point_index_to Индекс пункта выгрузки из маршрута
     *
     * @return self
     */
    public function setPointIndexTo($point_index_to)
    {
        if (is_null($point_index_to)) {
            throw new \InvalidArgumentException('non-nullable point_index_to cannot be null');
        }
        $this->container['point_index_to'] = $point_index_to;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \MagDv\Cargomart\Dto\EcnStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \MagDv\Cargomart\Dto\EcnStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets edm_operator_status
     *
     * @return \MagDv\Cargomart\Dto\OrderEcnItemEdmOperatorStatus|null
     */
    public function getEdmOperatorStatus()
    {
        return $this->container['edm_operator_status'];
    }

    /**
     * Sets edm_operator_status
     *
     * @param \MagDv\Cargomart\Dto\OrderEcnItemEdmOperatorStatus|null $edm_operator_status edm_operator_status
     *
     * @return self
     */
    public function setEdmOperatorStatus($edm_operator_status)
    {
        if (is_null($edm_operator_status)) {
            throw new \InvalidArgumentException('non-nullable edm_operator_status cannot be null');
        }
        $this->container['edm_operator_status'] = $edm_operator_status;

        return $this;
    }

    /**
     * Gets status_group
     *
     * @return \MagDv\Cargomart\Dto\EcnStatusGroup|null
     */
    public function getStatusGroup()
    {
        return $this->container['status_group'];
    }

    /**
     * Sets status_group
     *
     * @param \MagDv\Cargomart\Dto\EcnStatusGroup|null $status_group status_group
     *
     * @return self
     */
    public function setStatusGroup($status_group)
    {
        if (is_null($status_group)) {
            throw new \InvalidArgumentException('non-nullable status_group cannot be null');
        }
        $this->container['status_group'] = $status_group;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime|null
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime|null $update_date Дата изменения
     *
     * @return self
     */
    public function setUpdateDate($update_date)
    {
        if (is_null($update_date)) {
            throw new \InvalidArgumentException('non-nullable update_date cannot be null');
        }
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets additional_data
     *
     * @return \MagDv\Cargomart\Dto\EcnAdditionalData
     */
    public function getAdditionalData()
    {
        return $this->container['additional_data'];
    }

    /**
     * Sets additional_data
     *
     * @param \MagDv\Cargomart\Dto\EcnAdditionalData $additional_data Данные для генерации накладной
     *
     * @return self
     */
    public function setAdditionalData($additional_data)
    {
        if (is_null($additional_data)) {
            throw new \InvalidArgumentException('non-nullable additional_data cannot be null');
        }
        $this->container['additional_data'] = $additional_data;

        return $this;
    }

    /**
     * Gets ecn_file
     *
     * @return \MagDv\Cargomart\Dto\FileV2|null
     */
    public function getEcnFile()
    {
        return $this->container['ecn_file'];
    }

    /**
     * Sets ecn_file
     *
     * @param \MagDv\Cargomart\Dto\FileV2|null $ecn_file Файл ЭТРН
     *
     * @return self
     */
    public function setEcnFile($ecn_file)
    {
        if (is_null($ecn_file)) {
            throw new \InvalidArgumentException('non-nullable ecn_file cannot be null');
        }
        $this->container['ecn_file'] = $ecn_file;

        return $this;
    }

    /**
     * Gets pdf
     *
     * @return \MagDv\Cargomart\Dto\FileUrl|null
     */
    public function getPdf()
    {
        return $this->container['pdf'];
    }

    /**
     * Sets pdf
     *
     * @param \MagDv\Cargomart\Dto\FileUrl|null $pdf Ссылка для скачивания накладной в формате PDF
     *
     * @return self
     */
    public function setPdf($pdf)
    {
        if (is_null($pdf)) {
            throw new \InvalidArgumentException('non-nullable pdf cannot be null');
        }
        $this->container['pdf'] = $pdf;

        return $this;
    }

    /**
     * Gets xls
     *
     * @return \MagDv\Cargomart\Dto\FileUrl|null
     */
    public function getXls()
    {
        return $this->container['xls'];
    }

    /**
     * Sets xls
     *
     * @param \MagDv\Cargomart\Dto\FileUrl|null $xls Ссылка для скачивания накладной в формате XLS
     *
     * @return self
     */
    public function setXls($xls)
    {
        if (is_null($xls)) {
            throw new \InvalidArgumentException('non-nullable xls cannot be null');
        }
        $this->container['xls'] = $xls;

        return $this;
    }

    /**
     * Gets xml
     *
     * @return \MagDv\Cargomart\Dto\FileUrl|null
     */
    public function getXml()
    {
        return $this->container['xml'];
    }

    /**
     * Sets xml
     *
     * @param \MagDv\Cargomart\Dto\FileUrl|null $xml Ссылка для скачивания накладной в формате XML
     *
     * @return self
     */
    public function setXml($xml)
    {
        if (is_null($xml)) {
            throw new \InvalidArgumentException('non-nullable xml cannot be null');
        }
        $this->container['xml'] = $xml;

        return $this;
    }

    /**
     * Gets notify_params
     *
     * @return \MagDv\Cargomart\Dto\NotifyParamItem[]|null
     */
    public function getNotifyParams()
    {
        return $this->container['notify_params'];
    }

    /**
     * Sets notify_params
     *
     * @param \MagDv\Cargomart\Dto\NotifyParamItem[]|null $notify_params Список параметров для рассылки уведомлений по ЭТРН
     *
     * @return self
     */
    public function setNotifyParams($notify_params)
    {
        if (is_null($notify_params)) {
            throw new \InvalidArgumentException('non-nullable notify_params cannot be null');
        }
        $this->container['notify_params'] = $notify_params;

        return $this;
    }

    /**
     * Gets access
     *
     * @return \MagDv\Cargomart\Dto\OrderEcnAccess|null
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param \MagDv\Cargomart\Dto\OrderEcnAccess|null $access Описание доступных действий по объекту.
     *
     * @return self
     */
    public function setAccess($access)
    {
        if (is_null($access)) {
            throw new \InvalidArgumentException('non-nullable access cannot be null');
        }
        $this->container['access'] = $access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


