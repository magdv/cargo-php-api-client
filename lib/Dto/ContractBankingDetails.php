<?php
/**
 * ContractBankingDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * ContractBankingDetails Class Doc Comment
 *
 * @category Class
 * @description Банковский реквизиты
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContractBankingDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ContractBankingDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'approve_status' => '\MagDv\Cargomart\Dto\BankingDetailsApproveStatus',
        'bank_name' => 'string',
        'operating_account' => 'string',
        'corresponding_account' => 'string',
        'bic' => 'string',
        'is_active' => 'bool',
        'sign_date' => '\DateTime',
        'contract' => '\MagDv\Cargomart\Dto\ContractDetails',
        'company' => '\MagDv\Cargomart\Dto\CompanyDetails',
        'certificate' => '\MagDv\Cargomart\Dto\Certificate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'approve_status' => null,
        'bank_name' => null,
        'operating_account' => null,
        'corresponding_account' => null,
        'bic' => null,
        'is_active' => null,
        'sign_date' => 'date-time',
        'contract' => null,
        'company' => null,
        'certificate' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'approve_status' => false,
        'bank_name' => false,
        'operating_account' => false,
        'corresponding_account' => false,
        'bic' => false,
        'is_active' => false,
        'sign_date' => false,
        'contract' => false,
        'company' => false,
        'certificate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'approve_status' => 'approveStatus',
        'bank_name' => 'bankName',
        'operating_account' => 'operatingAccount',
        'corresponding_account' => 'correspondingAccount',
        'bic' => 'bic',
        'is_active' => 'isActive',
        'sign_date' => 'signDate',
        'contract' => 'contract',
        'company' => 'company',
        'certificate' => 'certificate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'approve_status' => 'setApproveStatus',
        'bank_name' => 'setBankName',
        'operating_account' => 'setOperatingAccount',
        'corresponding_account' => 'setCorrespondingAccount',
        'bic' => 'setBic',
        'is_active' => 'setIsActive',
        'sign_date' => 'setSignDate',
        'contract' => 'setContract',
        'company' => 'setCompany',
        'certificate' => 'setCertificate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'approve_status' => 'getApproveStatus',
        'bank_name' => 'getBankName',
        'operating_account' => 'getOperatingAccount',
        'corresponding_account' => 'getCorrespondingAccount',
        'bic' => 'getBic',
        'is_active' => 'getIsActive',
        'sign_date' => 'getSignDate',
        'contract' => 'getContract',
        'company' => 'getCompany',
        'certificate' => 'getCertificate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('approve_status', $data ?? [], null);
        $this->setIfExists('bank_name', $data ?? [], null);
        $this->setIfExists('operating_account', $data ?? [], null);
        $this->setIfExists('corresponding_account', $data ?? [], null);
        $this->setIfExists('bic', $data ?? [], null);
        $this->setIfExists('is_active', $data ?? [], false);
        $this->setIfExists('sign_date', $data ?? [], null);
        $this->setIfExists('contract', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('certificate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['approve_status'] === null) {
            $invalidProperties[] = "'approve_status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets approve_status
     *
     * @return \MagDv\Cargomart\Dto\BankingDetailsApproveStatus
     */
    public function getApproveStatus()
    {
        return $this->container['approve_status'];
    }

    /**
     * Sets approve_status
     *
     * @param \MagDv\Cargomart\Dto\BankingDetailsApproveStatus $approve_status approve_status
     *
     * @return self
     */
    public function setApproveStatus($approve_status)
    {
        if (is_null($approve_status)) {
            throw new \InvalidArgumentException('non-nullable approve_status cannot be null');
        }
        $this->container['approve_status'] = $approve_status;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string|null
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string|null $bank_name Название банка
     *
     * @return self
     */
    public function setBankName($bank_name)
    {
        if (is_null($bank_name)) {
            throw new \InvalidArgumentException('non-nullable bank_name cannot be null');
        }
        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets operating_account
     *
     * @return string|null
     */
    public function getOperatingAccount()
    {
        return $this->container['operating_account'];
    }

    /**
     * Sets operating_account
     *
     * @param string|null $operating_account Расчетный счет
     *
     * @return self
     */
    public function setOperatingAccount($operating_account)
    {
        if (is_null($operating_account)) {
            throw new \InvalidArgumentException('non-nullable operating_account cannot be null');
        }
        $this->container['operating_account'] = $operating_account;

        return $this;
    }

    /**
     * Gets corresponding_account
     *
     * @return string|null
     */
    public function getCorrespondingAccount()
    {
        return $this->container['corresponding_account'];
    }

    /**
     * Sets corresponding_account
     *
     * @param string|null $corresponding_account Корреспондентский счет
     *
     * @return self
     */
    public function setCorrespondingAccount($corresponding_account)
    {
        if (is_null($corresponding_account)) {
            throw new \InvalidArgumentException('non-nullable corresponding_account cannot be null');
        }
        $this->container['corresponding_account'] = $corresponding_account;

        return $this;
    }

    /**
     * Gets bic
     *
     * @return string|null
     */
    public function getBic()
    {
        return $this->container['bic'];
    }

    /**
     * Sets bic
     *
     * @param string|null $bic БИК
     *
     * @return self
     */
    public function setBic($bic)
    {
        if (is_null($bic)) {
            throw new \InvalidArgumentException('non-nullable bic cannot be null');
        }
        $this->container['bic'] = $bic;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool|null
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool|null $is_active Активна ли запись
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        if (is_null($is_active)) {
            throw new \InvalidArgumentException('non-nullable is_active cannot be null');
        }
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets sign_date
     *
     * @return \DateTime|null
     */
    public function getSignDate()
    {
        return $this->container['sign_date'];
    }

    /**
     * Sets sign_date
     *
     * @param \DateTime|null $sign_date Дата подписания
     *
     * @return self
     */
    public function setSignDate($sign_date)
    {
        if (is_null($sign_date)) {
            throw new \InvalidArgumentException('non-nullable sign_date cannot be null');
        }
        $this->container['sign_date'] = $sign_date;

        return $this;
    }

    /**
     * Gets contract
     *
     * @return \MagDv\Cargomart\Dto\ContractDetails|null
     */
    public function getContract()
    {
        return $this->container['contract'];
    }

    /**
     * Sets contract
     *
     * @param \MagDv\Cargomart\Dto\ContractDetails|null $contract contract
     *
     * @return self
     */
    public function setContract($contract)
    {
        if (is_null($contract)) {
            throw new \InvalidArgumentException('non-nullable contract cannot be null');
        }
        $this->container['contract'] = $contract;

        return $this;
    }

    /**
     * Gets company
     *
     * @return \MagDv\Cargomart\Dto\CompanyDetails|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \MagDv\Cargomart\Dto\CompanyDetails|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets certificate
     *
     * @return \MagDv\Cargomart\Dto\Certificate|null
     */
    public function getCertificate()
    {
        return $this->container['certificate'];
    }

    /**
     * Sets certificate
     *
     * @param \MagDv\Cargomart\Dto\Certificate|null $certificate Сертификат
     *
     * @return self
     */
    public function setCertificate($certificate)
    {
        if (is_null($certificate)) {
            throw new \InvalidArgumentException('non-nullable certificate cannot be null');
        }
        $this->container['certificate'] = $certificate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


