<?php
/**
 * PointShipper
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * PointShipper Class Doc Comment
 *
 * @category Class
 * @description Грузополучатель/грузоотправитель
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PointShipper implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PointShipper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'legal_status' => '\MagDv\Cargomart\Dto\LegalFormEnum',
        'company_name' => 'string',
        'address' => 'string',
        'inn' => 'string',
        'last_name' => 'string',
        'first_name' => 'string',
        'second_name' => 'string',
        'taxpayer_id' => 'string',
        'country_code' => 'string',
        'document_type' => 'string',
        'document_number' => 'string',
        'document_date' => '\DateTime',
        'phone' => 'string',
        'is_third_party_company' => 'bool',
        'branch_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'legal_status' => null,
        'company_name' => null,
        'address' => null,
        'inn' => null,
        'last_name' => null,
        'first_name' => null,
        'second_name' => null,
        'taxpayer_id' => null,
        'country_code' => null,
        'document_type' => null,
        'document_number' => null,
        'document_date' => 'date',
        'phone' => null,
        'is_third_party_company' => null,
        'branch_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'legal_status' => false,
        'company_name' => false,
        'address' => false,
        'inn' => false,
        'last_name' => false,
        'first_name' => false,
        'second_name' => false,
        'taxpayer_id' => false,
        'country_code' => false,
        'document_type' => false,
        'document_number' => false,
        'document_date' => false,
        'phone' => false,
        'is_third_party_company' => false,
        'branch_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'legal_status' => 'legalStatus',
        'company_name' => 'companyName',
        'address' => 'address',
        'inn' => 'inn',
        'last_name' => 'lastName',
        'first_name' => 'firstName',
        'second_name' => 'secondName',
        'taxpayer_id' => 'taxpayerId',
        'country_code' => 'countryCode',
        'document_type' => 'documentType',
        'document_number' => 'documentNumber',
        'document_date' => 'documentDate',
        'phone' => 'phone',
        'is_third_party_company' => 'isThirdPartyCompany',
        'branch_id' => 'branchId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'legal_status' => 'setLegalStatus',
        'company_name' => 'setCompanyName',
        'address' => 'setAddress',
        'inn' => 'setInn',
        'last_name' => 'setLastName',
        'first_name' => 'setFirstName',
        'second_name' => 'setSecondName',
        'taxpayer_id' => 'setTaxpayerId',
        'country_code' => 'setCountryCode',
        'document_type' => 'setDocumentType',
        'document_number' => 'setDocumentNumber',
        'document_date' => 'setDocumentDate',
        'phone' => 'setPhone',
        'is_third_party_company' => 'setIsThirdPartyCompany',
        'branch_id' => 'setBranchId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'legal_status' => 'getLegalStatus',
        'company_name' => 'getCompanyName',
        'address' => 'getAddress',
        'inn' => 'getInn',
        'last_name' => 'getLastName',
        'first_name' => 'getFirstName',
        'second_name' => 'getSecondName',
        'taxpayer_id' => 'getTaxpayerId',
        'country_code' => 'getCountryCode',
        'document_type' => 'getDocumentType',
        'document_number' => 'getDocumentNumber',
        'document_date' => 'getDocumentDate',
        'phone' => 'getPhone',
        'is_third_party_company' => 'getIsThirdPartyCompany',
        'branch_id' => 'getBranchId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('legal_status', $data ?? [], null);
        $this->setIfExists('company_name', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('inn', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('second_name', $data ?? [], null);
        $this->setIfExists('taxpayer_id', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('document_type', $data ?? [], null);
        $this->setIfExists('document_number', $data ?? [], null);
        $this->setIfExists('document_date', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('is_third_party_company', $data ?? [], false);
        $this->setIfExists('branch_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legal_status
     *
     * @return \MagDv\Cargomart\Dto\LegalFormEnum|null
     */
    public function getLegalStatus()
    {
        return $this->container['legal_status'];
    }

    /**
     * Sets legal_status
     *
     * @param \MagDv\Cargomart\Dto\LegalFormEnum|null $legal_status Юридический статус
     *
     * @return self
     */
    public function setLegalStatus($legal_status)
    {
        if (is_null($legal_status)) {
            throw new \InvalidArgumentException('non-nullable legal_status cannot be null');
        }
        $this->container['legal_status'] = $legal_status;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name Юридическое наименование
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (is_null($company_name)) {
            throw new \InvalidArgumentException('non-nullable company_name cannot be null');
        }
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address Адрес регистрации грузополучателя/грузоотправителя
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets inn
     *
     * @return string|null
     */
    public function getInn()
    {
        return $this->container['inn'];
    }

    /**
     * Sets inn
     *
     * @param string|null $inn ИНН грузополучателя/грузоотправителя
     *
     * @return self
     */
    public function setInn($inn)
    {
        if (is_null($inn)) {
            throw new \InvalidArgumentException('non-nullable inn cannot be null');
        }
        $this->container['inn'] = $inn;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Фамилия грузополучателя/грузоотправителя ИП и российских/иностранных физ.лиц
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name Имя грузополучателя/грузоотправителя ИП и российских/иностранных физ.лиц
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets second_name
     *
     * @return string|null
     */
    public function getSecondName()
    {
        return $this->container['second_name'];
    }

    /**
     * Sets second_name
     *
     * @param string|null $second_name Отчество грузополучателя/грузоотправителя ИП и российских/иностранных физ.лиц
     *
     * @return self
     */
    public function setSecondName($second_name)
    {
        if (is_null($second_name)) {
            throw new \InvalidArgumentException('non-nullable second_name cannot be null');
        }
        $this->container['second_name'] = $second_name;

        return $this;
    }

    /**
     * Gets taxpayer_id
     *
     * @return string|null
     */
    public function getTaxpayerId()
    {
        return $this->container['taxpayer_id'];
    }

    /**
     * Sets taxpayer_id
     *
     * @param string|null $taxpayer_id Налоговый идентификатор  грузополучателя/грузоотправителя для иностранных юр.лиц
     *
     * @return self
     */
    public function setTaxpayerId($taxpayer_id)
    {
        if (is_null($taxpayer_id)) {
            throw new \InvalidArgumentException('non-nullable taxpayer_id cannot be null');
        }
        $this->container['taxpayer_id'] = $taxpayer_id;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code Страна резидентства грузополучателя/грузоотправителя для иностранных юр.лиц
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (is_null($country_code)) {
            throw new \InvalidArgumentException('non-nullable country_code cannot be null');
        }
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string|null
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string|null $document_type Вид документа, удостоверяющего личность грузополучателя/грузоотправителя иностранного физ.лица
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        if (is_null($document_type)) {
            throw new \InvalidArgumentException('non-nullable document_type cannot be null');
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string|null
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string|null $document_number Номер документа, удостоверяющего личность грузополучателя/грузоотправителя иностранного физ.лица
     *
     * @return self
     */
    public function setDocumentNumber($document_number)
    {
        if (is_null($document_number)) {
            throw new \InvalidArgumentException('non-nullable document_number cannot be null');
        }
        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets document_date
     *
     * @return \DateTime|null
     */
    public function getDocumentDate()
    {
        return $this->container['document_date'];
    }

    /**
     * Sets document_date
     *
     * @param \DateTime|null $document_date Дата документа, удостоверяющего личность грузополучателя/грузоотправителя иностранного физ.лица
     *
     * @return self
     */
    public function setDocumentDate($document_date)
    {
        if (is_null($document_date)) {
            throw new \InvalidArgumentException('non-nullable document_date cannot be null');
        }
        $this->container['document_date'] = $document_date;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Номер телефона
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets is_third_party_company
     *
     * @return bool|null
     */
    public function getIsThirdPartyCompany()
    {
        return $this->container['is_third_party_company'];
    }

    /**
     * Sets is_third_party_company
     *
     * @param bool|null $is_third_party_company Является ли сторонней компанией
     *
     * @return self
     */
    public function setIsThirdPartyCompany($is_third_party_company)
    {
        if (is_null($is_third_party_company)) {
            throw new \InvalidArgumentException('non-nullable is_third_party_company cannot be null');
        }
        $this->container['is_third_party_company'] = $is_third_party_company;

        return $this;
    }

    /**
     * Gets branch_id
     *
     * @return int|null
     */
    public function getBranchId()
    {
        return $this->container['branch_id'];
    }

    /**
     * Sets branch_id
     *
     * @param int|null $branch_id Идентификатор подразделения компании
     *
     * @return self
     */
    public function setBranchId($branch_id)
    {
        if (is_null($branch_id)) {
            throw new \InvalidArgumentException('non-nullable branch_id cannot be null');
        }
        $this->container['branch_id'] = $branch_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


