<?php
/**
 * Driver
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * Driver Class Doc Comment
 *
 * @category Class
 * @description Запись информации о водителе
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Driver implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Driver';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'external_id' => 'string',
        'name' => 'string',
        'birth_date' => '\DateTime',
        'phone' => 'string',
        'phones' => 'string[]',
        'passport_number' => 'string',
        'passport_issue_date' => '\DateTime',
        'passport_issue_by' => 'string',
        'passport_type' => '\MagDv\Cargomart\Dto\PassportType',
        'registration_address' => 'string',
        'licence_number' => 'string',
        'licence_issue_date' => '\DateTime',
        'licence_type' => '\MagDv\Cargomart\Dto\LicenseType',
        'licence_series' => 'string',
        'inn' => 'string',
        'validation_status' => '\MagDv\Cargomart\Dto\DriverValidationStatus',
        'driver_app_status' => '\MagDv\Cargomart\Dto\DriverAppStatus',
        'driver_app_detail' => '\MagDv\Cargomart\Dto\DriverAppDetail[]',
        'access' => '\MagDv\Cargomart\Dto\DriverAccess'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'external_id' => null,
        'name' => null,
        'birth_date' => 'date',
        'phone' => null,
        'phones' => null,
        'passport_number' => null,
        'passport_issue_date' => 'date',
        'passport_issue_by' => null,
        'passport_type' => null,
        'registration_address' => null,
        'licence_number' => null,
        'licence_issue_date' => 'date',
        'licence_type' => null,
        'licence_series' => null,
        'inn' => null,
        'validation_status' => null,
        'driver_app_status' => null,
        'driver_app_detail' => null,
        'access' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'external_id' => false,
        'name' => false,
        'birth_date' => false,
        'phone' => false,
        'phones' => false,
        'passport_number' => false,
        'passport_issue_date' => false,
        'passport_issue_by' => false,
        'passport_type' => false,
        'registration_address' => false,
        'licence_number' => false,
        'licence_issue_date' => false,
        'licence_type' => false,
        'licence_series' => false,
        'inn' => false,
        'validation_status' => false,
        'driver_app_status' => false,
        'driver_app_detail' => false,
        'access' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'external_id' => 'externalId',
        'name' => 'name',
        'birth_date' => 'birthDate',
        'phone' => 'phone',
        'phones' => 'phones',
        'passport_number' => 'passportNumber',
        'passport_issue_date' => 'passportIssueDate',
        'passport_issue_by' => 'passportIssueBy',
        'passport_type' => 'passportType',
        'registration_address' => 'registrationAddress',
        'licence_number' => 'licenceNumber',
        'licence_issue_date' => 'licenceIssueDate',
        'licence_type' => 'licenceType',
        'licence_series' => 'licenceSeries',
        'inn' => 'inn',
        'validation_status' => 'validationStatus',
        'driver_app_status' => 'driverAppStatus',
        'driver_app_detail' => 'driverAppDetail',
        'access' => 'access'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'external_id' => 'setExternalId',
        'name' => 'setName',
        'birth_date' => 'setBirthDate',
        'phone' => 'setPhone',
        'phones' => 'setPhones',
        'passport_number' => 'setPassportNumber',
        'passport_issue_date' => 'setPassportIssueDate',
        'passport_issue_by' => 'setPassportIssueBy',
        'passport_type' => 'setPassportType',
        'registration_address' => 'setRegistrationAddress',
        'licence_number' => 'setLicenceNumber',
        'licence_issue_date' => 'setLicenceIssueDate',
        'licence_type' => 'setLicenceType',
        'licence_series' => 'setLicenceSeries',
        'inn' => 'setInn',
        'validation_status' => 'setValidationStatus',
        'driver_app_status' => 'setDriverAppStatus',
        'driver_app_detail' => 'setDriverAppDetail',
        'access' => 'setAccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'external_id' => 'getExternalId',
        'name' => 'getName',
        'birth_date' => 'getBirthDate',
        'phone' => 'getPhone',
        'phones' => 'getPhones',
        'passport_number' => 'getPassportNumber',
        'passport_issue_date' => 'getPassportIssueDate',
        'passport_issue_by' => 'getPassportIssueBy',
        'passport_type' => 'getPassportType',
        'registration_address' => 'getRegistrationAddress',
        'licence_number' => 'getLicenceNumber',
        'licence_issue_date' => 'getLicenceIssueDate',
        'licence_type' => 'getLicenceType',
        'licence_series' => 'getLicenceSeries',
        'inn' => 'getInn',
        'validation_status' => 'getValidationStatus',
        'driver_app_status' => 'getDriverAppStatus',
        'driver_app_detail' => 'getDriverAppDetail',
        'access' => 'getAccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('birth_date', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('phones', $data ?? [], null);
        $this->setIfExists('passport_number', $data ?? [], null);
        $this->setIfExists('passport_issue_date', $data ?? [], null);
        $this->setIfExists('passport_issue_by', $data ?? [], null);
        $this->setIfExists('passport_type', $data ?? [], null);
        $this->setIfExists('registration_address', $data ?? [], null);
        $this->setIfExists('licence_number', $data ?? [], null);
        $this->setIfExists('licence_issue_date', $data ?? [], null);
        $this->setIfExists('licence_type', $data ?? [], null);
        $this->setIfExists('licence_series', $data ?? [], null);
        $this->setIfExists('inn', $data ?? [], null);
        $this->setIfExists('validation_status', $data ?? [], null);
        $this->setIfExists('driver_app_status', $data ?? [], null);
        $this->setIfExists('driver_app_detail', $data ?? [], null);
        $this->setIfExists('access', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['passport_number'] === null) {
            $invalidProperties[] = "'passport_number' can't be null";
        }
        if ($this->container['passport_issue_date'] === null) {
            $invalidProperties[] = "'passport_issue_date' can't be null";
        }
        if ($this->container['passport_issue_by'] === null) {
            $invalidProperties[] = "'passport_issue_by' can't be null";
        }
        if ($this->container['access'] === null) {
            $invalidProperties[] = "'access' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Идентификатор водителя
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id Внешний код
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name ФИО водителя
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return \DateTime|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param \DateTime|null $birth_date Дата рождения YYYY-MM-DD
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {
        if (is_null($birth_date)) {
            throw new \InvalidArgumentException('non-nullable birth_date cannot be null');
        }
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Телефон водителя
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return string[]|null
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param string[]|null $phones Список телефонов водителя.
     *
     * @return self
     */
    public function setPhones($phones)
    {
        if (is_null($phones)) {
            throw new \InvalidArgumentException('non-nullable phones cannot be null');
        }
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets passport_number
     *
     * @return string
     */
    public function getPassportNumber()
    {
        return $this->container['passport_number'];
    }

    /**
     * Sets passport_number
     *
     * @param string $passport_number Номер(с серией) паспорта
     *
     * @return self
     */
    public function setPassportNumber($passport_number)
    {
        if (is_null($passport_number)) {
            throw new \InvalidArgumentException('non-nullable passport_number cannot be null');
        }
        $this->container['passport_number'] = $passport_number;

        return $this;
    }

    /**
     * Gets passport_issue_date
     *
     * @return \DateTime
     */
    public function getPassportIssueDate()
    {
        return $this->container['passport_issue_date'];
    }

    /**
     * Sets passport_issue_date
     *
     * @param \DateTime $passport_issue_date Дата выдачи паспорта YYYY-MM-DD
     *
     * @return self
     */
    public function setPassportIssueDate($passport_issue_date)
    {
        if (is_null($passport_issue_date)) {
            throw new \InvalidArgumentException('non-nullable passport_issue_date cannot be null');
        }
        $this->container['passport_issue_date'] = $passport_issue_date;

        return $this;
    }

    /**
     * Gets passport_issue_by
     *
     * @return string
     */
    public function getPassportIssueBy()
    {
        return $this->container['passport_issue_by'];
    }

    /**
     * Sets passport_issue_by
     *
     * @param string $passport_issue_by Орган, выдавший паспорт
     *
     * @return self
     */
    public function setPassportIssueBy($passport_issue_by)
    {
        if (is_null($passport_issue_by)) {
            throw new \InvalidArgumentException('non-nullable passport_issue_by cannot be null');
        }
        $this->container['passport_issue_by'] = $passport_issue_by;

        return $this;
    }

    /**
     * Gets passport_type
     *
     * @return \MagDv\Cargomart\Dto\PassportType|null
     */
    public function getPassportType()
    {
        return $this->container['passport_type'];
    }

    /**
     * Sets passport_type
     *
     * @param \MagDv\Cargomart\Dto\PassportType|null $passport_type Тип паспорта
     *
     * @return self
     */
    public function setPassportType($passport_type)
    {
        if (is_null($passport_type)) {
            throw new \InvalidArgumentException('non-nullable passport_type cannot be null');
        }
        $this->container['passport_type'] = $passport_type;

        return $this;
    }

    /**
     * Gets registration_address
     *
     * @return string|null
     */
    public function getRegistrationAddress()
    {
        return $this->container['registration_address'];
    }

    /**
     * Sets registration_address
     *
     * @param string|null $registration_address Адрес регистрации
     *
     * @return self
     */
    public function setRegistrationAddress($registration_address)
    {
        if (is_null($registration_address)) {
            throw new \InvalidArgumentException('non-nullable registration_address cannot be null');
        }
        $this->container['registration_address'] = $registration_address;

        return $this;
    }

    /**
     * Gets licence_number
     *
     * @return string|null
     */
    public function getLicenceNumber()
    {
        return $this->container['licence_number'];
    }

    /**
     * Sets licence_number
     *
     * @param string|null $licence_number Номер водительского удостоверения
     *
     * @return self
     */
    public function setLicenceNumber($licence_number)
    {
        if (is_null($licence_number)) {
            throw new \InvalidArgumentException('non-nullable licence_number cannot be null');
        }
        $this->container['licence_number'] = $licence_number;

        return $this;
    }

    /**
     * Gets licence_issue_date
     *
     * @return \DateTime|null
     */
    public function getLicenceIssueDate()
    {
        return $this->container['licence_issue_date'];
    }

    /**
     * Sets licence_issue_date
     *
     * @param \DateTime|null $licence_issue_date Дата выдачи водительского удостоверения YYYY-MM-DD
     *
     * @return self
     */
    public function setLicenceIssueDate($licence_issue_date)
    {
        if (is_null($licence_issue_date)) {
            throw new \InvalidArgumentException('non-nullable licence_issue_date cannot be null');
        }
        $this->container['licence_issue_date'] = $licence_issue_date;

        return $this;
    }

    /**
     * Gets licence_type
     *
     * @return \MagDv\Cargomart\Dto\LicenseType|null
     */
    public function getLicenceType()
    {
        return $this->container['licence_type'];
    }

    /**
     * Sets licence_type
     *
     * @param \MagDv\Cargomart\Dto\LicenseType|null $licence_type Тип водительского удостоверения
     *
     * @return self
     */
    public function setLicenceType($licence_type)
    {
        if (is_null($licence_type)) {
            throw new \InvalidArgumentException('non-nullable licence_type cannot be null');
        }
        $this->container['licence_type'] = $licence_type;

        return $this;
    }

    /**
     * Gets licence_series
     *
     * @return string|null
     */
    public function getLicenceSeries()
    {
        return $this->container['licence_series'];
    }

    /**
     * Sets licence_series
     *
     * @param string|null $licence_series Серия водительского удостоверения
     *
     * @return self
     */
    public function setLicenceSeries($licence_series)
    {
        if (is_null($licence_series)) {
            throw new \InvalidArgumentException('non-nullable licence_series cannot be null');
        }
        $this->container['licence_series'] = $licence_series;

        return $this;
    }

    /**
     * Gets inn
     *
     * @return string|null
     */
    public function getInn()
    {
        return $this->container['inn'];
    }

    /**
     * Sets inn
     *
     * @param string|null $inn ИНН водителя
     *
     * @return self
     */
    public function setInn($inn)
    {
        if (is_null($inn)) {
            throw new \InvalidArgumentException('non-nullable inn cannot be null');
        }
        $this->container['inn'] = $inn;

        return $this;
    }

    /**
     * Gets validation_status
     *
     * @return \MagDv\Cargomart\Dto\DriverValidationStatus|null
     */
    public function getValidationStatus()
    {
        return $this->container['validation_status'];
    }

    /**
     * Sets validation_status
     *
     * @param \MagDv\Cargomart\Dto\DriverValidationStatus|null $validation_status Статус валидации данных водителя (0 - undefined, 1 - все данные валидные, 10 - не валидные данные паспорта, 11 не валидные данные телефона, 12 не валидные данные паспорта и телефона, 13 не валидные данные ИНН или ВУ)
     *
     * @return self
     */
    public function setValidationStatus($validation_status)
    {
        if (is_null($validation_status)) {
            throw new \InvalidArgumentException('non-nullable validation_status cannot be null');
        }
        $this->container['validation_status'] = $validation_status;

        return $this;
    }

    /**
     * Gets driver_app_status
     *
     * @return \MagDv\Cargomart\Dto\DriverAppStatus|null
     */
    public function getDriverAppStatus()
    {
        return $this->container['driver_app_status'];
    }

    /**
     * Sets driver_app_status
     *
     * @param \MagDv\Cargomart\Dto\DriverAppStatus|null $driver_app_status Статус наличия 'приложения водителя' у водителя
     *
     * @return self
     */
    public function setDriverAppStatus($driver_app_status)
    {
        if (is_null($driver_app_status)) {
            throw new \InvalidArgumentException('non-nullable driver_app_status cannot be null');
        }
        $this->container['driver_app_status'] = $driver_app_status;

        return $this;
    }

    /**
     * Gets driver_app_detail
     *
     * @return \MagDv\Cargomart\Dto\DriverAppDetail[]|null
     */
    public function getDriverAppDetail()
    {
        return $this->container['driver_app_detail'];
    }

    /**
     * Sets driver_app_detail
     *
     * @param \MagDv\Cargomart\Dto\DriverAppDetail[]|null $driver_app_detail Детализация наличия 'приложения водителя' по отдельным номерам телефонов
     *
     * @return self
     */
    public function setDriverAppDetail($driver_app_detail)
    {
        if (is_null($driver_app_detail)) {
            throw new \InvalidArgumentException('non-nullable driver_app_detail cannot be null');
        }
        $this->container['driver_app_detail'] = $driver_app_detail;

        return $this;
    }

    /**
     * Gets access
     *
     * @return \MagDv\Cargomart\Dto\DriverAccess
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param \MagDv\Cargomart\Dto\DriverAccess $access Объект доступа
     *
     * @return self
     */
    public function setAccess($access)
    {
        if (is_null($access)) {
            throw new \InvalidArgumentException('non-nullable access cannot be null');
        }
        $this->container['access'] = $access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


