<?php
/**
 * ChatPostPayloadOrderPriceChange
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * ChatPostPayloadOrderPriceChange Class Doc Comment
 *
 * @category Class
 * @description Изменение цены в заказе.
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChatPostPayloadOrderPriceChange implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChatPostPayloadOrderPriceChange';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'text_price' => 'string',
        'loading_date_time' => 'string',
        'consignor_pay_value' => '\MagDv\Cargomart\Dto\PayValue',
        'carrier_pay_value' => '\MagDv\Cargomart\Dto\PayValue'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'text_price' => null,
        'loading_date_time' => null,
        'consignor_pay_value' => null,
        'carrier_pay_value' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'text_price' => false,
        'loading_date_time' => false,
        'consignor_pay_value' => false,
        'carrier_pay_value' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'text_price' => 'textPrice',
        'loading_date_time' => 'loadingDateTime',
        'consignor_pay_value' => 'consignorPayValue',
        'carrier_pay_value' => 'carrierPayValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'text_price' => 'setTextPrice',
        'loading_date_time' => 'setLoadingDateTime',
        'consignor_pay_value' => 'setConsignorPayValue',
        'carrier_pay_value' => 'setCarrierPayValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'text_price' => 'getTextPrice',
        'loading_date_time' => 'getLoadingDateTime',
        'consignor_pay_value' => 'getConsignorPayValue',
        'carrier_pay_value' => 'getCarrierPayValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('text_price', $data ?? [], null);
        $this->setIfExists('loading_date_time', $data ?? [], null);
        $this->setIfExists('consignor_pay_value', $data ?? [], null);
        $this->setIfExists('carrier_pay_value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets text_price
     *
     * @return string|null
     */
    public function getTextPrice()
    {
        return $this->container['text_price'];
    }

    /**
     * Sets text_price
     *
     * @param string|null $text_price Стоимость
     *
     * @return self
     */
    public function setTextPrice($text_price)
    {
        if (is_null($text_price)) {
            throw new \InvalidArgumentException('non-nullable text_price cannot be null');
        }
        $this->container['text_price'] = $text_price;

        return $this;
    }

    /**
     * Gets loading_date_time
     *
     * @return string|null
     */
    public function getLoadingDateTime()
    {
        return $this->container['loading_date_time'];
    }

    /**
     * Sets loading_date_time
     *
     * @param string|null $loading_date_time Время погрузки
     *
     * @return self
     */
    public function setLoadingDateTime($loading_date_time)
    {
        if (is_null($loading_date_time)) {
            throw new \InvalidArgumentException('non-nullable loading_date_time cannot be null');
        }
        $this->container['loading_date_time'] = $loading_date_time;

        return $this;
    }

    /**
     * Gets consignor_pay_value
     *
     * @return \MagDv\Cargomart\Dto\PayValue|null
     */
    public function getConsignorPayValue()
    {
        return $this->container['consignor_pay_value'];
    }

    /**
     * Sets consignor_pay_value
     *
     * @param \MagDv\Cargomart\Dto\PayValue|null $consignor_pay_value Цена заказчика
     *
     * @return self
     */
    public function setConsignorPayValue($consignor_pay_value)
    {
        if (is_null($consignor_pay_value)) {
            throw new \InvalidArgumentException('non-nullable consignor_pay_value cannot be null');
        }
        $this->container['consignor_pay_value'] = $consignor_pay_value;

        return $this;
    }

    /**
     * Gets carrier_pay_value
     *
     * @return \MagDv\Cargomart\Dto\PayValue|null
     */
    public function getCarrierPayValue()
    {
        return $this->container['carrier_pay_value'];
    }

    /**
     * Sets carrier_pay_value
     *
     * @param \MagDv\Cargomart\Dto\PayValue|null $carrier_pay_value Цена перевозчика
     *
     * @return self
     */
    public function setCarrierPayValue($carrier_pay_value)
    {
        if (is_null($carrier_pay_value)) {
            throw new \InvalidArgumentException('non-nullable carrier_pay_value cannot be null');
        }
        $this->container['carrier_pay_value'] = $carrier_pay_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


