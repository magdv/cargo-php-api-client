<?php
/**
 * ProposalCarrier
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * ProposalCarrier Class Doc Comment
 *
 * @category Class
 * @description Перевозчик
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProposalCarrier implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProposalCarrier';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'carrier_id' => 'string',
        'status' => 'int',
        'legal_address' => 'string',
        'inn' => 'string',
        'kpp' => 'string',
        'curators' => 'int[]',
        'banking_details' => '\MagDv\Cargomart\Dto\BankingDetails',
        'original_document' => '\MagDv\Cargomart\Dto\OriginalDocument',
        'driver' => '\MagDv\Cargomart\Dto\ProposalDriver',
        'attached_truck_date' => '\DateTime',
        'truck' => '\MagDv\Cargomart\Dto\ProposalTruck',
        'document_package' => '\MagDv\Cargomart\Dto\OrderDocumentPackage',
        'payment_type' => '\MagDv\Cargomart\Dto\ProposalCarrierPaymentTypeEnum',
        'expeditor_contract' => '\MagDv\Cargomart\Dto\ExpeditorContract',
        'paid_expeditor_payment_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'carrier_id' => null,
        'status' => null,
        'legal_address' => null,
        'inn' => null,
        'kpp' => null,
        'curators' => null,
        'banking_details' => null,
        'original_document' => null,
        'driver' => null,
        'attached_truck_date' => 'date-time',
        'truck' => null,
        'document_package' => null,
        'payment_type' => null,
        'expeditor_contract' => null,
        'paid_expeditor_payment_date' => 'date'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'carrier_id' => false,
        'status' => false,
        'legal_address' => false,
        'inn' => false,
        'kpp' => false,
        'curators' => false,
        'banking_details' => false,
        'original_document' => false,
        'driver' => false,
        'attached_truck_date' => false,
        'truck' => false,
        'document_package' => false,
        'payment_type' => false,
        'expeditor_contract' => false,
        'paid_expeditor_payment_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'carrier_id' => 'carrierId',
        'status' => 'status',
        'legal_address' => 'legalAddress',
        'inn' => 'inn',
        'kpp' => 'kpp',
        'curators' => 'curators',
        'banking_details' => 'bankingDetails',
        'original_document' => 'originalDocument',
        'driver' => 'driver',
        'attached_truck_date' => 'attachedTruckDate',
        'truck' => 'truck',
        'document_package' => 'documentPackage',
        'payment_type' => 'paymentType',
        'expeditor_contract' => 'expeditorContract',
        'paid_expeditor_payment_date' => 'paidExpeditorPaymentDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'carrier_id' => 'setCarrierId',
        'status' => 'setStatus',
        'legal_address' => 'setLegalAddress',
        'inn' => 'setInn',
        'kpp' => 'setKpp',
        'curators' => 'setCurators',
        'banking_details' => 'setBankingDetails',
        'original_document' => 'setOriginalDocument',
        'driver' => 'setDriver',
        'attached_truck_date' => 'setAttachedTruckDate',
        'truck' => 'setTruck',
        'document_package' => 'setDocumentPackage',
        'payment_type' => 'setPaymentType',
        'expeditor_contract' => 'setExpeditorContract',
        'paid_expeditor_payment_date' => 'setPaidExpeditorPaymentDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'carrier_id' => 'getCarrierId',
        'status' => 'getStatus',
        'legal_address' => 'getLegalAddress',
        'inn' => 'getInn',
        'kpp' => 'getKpp',
        'curators' => 'getCurators',
        'banking_details' => 'getBankingDetails',
        'original_document' => 'getOriginalDocument',
        'driver' => 'getDriver',
        'attached_truck_date' => 'getAttachedTruckDate',
        'truck' => 'getTruck',
        'document_package' => 'getDocumentPackage',
        'payment_type' => 'getPaymentType',
        'expeditor_contract' => 'getExpeditorContract',
        'paid_expeditor_payment_date' => 'getPaidExpeditorPaymentDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('carrier_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('legal_address', $data ?? [], null);
        $this->setIfExists('inn', $data ?? [], null);
        $this->setIfExists('kpp', $data ?? [], null);
        $this->setIfExists('curators', $data ?? [], null);
        $this->setIfExists('banking_details', $data ?? [], null);
        $this->setIfExists('original_document', $data ?? [], null);
        $this->setIfExists('driver', $data ?? [], null);
        $this->setIfExists('attached_truck_date', $data ?? [], null);
        $this->setIfExists('truck', $data ?? [], null);
        $this->setIfExists('document_package', $data ?? [], null);
        $this->setIfExists('payment_type', $data ?? [], null);
        $this->setIfExists('expeditor_contract', $data ?? [], null);
        $this->setIfExists('paid_expeditor_payment_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['carrier_id'] === null) {
            $invalidProperties[] = "'carrier_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['curators'] === null) {
            $invalidProperties[] = "'curators' can't be null";
        }
        if ($this->container['banking_details'] === null) {
            $invalidProperties[] = "'banking_details' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets carrier_id
     *
     * @return string
     */
    public function getCarrierId()
    {
        return $this->container['carrier_id'];
    }

    /**
     * Sets carrier_id
     *
     * @param string $carrier_id Id перевозчика
     *
     * @return self
     */
    public function setCarrierId($carrier_id)
    {
        if (is_null($carrier_id)) {
            throw new \InvalidArgumentException('non-nullable carrier_id cannot be null');
        }
        $this->container['carrier_id'] = $carrier_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status Статус
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets legal_address
     *
     * @return string|null
     */
    public function getLegalAddress()
    {
        return $this->container['legal_address'];
    }

    /**
     * Sets legal_address
     *
     * @param string|null $legal_address Юридический адрес компании
     *
     * @return self
     */
    public function setLegalAddress($legal_address)
    {
        if (is_null($legal_address)) {
            throw new \InvalidArgumentException('non-nullable legal_address cannot be null');
        }
        $this->container['legal_address'] = $legal_address;

        return $this;
    }

    /**
     * Gets inn
     *
     * @return string|null
     */
    public function getInn()
    {
        return $this->container['inn'];
    }

    /**
     * Sets inn
     *
     * @param string|null $inn ИНН компании перевозчика
     *
     * @return self
     */
    public function setInn($inn)
    {
        if (is_null($inn)) {
            throw new \InvalidArgumentException('non-nullable inn cannot be null');
        }
        $this->container['inn'] = $inn;

        return $this;
    }

    /**
     * Gets kpp
     *
     * @return string|null
     */
    public function getKpp()
    {
        return $this->container['kpp'];
    }

    /**
     * Sets kpp
     *
     * @param string|null $kpp КПП компании перевозчика
     *
     * @return self
     */
    public function setKpp($kpp)
    {
        if (is_null($kpp)) {
            throw new \InvalidArgumentException('non-nullable kpp cannot be null');
        }
        $this->container['kpp'] = $kpp;

        return $this;
    }

    /**
     * Gets curators
     *
     * @return int[]
     */
    public function getCurators()
    {
        return $this->container['curators'];
    }

    /**
     * Sets curators
     *
     * @param int[] $curators Список идентификаторов контактных лиц
     *
     * @return self
     */
    public function setCurators($curators)
    {
        if (is_null($curators)) {
            throw new \InvalidArgumentException('non-nullable curators cannot be null');
        }
        $this->container['curators'] = $curators;

        return $this;
    }

    /**
     * Gets banking_details
     *
     * @return \MagDv\Cargomart\Dto\BankingDetails
     */
    public function getBankingDetails()
    {
        return $this->container['banking_details'];
    }

    /**
     * Sets banking_details
     *
     * @param \MagDv\Cargomart\Dto\BankingDetails $banking_details Банковские реквизиты
     *
     * @return self
     */
    public function setBankingDetails($banking_details)
    {
        if (is_null($banking_details)) {
            throw new \InvalidArgumentException('non-nullable banking_details cannot be null');
        }
        $this->container['banking_details'] = $banking_details;

        return $this;
    }

    /**
     * Gets original_document
     *
     * @return \MagDv\Cargomart\Dto\OriginalDocument|null
     */
    public function getOriginalDocument()
    {
        return $this->container['original_document'];
    }

    /**
     * Sets original_document
     *
     * @param \MagDv\Cargomart\Dto\OriginalDocument|null $original_document Статус отправленных оригиналов документов
     *
     * @return self
     */
    public function setOriginalDocument($original_document)
    {
        if (is_null($original_document)) {
            throw new \InvalidArgumentException('non-nullable original_document cannot be null');
        }
        $this->container['original_document'] = $original_document;

        return $this;
    }

    /**
     * Gets driver
     *
     * @return \MagDv\Cargomart\Dto\ProposalDriver|null
     */
    public function getDriver()
    {
        return $this->container['driver'];
    }

    /**
     * Sets driver
     *
     * @param \MagDv\Cargomart\Dto\ProposalDriver|null $driver Водитель
     *
     * @return self
     */
    public function setDriver($driver)
    {
        if (is_null($driver)) {
            throw new \InvalidArgumentException('non-nullable driver cannot be null');
        }
        $this->container['driver'] = $driver;

        return $this;
    }

    /**
     * Gets attached_truck_date
     *
     * @return \DateTime|null
     */
    public function getAttachedTruckDate()
    {
        return $this->container['attached_truck_date'];
    }

    /**
     * Sets attached_truck_date
     *
     * @param \DateTime|null $attached_truck_date Дата и время назначения машины на заказ
     *
     * @return self
     */
    public function setAttachedTruckDate($attached_truck_date)
    {
        if (is_null($attached_truck_date)) {
            throw new \InvalidArgumentException('non-nullable attached_truck_date cannot be null');
        }
        $this->container['attached_truck_date'] = $attached_truck_date;

        return $this;
    }

    /**
     * Gets truck
     *
     * @return \MagDv\Cargomart\Dto\ProposalTruck|null
     */
    public function getTruck()
    {
        return $this->container['truck'];
    }

    /**
     * Sets truck
     *
     * @param \MagDv\Cargomart\Dto\ProposalTruck|null $truck Транспортные средства, назначенные на заказ
     *
     * @return self
     */
    public function setTruck($truck)
    {
        if (is_null($truck)) {
            throw new \InvalidArgumentException('non-nullable truck cannot be null');
        }
        $this->container['truck'] = $truck;

        return $this;
    }

    /**
     * Gets document_package
     *
     * @return \MagDv\Cargomart\Dto\OrderDocumentPackage|null
     */
    public function getDocumentPackage()
    {
        return $this->container['document_package'];
    }

    /**
     * Sets document_package
     *
     * @param \MagDv\Cargomart\Dto\OrderDocumentPackage|null $document_package Пакет документов
     *
     * @return self
     */
    public function setDocumentPackage($document_package)
    {
        if (is_null($document_package)) {
            throw new \InvalidArgumentException('non-nullable document_package cannot be null');
        }
        $this->container['document_package'] = $document_package;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return \MagDv\Cargomart\Dto\ProposalCarrierPaymentTypeEnum|null
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param \MagDv\Cargomart\Dto\ProposalCarrierPaymentTypeEnum|null $payment_type payment_type
     *
     * @return self
     */
    public function setPaymentType($payment_type)
    {
        if (is_null($payment_type)) {
            throw new \InvalidArgumentException('non-nullable payment_type cannot be null');
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets expeditor_contract
     *
     * @return \MagDv\Cargomart\Dto\ExpeditorContract|null
     */
    public function getExpeditorContract()
    {
        return $this->container['expeditor_contract'];
    }

    /**
     * Sets expeditor_contract
     *
     * @param \MagDv\Cargomart\Dto\ExpeditorContract|null $expeditor_contract Данные договора
     *
     * @return self
     */
    public function setExpeditorContract($expeditor_contract)
    {
        if (is_null($expeditor_contract)) {
            throw new \InvalidArgumentException('non-nullable expeditor_contract cannot be null');
        }
        $this->container['expeditor_contract'] = $expeditor_contract;

        return $this;
    }

    /**
     * Gets paid_expeditor_payment_date
     *
     * @return \DateTime|null
     */
    public function getPaidExpeditorPaymentDate()
    {
        return $this->container['paid_expeditor_payment_date'];
    }

    /**
     * Sets paid_expeditor_payment_date
     *
     * @param \DateTime|null $paid_expeditor_payment_date Дата оплаты заказа перевозчику
     *
     * @return self
     */
    public function setPaidExpeditorPaymentDate($paid_expeditor_payment_date)
    {
        if (is_null($paid_expeditor_payment_date)) {
            throw new \InvalidArgumentException('non-nullable paid_expeditor_payment_date cannot be null');
        }
        $this->container['paid_expeditor_payment_date'] = $paid_expeditor_payment_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


