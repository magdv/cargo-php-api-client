<?php
/**
 * CompanyAccess
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * CompanyAccess Class Doc Comment
 *
 * @category Class
 * @description Права доступа к компании
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CompanyAccess implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'company-access';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'view' => 'bool',
        'update' => 'bool',
        'truck_list' => 'bool',
        'document_view' => 'bool',
        'create_contract_type' => 'bool',
        'update_contract_type' => 'bool',
        'list_contract_type' => 'bool',
        'view_contract_type' => 'bool',
        'partner_send' => 'bool',
        'partner_accept' => 'bool',
        'partner_reject' => 'bool',
        'partner_delete' => 'bool',
        'partner_contract_create' => 'bool',
        'partner_contract_update' => 'bool',
        'partner_conditions_view' => 'bool',
        'partner_conditions_update' => 'bool',
        'create_disabled' => 'bool',
        'delete_disabled' => 'bool',
        'kontur_report_view' => 'bool',
        'info_carrier_view' => 'bool',
        'info_consignor_view' => 'bool',
        'view_carriage_direction' => 'bool',
        'view_carriage_region' => 'bool',
        'view_requirement' => 'bool',
        'view_car_park' => 'bool',
        'view_settings' => 'bool',
        'update_settings' => 'bool',
        'view_logo' => 'bool',
        'create_logo' => 'bool',
        'delete_logo' => 'bool',
        'create_review' => 'bool',
        'view_review' => 'bool',
        'view_communication_contacts' => 'bool',
        'edit_communication_contacts' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'view' => null,
        'update' => null,
        'truck_list' => null,
        'document_view' => null,
        'create_contract_type' => null,
        'update_contract_type' => null,
        'list_contract_type' => null,
        'view_contract_type' => null,
        'partner_send' => null,
        'partner_accept' => null,
        'partner_reject' => null,
        'partner_delete' => null,
        'partner_contract_create' => null,
        'partner_contract_update' => null,
        'partner_conditions_view' => null,
        'partner_conditions_update' => null,
        'create_disabled' => null,
        'delete_disabled' => null,
        'kontur_report_view' => null,
        'info_carrier_view' => null,
        'info_consignor_view' => null,
        'view_carriage_direction' => null,
        'view_carriage_region' => null,
        'view_requirement' => null,
        'view_car_park' => null,
        'view_settings' => null,
        'update_settings' => null,
        'view_logo' => null,
        'create_logo' => null,
        'delete_logo' => null,
        'create_review' => null,
        'view_review' => null,
        'view_communication_contacts' => null,
        'edit_communication_contacts' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'view' => false,
        'update' => false,
        'truck_list' => false,
        'document_view' => false,
        'create_contract_type' => false,
        'update_contract_type' => false,
        'list_contract_type' => false,
        'view_contract_type' => false,
        'partner_send' => false,
        'partner_accept' => false,
        'partner_reject' => false,
        'partner_delete' => false,
        'partner_contract_create' => false,
        'partner_contract_update' => false,
        'partner_conditions_view' => false,
        'partner_conditions_update' => false,
        'create_disabled' => false,
        'delete_disabled' => false,
        'kontur_report_view' => false,
        'info_carrier_view' => false,
        'info_consignor_view' => false,
        'view_carriage_direction' => false,
        'view_carriage_region' => false,
        'view_requirement' => false,
        'view_car_park' => false,
        'view_settings' => false,
        'update_settings' => false,
        'view_logo' => false,
        'create_logo' => false,
        'delete_logo' => false,
        'create_review' => false,
        'view_review' => false,
        'view_communication_contacts' => false,
        'edit_communication_contacts' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'view' => 'view',
        'update' => 'update',
        'truck_list' => 'truckList',
        'document_view' => 'documentView',
        'create_contract_type' => 'createContractType',
        'update_contract_type' => 'updateContractType',
        'list_contract_type' => 'listContractType',
        'view_contract_type' => 'viewContractType',
        'partner_send' => 'partnerSend',
        'partner_accept' => 'partnerAccept',
        'partner_reject' => 'partnerReject',
        'partner_delete' => 'partnerDelete',
        'partner_contract_create' => 'partnerContractCreate',
        'partner_contract_update' => 'partnerContractUpdate',
        'partner_conditions_view' => 'partnerConditionsView',
        'partner_conditions_update' => 'partnerConditionsUpdate',
        'create_disabled' => 'createDisabled',
        'delete_disabled' => 'deleteDisabled',
        'kontur_report_view' => 'konturReportView',
        'info_carrier_view' => 'infoCarrierView',
        'info_consignor_view' => 'infoConsignorView',
        'view_carriage_direction' => 'viewCarriageDirection',
        'view_carriage_region' => 'viewCarriageRegion',
        'view_requirement' => 'viewRequirement',
        'view_car_park' => 'viewCarPark',
        'view_settings' => 'viewSettings',
        'update_settings' => 'updateSettings',
        'view_logo' => 'viewLogo',
        'create_logo' => 'createLogo',
        'delete_logo' => 'deleteLogo',
        'create_review' => 'createReview',
        'view_review' => 'viewReview',
        'view_communication_contacts' => 'viewCommunicationContacts',
        'edit_communication_contacts' => 'editCommunicationContacts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'view' => 'setView',
        'update' => 'setUpdate',
        'truck_list' => 'setTruckList',
        'document_view' => 'setDocumentView',
        'create_contract_type' => 'setCreateContractType',
        'update_contract_type' => 'setUpdateContractType',
        'list_contract_type' => 'setListContractType',
        'view_contract_type' => 'setViewContractType',
        'partner_send' => 'setPartnerSend',
        'partner_accept' => 'setPartnerAccept',
        'partner_reject' => 'setPartnerReject',
        'partner_delete' => 'setPartnerDelete',
        'partner_contract_create' => 'setPartnerContractCreate',
        'partner_contract_update' => 'setPartnerContractUpdate',
        'partner_conditions_view' => 'setPartnerConditionsView',
        'partner_conditions_update' => 'setPartnerConditionsUpdate',
        'create_disabled' => 'setCreateDisabled',
        'delete_disabled' => 'setDeleteDisabled',
        'kontur_report_view' => 'setKonturReportView',
        'info_carrier_view' => 'setInfoCarrierView',
        'info_consignor_view' => 'setInfoConsignorView',
        'view_carriage_direction' => 'setViewCarriageDirection',
        'view_carriage_region' => 'setViewCarriageRegion',
        'view_requirement' => 'setViewRequirement',
        'view_car_park' => 'setViewCarPark',
        'view_settings' => 'setViewSettings',
        'update_settings' => 'setUpdateSettings',
        'view_logo' => 'setViewLogo',
        'create_logo' => 'setCreateLogo',
        'delete_logo' => 'setDeleteLogo',
        'create_review' => 'setCreateReview',
        'view_review' => 'setViewReview',
        'view_communication_contacts' => 'setViewCommunicationContacts',
        'edit_communication_contacts' => 'setEditCommunicationContacts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'view' => 'getView',
        'update' => 'getUpdate',
        'truck_list' => 'getTruckList',
        'document_view' => 'getDocumentView',
        'create_contract_type' => 'getCreateContractType',
        'update_contract_type' => 'getUpdateContractType',
        'list_contract_type' => 'getListContractType',
        'view_contract_type' => 'getViewContractType',
        'partner_send' => 'getPartnerSend',
        'partner_accept' => 'getPartnerAccept',
        'partner_reject' => 'getPartnerReject',
        'partner_delete' => 'getPartnerDelete',
        'partner_contract_create' => 'getPartnerContractCreate',
        'partner_contract_update' => 'getPartnerContractUpdate',
        'partner_conditions_view' => 'getPartnerConditionsView',
        'partner_conditions_update' => 'getPartnerConditionsUpdate',
        'create_disabled' => 'getCreateDisabled',
        'delete_disabled' => 'getDeleteDisabled',
        'kontur_report_view' => 'getKonturReportView',
        'info_carrier_view' => 'getInfoCarrierView',
        'info_consignor_view' => 'getInfoConsignorView',
        'view_carriage_direction' => 'getViewCarriageDirection',
        'view_carriage_region' => 'getViewCarriageRegion',
        'view_requirement' => 'getViewRequirement',
        'view_car_park' => 'getViewCarPark',
        'view_settings' => 'getViewSettings',
        'update_settings' => 'getUpdateSettings',
        'view_logo' => 'getViewLogo',
        'create_logo' => 'getCreateLogo',
        'delete_logo' => 'getDeleteLogo',
        'create_review' => 'getCreateReview',
        'view_review' => 'getViewReview',
        'view_communication_contacts' => 'getViewCommunicationContacts',
        'edit_communication_contacts' => 'getEditCommunicationContacts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('view', $data ?? [], false);
        $this->setIfExists('update', $data ?? [], false);
        $this->setIfExists('truck_list', $data ?? [], false);
        $this->setIfExists('document_view', $data ?? [], false);
        $this->setIfExists('create_contract_type', $data ?? [], false);
        $this->setIfExists('update_contract_type', $data ?? [], false);
        $this->setIfExists('list_contract_type', $data ?? [], false);
        $this->setIfExists('view_contract_type', $data ?? [], false);
        $this->setIfExists('partner_send', $data ?? [], false);
        $this->setIfExists('partner_accept', $data ?? [], false);
        $this->setIfExists('partner_reject', $data ?? [], false);
        $this->setIfExists('partner_delete', $data ?? [], false);
        $this->setIfExists('partner_contract_create', $data ?? [], false);
        $this->setIfExists('partner_contract_update', $data ?? [], false);
        $this->setIfExists('partner_conditions_view', $data ?? [], false);
        $this->setIfExists('partner_conditions_update', $data ?? [], false);
        $this->setIfExists('create_disabled', $data ?? [], false);
        $this->setIfExists('delete_disabled', $data ?? [], false);
        $this->setIfExists('kontur_report_view', $data ?? [], false);
        $this->setIfExists('info_carrier_view', $data ?? [], false);
        $this->setIfExists('info_consignor_view', $data ?? [], false);
        $this->setIfExists('view_carriage_direction', $data ?? [], false);
        $this->setIfExists('view_carriage_region', $data ?? [], false);
        $this->setIfExists('view_requirement', $data ?? [], false);
        $this->setIfExists('view_car_park', $data ?? [], false);
        $this->setIfExists('view_settings', $data ?? [], false);
        $this->setIfExists('update_settings', $data ?? [], false);
        $this->setIfExists('view_logo', $data ?? [], false);
        $this->setIfExists('create_logo', $data ?? [], false);
        $this->setIfExists('delete_logo', $data ?? [], false);
        $this->setIfExists('create_review', $data ?? [], false);
        $this->setIfExists('view_review', $data ?? [], false);
        $this->setIfExists('view_communication_contacts', $data ?? [], false);
        $this->setIfExists('edit_communication_contacts', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets view
     *
     * @return bool|null
     */
    public function getView()
    {
        return $this->container['view'];
    }

    /**
     * Sets view
     *
     * @param bool|null $view Доступ на просмотр компании
     *
     * @return self
     */
    public function setView($view)
    {
        if (is_null($view)) {
            throw new \InvalidArgumentException('non-nullable view cannot be null');
        }
        $this->container['view'] = $view;

        return $this;
    }

    /**
     * Gets update
     *
     * @return bool|null
     */
    public function getUpdate()
    {
        return $this->container['update'];
    }

    /**
     * Sets update
     *
     * @param bool|null $update Доступ на редактирование компании
     *
     * @return self
     */
    public function setUpdate($update)
    {
        if (is_null($update)) {
            throw new \InvalidArgumentException('non-nullable update cannot be null');
        }
        $this->container['update'] = $update;

        return $this;
    }

    /**
     * Gets truck_list
     *
     * @return bool|null
     */
    public function getTruckList()
    {
        return $this->container['truck_list'];
    }

    /**
     * Sets truck_list
     *
     * @param bool|null $truck_list Доступ к списку автопарка
     *
     * @return self
     */
    public function setTruckList($truck_list)
    {
        if (is_null($truck_list)) {
            throw new \InvalidArgumentException('non-nullable truck_list cannot be null');
        }
        $this->container['truck_list'] = $truck_list;

        return $this;
    }

    /**
     * Gets document_view
     *
     * @return bool|null
     */
    public function getDocumentView()
    {
        return $this->container['document_view'];
    }

    /**
     * Sets document_view
     *
     * @param bool|null $document_view Доступ на просмотр документов
     *
     * @return self
     */
    public function setDocumentView($document_view)
    {
        if (is_null($document_view)) {
            throw new \InvalidArgumentException('non-nullable document_view cannot be null');
        }
        $this->container['document_view'] = $document_view;

        return $this;
    }

    /**
     * Gets create_contract_type
     *
     * @return bool|null
     */
    public function getCreateContractType()
    {
        return $this->container['create_contract_type'];
    }

    /**
     * Sets create_contract_type
     *
     * @param bool|null $create_contract_type Доступ на создание типа договора
     *
     * @return self
     */
    public function setCreateContractType($create_contract_type)
    {
        if (is_null($create_contract_type)) {
            throw new \InvalidArgumentException('non-nullable create_contract_type cannot be null');
        }
        $this->container['create_contract_type'] = $create_contract_type;

        return $this;
    }

    /**
     * Gets update_contract_type
     *
     * @return bool|null
     */
    public function getUpdateContractType()
    {
        return $this->container['update_contract_type'];
    }

    /**
     * Sets update_contract_type
     *
     * @param bool|null $update_contract_type Доступ на изменение типа договора
     *
     * @return self
     */
    public function setUpdateContractType($update_contract_type)
    {
        if (is_null($update_contract_type)) {
            throw new \InvalidArgumentException('non-nullable update_contract_type cannot be null');
        }
        $this->container['update_contract_type'] = $update_contract_type;

        return $this;
    }

    /**
     * Gets list_contract_type
     *
     * @return bool|null
     */
    public function getListContractType()
    {
        return $this->container['list_contract_type'];
    }

    /**
     * Sets list_contract_type
     *
     * @param bool|null $list_contract_type Доступ на просмотр списка типов договоров
     *
     * @return self
     */
    public function setListContractType($list_contract_type)
    {
        if (is_null($list_contract_type)) {
            throw new \InvalidArgumentException('non-nullable list_contract_type cannot be null');
        }
        $this->container['list_contract_type'] = $list_contract_type;

        return $this;
    }

    /**
     * Gets view_contract_type
     *
     * @return bool|null
     */
    public function getViewContractType()
    {
        return $this->container['view_contract_type'];
    }

    /**
     * Sets view_contract_type
     *
     * @param bool|null $view_contract_type Доступ на просмотр типа договора
     *
     * @return self
     */
    public function setViewContractType($view_contract_type)
    {
        if (is_null($view_contract_type)) {
            throw new \InvalidArgumentException('non-nullable view_contract_type cannot be null');
        }
        $this->container['view_contract_type'] = $view_contract_type;

        return $this;
    }

    /**
     * Gets partner_send
     *
     * @return bool|null
     */
    public function getPartnerSend()
    {
        return $this->container['partner_send'];
    }

    /**
     * Sets partner_send
     *
     * @param bool|null $partner_send Доступ на приглашение в партнёры
     *
     * @return self
     */
    public function setPartnerSend($partner_send)
    {
        if (is_null($partner_send)) {
            throw new \InvalidArgumentException('non-nullable partner_send cannot be null');
        }
        $this->container['partner_send'] = $partner_send;

        return $this;
    }

    /**
     * Gets partner_accept
     *
     * @return bool|null
     */
    public function getPartnerAccept()
    {
        return $this->container['partner_accept'];
    }

    /**
     * Sets partner_accept
     *
     * @param bool|null $partner_accept Доступ на принятие партнёрства
     *
     * @return self
     */
    public function setPartnerAccept($partner_accept)
    {
        if (is_null($partner_accept)) {
            throw new \InvalidArgumentException('non-nullable partner_accept cannot be null');
        }
        $this->container['partner_accept'] = $partner_accept;

        return $this;
    }

    /**
     * Gets partner_reject
     *
     * @return bool|null
     */
    public function getPartnerReject()
    {
        return $this->container['partner_reject'];
    }

    /**
     * Sets partner_reject
     *
     * @param bool|null $partner_reject Доступ на отказ в партнёрстве
     *
     * @return self
     */
    public function setPartnerReject($partner_reject)
    {
        if (is_null($partner_reject)) {
            throw new \InvalidArgumentException('non-nullable partner_reject cannot be null');
        }
        $this->container['partner_reject'] = $partner_reject;

        return $this;
    }

    /**
     * Gets partner_delete
     *
     * @return bool|null
     */
    public function getPartnerDelete()
    {
        return $this->container['partner_delete'];
    }

    /**
     * Sets partner_delete
     *
     * @param bool|null $partner_delete Доступ на удаление из партнёров
     *
     * @return self
     */
    public function setPartnerDelete($partner_delete)
    {
        if (is_null($partner_delete)) {
            throw new \InvalidArgumentException('non-nullable partner_delete cannot be null');
        }
        $this->container['partner_delete'] = $partner_delete;

        return $this;
    }

    /**
     * Gets partner_contract_create
     *
     * @return bool|null
     */
    public function getPartnerContractCreate()
    {
        return $this->container['partner_contract_create'];
    }

    /**
     * Sets partner_contract_create
     *
     * @param bool|null $partner_contract_create Возможность создавать данные партнёрского договора
     *
     * @return self
     */
    public function setPartnerContractCreate($partner_contract_create)
    {
        if (is_null($partner_contract_create)) {
            throw new \InvalidArgumentException('non-nullable partner_contract_create cannot be null');
        }
        $this->container['partner_contract_create'] = $partner_contract_create;

        return $this;
    }

    /**
     * Gets partner_contract_update
     *
     * @return bool|null
     */
    public function getPartnerContractUpdate()
    {
        return $this->container['partner_contract_update'];
    }

    /**
     * Sets partner_contract_update
     *
     * @param bool|null $partner_contract_update Возможность редактировать данные партнёрского договора
     *
     * @return self
     */
    public function setPartnerContractUpdate($partner_contract_update)
    {
        if (is_null($partner_contract_update)) {
            throw new \InvalidArgumentException('non-nullable partner_contract_update cannot be null');
        }
        $this->container['partner_contract_update'] = $partner_contract_update;

        return $this;
    }

    /**
     * Gets partner_conditions_view
     *
     * @return bool|null
     */
    public function getPartnerConditionsView()
    {
        return $this->container['partner_conditions_view'];
    }

    /**
     * Sets partner_conditions_view
     *
     * @param bool|null $partner_conditions_view Возможность просматривать условия партнёрства
     *
     * @return self
     */
    public function setPartnerConditionsView($partner_conditions_view)
    {
        if (is_null($partner_conditions_view)) {
            throw new \InvalidArgumentException('non-nullable partner_conditions_view cannot be null');
        }
        $this->container['partner_conditions_view'] = $partner_conditions_view;

        return $this;
    }

    /**
     * Gets partner_conditions_update
     *
     * @return bool|null
     */
    public function getPartnerConditionsUpdate()
    {
        return $this->container['partner_conditions_update'];
    }

    /**
     * Sets partner_conditions_update
     *
     * @param bool|null $partner_conditions_update Возможность редактировать условия партнёрства
     *
     * @return self
     */
    public function setPartnerConditionsUpdate($partner_conditions_update)
    {
        if (is_null($partner_conditions_update)) {
            throw new \InvalidArgumentException('non-nullable partner_conditions_update cannot be null');
        }
        $this->container['partner_conditions_update'] = $partner_conditions_update;

        return $this;
    }

    /**
     * Gets create_disabled
     *
     * @return bool|null
     */
    public function getCreateDisabled()
    {
        return $this->container['create_disabled'];
    }

    /**
     * Sets create_disabled
     *
     * @param bool|null $create_disabled Доступ на добавление компании в чёрный список
     *
     * @return self
     */
    public function setCreateDisabled($create_disabled)
    {
        if (is_null($create_disabled)) {
            throw new \InvalidArgumentException('non-nullable create_disabled cannot be null');
        }
        $this->container['create_disabled'] = $create_disabled;

        return $this;
    }

    /**
     * Gets delete_disabled
     *
     * @return bool|null
     */
    public function getDeleteDisabled()
    {
        return $this->container['delete_disabled'];
    }

    /**
     * Sets delete_disabled
     *
     * @param bool|null $delete_disabled Доступ на удаление компании из чёрного список
     *
     * @return self
     */
    public function setDeleteDisabled($delete_disabled)
    {
        if (is_null($delete_disabled)) {
            throw new \InvalidArgumentException('non-nullable delete_disabled cannot be null');
        }
        $this->container['delete_disabled'] = $delete_disabled;

        return $this;
    }

    /**
     * Gets kontur_report_view
     *
     * @return bool|null
     */
    public function getKonturReportView()
    {
        return $this->container['kontur_report_view'];
    }

    /**
     * Sets kontur_report_view
     *
     * @param bool|null $kontur_report_view Доступ на получение ссылки на отчет по Контуру
     *
     * @return self
     */
    public function setKonturReportView($kontur_report_view)
    {
        if (is_null($kontur_report_view)) {
            throw new \InvalidArgumentException('non-nullable kontur_report_view cannot be null');
        }
        $this->container['kontur_report_view'] = $kontur_report_view;

        return $this;
    }

    /**
     * Gets info_carrier_view
     *
     * @return bool|null
     */
    public function getInfoCarrierView()
    {
        return $this->container['info_carrier_view'];
    }

    /**
     * Sets info_carrier_view
     *
     * @param bool|null $info_carrier_view Доступ на получение информации по деловому профилю перевозчика
     *
     * @return self
     */
    public function setInfoCarrierView($info_carrier_view)
    {
        if (is_null($info_carrier_view)) {
            throw new \InvalidArgumentException('non-nullable info_carrier_view cannot be null');
        }
        $this->container['info_carrier_view'] = $info_carrier_view;

        return $this;
    }

    /**
     * Gets info_consignor_view
     *
     * @return bool|null
     */
    public function getInfoConsignorView()
    {
        return $this->container['info_consignor_view'];
    }

    /**
     * Sets info_consignor_view
     *
     * @param bool|null $info_consignor_view Доступ на получение информации по деловому профилю отправителя
     *
     * @return self
     */
    public function setInfoConsignorView($info_consignor_view)
    {
        if (is_null($info_consignor_view)) {
            throw new \InvalidArgumentException('non-nullable info_consignor_view cannot be null');
        }
        $this->container['info_consignor_view'] = $info_consignor_view;

        return $this;
    }

    /**
     * Gets view_carriage_direction
     *
     * @return bool|null
     */
    public function getViewCarriageDirection()
    {
        return $this->container['view_carriage_direction'];
    }

    /**
     * Sets view_carriage_direction
     *
     * @param bool|null $view_carriage_direction Доступ на получение информации по направлениям перевозок отправителя
     *
     * @return self
     */
    public function setViewCarriageDirection($view_carriage_direction)
    {
        if (is_null($view_carriage_direction)) {
            throw new \InvalidArgumentException('non-nullable view_carriage_direction cannot be null');
        }
        $this->container['view_carriage_direction'] = $view_carriage_direction;

        return $this;
    }

    /**
     * Gets view_carriage_region
     *
     * @return bool|null
     */
    public function getViewCarriageRegion()
    {
        return $this->container['view_carriage_region'];
    }

    /**
     * Sets view_carriage_region
     *
     * @param bool|null $view_carriage_region Доступ на получение информации по областям перевозок
     *
     * @return self
     */
    public function setViewCarriageRegion($view_carriage_region)
    {
        if (is_null($view_carriage_region)) {
            throw new \InvalidArgumentException('non-nullable view_carriage_region cannot be null');
        }
        $this->container['view_carriage_region'] = $view_carriage_region;

        return $this;
    }

    /**
     * Gets view_requirement
     *
     * @return bool|null
     */
    public function getViewRequirement()
    {
        return $this->container['view_requirement'];
    }

    /**
     * Sets view_requirement
     *
     * @param bool|null $view_requirement Доступ на получение информации по требованиям отправителя к перевозкам
     *
     * @return self
     */
    public function setViewRequirement($view_requirement)
    {
        if (is_null($view_requirement)) {
            throw new \InvalidArgumentException('non-nullable view_requirement cannot be null');
        }
        $this->container['view_requirement'] = $view_requirement;

        return $this;
    }

    /**
     * Gets view_car_park
     *
     * @return bool|null
     */
    public function getViewCarPark()
    {
        return $this->container['view_car_park'];
    }

    /**
     * Sets view_car_park
     *
     * @param bool|null $view_car_park Доступ на получение информации по автопарку перевозчика
     *
     * @return self
     */
    public function setViewCarPark($view_car_park)
    {
        if (is_null($view_car_park)) {
            throw new \InvalidArgumentException('non-nullable view_car_park cannot be null');
        }
        $this->container['view_car_park'] = $view_car_park;

        return $this;
    }

    /**
     * Gets view_settings
     *
     * @return bool|null
     */
    public function getViewSettings()
    {
        return $this->container['view_settings'];
    }

    /**
     * Sets view_settings
     *
     * @param bool|null $view_settings Доступ на получение информации по настройкам компании
     *
     * @return self
     */
    public function setViewSettings($view_settings)
    {
        if (is_null($view_settings)) {
            throw new \InvalidArgumentException('non-nullable view_settings cannot be null');
        }
        $this->container['view_settings'] = $view_settings;

        return $this;
    }

    /**
     * Gets update_settings
     *
     * @return bool|null
     */
    public function getUpdateSettings()
    {
        return $this->container['update_settings'];
    }

    /**
     * Sets update_settings
     *
     * @param bool|null $update_settings Доступ на редактирование информации по настройкам компании
     *
     * @return self
     */
    public function setUpdateSettings($update_settings)
    {
        if (is_null($update_settings)) {
            throw new \InvalidArgumentException('non-nullable update_settings cannot be null');
        }
        $this->container['update_settings'] = $update_settings;

        return $this;
    }

    /**
     * Gets view_logo
     *
     * @return bool|null
     */
    public function getViewLogo()
    {
        return $this->container['view_logo'];
    }

    /**
     * Sets view_logo
     *
     * @param bool|null $view_logo Доступ на просмотр логотипа компании
     *
     * @return self
     */
    public function setViewLogo($view_logo)
    {
        if (is_null($view_logo)) {
            throw new \InvalidArgumentException('non-nullable view_logo cannot be null');
        }
        $this->container['view_logo'] = $view_logo;

        return $this;
    }

    /**
     * Gets create_logo
     *
     * @return bool|null
     */
    public function getCreateLogo()
    {
        return $this->container['create_logo'];
    }

    /**
     * Sets create_logo
     *
     * @param bool|null $create_logo Доступ на добавление логотипа компании
     *
     * @return self
     */
    public function setCreateLogo($create_logo)
    {
        if (is_null($create_logo)) {
            throw new \InvalidArgumentException('non-nullable create_logo cannot be null');
        }
        $this->container['create_logo'] = $create_logo;

        return $this;
    }

    /**
     * Gets delete_logo
     *
     * @return bool|null
     */
    public function getDeleteLogo()
    {
        return $this->container['delete_logo'];
    }

    /**
     * Sets delete_logo
     *
     * @param bool|null $delete_logo Доступ на удаление логотипа компании
     *
     * @return self
     */
    public function setDeleteLogo($delete_logo)
    {
        if (is_null($delete_logo)) {
            throw new \InvalidArgumentException('non-nullable delete_logo cannot be null');
        }
        $this->container['delete_logo'] = $delete_logo;

        return $this;
    }

    /**
     * Gets create_review
     *
     * @return bool|null
     */
    public function getCreateReview()
    {
        return $this->container['create_review'];
    }

    /**
     * Sets create_review
     *
     * @param bool|null $create_review Доступ на добавление отзыва
     *
     * @return self
     */
    public function setCreateReview($create_review)
    {
        if (is_null($create_review)) {
            throw new \InvalidArgumentException('non-nullable create_review cannot be null');
        }
        $this->container['create_review'] = $create_review;

        return $this;
    }

    /**
     * Gets view_review
     *
     * @return bool|null
     */
    public function getViewReview()
    {
        return $this->container['view_review'];
    }

    /**
     * Sets view_review
     *
     * @param bool|null $view_review Доступ на просмотр отзывов
     *
     * @return self
     */
    public function setViewReview($view_review)
    {
        if (is_null($view_review)) {
            throw new \InvalidArgumentException('non-nullable view_review cannot be null');
        }
        $this->container['view_review'] = $view_review;

        return $this;
    }

    /**
     * Gets view_communication_contacts
     *
     * @return bool|null
     */
    public function getViewCommunicationContacts()
    {
        return $this->container['view_communication_contacts'];
    }

    /**
     * Sets view_communication_contacts
     *
     * @param bool|null $view_communication_contacts Доступ на чтение контактов для связи
     *
     * @return self
     */
    public function setViewCommunicationContacts($view_communication_contacts)
    {
        if (is_null($view_communication_contacts)) {
            throw new \InvalidArgumentException('non-nullable view_communication_contacts cannot be null');
        }
        $this->container['view_communication_contacts'] = $view_communication_contacts;

        return $this;
    }

    /**
     * Gets edit_communication_contacts
     *
     * @return bool|null
     */
    public function getEditCommunicationContacts()
    {
        return $this->container['edit_communication_contacts'];
    }

    /**
     * Sets edit_communication_contacts
     *
     * @param bool|null $edit_communication_contacts Доступ на редактирование контактов для связи
     *
     * @return self
     */
    public function setEditCommunicationContacts($edit_communication_contacts)
    {
        if (is_null($edit_communication_contacts)) {
            throw new \InvalidArgumentException('non-nullable edit_communication_contacts cannot be null');
        }
        $this->container['edit_communication_contacts'] = $edit_communication_contacts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


