<?php
/**
 * CompanyConfirmationAccess
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * CompanyConfirmationAccess Class Doc Comment
 *
 * @category Class
 * @description Объект состояния валидации
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CompanyConfirmationAccess implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CompanyConfirmationAccess';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'update_role' => 'bool',
        'delete_role' => 'bool',
        'update_company' => 'bool',
        'create_company' => 'bool',
        'delete_company' => 'bool',
        'create_company_confirm' => 'bool',
        'delete_company_confirm' => 'bool',
        'create_document' => 'bool',
        'create_document_send' => 'bool',
        'create_income_request' => 'bool',
        'update_company_profile' => 'bool',
        'create_company_profile_send' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'update_role' => null,
        'delete_role' => null,
        'update_company' => null,
        'create_company' => null,
        'delete_company' => null,
        'create_company_confirm' => null,
        'delete_company_confirm' => null,
        'create_document' => null,
        'create_document_send' => null,
        'create_income_request' => null,
        'update_company_profile' => null,
        'create_company_profile_send' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'update_role' => false,
        'delete_role' => false,
        'update_company' => false,
        'create_company' => false,
        'delete_company' => false,
        'create_company_confirm' => false,
        'delete_company_confirm' => false,
        'create_document' => false,
        'create_document_send' => false,
        'create_income_request' => false,
        'update_company_profile' => false,
        'create_company_profile_send' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'update_role' => 'updateRole',
        'delete_role' => 'deleteRole',
        'update_company' => 'updateCompany',
        'create_company' => 'createCompany',
        'delete_company' => 'deleteCompany',
        'create_company_confirm' => 'createCompanyConfirm',
        'delete_company_confirm' => 'deleteCompanyConfirm',
        'create_document' => 'createDocument',
        'create_document_send' => 'createDocumentSend',
        'create_income_request' => 'createIncomeRequest',
        'update_company_profile' => 'updateCompanyProfile',
        'create_company_profile_send' => 'createCompanyProfileSend'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'update_role' => 'setUpdateRole',
        'delete_role' => 'setDeleteRole',
        'update_company' => 'setUpdateCompany',
        'create_company' => 'setCreateCompany',
        'delete_company' => 'setDeleteCompany',
        'create_company_confirm' => 'setCreateCompanyConfirm',
        'delete_company_confirm' => 'setDeleteCompanyConfirm',
        'create_document' => 'setCreateDocument',
        'create_document_send' => 'setCreateDocumentSend',
        'create_income_request' => 'setCreateIncomeRequest',
        'update_company_profile' => 'setUpdateCompanyProfile',
        'create_company_profile_send' => 'setCreateCompanyProfileSend'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'update_role' => 'getUpdateRole',
        'delete_role' => 'getDeleteRole',
        'update_company' => 'getUpdateCompany',
        'create_company' => 'getCreateCompany',
        'delete_company' => 'getDeleteCompany',
        'create_company_confirm' => 'getCreateCompanyConfirm',
        'delete_company_confirm' => 'getDeleteCompanyConfirm',
        'create_document' => 'getCreateDocument',
        'create_document_send' => 'getCreateDocumentSend',
        'create_income_request' => 'getCreateIncomeRequest',
        'update_company_profile' => 'getUpdateCompanyProfile',
        'create_company_profile_send' => 'getCreateCompanyProfileSend'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('update_role', $data ?? [], false);
        $this->setIfExists('delete_role', $data ?? [], false);
        $this->setIfExists('update_company', $data ?? [], false);
        $this->setIfExists('create_company', $data ?? [], false);
        $this->setIfExists('delete_company', $data ?? [], false);
        $this->setIfExists('create_company_confirm', $data ?? [], false);
        $this->setIfExists('delete_company_confirm', $data ?? [], false);
        $this->setIfExists('create_document', $data ?? [], false);
        $this->setIfExists('create_document_send', $data ?? [], false);
        $this->setIfExists('create_income_request', $data ?? [], false);
        $this->setIfExists('update_company_profile', $data ?? [], false);
        $this->setIfExists('create_company_profile_send', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets update_role
     *
     * @return bool|null
     */
    public function getUpdateRole()
    {
        return $this->container['update_role'];
    }

    /**
     * Sets update_role
     *
     * @param bool|null $update_role Возможность установить роль
     *
     * @return self
     */
    public function setUpdateRole($update_role)
    {
        if (is_null($update_role)) {
            throw new \InvalidArgumentException('non-nullable update_role cannot be null');
        }
        $this->container['update_role'] = $update_role;

        return $this;
    }

    /**
     * Gets delete_role
     *
     * @return bool|null
     */
    public function getDeleteRole()
    {
        return $this->container['delete_role'];
    }

    /**
     * Sets delete_role
     *
     * @param bool|null $delete_role Возможность вернуться к выбору роли
     *
     * @return self
     */
    public function setDeleteRole($delete_role)
    {
        if (is_null($delete_role)) {
            throw new \InvalidArgumentException('non-nullable delete_role cannot be null');
        }
        $this->container['delete_role'] = $delete_role;

        return $this;
    }

    /**
     * Gets update_company
     *
     * @return bool|null
     */
    public function getUpdateCompany()
    {
        return $this->container['update_company'];
    }

    /**
     * Sets update_company
     *
     * @param bool|null $update_company Возможность обновить данные компании
     *
     * @return self
     */
    public function setUpdateCompany($update_company)
    {
        if (is_null($update_company)) {
            throw new \InvalidArgumentException('non-nullable update_company cannot be null');
        }
        $this->container['update_company'] = $update_company;

        return $this;
    }

    /**
     * Gets create_company
     *
     * @return bool|null
     */
    public function getCreateCompany()
    {
        return $this->container['create_company'];
    }

    /**
     * Sets create_company
     *
     * @param bool|null $create_company Возможность отправить данные в контур
     *
     * @return self
     */
    public function setCreateCompany($create_company)
    {
        if (is_null($create_company)) {
            throw new \InvalidArgumentException('non-nullable create_company cannot be null');
        }
        $this->container['create_company'] = $create_company;

        return $this;
    }

    /**
     * Gets delete_company
     *
     * @return bool|null
     */
    public function getDeleteCompany()
    {
        return $this->container['delete_company'];
    }

    /**
     * Sets delete_company
     *
     * @param bool|null $delete_company Возможность удалить inn и ввести его заново
     *
     * @return self
     */
    public function setDeleteCompany($delete_company)
    {
        if (is_null($delete_company)) {
            throw new \InvalidArgumentException('non-nullable delete_company cannot be null');
        }
        $this->container['delete_company'] = $delete_company;

        return $this;
    }

    /**
     * Gets create_company_confirm
     *
     * @return bool|null
     */
    public function getCreateCompanyConfirm()
    {
        return $this->container['create_company_confirm'];
    }

    /**
     * Sets create_company_confirm
     *
     * @param bool|null $create_company_confirm Возможность подтвердить компанию
     *
     * @return self
     */
    public function setCreateCompanyConfirm($create_company_confirm)
    {
        if (is_null($create_company_confirm)) {
            throw new \InvalidArgumentException('non-nullable create_company_confirm cannot be null');
        }
        $this->container['create_company_confirm'] = $create_company_confirm;

        return $this;
    }

    /**
     * Gets delete_company_confirm
     *
     * @return bool|null
     */
    public function getDeleteCompanyConfirm()
    {
        return $this->container['delete_company_confirm'];
    }

    /**
     * Sets delete_company_confirm
     *
     * @param bool|null $delete_company_confirm Возможность отказаться от данных компании
     *
     * @return self
     */
    public function setDeleteCompanyConfirm($delete_company_confirm)
    {
        if (is_null($delete_company_confirm)) {
            throw new \InvalidArgumentException('non-nullable delete_company_confirm cannot be null');
        }
        $this->container['delete_company_confirm'] = $delete_company_confirm;

        return $this;
    }

    /**
     * Gets create_document
     *
     * @return bool|null
     */
    public function getCreateDocument()
    {
        return $this->container['create_document'];
    }

    /**
     * Sets create_document
     *
     * @param bool|null $create_document Создать новый документ
     *
     * @return self
     */
    public function setCreateDocument($create_document)
    {
        if (is_null($create_document)) {
            throw new \InvalidArgumentException('non-nullable create_document cannot be null');
        }
        $this->container['create_document'] = $create_document;

        return $this;
    }

    /**
     * Gets create_document_send
     *
     * @return bool|null
     */
    public function getCreateDocumentSend()
    {
        return $this->container['create_document_send'];
    }

    /**
     * Sets create_document_send
     *
     * @param bool|null $create_document_send Возможность загрузить пакет документов на проверку
     *
     * @return self
     */
    public function setCreateDocumentSend($create_document_send)
    {
        if (is_null($create_document_send)) {
            throw new \InvalidArgumentException('non-nullable create_document_send cannot be null');
        }
        $this->container['create_document_send'] = $create_document_send;

        return $this;
    }

    /**
     * Gets create_income_request
     *
     * @return bool|null
     */
    public function getCreateIncomeRequest()
    {
        return $this->container['create_income_request'];
    }

    /**
     * Sets create_income_request
     *
     * @param bool|null $create_income_request Возможность отправить запрос на добавление в существующую компанию
     *
     * @return self
     */
    public function setCreateIncomeRequest($create_income_request)
    {
        if (is_null($create_income_request)) {
            throw new \InvalidArgumentException('non-nullable create_income_request cannot be null');
        }
        $this->container['create_income_request'] = $create_income_request;

        return $this;
    }

    /**
     * Gets update_company_profile
     *
     * @return bool|null
     */
    public function getUpdateCompanyProfile()
    {
        return $this->container['update_company_profile'];
    }

    /**
     * Sets update_company_profile
     *
     * @param bool|null $update_company_profile Сохранение профиля компании
     *
     * @return self
     */
    public function setUpdateCompanyProfile($update_company_profile)
    {
        if (is_null($update_company_profile)) {
            throw new \InvalidArgumentException('non-nullable update_company_profile cannot be null');
        }
        $this->container['update_company_profile'] = $update_company_profile;

        return $this;
    }

    /**
     * Gets create_company_profile_send
     *
     * @return bool|null
     */
    public function getCreateCompanyProfileSend()
    {
        return $this->container['create_company_profile_send'];
    }

    /**
     * Sets create_company_profile_send
     *
     * @param bool|null $create_company_profile_send Отправить профиль компании
     *
     * @return self
     */
    public function setCreateCompanyProfileSend($create_company_profile_send)
    {
        if (is_null($create_company_profile_send)) {
            throw new \InvalidArgumentException('non-nullable create_company_profile_send cannot be null');
        }
        $this->container['create_company_profile_send'] = $create_company_profile_send;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


