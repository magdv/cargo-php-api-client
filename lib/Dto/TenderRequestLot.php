<?php
/**
 * TenderRequestLot
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * TenderRequestLot Class Doc Comment
 *
 * @category Class
 * @description Лот тендера в статусе &#39;Сбор предложений&#39;
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TenderRequestLot implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tender-request-lot';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'tender_id' => 'string',
        'route' => '\MagDv\Cargomart\Dto\TenderLotPoint[]',
        'lot_offer' => '\MagDv\Cargomart\Dto\TenderRequestLotOffer',
        'cargo' => '\MagDv\Cargomart\Dto\TenderLotCargo',
        'carriage' => '\MagDv\Cargomart\Dto\TenderLotCarriage',
        'payment' => '\MagDv\Cargomart\Dto\TenderLotPayment',
        'comment' => 'string',
        'stats' => '\MagDv\Cargomart\Dto\TenderRequestLotStats',
        'offer_restrictions' => '\MagDv\Cargomart\Dto\TenderLotOfferRestrictionEnum[]',
        'access' => '\MagDv\Cargomart\Dto\TenderRequestLotAccess'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'tender_id' => 'uuid',
        'route' => null,
        'lot_offer' => null,
        'cargo' => null,
        'carriage' => null,
        'payment' => null,
        'comment' => null,
        'stats' => null,
        'offer_restrictions' => null,
        'access' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'tender_id' => false,
        'route' => false,
        'lot_offer' => false,
        'cargo' => false,
        'carriage' => false,
        'payment' => false,
        'comment' => false,
        'stats' => false,
        'offer_restrictions' => false,
        'access' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'tender_id' => 'tenderId',
        'route' => 'route',
        'lot_offer' => 'lotOffer',
        'cargo' => 'cargo',
        'carriage' => 'carriage',
        'payment' => 'payment',
        'comment' => 'comment',
        'stats' => 'stats',
        'offer_restrictions' => 'offerRestrictions',
        'access' => 'access'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'tender_id' => 'setTenderId',
        'route' => 'setRoute',
        'lot_offer' => 'setLotOffer',
        'cargo' => 'setCargo',
        'carriage' => 'setCarriage',
        'payment' => 'setPayment',
        'comment' => 'setComment',
        'stats' => 'setStats',
        'offer_restrictions' => 'setOfferRestrictions',
        'access' => 'setAccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'tender_id' => 'getTenderId',
        'route' => 'getRoute',
        'lot_offer' => 'getLotOffer',
        'cargo' => 'getCargo',
        'carriage' => 'getCarriage',
        'payment' => 'getPayment',
        'comment' => 'getComment',
        'stats' => 'getStats',
        'offer_restrictions' => 'getOfferRestrictions',
        'access' => 'getAccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('tender_id', $data ?? [], null);
        $this->setIfExists('route', $data ?? [], null);
        $this->setIfExists('lot_offer', $data ?? [], null);
        $this->setIfExists('cargo', $data ?? [], null);
        $this->setIfExists('carriage', $data ?? [], null);
        $this->setIfExists('payment', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('stats', $data ?? [], null);
        $this->setIfExists('offer_restrictions', $data ?? [], null);
        $this->setIfExists('access', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['tender_id'] === null) {
            $invalidProperties[] = "'tender_id' can't be null";
        }
        if ($this->container['offer_restrictions'] === null) {
            $invalidProperties[] = "'offer_restrictions' can't be null";
        }
        if ($this->container['access'] === null) {
            $invalidProperties[] = "'access' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Идентификатор  лота в статусе 'Сбор предложений'
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets tender_id
     *
     * @return string
     */
    public function getTenderId()
    {
        return $this->container['tender_id'];
    }

    /**
     * Sets tender_id
     *
     * @param string $tender_id Идентификатор тендера  в статусе 'Сбор предложений'
     *
     * @return self
     */
    public function setTenderId($tender_id)
    {
        if (is_null($tender_id)) {
            throw new \InvalidArgumentException('non-nullable tender_id cannot be null');
        }
        $this->container['tender_id'] = $tender_id;

        return $this;
    }

    /**
     * Gets route
     *
     * @return \MagDv\Cargomart\Dto\TenderLotPoint[]|null
     */
    public function getRoute()
    {
        return $this->container['route'];
    }

    /**
     * Sets route
     *
     * @param \MagDv\Cargomart\Dto\TenderLotPoint[]|null $route Точки маршрута
     *
     * @return self
     */
    public function setRoute($route)
    {
        if (is_null($route)) {
            throw new \InvalidArgumentException('non-nullable route cannot be null');
        }
        $this->container['route'] = $route;

        return $this;
    }

    /**
     * Gets lot_offer
     *
     * @return \MagDv\Cargomart\Dto\TenderRequestLotOffer|null
     */
    public function getLotOffer()
    {
        return $this->container['lot_offer'];
    }

    /**
     * Sets lot_offer
     *
     * @param \MagDv\Cargomart\Dto\TenderRequestLotOffer|null $lot_offer Данные отклика
     *
     * @return self
     */
    public function setLotOffer($lot_offer)
    {
        if (is_null($lot_offer)) {
            throw new \InvalidArgumentException('non-nullable lot_offer cannot be null');
        }
        $this->container['lot_offer'] = $lot_offer;

        return $this;
    }

    /**
     * Gets cargo
     *
     * @return \MagDv\Cargomart\Dto\TenderLotCargo|null
     */
    public function getCargo()
    {
        return $this->container['cargo'];
    }

    /**
     * Sets cargo
     *
     * @param \MagDv\Cargomart\Dto\TenderLotCargo|null $cargo Описание и требования груза
     *
     * @return self
     */
    public function setCargo($cargo)
    {
        if (is_null($cargo)) {
            throw new \InvalidArgumentException('non-nullable cargo cannot be null');
        }
        $this->container['cargo'] = $cargo;

        return $this;
    }

    /**
     * Gets carriage
     *
     * @return \MagDv\Cargomart\Dto\TenderLotCarriage|null
     */
    public function getCarriage()
    {
        return $this->container['carriage'];
    }

    /**
     * Sets carriage
     *
     * @param \MagDv\Cargomart\Dto\TenderLotCarriage|null $carriage Информация о требованиях к перевозке
     *
     * @return self
     */
    public function setCarriage($carriage)
    {
        if (is_null($carriage)) {
            throw new \InvalidArgumentException('non-nullable carriage cannot be null');
        }
        $this->container['carriage'] = $carriage;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \MagDv\Cargomart\Dto\TenderLotPayment|null
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \MagDv\Cargomart\Dto\TenderLotPayment|null $payment Информация о цене
     *
     * @return self
     */
    public function setPayment($payment)
    {
        if (is_null($payment)) {
            throw new \InvalidArgumentException('non-nullable payment cannot be null');
        }
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Общий комментарий по лоту
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \MagDv\Cargomart\Dto\TenderRequestLotStats|null
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \MagDv\Cargomart\Dto\TenderRequestLotStats|null $stats Статистика по лоту тендера
     *
     * @return self
     */
    public function setStats($stats)
    {
        if (is_null($stats)) {
            throw new \InvalidArgumentException('non-nullable stats cannot be null');
        }
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets offer_restrictions
     *
     * @return \MagDv\Cargomart\Dto\TenderLotOfferRestrictionEnum[]
     */
    public function getOfferRestrictions()
    {
        return $this->container['offer_restrictions'];
    }

    /**
     * Sets offer_restrictions
     *
     * @param \MagDv\Cargomart\Dto\TenderLotOfferRestrictionEnum[] $offer_restrictions Список ограничений для доступа к установке предложения
     *
     * @return self
     */
    public function setOfferRestrictions($offer_restrictions)
    {
        if (is_null($offer_restrictions)) {
            throw new \InvalidArgumentException('non-nullable offer_restrictions cannot be null');
        }
        $this->container['offer_restrictions'] = $offer_restrictions;

        return $this;
    }

    /**
     * Gets access
     *
     * @return \MagDv\Cargomart\Dto\TenderRequestLotAccess
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param \MagDv\Cargomart\Dto\TenderRequestLotAccess $access Объект доступа к лоту
     *
     * @return self
     */
    public function setAccess($access)
    {
        if (is_null($access)) {
            throw new \InvalidArgumentException('non-nullable access cannot be null');
        }
        $this->container['access'] = $access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


