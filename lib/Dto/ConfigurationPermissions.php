<?php
/**
 * ConfigurationPermissions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * ConfigurationPermissions Class Doc Comment
 *
 * @category Class
 * @description Доступный UI
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConfigurationPermissions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'configuration-permissions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'view_messages' => 'bool',
        'view_company_self_branch' => 'bool',
        'view_company_confirmation' => 'bool',
        'view_user_self_profile' => 'bool',
        'view_user_self_settings' => 'bool',
        'view_company_self_profile' => 'bool',
        'view_companies' => 'bool',
        'view_company_carrier_list' => 'bool',
        'view_company_consignor_list' => 'bool',
        'view_partner_contract_type' => 'bool',
        'view_partner_contract_type_list' => 'bool',
        'create_partner_contract_type' => 'bool',
        'view_partners' => 'bool',
        'view_company_partner_list' => 'bool',
        'view_company_partner_invitation_list' => 'bool',
        'view_company_blacklist' => 'bool',
        'view_workers' => 'bool',
        'view_worker_list' => 'bool',
        'view_worker_candidate_list' => 'bool',
        'create_worker' => 'bool',
        'view_storage_points' => 'bool',
        'view_storage_point_list' => 'bool',
        'create_storage_point' => 'bool',
        'view_trucks' => 'bool',
        'view_truck_list' => 'bool',
        'create_truck' => 'bool',
        'view_drivers' => 'bool',
        'view_driver_list' => 'bool',
        'create_driver' => 'bool',
        'view_driver_app_detail' => 'bool',
        'create_driver_app_invite' => 'bool',
        'view_order_tracking_list' => 'bool',
        'create_order_tracking' => 'bool',
        'view_profile_documents' => 'bool',
        'view_profile_document_list' => 'bool',
        'create_profile_document' => 'bool',
        'view_orders' => 'bool',
        'view_consignor_shipping_working_list' => 'bool',
        'view_consignor_shipping_archived_list' => 'bool',
        'view_consignor_shipping' => 'bool',
        'view_consignor_orders' => 'bool',
        'view_carrier_orders' => 'bool',
        'view_general_partner_orders' => 'bool',
        'view_order_carrier_list_bidding' => 'bool',
        'view_order_carrier_list_marked' => 'bool',
        'view_order_carrier_list_offer' => 'bool',
        'view_order_carrier_list_working' => 'bool',
        'view_order_carrier_list_completed' => 'bool',
        'view_order_carrier_list_archived' => 'bool',
        'view_order_consignor_list_bidding' => 'bool',
        'view_order_consignor_list_bidding_all' => 'bool',
        'view_order_consignor_list_draft' => 'bool',
        'view_order_consignor_list_moderation' => 'bool',
        'view_order_consignor_list_offer' => 'bool',
        'view_order_consignor_list_working' => 'bool',
        'view_order_consignor_list_completed' => 'bool',
        'view_order_consignor_list_archived' => 'bool',
        'view_order_expeditor_list_archived' => 'bool',
        'view_order_general_partner_list_bidding' => 'bool',
        'view_order_general_partner_list_correction_request' => 'bool',
        'view_order_general_partner_list_moderate' => 'bool',
        'view_order_general_partner_list_working' => 'bool',
        'view_order_general_partner_list_archived' => 'bool',
        'view_order_showcase' => 'bool',
        'view_order_create_button' => 'bool',
        'create_order_draft_ftl' => 'bool',
        'create_order_draft' => 'bool',
        'create_order_draft_direct' => 'bool',
        'create_order_draft_project' => 'bool',
        'create_order_draft_ftl_gp' => 'bool',
        'create_order_draft_offer' => 'bool',
        'view_expeditor_proposals' => 'bool',
        'view_expeditor_proposal_proxy_sign_list' => 'bool',
        'view_expeditor_proposal_working_list' => 'bool',
        'view_expeditor_proposal_archive_list' => 'bool',
        'view_expeditor_proposal_correction_list' => 'bool',
        'create_order_expeditor_proposal' => 'bool',
        'create_order_expeditor_proposal_fixed_price_express' => 'bool',
        'create_order_expeditor_proposal_fixed_price_auction' => 'bool',
        'import_orders' => 'bool',
        'export_orders' => 'bool',
        'export_order_offers' => 'bool',
        'view_order_broker' => 'bool',
        'view_tenders' => 'bool',
        'view_tender_carrier_price_request_lot_list' => 'bool',
        'view_tender_carrier_completed_price_request_lot_list' => 'bool',
        'view_tender_consignor_draft_list' => 'bool',
        'view_tender_consignor_price_request_list' => 'bool',
        'view_tender_consignor_completed_list' => 'bool',
        'create_tender_draft' => 'bool',
        'view_admin' => 'bool',
        'view_booking_showcase' => 'bool',
        'view_landing_express' => 'bool',
        'view_landing_for_carrier' => 'bool',
        'view_landing_for_consignor' => 'bool',
        'create_price_local' => 'bool',
        'view_price_local_list' => 'bool',
        'create_price_local_pool' => 'bool',
        'view_price_local_pool_list' => 'bool',
        'view_storage_point_emails' => 'bool',
        'update_storage_point_emails' => 'bool',
        'update_storage_point_edm_param' => 'bool',
        'view_diadoc_box_id_list' => 'bool',
        'view_contract_list' => 'bool',
        'view_contract_conclusion' => 'bool',
        'view_main_search' => 'bool',
        'order_multi_currency_param' => 'bool',
        'view_claim_list' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'view_messages' => null,
        'view_company_self_branch' => null,
        'view_company_confirmation' => null,
        'view_user_self_profile' => null,
        'view_user_self_settings' => null,
        'view_company_self_profile' => null,
        'view_companies' => null,
        'view_company_carrier_list' => null,
        'view_company_consignor_list' => null,
        'view_partner_contract_type' => null,
        'view_partner_contract_type_list' => null,
        'create_partner_contract_type' => null,
        'view_partners' => null,
        'view_company_partner_list' => null,
        'view_company_partner_invitation_list' => null,
        'view_company_blacklist' => null,
        'view_workers' => null,
        'view_worker_list' => null,
        'view_worker_candidate_list' => null,
        'create_worker' => null,
        'view_storage_points' => null,
        'view_storage_point_list' => null,
        'create_storage_point' => null,
        'view_trucks' => null,
        'view_truck_list' => null,
        'create_truck' => null,
        'view_drivers' => null,
        'view_driver_list' => null,
        'create_driver' => null,
        'view_driver_app_detail' => null,
        'create_driver_app_invite' => null,
        'view_order_tracking_list' => null,
        'create_order_tracking' => null,
        'view_profile_documents' => null,
        'view_profile_document_list' => null,
        'create_profile_document' => null,
        'view_orders' => null,
        'view_consignor_shipping_working_list' => null,
        'view_consignor_shipping_archived_list' => null,
        'view_consignor_shipping' => null,
        'view_consignor_orders' => null,
        'view_carrier_orders' => null,
        'view_general_partner_orders' => null,
        'view_order_carrier_list_bidding' => null,
        'view_order_carrier_list_marked' => null,
        'view_order_carrier_list_offer' => null,
        'view_order_carrier_list_working' => null,
        'view_order_carrier_list_completed' => null,
        'view_order_carrier_list_archived' => null,
        'view_order_consignor_list_bidding' => null,
        'view_order_consignor_list_bidding_all' => null,
        'view_order_consignor_list_draft' => null,
        'view_order_consignor_list_moderation' => null,
        'view_order_consignor_list_offer' => null,
        'view_order_consignor_list_working' => null,
        'view_order_consignor_list_completed' => null,
        'view_order_consignor_list_archived' => null,
        'view_order_expeditor_list_archived' => null,
        'view_order_general_partner_list_bidding' => null,
        'view_order_general_partner_list_correction_request' => null,
        'view_order_general_partner_list_moderate' => null,
        'view_order_general_partner_list_working' => null,
        'view_order_general_partner_list_archived' => null,
        'view_order_showcase' => null,
        'view_order_create_button' => null,
        'create_order_draft_ftl' => null,
        'create_order_draft' => null,
        'create_order_draft_direct' => null,
        'create_order_draft_project' => null,
        'create_order_draft_ftl_gp' => null,
        'create_order_draft_offer' => null,
        'view_expeditor_proposals' => null,
        'view_expeditor_proposal_proxy_sign_list' => null,
        'view_expeditor_proposal_working_list' => null,
        'view_expeditor_proposal_archive_list' => null,
        'view_expeditor_proposal_correction_list' => null,
        'create_order_expeditor_proposal' => null,
        'create_order_expeditor_proposal_fixed_price_express' => null,
        'create_order_expeditor_proposal_fixed_price_auction' => null,
        'import_orders' => null,
        'export_orders' => null,
        'export_order_offers' => null,
        'view_order_broker' => null,
        'view_tenders' => null,
        'view_tender_carrier_price_request_lot_list' => null,
        'view_tender_carrier_completed_price_request_lot_list' => null,
        'view_tender_consignor_draft_list' => null,
        'view_tender_consignor_price_request_list' => null,
        'view_tender_consignor_completed_list' => null,
        'create_tender_draft' => null,
        'view_admin' => null,
        'view_booking_showcase' => null,
        'view_landing_express' => null,
        'view_landing_for_carrier' => null,
        'view_landing_for_consignor' => null,
        'create_price_local' => null,
        'view_price_local_list' => null,
        'create_price_local_pool' => null,
        'view_price_local_pool_list' => null,
        'view_storage_point_emails' => null,
        'update_storage_point_emails' => null,
        'update_storage_point_edm_param' => null,
        'view_diadoc_box_id_list' => null,
        'view_contract_list' => null,
        'view_contract_conclusion' => null,
        'view_main_search' => null,
        'order_multi_currency_param' => null,
        'view_claim_list' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'view_messages' => false,
        'view_company_self_branch' => false,
        'view_company_confirmation' => false,
        'view_user_self_profile' => false,
        'view_user_self_settings' => false,
        'view_company_self_profile' => false,
        'view_companies' => false,
        'view_company_carrier_list' => false,
        'view_company_consignor_list' => false,
        'view_partner_contract_type' => false,
        'view_partner_contract_type_list' => false,
        'create_partner_contract_type' => false,
        'view_partners' => false,
        'view_company_partner_list' => false,
        'view_company_partner_invitation_list' => false,
        'view_company_blacklist' => false,
        'view_workers' => false,
        'view_worker_list' => false,
        'view_worker_candidate_list' => false,
        'create_worker' => false,
        'view_storage_points' => false,
        'view_storage_point_list' => false,
        'create_storage_point' => false,
        'view_trucks' => false,
        'view_truck_list' => false,
        'create_truck' => false,
        'view_drivers' => false,
        'view_driver_list' => false,
        'create_driver' => false,
        'view_driver_app_detail' => false,
        'create_driver_app_invite' => false,
        'view_order_tracking_list' => false,
        'create_order_tracking' => false,
        'view_profile_documents' => false,
        'view_profile_document_list' => false,
        'create_profile_document' => false,
        'view_orders' => false,
        'view_consignor_shipping_working_list' => false,
        'view_consignor_shipping_archived_list' => false,
        'view_consignor_shipping' => false,
        'view_consignor_orders' => false,
        'view_carrier_orders' => false,
        'view_general_partner_orders' => false,
        'view_order_carrier_list_bidding' => false,
        'view_order_carrier_list_marked' => false,
        'view_order_carrier_list_offer' => false,
        'view_order_carrier_list_working' => false,
        'view_order_carrier_list_completed' => false,
        'view_order_carrier_list_archived' => false,
        'view_order_consignor_list_bidding' => false,
        'view_order_consignor_list_bidding_all' => false,
        'view_order_consignor_list_draft' => false,
        'view_order_consignor_list_moderation' => false,
        'view_order_consignor_list_offer' => false,
        'view_order_consignor_list_working' => false,
        'view_order_consignor_list_completed' => false,
        'view_order_consignor_list_archived' => false,
        'view_order_expeditor_list_archived' => false,
        'view_order_general_partner_list_bidding' => false,
        'view_order_general_partner_list_correction_request' => false,
        'view_order_general_partner_list_moderate' => false,
        'view_order_general_partner_list_working' => false,
        'view_order_general_partner_list_archived' => false,
        'view_order_showcase' => false,
        'view_order_create_button' => false,
        'create_order_draft_ftl' => false,
        'create_order_draft' => false,
        'create_order_draft_direct' => false,
        'create_order_draft_project' => false,
        'create_order_draft_ftl_gp' => false,
        'create_order_draft_offer' => false,
        'view_expeditor_proposals' => false,
        'view_expeditor_proposal_proxy_sign_list' => false,
        'view_expeditor_proposal_working_list' => false,
        'view_expeditor_proposal_archive_list' => false,
        'view_expeditor_proposal_correction_list' => false,
        'create_order_expeditor_proposal' => false,
        'create_order_expeditor_proposal_fixed_price_express' => false,
        'create_order_expeditor_proposal_fixed_price_auction' => false,
        'import_orders' => false,
        'export_orders' => false,
        'export_order_offers' => false,
        'view_order_broker' => false,
        'view_tenders' => false,
        'view_tender_carrier_price_request_lot_list' => false,
        'view_tender_carrier_completed_price_request_lot_list' => false,
        'view_tender_consignor_draft_list' => false,
        'view_tender_consignor_price_request_list' => false,
        'view_tender_consignor_completed_list' => false,
        'create_tender_draft' => false,
        'view_admin' => false,
        'view_booking_showcase' => false,
        'view_landing_express' => false,
        'view_landing_for_carrier' => false,
        'view_landing_for_consignor' => false,
        'create_price_local' => false,
        'view_price_local_list' => false,
        'create_price_local_pool' => false,
        'view_price_local_pool_list' => false,
        'view_storage_point_emails' => false,
        'update_storage_point_emails' => false,
        'update_storage_point_edm_param' => false,
        'view_diadoc_box_id_list' => false,
        'view_contract_list' => false,
        'view_contract_conclusion' => false,
        'view_main_search' => false,
        'order_multi_currency_param' => false,
        'view_claim_list' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'view_messages' => 'viewMessages',
        'view_company_self_branch' => 'viewCompanySelfBranch',
        'view_company_confirmation' => 'viewCompanyConfirmation',
        'view_user_self_profile' => 'viewUserSelfProfile',
        'view_user_self_settings' => 'viewUserSelfSettings',
        'view_company_self_profile' => 'viewCompanySelfProfile',
        'view_companies' => 'viewCompanies',
        'view_company_carrier_list' => 'viewCompanyCarrierList',
        'view_company_consignor_list' => 'viewCompanyConsignorList',
        'view_partner_contract_type' => 'viewPartnerContractType',
        'view_partner_contract_type_list' => 'viewPartnerContractTypeList',
        'create_partner_contract_type' => 'createPartnerContractType',
        'view_partners' => 'viewPartners',
        'view_company_partner_list' => 'viewCompanyPartnerList',
        'view_company_partner_invitation_list' => 'viewCompanyPartnerInvitationList',
        'view_company_blacklist' => 'viewCompanyBlacklist',
        'view_workers' => 'viewWorkers',
        'view_worker_list' => 'viewWorkerList',
        'view_worker_candidate_list' => 'viewWorkerCandidateList',
        'create_worker' => 'createWorker',
        'view_storage_points' => 'viewStoragePoints',
        'view_storage_point_list' => 'viewStoragePointList',
        'create_storage_point' => 'createStoragePoint',
        'view_trucks' => 'viewTrucks',
        'view_truck_list' => 'viewTruckList',
        'create_truck' => 'createTruck',
        'view_drivers' => 'viewDrivers',
        'view_driver_list' => 'viewDriverList',
        'create_driver' => 'createDriver',
        'view_driver_app_detail' => 'viewDriverAppDetail',
        'create_driver_app_invite' => 'createDriverAppInvite',
        'view_order_tracking_list' => 'viewOrderTrackingList',
        'create_order_tracking' => 'createOrderTracking',
        'view_profile_documents' => 'viewProfileDocuments',
        'view_profile_document_list' => 'viewProfileDocumentList',
        'create_profile_document' => 'createProfileDocument',
        'view_orders' => 'viewOrders',
        'view_consignor_shipping_working_list' => 'viewConsignorShippingWorkingList',
        'view_consignor_shipping_archived_list' => 'viewConsignorShippingArchivedList',
        'view_consignor_shipping' => 'viewConsignorShipping',
        'view_consignor_orders' => 'viewConsignorOrders',
        'view_carrier_orders' => 'viewCarrierOrders',
        'view_general_partner_orders' => 'viewGeneralPartnerOrders',
        'view_order_carrier_list_bidding' => 'viewOrderCarrierListBidding',
        'view_order_carrier_list_marked' => 'viewOrderCarrierListMarked',
        'view_order_carrier_list_offer' => 'viewOrderCarrierListOffer',
        'view_order_carrier_list_working' => 'viewOrderCarrierListWorking',
        'view_order_carrier_list_completed' => 'viewOrderCarrierListCompleted',
        'view_order_carrier_list_archived' => 'viewOrderCarrierListArchived',
        'view_order_consignor_list_bidding' => 'viewOrderConsignorListBidding',
        'view_order_consignor_list_bidding_all' => 'viewOrderConsignorListBiddingAll',
        'view_order_consignor_list_draft' => 'viewOrderConsignorListDraft',
        'view_order_consignor_list_moderation' => 'viewOrderConsignorListModeration',
        'view_order_consignor_list_offer' => 'viewOrderConsignorListOffer',
        'view_order_consignor_list_working' => 'viewOrderConsignorListWorking',
        'view_order_consignor_list_completed' => 'viewOrderConsignorListCompleted',
        'view_order_consignor_list_archived' => 'viewOrderConsignorListArchived',
        'view_order_expeditor_list_archived' => 'viewOrderExpeditorListArchived',
        'view_order_general_partner_list_bidding' => 'viewOrderGeneralPartnerListBidding',
        'view_order_general_partner_list_correction_request' => 'viewOrderGeneralPartnerListCorrectionRequest',
        'view_order_general_partner_list_moderate' => 'viewOrderGeneralPartnerListModerate',
        'view_order_general_partner_list_working' => 'viewOrderGeneralPartnerListWorking',
        'view_order_general_partner_list_archived' => 'viewOrderGeneralPartnerListArchived',
        'view_order_showcase' => 'viewOrderShowcase',
        'view_order_create_button' => 'viewOrderCreateButton',
        'create_order_draft_ftl' => 'createOrderDraftFtl',
        'create_order_draft' => 'createOrderDraft',
        'create_order_draft_direct' => 'createOrderDraftDirect',
        'create_order_draft_project' => 'createOrderDraftProject',
        'create_order_draft_ftl_gp' => 'createOrderDraftFtlGp',
        'create_order_draft_offer' => 'createOrderDraftOffer',
        'view_expeditor_proposals' => 'viewExpeditorProposals',
        'view_expeditor_proposal_proxy_sign_list' => 'viewExpeditorProposalProxySignList',
        'view_expeditor_proposal_working_list' => 'viewExpeditorProposalWorkingList',
        'view_expeditor_proposal_archive_list' => 'viewExpeditorProposalArchiveList',
        'view_expeditor_proposal_correction_list' => 'viewExpeditorProposalCorrectionList',
        'create_order_expeditor_proposal' => 'createOrderExpeditorProposal',
        'create_order_expeditor_proposal_fixed_price_express' => 'createOrderExpeditorProposalFixedPriceExpress',
        'create_order_expeditor_proposal_fixed_price_auction' => 'createOrderExpeditorProposalFixedPriceAuction',
        'import_orders' => 'importOrders',
        'export_orders' => 'exportOrders',
        'export_order_offers' => 'exportOrderOffers',
        'view_order_broker' => 'viewOrderBroker',
        'view_tenders' => 'viewTenders',
        'view_tender_carrier_price_request_lot_list' => 'viewTenderCarrierPriceRequestLotList',
        'view_tender_carrier_completed_price_request_lot_list' => 'viewTenderCarrierCompletedPriceRequestLotList',
        'view_tender_consignor_draft_list' => 'viewTenderConsignorDraftList',
        'view_tender_consignor_price_request_list' => 'viewTenderConsignorPriceRequestList',
        'view_tender_consignor_completed_list' => 'viewTenderConsignorCompletedList',
        'create_tender_draft' => 'createTenderDraft',
        'view_admin' => 'viewAdmin',
        'view_booking_showcase' => 'viewBookingShowcase',
        'view_landing_express' => 'viewLandingExpress',
        'view_landing_for_carrier' => 'viewLandingForCarrier',
        'view_landing_for_consignor' => 'viewLandingForConsignor',
        'create_price_local' => 'createPriceLocal',
        'view_price_local_list' => 'viewPriceLocalList',
        'create_price_local_pool' => 'createPriceLocalPool',
        'view_price_local_pool_list' => 'viewPriceLocalPoolList',
        'view_storage_point_emails' => 'viewStoragePointEmails',
        'update_storage_point_emails' => 'updateStoragePointEmails',
        'update_storage_point_edm_param' => 'updateStoragePointEdmParam',
        'view_diadoc_box_id_list' => 'viewDiadocBoxIdList',
        'view_contract_list' => 'viewContractList',
        'view_contract_conclusion' => 'viewContractConclusion',
        'view_main_search' => 'viewMainSearch',
        'order_multi_currency_param' => 'orderMultiCurrencyParam',
        'view_claim_list' => 'viewClaimList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'view_messages' => 'setViewMessages',
        'view_company_self_branch' => 'setViewCompanySelfBranch',
        'view_company_confirmation' => 'setViewCompanyConfirmation',
        'view_user_self_profile' => 'setViewUserSelfProfile',
        'view_user_self_settings' => 'setViewUserSelfSettings',
        'view_company_self_profile' => 'setViewCompanySelfProfile',
        'view_companies' => 'setViewCompanies',
        'view_company_carrier_list' => 'setViewCompanyCarrierList',
        'view_company_consignor_list' => 'setViewCompanyConsignorList',
        'view_partner_contract_type' => 'setViewPartnerContractType',
        'view_partner_contract_type_list' => 'setViewPartnerContractTypeList',
        'create_partner_contract_type' => 'setCreatePartnerContractType',
        'view_partners' => 'setViewPartners',
        'view_company_partner_list' => 'setViewCompanyPartnerList',
        'view_company_partner_invitation_list' => 'setViewCompanyPartnerInvitationList',
        'view_company_blacklist' => 'setViewCompanyBlacklist',
        'view_workers' => 'setViewWorkers',
        'view_worker_list' => 'setViewWorkerList',
        'view_worker_candidate_list' => 'setViewWorkerCandidateList',
        'create_worker' => 'setCreateWorker',
        'view_storage_points' => 'setViewStoragePoints',
        'view_storage_point_list' => 'setViewStoragePointList',
        'create_storage_point' => 'setCreateStoragePoint',
        'view_trucks' => 'setViewTrucks',
        'view_truck_list' => 'setViewTruckList',
        'create_truck' => 'setCreateTruck',
        'view_drivers' => 'setViewDrivers',
        'view_driver_list' => 'setViewDriverList',
        'create_driver' => 'setCreateDriver',
        'view_driver_app_detail' => 'setViewDriverAppDetail',
        'create_driver_app_invite' => 'setCreateDriverAppInvite',
        'view_order_tracking_list' => 'setViewOrderTrackingList',
        'create_order_tracking' => 'setCreateOrderTracking',
        'view_profile_documents' => 'setViewProfileDocuments',
        'view_profile_document_list' => 'setViewProfileDocumentList',
        'create_profile_document' => 'setCreateProfileDocument',
        'view_orders' => 'setViewOrders',
        'view_consignor_shipping_working_list' => 'setViewConsignorShippingWorkingList',
        'view_consignor_shipping_archived_list' => 'setViewConsignorShippingArchivedList',
        'view_consignor_shipping' => 'setViewConsignorShipping',
        'view_consignor_orders' => 'setViewConsignorOrders',
        'view_carrier_orders' => 'setViewCarrierOrders',
        'view_general_partner_orders' => 'setViewGeneralPartnerOrders',
        'view_order_carrier_list_bidding' => 'setViewOrderCarrierListBidding',
        'view_order_carrier_list_marked' => 'setViewOrderCarrierListMarked',
        'view_order_carrier_list_offer' => 'setViewOrderCarrierListOffer',
        'view_order_carrier_list_working' => 'setViewOrderCarrierListWorking',
        'view_order_carrier_list_completed' => 'setViewOrderCarrierListCompleted',
        'view_order_carrier_list_archived' => 'setViewOrderCarrierListArchived',
        'view_order_consignor_list_bidding' => 'setViewOrderConsignorListBidding',
        'view_order_consignor_list_bidding_all' => 'setViewOrderConsignorListBiddingAll',
        'view_order_consignor_list_draft' => 'setViewOrderConsignorListDraft',
        'view_order_consignor_list_moderation' => 'setViewOrderConsignorListModeration',
        'view_order_consignor_list_offer' => 'setViewOrderConsignorListOffer',
        'view_order_consignor_list_working' => 'setViewOrderConsignorListWorking',
        'view_order_consignor_list_completed' => 'setViewOrderConsignorListCompleted',
        'view_order_consignor_list_archived' => 'setViewOrderConsignorListArchived',
        'view_order_expeditor_list_archived' => 'setViewOrderExpeditorListArchived',
        'view_order_general_partner_list_bidding' => 'setViewOrderGeneralPartnerListBidding',
        'view_order_general_partner_list_correction_request' => 'setViewOrderGeneralPartnerListCorrectionRequest',
        'view_order_general_partner_list_moderate' => 'setViewOrderGeneralPartnerListModerate',
        'view_order_general_partner_list_working' => 'setViewOrderGeneralPartnerListWorking',
        'view_order_general_partner_list_archived' => 'setViewOrderGeneralPartnerListArchived',
        'view_order_showcase' => 'setViewOrderShowcase',
        'view_order_create_button' => 'setViewOrderCreateButton',
        'create_order_draft_ftl' => 'setCreateOrderDraftFtl',
        'create_order_draft' => 'setCreateOrderDraft',
        'create_order_draft_direct' => 'setCreateOrderDraftDirect',
        'create_order_draft_project' => 'setCreateOrderDraftProject',
        'create_order_draft_ftl_gp' => 'setCreateOrderDraftFtlGp',
        'create_order_draft_offer' => 'setCreateOrderDraftOffer',
        'view_expeditor_proposals' => 'setViewExpeditorProposals',
        'view_expeditor_proposal_proxy_sign_list' => 'setViewExpeditorProposalProxySignList',
        'view_expeditor_proposal_working_list' => 'setViewExpeditorProposalWorkingList',
        'view_expeditor_proposal_archive_list' => 'setViewExpeditorProposalArchiveList',
        'view_expeditor_proposal_correction_list' => 'setViewExpeditorProposalCorrectionList',
        'create_order_expeditor_proposal' => 'setCreateOrderExpeditorProposal',
        'create_order_expeditor_proposal_fixed_price_express' => 'setCreateOrderExpeditorProposalFixedPriceExpress',
        'create_order_expeditor_proposal_fixed_price_auction' => 'setCreateOrderExpeditorProposalFixedPriceAuction',
        'import_orders' => 'setImportOrders',
        'export_orders' => 'setExportOrders',
        'export_order_offers' => 'setExportOrderOffers',
        'view_order_broker' => 'setViewOrderBroker',
        'view_tenders' => 'setViewTenders',
        'view_tender_carrier_price_request_lot_list' => 'setViewTenderCarrierPriceRequestLotList',
        'view_tender_carrier_completed_price_request_lot_list' => 'setViewTenderCarrierCompletedPriceRequestLotList',
        'view_tender_consignor_draft_list' => 'setViewTenderConsignorDraftList',
        'view_tender_consignor_price_request_list' => 'setViewTenderConsignorPriceRequestList',
        'view_tender_consignor_completed_list' => 'setViewTenderConsignorCompletedList',
        'create_tender_draft' => 'setCreateTenderDraft',
        'view_admin' => 'setViewAdmin',
        'view_booking_showcase' => 'setViewBookingShowcase',
        'view_landing_express' => 'setViewLandingExpress',
        'view_landing_for_carrier' => 'setViewLandingForCarrier',
        'view_landing_for_consignor' => 'setViewLandingForConsignor',
        'create_price_local' => 'setCreatePriceLocal',
        'view_price_local_list' => 'setViewPriceLocalList',
        'create_price_local_pool' => 'setCreatePriceLocalPool',
        'view_price_local_pool_list' => 'setViewPriceLocalPoolList',
        'view_storage_point_emails' => 'setViewStoragePointEmails',
        'update_storage_point_emails' => 'setUpdateStoragePointEmails',
        'update_storage_point_edm_param' => 'setUpdateStoragePointEdmParam',
        'view_diadoc_box_id_list' => 'setViewDiadocBoxIdList',
        'view_contract_list' => 'setViewContractList',
        'view_contract_conclusion' => 'setViewContractConclusion',
        'view_main_search' => 'setViewMainSearch',
        'order_multi_currency_param' => 'setOrderMultiCurrencyParam',
        'view_claim_list' => 'setViewClaimList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'view_messages' => 'getViewMessages',
        'view_company_self_branch' => 'getViewCompanySelfBranch',
        'view_company_confirmation' => 'getViewCompanyConfirmation',
        'view_user_self_profile' => 'getViewUserSelfProfile',
        'view_user_self_settings' => 'getViewUserSelfSettings',
        'view_company_self_profile' => 'getViewCompanySelfProfile',
        'view_companies' => 'getViewCompanies',
        'view_company_carrier_list' => 'getViewCompanyCarrierList',
        'view_company_consignor_list' => 'getViewCompanyConsignorList',
        'view_partner_contract_type' => 'getViewPartnerContractType',
        'view_partner_contract_type_list' => 'getViewPartnerContractTypeList',
        'create_partner_contract_type' => 'getCreatePartnerContractType',
        'view_partners' => 'getViewPartners',
        'view_company_partner_list' => 'getViewCompanyPartnerList',
        'view_company_partner_invitation_list' => 'getViewCompanyPartnerInvitationList',
        'view_company_blacklist' => 'getViewCompanyBlacklist',
        'view_workers' => 'getViewWorkers',
        'view_worker_list' => 'getViewWorkerList',
        'view_worker_candidate_list' => 'getViewWorkerCandidateList',
        'create_worker' => 'getCreateWorker',
        'view_storage_points' => 'getViewStoragePoints',
        'view_storage_point_list' => 'getViewStoragePointList',
        'create_storage_point' => 'getCreateStoragePoint',
        'view_trucks' => 'getViewTrucks',
        'view_truck_list' => 'getViewTruckList',
        'create_truck' => 'getCreateTruck',
        'view_drivers' => 'getViewDrivers',
        'view_driver_list' => 'getViewDriverList',
        'create_driver' => 'getCreateDriver',
        'view_driver_app_detail' => 'getViewDriverAppDetail',
        'create_driver_app_invite' => 'getCreateDriverAppInvite',
        'view_order_tracking_list' => 'getViewOrderTrackingList',
        'create_order_tracking' => 'getCreateOrderTracking',
        'view_profile_documents' => 'getViewProfileDocuments',
        'view_profile_document_list' => 'getViewProfileDocumentList',
        'create_profile_document' => 'getCreateProfileDocument',
        'view_orders' => 'getViewOrders',
        'view_consignor_shipping_working_list' => 'getViewConsignorShippingWorkingList',
        'view_consignor_shipping_archived_list' => 'getViewConsignorShippingArchivedList',
        'view_consignor_shipping' => 'getViewConsignorShipping',
        'view_consignor_orders' => 'getViewConsignorOrders',
        'view_carrier_orders' => 'getViewCarrierOrders',
        'view_general_partner_orders' => 'getViewGeneralPartnerOrders',
        'view_order_carrier_list_bidding' => 'getViewOrderCarrierListBidding',
        'view_order_carrier_list_marked' => 'getViewOrderCarrierListMarked',
        'view_order_carrier_list_offer' => 'getViewOrderCarrierListOffer',
        'view_order_carrier_list_working' => 'getViewOrderCarrierListWorking',
        'view_order_carrier_list_completed' => 'getViewOrderCarrierListCompleted',
        'view_order_carrier_list_archived' => 'getViewOrderCarrierListArchived',
        'view_order_consignor_list_bidding' => 'getViewOrderConsignorListBidding',
        'view_order_consignor_list_bidding_all' => 'getViewOrderConsignorListBiddingAll',
        'view_order_consignor_list_draft' => 'getViewOrderConsignorListDraft',
        'view_order_consignor_list_moderation' => 'getViewOrderConsignorListModeration',
        'view_order_consignor_list_offer' => 'getViewOrderConsignorListOffer',
        'view_order_consignor_list_working' => 'getViewOrderConsignorListWorking',
        'view_order_consignor_list_completed' => 'getViewOrderConsignorListCompleted',
        'view_order_consignor_list_archived' => 'getViewOrderConsignorListArchived',
        'view_order_expeditor_list_archived' => 'getViewOrderExpeditorListArchived',
        'view_order_general_partner_list_bidding' => 'getViewOrderGeneralPartnerListBidding',
        'view_order_general_partner_list_correction_request' => 'getViewOrderGeneralPartnerListCorrectionRequest',
        'view_order_general_partner_list_moderate' => 'getViewOrderGeneralPartnerListModerate',
        'view_order_general_partner_list_working' => 'getViewOrderGeneralPartnerListWorking',
        'view_order_general_partner_list_archived' => 'getViewOrderGeneralPartnerListArchived',
        'view_order_showcase' => 'getViewOrderShowcase',
        'view_order_create_button' => 'getViewOrderCreateButton',
        'create_order_draft_ftl' => 'getCreateOrderDraftFtl',
        'create_order_draft' => 'getCreateOrderDraft',
        'create_order_draft_direct' => 'getCreateOrderDraftDirect',
        'create_order_draft_project' => 'getCreateOrderDraftProject',
        'create_order_draft_ftl_gp' => 'getCreateOrderDraftFtlGp',
        'create_order_draft_offer' => 'getCreateOrderDraftOffer',
        'view_expeditor_proposals' => 'getViewExpeditorProposals',
        'view_expeditor_proposal_proxy_sign_list' => 'getViewExpeditorProposalProxySignList',
        'view_expeditor_proposal_working_list' => 'getViewExpeditorProposalWorkingList',
        'view_expeditor_proposal_archive_list' => 'getViewExpeditorProposalArchiveList',
        'view_expeditor_proposal_correction_list' => 'getViewExpeditorProposalCorrectionList',
        'create_order_expeditor_proposal' => 'getCreateOrderExpeditorProposal',
        'create_order_expeditor_proposal_fixed_price_express' => 'getCreateOrderExpeditorProposalFixedPriceExpress',
        'create_order_expeditor_proposal_fixed_price_auction' => 'getCreateOrderExpeditorProposalFixedPriceAuction',
        'import_orders' => 'getImportOrders',
        'export_orders' => 'getExportOrders',
        'export_order_offers' => 'getExportOrderOffers',
        'view_order_broker' => 'getViewOrderBroker',
        'view_tenders' => 'getViewTenders',
        'view_tender_carrier_price_request_lot_list' => 'getViewTenderCarrierPriceRequestLotList',
        'view_tender_carrier_completed_price_request_lot_list' => 'getViewTenderCarrierCompletedPriceRequestLotList',
        'view_tender_consignor_draft_list' => 'getViewTenderConsignorDraftList',
        'view_tender_consignor_price_request_list' => 'getViewTenderConsignorPriceRequestList',
        'view_tender_consignor_completed_list' => 'getViewTenderConsignorCompletedList',
        'create_tender_draft' => 'getCreateTenderDraft',
        'view_admin' => 'getViewAdmin',
        'view_booking_showcase' => 'getViewBookingShowcase',
        'view_landing_express' => 'getViewLandingExpress',
        'view_landing_for_carrier' => 'getViewLandingForCarrier',
        'view_landing_for_consignor' => 'getViewLandingForConsignor',
        'create_price_local' => 'getCreatePriceLocal',
        'view_price_local_list' => 'getViewPriceLocalList',
        'create_price_local_pool' => 'getCreatePriceLocalPool',
        'view_price_local_pool_list' => 'getViewPriceLocalPoolList',
        'view_storage_point_emails' => 'getViewStoragePointEmails',
        'update_storage_point_emails' => 'getUpdateStoragePointEmails',
        'update_storage_point_edm_param' => 'getUpdateStoragePointEdmParam',
        'view_diadoc_box_id_list' => 'getViewDiadocBoxIdList',
        'view_contract_list' => 'getViewContractList',
        'view_contract_conclusion' => 'getViewContractConclusion',
        'view_main_search' => 'getViewMainSearch',
        'order_multi_currency_param' => 'getOrderMultiCurrencyParam',
        'view_claim_list' => 'getViewClaimList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('view_messages', $data ?? [], false);
        $this->setIfExists('view_company_self_branch', $data ?? [], false);
        $this->setIfExists('view_company_confirmation', $data ?? [], false);
        $this->setIfExists('view_user_self_profile', $data ?? [], false);
        $this->setIfExists('view_user_self_settings', $data ?? [], false);
        $this->setIfExists('view_company_self_profile', $data ?? [], false);
        $this->setIfExists('view_companies', $data ?? [], false);
        $this->setIfExists('view_company_carrier_list', $data ?? [], false);
        $this->setIfExists('view_company_consignor_list', $data ?? [], false);
        $this->setIfExists('view_partner_contract_type', $data ?? [], false);
        $this->setIfExists('view_partner_contract_type_list', $data ?? [], false);
        $this->setIfExists('create_partner_contract_type', $data ?? [], false);
        $this->setIfExists('view_partners', $data ?? [], false);
        $this->setIfExists('view_company_partner_list', $data ?? [], false);
        $this->setIfExists('view_company_partner_invitation_list', $data ?? [], false);
        $this->setIfExists('view_company_blacklist', $data ?? [], false);
        $this->setIfExists('view_workers', $data ?? [], false);
        $this->setIfExists('view_worker_list', $data ?? [], false);
        $this->setIfExists('view_worker_candidate_list', $data ?? [], false);
        $this->setIfExists('create_worker', $data ?? [], false);
        $this->setIfExists('view_storage_points', $data ?? [], false);
        $this->setIfExists('view_storage_point_list', $data ?? [], false);
        $this->setIfExists('create_storage_point', $data ?? [], false);
        $this->setIfExists('view_trucks', $data ?? [], false);
        $this->setIfExists('view_truck_list', $data ?? [], false);
        $this->setIfExists('create_truck', $data ?? [], false);
        $this->setIfExists('view_drivers', $data ?? [], false);
        $this->setIfExists('view_driver_list', $data ?? [], false);
        $this->setIfExists('create_driver', $data ?? [], false);
        $this->setIfExists('view_driver_app_detail', $data ?? [], false);
        $this->setIfExists('create_driver_app_invite', $data ?? [], false);
        $this->setIfExists('view_order_tracking_list', $data ?? [], false);
        $this->setIfExists('create_order_tracking', $data ?? [], false);
        $this->setIfExists('view_profile_documents', $data ?? [], false);
        $this->setIfExists('view_profile_document_list', $data ?? [], false);
        $this->setIfExists('create_profile_document', $data ?? [], false);
        $this->setIfExists('view_orders', $data ?? [], false);
        $this->setIfExists('view_consignor_shipping_working_list', $data ?? [], false);
        $this->setIfExists('view_consignor_shipping_archived_list', $data ?? [], false);
        $this->setIfExists('view_consignor_shipping', $data ?? [], false);
        $this->setIfExists('view_consignor_orders', $data ?? [], false);
        $this->setIfExists('view_carrier_orders', $data ?? [], false);
        $this->setIfExists('view_general_partner_orders', $data ?? [], false);
        $this->setIfExists('view_order_carrier_list_bidding', $data ?? [], false);
        $this->setIfExists('view_order_carrier_list_marked', $data ?? [], false);
        $this->setIfExists('view_order_carrier_list_offer', $data ?? [], false);
        $this->setIfExists('view_order_carrier_list_working', $data ?? [], false);
        $this->setIfExists('view_order_carrier_list_completed', $data ?? [], false);
        $this->setIfExists('view_order_carrier_list_archived', $data ?? [], false);
        $this->setIfExists('view_order_consignor_list_bidding', $data ?? [], false);
        $this->setIfExists('view_order_consignor_list_bidding_all', $data ?? [], false);
        $this->setIfExists('view_order_consignor_list_draft', $data ?? [], false);
        $this->setIfExists('view_order_consignor_list_moderation', $data ?? [], false);
        $this->setIfExists('view_order_consignor_list_offer', $data ?? [], false);
        $this->setIfExists('view_order_consignor_list_working', $data ?? [], false);
        $this->setIfExists('view_order_consignor_list_completed', $data ?? [], false);
        $this->setIfExists('view_order_consignor_list_archived', $data ?? [], false);
        $this->setIfExists('view_order_expeditor_list_archived', $data ?? [], false);
        $this->setIfExists('view_order_general_partner_list_bidding', $data ?? [], false);
        $this->setIfExists('view_order_general_partner_list_correction_request', $data ?? [], false);
        $this->setIfExists('view_order_general_partner_list_moderate', $data ?? [], false);
        $this->setIfExists('view_order_general_partner_list_working', $data ?? [], false);
        $this->setIfExists('view_order_general_partner_list_archived', $data ?? [], false);
        $this->setIfExists('view_order_showcase', $data ?? [], false);
        $this->setIfExists('view_order_create_button', $data ?? [], false);
        $this->setIfExists('create_order_draft_ftl', $data ?? [], false);
        $this->setIfExists('create_order_draft', $data ?? [], false);
        $this->setIfExists('create_order_draft_direct', $data ?? [], false);
        $this->setIfExists('create_order_draft_project', $data ?? [], false);
        $this->setIfExists('create_order_draft_ftl_gp', $data ?? [], false);
        $this->setIfExists('create_order_draft_offer', $data ?? [], false);
        $this->setIfExists('view_expeditor_proposals', $data ?? [], false);
        $this->setIfExists('view_expeditor_proposal_proxy_sign_list', $data ?? [], false);
        $this->setIfExists('view_expeditor_proposal_working_list', $data ?? [], false);
        $this->setIfExists('view_expeditor_proposal_archive_list', $data ?? [], false);
        $this->setIfExists('view_expeditor_proposal_correction_list', $data ?? [], false);
        $this->setIfExists('create_order_expeditor_proposal', $data ?? [], false);
        $this->setIfExists('create_order_expeditor_proposal_fixed_price_express', $data ?? [], false);
        $this->setIfExists('create_order_expeditor_proposal_fixed_price_auction', $data ?? [], false);
        $this->setIfExists('import_orders', $data ?? [], false);
        $this->setIfExists('export_orders', $data ?? [], false);
        $this->setIfExists('export_order_offers', $data ?? [], false);
        $this->setIfExists('view_order_broker', $data ?? [], false);
        $this->setIfExists('view_tenders', $data ?? [], false);
        $this->setIfExists('view_tender_carrier_price_request_lot_list', $data ?? [], false);
        $this->setIfExists('view_tender_carrier_completed_price_request_lot_list', $data ?? [], false);
        $this->setIfExists('view_tender_consignor_draft_list', $data ?? [], false);
        $this->setIfExists('view_tender_consignor_price_request_list', $data ?? [], false);
        $this->setIfExists('view_tender_consignor_completed_list', $data ?? [], false);
        $this->setIfExists('create_tender_draft', $data ?? [], false);
        $this->setIfExists('view_admin', $data ?? [], false);
        $this->setIfExists('view_booking_showcase', $data ?? [], false);
        $this->setIfExists('view_landing_express', $data ?? [], false);
        $this->setIfExists('view_landing_for_carrier', $data ?? [], false);
        $this->setIfExists('view_landing_for_consignor', $data ?? [], false);
        $this->setIfExists('create_price_local', $data ?? [], false);
        $this->setIfExists('view_price_local_list', $data ?? [], false);
        $this->setIfExists('create_price_local_pool', $data ?? [], false);
        $this->setIfExists('view_price_local_pool_list', $data ?? [], false);
        $this->setIfExists('view_storage_point_emails', $data ?? [], false);
        $this->setIfExists('update_storage_point_emails', $data ?? [], false);
        $this->setIfExists('update_storage_point_edm_param', $data ?? [], false);
        $this->setIfExists('view_diadoc_box_id_list', $data ?? [], false);
        $this->setIfExists('view_contract_list', $data ?? [], false);
        $this->setIfExists('view_contract_conclusion', $data ?? [], false);
        $this->setIfExists('view_main_search', $data ?? [], false);
        $this->setIfExists('order_multi_currency_param', $data ?? [], false);
        $this->setIfExists('view_claim_list', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets view_messages
     *
     * @return bool|null
     */
    public function getViewMessages()
    {
        return $this->container['view_messages'];
    }

    /**
     * Sets view_messages
     *
     * @param bool|null $view_messages просмотр сообщений
     *
     * @return self
     */
    public function setViewMessages($view_messages)
    {
        if (is_null($view_messages)) {
            throw new \InvalidArgumentException('non-nullable view_messages cannot be null');
        }
        $this->container['view_messages'] = $view_messages;

        return $this;
    }

    /**
     * Gets view_company_self_branch
     *
     * @return bool|null
     */
    public function getViewCompanySelfBranch()
    {
        return $this->container['view_company_self_branch'];
    }

    /**
     * Sets view_company_self_branch
     *
     * @param bool|null $view_company_self_branch Доступ на получение списка дочерних компаний
     *
     * @return self
     */
    public function setViewCompanySelfBranch($view_company_self_branch)
    {
        if (is_null($view_company_self_branch)) {
            throw new \InvalidArgumentException('non-nullable view_company_self_branch cannot be null');
        }
        $this->container['view_company_self_branch'] = $view_company_self_branch;

        return $this;
    }

    /**
     * Gets view_company_confirmation
     *
     * @return bool|null
     */
    public function getViewCompanyConfirmation()
    {
        return $this->container['view_company_confirmation'];
    }

    /**
     * Sets view_company_confirmation
     *
     * @param bool|null $view_company_confirmation просмотр валидации пользователя
     *
     * @return self
     */
    public function setViewCompanyConfirmation($view_company_confirmation)
    {
        if (is_null($view_company_confirmation)) {
            throw new \InvalidArgumentException('non-nullable view_company_confirmation cannot be null');
        }
        $this->container['view_company_confirmation'] = $view_company_confirmation;

        return $this;
    }

    /**
     * Gets view_user_self_profile
     *
     * @return bool|null
     */
    public function getViewUserSelfProfile()
    {
        return $this->container['view_user_self_profile'];
    }

    /**
     * Sets view_user_self_profile
     *
     * @param bool|null $view_user_self_profile просмотр профиля пользователя
     *
     * @return self
     */
    public function setViewUserSelfProfile($view_user_self_profile)
    {
        if (is_null($view_user_self_profile)) {
            throw new \InvalidArgumentException('non-nullable view_user_self_profile cannot be null');
        }
        $this->container['view_user_self_profile'] = $view_user_self_profile;

        return $this;
    }

    /**
     * Gets view_user_self_settings
     *
     * @return bool|null
     */
    public function getViewUserSelfSettings()
    {
        return $this->container['view_user_self_settings'];
    }

    /**
     * Sets view_user_self_settings
     *
     * @param bool|null $view_user_self_settings просмотр настроек пользователя
     *
     * @return self
     */
    public function setViewUserSelfSettings($view_user_self_settings)
    {
        if (is_null($view_user_self_settings)) {
            throw new \InvalidArgumentException('non-nullable view_user_self_settings cannot be null');
        }
        $this->container['view_user_self_settings'] = $view_user_self_settings;

        return $this;
    }

    /**
     * Gets view_company_self_profile
     *
     * @return bool|null
     */
    public function getViewCompanySelfProfile()
    {
        return $this->container['view_company_self_profile'];
    }

    /**
     * Sets view_company_self_profile
     *
     * @param bool|null $view_company_self_profile просмотр профиля компании пользователя
     *
     * @return self
     */
    public function setViewCompanySelfProfile($view_company_self_profile)
    {
        if (is_null($view_company_self_profile)) {
            throw new \InvalidArgumentException('non-nullable view_company_self_profile cannot be null');
        }
        $this->container['view_company_self_profile'] = $view_company_self_profile;

        return $this;
    }

    /**
     * Gets view_companies
     *
     * @return bool|null
     */
    public function getViewCompanies()
    {
        return $this->container['view_companies'];
    }

    /**
     * Sets view_companies
     *
     * @param bool|null $view_companies просмотр раздела компаний
     *
     * @return self
     */
    public function setViewCompanies($view_companies)
    {
        if (is_null($view_companies)) {
            throw new \InvalidArgumentException('non-nullable view_companies cannot be null');
        }
        $this->container['view_companies'] = $view_companies;

        return $this;
    }

    /**
     * Gets view_company_carrier_list
     *
     * @return bool|null
     */
    public function getViewCompanyCarrierList()
    {
        return $this->container['view_company_carrier_list'];
    }

    /**
     * Sets view_company_carrier_list
     *
     * @param bool|null $view_company_carrier_list просмотр списка компаний-перевозчиков
     *
     * @return self
     */
    public function setViewCompanyCarrierList($view_company_carrier_list)
    {
        if (is_null($view_company_carrier_list)) {
            throw new \InvalidArgumentException('non-nullable view_company_carrier_list cannot be null');
        }
        $this->container['view_company_carrier_list'] = $view_company_carrier_list;

        return $this;
    }

    /**
     * Gets view_company_consignor_list
     *
     * @return bool|null
     */
    public function getViewCompanyConsignorList()
    {
        return $this->container['view_company_consignor_list'];
    }

    /**
     * Sets view_company_consignor_list
     *
     * @param bool|null $view_company_consignor_list просмотр списка компаний-отправителей
     *
     * @return self
     */
    public function setViewCompanyConsignorList($view_company_consignor_list)
    {
        if (is_null($view_company_consignor_list)) {
            throw new \InvalidArgumentException('non-nullable view_company_consignor_list cannot be null');
        }
        $this->container['view_company_consignor_list'] = $view_company_consignor_list;

        return $this;
    }

    /**
     * Gets view_partner_contract_type
     *
     * @return bool|null
     */
    public function getViewPartnerContractType()
    {
        return $this->container['view_partner_contract_type'];
    }

    /**
     * Sets view_partner_contract_type
     *
     * @param bool|null $view_partner_contract_type просмотр раздела управления типами договоров
     *
     * @return self
     */
    public function setViewPartnerContractType($view_partner_contract_type)
    {
        if (is_null($view_partner_contract_type)) {
            throw new \InvalidArgumentException('non-nullable view_partner_contract_type cannot be null');
        }
        $this->container['view_partner_contract_type'] = $view_partner_contract_type;

        return $this;
    }

    /**
     * Gets view_partner_contract_type_list
     *
     * @return bool|null
     */
    public function getViewPartnerContractTypeList()
    {
        return $this->container['view_partner_contract_type_list'];
    }

    /**
     * Sets view_partner_contract_type_list
     *
     * @param bool|null $view_partner_contract_type_list просмотр списка типов договоров
     *
     * @return self
     */
    public function setViewPartnerContractTypeList($view_partner_contract_type_list)
    {
        if (is_null($view_partner_contract_type_list)) {
            throw new \InvalidArgumentException('non-nullable view_partner_contract_type_list cannot be null');
        }
        $this->container['view_partner_contract_type_list'] = $view_partner_contract_type_list;

        return $this;
    }

    /**
     * Gets create_partner_contract_type
     *
     * @return bool|null
     */
    public function getCreatePartnerContractType()
    {
        return $this->container['create_partner_contract_type'];
    }

    /**
     * Sets create_partner_contract_type
     *
     * @param bool|null $create_partner_contract_type создание нового типа договора
     *
     * @return self
     */
    public function setCreatePartnerContractType($create_partner_contract_type)
    {
        if (is_null($create_partner_contract_type)) {
            throw new \InvalidArgumentException('non-nullable create_partner_contract_type cannot be null');
        }
        $this->container['create_partner_contract_type'] = $create_partner_contract_type;

        return $this;
    }

    /**
     * Gets view_partners
     *
     * @return bool|null
     */
    public function getViewPartners()
    {
        return $this->container['view_partners'];
    }

    /**
     * Sets view_partners
     *
     * @param bool|null $view_partners просмотр раздела партнерства
     *
     * @return self
     */
    public function setViewPartners($view_partners)
    {
        if (is_null($view_partners)) {
            throw new \InvalidArgumentException('non-nullable view_partners cannot be null');
        }
        $this->container['view_partners'] = $view_partners;

        return $this;
    }

    /**
     * Gets view_company_partner_list
     *
     * @return bool|null
     */
    public function getViewCompanyPartnerList()
    {
        return $this->container['view_company_partner_list'];
    }

    /**
     * Sets view_company_partner_list
     *
     * @param bool|null $view_company_partner_list просмотр списка одобренных партнеров
     *
     * @return self
     */
    public function setViewCompanyPartnerList($view_company_partner_list)
    {
        if (is_null($view_company_partner_list)) {
            throw new \InvalidArgumentException('non-nullable view_company_partner_list cannot be null');
        }
        $this->container['view_company_partner_list'] = $view_company_partner_list;

        return $this;
    }

    /**
     * Gets view_company_partner_invitation_list
     *
     * @return bool|null
     */
    public function getViewCompanyPartnerInvitationList()
    {
        return $this->container['view_company_partner_invitation_list'];
    }

    /**
     * Sets view_company_partner_invitation_list
     *
     * @param bool|null $view_company_partner_invitation_list просмотр списка приглашений в партнеры
     *
     * @return self
     */
    public function setViewCompanyPartnerInvitationList($view_company_partner_invitation_list)
    {
        if (is_null($view_company_partner_invitation_list)) {
            throw new \InvalidArgumentException('non-nullable view_company_partner_invitation_list cannot be null');
        }
        $this->container['view_company_partner_invitation_list'] = $view_company_partner_invitation_list;

        return $this;
    }

    /**
     * Gets view_company_blacklist
     *
     * @return bool|null
     */
    public function getViewCompanyBlacklist()
    {
        return $this->container['view_company_blacklist'];
    }

    /**
     * Sets view_company_blacklist
     *
     * @param bool|null $view_company_blacklist просмотр списка заблокированных компаний
     *
     * @return self
     */
    public function setViewCompanyBlacklist($view_company_blacklist)
    {
        if (is_null($view_company_blacklist)) {
            throw new \InvalidArgumentException('non-nullable view_company_blacklist cannot be null');
        }
        $this->container['view_company_blacklist'] = $view_company_blacklist;

        return $this;
    }

    /**
     * Gets view_workers
     *
     * @return bool|null
     */
    public function getViewWorkers()
    {
        return $this->container['view_workers'];
    }

    /**
     * Sets view_workers
     *
     * @param bool|null $view_workers просмотр раздела сотрудников
     *
     * @return self
     */
    public function setViewWorkers($view_workers)
    {
        if (is_null($view_workers)) {
            throw new \InvalidArgumentException('non-nullable view_workers cannot be null');
        }
        $this->container['view_workers'] = $view_workers;

        return $this;
    }

    /**
     * Gets view_worker_list
     *
     * @return bool|null
     */
    public function getViewWorkerList()
    {
        return $this->container['view_worker_list'];
    }

    /**
     * Sets view_worker_list
     *
     * @param bool|null $view_worker_list просмотр списка сотрудников
     *
     * @return self
     */
    public function setViewWorkerList($view_worker_list)
    {
        if (is_null($view_worker_list)) {
            throw new \InvalidArgumentException('non-nullable view_worker_list cannot be null');
        }
        $this->container['view_worker_list'] = $view_worker_list;

        return $this;
    }

    /**
     * Gets view_worker_candidate_list
     *
     * @return bool|null
     */
    public function getViewWorkerCandidateList()
    {
        return $this->container['view_worker_candidate_list'];
    }

    /**
     * Sets view_worker_candidate_list
     *
     * @param bool|null $view_worker_candidate_list просмотр списка кандидатов в сотрудники
     *
     * @return self
     */
    public function setViewWorkerCandidateList($view_worker_candidate_list)
    {
        if (is_null($view_worker_candidate_list)) {
            throw new \InvalidArgumentException('non-nullable view_worker_candidate_list cannot be null');
        }
        $this->container['view_worker_candidate_list'] = $view_worker_candidate_list;

        return $this;
    }

    /**
     * Gets create_worker
     *
     * @return bool|null
     */
    public function getCreateWorker()
    {
        return $this->container['create_worker'];
    }

    /**
     * Sets create_worker
     *
     * @param bool|null $create_worker создание нового сотрудника
     *
     * @return self
     */
    public function setCreateWorker($create_worker)
    {
        if (is_null($create_worker)) {
            throw new \InvalidArgumentException('non-nullable create_worker cannot be null');
        }
        $this->container['create_worker'] = $create_worker;

        return $this;
    }

    /**
     * Gets view_storage_points
     *
     * @return bool|null
     */
    public function getViewStoragePoints()
    {
        return $this->container['view_storage_points'];
    }

    /**
     * Sets view_storage_points
     *
     * @param bool|null $view_storage_points просмотр раздела пунктов погрузки/выгрузки
     *
     * @return self
     */
    public function setViewStoragePoints($view_storage_points)
    {
        if (is_null($view_storage_points)) {
            throw new \InvalidArgumentException('non-nullable view_storage_points cannot be null');
        }
        $this->container['view_storage_points'] = $view_storage_points;

        return $this;
    }

    /**
     * Gets view_storage_point_list
     *
     * @return bool|null
     */
    public function getViewStoragePointList()
    {
        return $this->container['view_storage_point_list'];
    }

    /**
     * Sets view_storage_point_list
     *
     * @param bool|null $view_storage_point_list просмотр списка пунктов погрузки/выгрузки
     *
     * @return self
     */
    public function setViewStoragePointList($view_storage_point_list)
    {
        if (is_null($view_storage_point_list)) {
            throw new \InvalidArgumentException('non-nullable view_storage_point_list cannot be null');
        }
        $this->container['view_storage_point_list'] = $view_storage_point_list;

        return $this;
    }

    /**
     * Gets create_storage_point
     *
     * @return bool|null
     */
    public function getCreateStoragePoint()
    {
        return $this->container['create_storage_point'];
    }

    /**
     * Sets create_storage_point
     *
     * @param bool|null $create_storage_point создание нового пункта погрузки/выгрузки
     *
     * @return self
     */
    public function setCreateStoragePoint($create_storage_point)
    {
        if (is_null($create_storage_point)) {
            throw new \InvalidArgumentException('non-nullable create_storage_point cannot be null');
        }
        $this->container['create_storage_point'] = $create_storage_point;

        return $this;
    }

    /**
     * Gets view_trucks
     *
     * @return bool|null
     */
    public function getViewTrucks()
    {
        return $this->container['view_trucks'];
    }

    /**
     * Sets view_trucks
     *
     * @param bool|null $view_trucks просмотр раздела машин
     *
     * @return self
     */
    public function setViewTrucks($view_trucks)
    {
        if (is_null($view_trucks)) {
            throw new \InvalidArgumentException('non-nullable view_trucks cannot be null');
        }
        $this->container['view_trucks'] = $view_trucks;

        return $this;
    }

    /**
     * Gets view_truck_list
     *
     * @return bool|null
     */
    public function getViewTruckList()
    {
        return $this->container['view_truck_list'];
    }

    /**
     * Sets view_truck_list
     *
     * @param bool|null $view_truck_list просмотр списка машин
     *
     * @return self
     */
    public function setViewTruckList($view_truck_list)
    {
        if (is_null($view_truck_list)) {
            throw new \InvalidArgumentException('non-nullable view_truck_list cannot be null');
        }
        $this->container['view_truck_list'] = $view_truck_list;

        return $this;
    }

    /**
     * Gets create_truck
     *
     * @return bool|null
     */
    public function getCreateTruck()
    {
        return $this->container['create_truck'];
    }

    /**
     * Sets create_truck
     *
     * @param bool|null $create_truck создание новой машины
     *
     * @return self
     */
    public function setCreateTruck($create_truck)
    {
        if (is_null($create_truck)) {
            throw new \InvalidArgumentException('non-nullable create_truck cannot be null');
        }
        $this->container['create_truck'] = $create_truck;

        return $this;
    }

    /**
     * Gets view_drivers
     *
     * @return bool|null
     */
    public function getViewDrivers()
    {
        return $this->container['view_drivers'];
    }

    /**
     * Sets view_drivers
     *
     * @param bool|null $view_drivers просмотр раздела водителей
     *
     * @return self
     */
    public function setViewDrivers($view_drivers)
    {
        if (is_null($view_drivers)) {
            throw new \InvalidArgumentException('non-nullable view_drivers cannot be null');
        }
        $this->container['view_drivers'] = $view_drivers;

        return $this;
    }

    /**
     * Gets view_driver_list
     *
     * @return bool|null
     */
    public function getViewDriverList()
    {
        return $this->container['view_driver_list'];
    }

    /**
     * Sets view_driver_list
     *
     * @param bool|null $view_driver_list просмотр списка водителей
     *
     * @return self
     */
    public function setViewDriverList($view_driver_list)
    {
        if (is_null($view_driver_list)) {
            throw new \InvalidArgumentException('non-nullable view_driver_list cannot be null');
        }
        $this->container['view_driver_list'] = $view_driver_list;

        return $this;
    }

    /**
     * Gets create_driver
     *
     * @return bool|null
     */
    public function getCreateDriver()
    {
        return $this->container['create_driver'];
    }

    /**
     * Sets create_driver
     *
     * @param bool|null $create_driver создание нового водителя
     *
     * @return self
     */
    public function setCreateDriver($create_driver)
    {
        if (is_null($create_driver)) {
            throw new \InvalidArgumentException('non-nullable create_driver cannot be null');
        }
        $this->container['create_driver'] = $create_driver;

        return $this;
    }

    /**
     * Gets view_driver_app_detail
     *
     * @return bool|null
     */
    public function getViewDriverAppDetail()
    {
        return $this->container['view_driver_app_detail'];
    }

    /**
     * Sets view_driver_app_detail
     *
     * @param bool|null $view_driver_app_detail отображение информации о приложении водителя
     *
     * @return self
     */
    public function setViewDriverAppDetail($view_driver_app_detail)
    {
        if (is_null($view_driver_app_detail)) {
            throw new \InvalidArgumentException('non-nullable view_driver_app_detail cannot be null');
        }
        $this->container['view_driver_app_detail'] = $view_driver_app_detail;

        return $this;
    }

    /**
     * Gets create_driver_app_invite
     *
     * @return bool|null
     */
    public function getCreateDriverAppInvite()
    {
        return $this->container['create_driver_app_invite'];
    }

    /**
     * Sets create_driver_app_invite
     *
     * @param bool|null $create_driver_app_invite создание запроса на приглашение водителя в приложение
     *
     * @return self
     */
    public function setCreateDriverAppInvite($create_driver_app_invite)
    {
        if (is_null($create_driver_app_invite)) {
            throw new \InvalidArgumentException('non-nullable create_driver_app_invite cannot be null');
        }
        $this->container['create_driver_app_invite'] = $create_driver_app_invite;

        return $this;
    }

    /**
     * Gets view_order_tracking_list
     *
     * @return bool|null
     */
    public function getViewOrderTrackingList()
    {
        return $this->container['view_order_tracking_list'];
    }

    /**
     * Sets view_order_tracking_list
     *
     * @param bool|null $view_order_tracking_list отображение списка отслеживаний
     *
     * @return self
     */
    public function setViewOrderTrackingList($view_order_tracking_list)
    {
        if (is_null($view_order_tracking_list)) {
            throw new \InvalidArgumentException('non-nullable view_order_tracking_list cannot be null');
        }
        $this->container['view_order_tracking_list'] = $view_order_tracking_list;

        return $this;
    }

    /**
     * Gets create_order_tracking
     *
     * @return bool|null
     */
    public function getCreateOrderTracking()
    {
        return $this->container['create_order_tracking'];
    }

    /**
     * Sets create_order_tracking
     *
     * @param bool|null $create_order_tracking создание нового отслеживания
     *
     * @return self
     */
    public function setCreateOrderTracking($create_order_tracking)
    {
        if (is_null($create_order_tracking)) {
            throw new \InvalidArgumentException('non-nullable create_order_tracking cannot be null');
        }
        $this->container['create_order_tracking'] = $create_order_tracking;

        return $this;
    }

    /**
     * Gets view_profile_documents
     *
     * @return bool|null
     */
    public function getViewProfileDocuments()
    {
        return $this->container['view_profile_documents'];
    }

    /**
     * Sets view_profile_documents
     *
     * @param bool|null $view_profile_documents отображение раздела документов компании пользователя
     *
     * @return self
     */
    public function setViewProfileDocuments($view_profile_documents)
    {
        if (is_null($view_profile_documents)) {
            throw new \InvalidArgumentException('non-nullable view_profile_documents cannot be null');
        }
        $this->container['view_profile_documents'] = $view_profile_documents;

        return $this;
    }

    /**
     * Gets view_profile_document_list
     *
     * @return bool|null
     */
    public function getViewProfileDocumentList()
    {
        return $this->container['view_profile_document_list'];
    }

    /**
     * Sets view_profile_document_list
     *
     * @param bool|null $view_profile_document_list отображение списка документов компании пользователя
     *
     * @return self
     */
    public function setViewProfileDocumentList($view_profile_document_list)
    {
        if (is_null($view_profile_document_list)) {
            throw new \InvalidArgumentException('non-nullable view_profile_document_list cannot be null');
        }
        $this->container['view_profile_document_list'] = $view_profile_document_list;

        return $this;
    }

    /**
     * Gets create_profile_document
     *
     * @return bool|null
     */
    public function getCreateProfileDocument()
    {
        return $this->container['create_profile_document'];
    }

    /**
     * Sets create_profile_document
     *
     * @param bool|null $create_profile_document создание нового документа
     *
     * @return self
     */
    public function setCreateProfileDocument($create_profile_document)
    {
        if (is_null($create_profile_document)) {
            throw new \InvalidArgumentException('non-nullable create_profile_document cannot be null');
        }
        $this->container['create_profile_document'] = $create_profile_document;

        return $this;
    }

    /**
     * Gets view_orders
     *
     * @return bool|null
     */
    public function getViewOrders()
    {
        return $this->container['view_orders'];
    }

    /**
     * Sets view_orders
     *
     * @param bool|null $view_orders просмотр раздела заказов
     *
     * @return self
     */
    public function setViewOrders($view_orders)
    {
        if (is_null($view_orders)) {
            throw new \InvalidArgumentException('non-nullable view_orders cannot be null');
        }
        $this->container['view_orders'] = $view_orders;

        return $this;
    }

    /**
     * Gets view_consignor_shipping_working_list
     *
     * @return bool|null
     */
    public function getViewConsignorShippingWorkingList()
    {
        return $this->container['view_consignor_shipping_working_list'];
    }

    /**
     * Sets view_consignor_shipping_working_list
     *
     * @param bool|null $view_consignor_shipping_working_list просмотр списка заказов в работе в перевозках
     *
     * @return self
     */
    public function setViewConsignorShippingWorkingList($view_consignor_shipping_working_list)
    {
        if (is_null($view_consignor_shipping_working_list)) {
            throw new \InvalidArgumentException('non-nullable view_consignor_shipping_working_list cannot be null');
        }
        $this->container['view_consignor_shipping_working_list'] = $view_consignor_shipping_working_list;

        return $this;
    }

    /**
     * Gets view_consignor_shipping_archived_list
     *
     * @return bool|null
     */
    public function getViewConsignorShippingArchivedList()
    {
        return $this->container['view_consignor_shipping_archived_list'];
    }

    /**
     * Sets view_consignor_shipping_archived_list
     *
     * @param bool|null $view_consignor_shipping_archived_list просмотр архива в перевозках
     *
     * @return self
     */
    public function setViewConsignorShippingArchivedList($view_consignor_shipping_archived_list)
    {
        if (is_null($view_consignor_shipping_archived_list)) {
            throw new \InvalidArgumentException('non-nullable view_consignor_shipping_archived_list cannot be null');
        }
        $this->container['view_consignor_shipping_archived_list'] = $view_consignor_shipping_archived_list;

        return $this;
    }

    /**
     * Gets view_consignor_shipping
     *
     * @return bool|null
     */
    public function getViewConsignorShipping()
    {
        return $this->container['view_consignor_shipping'];
    }

    /**
     * Sets view_consignor_shipping
     *
     * @param bool|null $view_consignor_shipping просмотр раздела перевозки
     *
     * @return self
     */
    public function setViewConsignorShipping($view_consignor_shipping)
    {
        if (is_null($view_consignor_shipping)) {
            throw new \InvalidArgumentException('non-nullable view_consignor_shipping cannot be null');
        }
        $this->container['view_consignor_shipping'] = $view_consignor_shipping;

        return $this;
    }

    /**
     * Gets view_consignor_orders
     *
     * @return bool|null
     */
    public function getViewConsignorOrders()
    {
        return $this->container['view_consignor_orders'];
    }

    /**
     * Sets view_consignor_orders
     *
     * @param bool|null $view_consignor_orders просмотр раздела заказов отправителя
     *
     * @return self
     */
    public function setViewConsignorOrders($view_consignor_orders)
    {
        if (is_null($view_consignor_orders)) {
            throw new \InvalidArgumentException('non-nullable view_consignor_orders cannot be null');
        }
        $this->container['view_consignor_orders'] = $view_consignor_orders;

        return $this;
    }

    /**
     * Gets view_carrier_orders
     *
     * @return bool|null
     */
    public function getViewCarrierOrders()
    {
        return $this->container['view_carrier_orders'];
    }

    /**
     * Sets view_carrier_orders
     *
     * @param bool|null $view_carrier_orders просмотр раздела заказов перевозчика
     *
     * @return self
     */
    public function setViewCarrierOrders($view_carrier_orders)
    {
        if (is_null($view_carrier_orders)) {
            throw new \InvalidArgumentException('non-nullable view_carrier_orders cannot be null');
        }
        $this->container['view_carrier_orders'] = $view_carrier_orders;

        return $this;
    }

    /**
     * Gets view_general_partner_orders
     *
     * @return bool|null
     */
    public function getViewGeneralPartnerOrders()
    {
        return $this->container['view_general_partner_orders'];
    }

    /**
     * Sets view_general_partner_orders
     *
     * @param bool|null $view_general_partner_orders просмотр раздела заказов ГП
     *
     * @return self
     */
    public function setViewGeneralPartnerOrders($view_general_partner_orders)
    {
        if (is_null($view_general_partner_orders)) {
            throw new \InvalidArgumentException('non-nullable view_general_partner_orders cannot be null');
        }
        $this->container['view_general_partner_orders'] = $view_general_partner_orders;

        return $this;
    }

    /**
     * Gets view_order_carrier_list_bidding
     *
     * @return bool|null
     */
    public function getViewOrderCarrierListBidding()
    {
        return $this->container['view_order_carrier_list_bidding'];
    }

    /**
     * Sets view_order_carrier_list_bidding
     *
     * @param bool|null $view_order_carrier_list_bidding просмотр перевозчиком заказов в торгах
     *
     * @return self
     */
    public function setViewOrderCarrierListBidding($view_order_carrier_list_bidding)
    {
        if (is_null($view_order_carrier_list_bidding)) {
            throw new \InvalidArgumentException('non-nullable view_order_carrier_list_bidding cannot be null');
        }
        $this->container['view_order_carrier_list_bidding'] = $view_order_carrier_list_bidding;

        return $this;
    }

    /**
     * Gets view_order_carrier_list_marked
     *
     * @return bool|null
     */
    public function getViewOrderCarrierListMarked()
    {
        return $this->container['view_order_carrier_list_marked'];
    }

    /**
     * Sets view_order_carrier_list_marked
     *
     * @param bool|null $view_order_carrier_list_marked просмотр перевозчиком отмеченных заказов
     *
     * @return self
     */
    public function setViewOrderCarrierListMarked($view_order_carrier_list_marked)
    {
        if (is_null($view_order_carrier_list_marked)) {
            throw new \InvalidArgumentException('non-nullable view_order_carrier_list_marked cannot be null');
        }
        $this->container['view_order_carrier_list_marked'] = $view_order_carrier_list_marked;

        return $this;
    }

    /**
     * Gets view_order_carrier_list_offer
     *
     * @return bool|null
     */
    public function getViewOrderCarrierListOffer()
    {
        return $this->container['view_order_carrier_list_offer'];
    }

    /**
     * Sets view_order_carrier_list_offer
     *
     * @param bool|null $view_order_carrier_list_offer просмотр перевозчиком запросов цен
     *
     * @return self
     */
    public function setViewOrderCarrierListOffer($view_order_carrier_list_offer)
    {
        if (is_null($view_order_carrier_list_offer)) {
            throw new \InvalidArgumentException('non-nullable view_order_carrier_list_offer cannot be null');
        }
        $this->container['view_order_carrier_list_offer'] = $view_order_carrier_list_offer;

        return $this;
    }

    /**
     * Gets view_order_carrier_list_working
     *
     * @return bool|null
     */
    public function getViewOrderCarrierListWorking()
    {
        return $this->container['view_order_carrier_list_working'];
    }

    /**
     * Sets view_order_carrier_list_working
     *
     * @param bool|null $view_order_carrier_list_working просмотр перевозчиком заказов в работе
     *
     * @return self
     */
    public function setViewOrderCarrierListWorking($view_order_carrier_list_working)
    {
        if (is_null($view_order_carrier_list_working)) {
            throw new \InvalidArgumentException('non-nullable view_order_carrier_list_working cannot be null');
        }
        $this->container['view_order_carrier_list_working'] = $view_order_carrier_list_working;

        return $this;
    }

    /**
     * Gets view_order_carrier_list_completed
     *
     * @return bool|null
     */
    public function getViewOrderCarrierListCompleted()
    {
        return $this->container['view_order_carrier_list_completed'];
    }

    /**
     * Sets view_order_carrier_list_completed
     *
     * @param bool|null $view_order_carrier_list_completed просмотр перевозчиком заказов на оценку
     *
     * @return self
     */
    public function setViewOrderCarrierListCompleted($view_order_carrier_list_completed)
    {
        if (is_null($view_order_carrier_list_completed)) {
            throw new \InvalidArgumentException('non-nullable view_order_carrier_list_completed cannot be null');
        }
        $this->container['view_order_carrier_list_completed'] = $view_order_carrier_list_completed;

        return $this;
    }

    /**
     * Gets view_order_carrier_list_archived
     *
     * @return bool|null
     */
    public function getViewOrderCarrierListArchived()
    {
        return $this->container['view_order_carrier_list_archived'];
    }

    /**
     * Sets view_order_carrier_list_archived
     *
     * @param bool|null $view_order_carrier_list_archived просмотр перевозчиком заказов в архиве
     *
     * @return self
     */
    public function setViewOrderCarrierListArchived($view_order_carrier_list_archived)
    {
        if (is_null($view_order_carrier_list_archived)) {
            throw new \InvalidArgumentException('non-nullable view_order_carrier_list_archived cannot be null');
        }
        $this->container['view_order_carrier_list_archived'] = $view_order_carrier_list_archived;

        return $this;
    }

    /**
     * Gets view_order_consignor_list_bidding
     *
     * @return bool|null
     */
    public function getViewOrderConsignorListBidding()
    {
        return $this->container['view_order_consignor_list_bidding'];
    }

    /**
     * Sets view_order_consignor_list_bidding
     *
     * @param bool|null $view_order_consignor_list_bidding просмотр заказчиком своих заказов в торгах
     *
     * @return self
     */
    public function setViewOrderConsignorListBidding($view_order_consignor_list_bidding)
    {
        if (is_null($view_order_consignor_list_bidding)) {
            throw new \InvalidArgumentException('non-nullable view_order_consignor_list_bidding cannot be null');
        }
        $this->container['view_order_consignor_list_bidding'] = $view_order_consignor_list_bidding;

        return $this;
    }

    /**
     * Gets view_order_consignor_list_bidding_all
     *
     * @return bool|null
     */
    public function getViewOrderConsignorListBiddingAll()
    {
        return $this->container['view_order_consignor_list_bidding_all'];
    }

    /**
     * Sets view_order_consignor_list_bidding_all
     *
     * @param bool|null $view_order_consignor_list_bidding_all просмотр заказчиком всех заказов в торгах
     *
     * @return self
     */
    public function setViewOrderConsignorListBiddingAll($view_order_consignor_list_bidding_all)
    {
        if (is_null($view_order_consignor_list_bidding_all)) {
            throw new \InvalidArgumentException('non-nullable view_order_consignor_list_bidding_all cannot be null');
        }
        $this->container['view_order_consignor_list_bidding_all'] = $view_order_consignor_list_bidding_all;

        return $this;
    }

    /**
     * Gets view_order_consignor_list_draft
     *
     * @return bool|null
     */
    public function getViewOrderConsignorListDraft()
    {
        return $this->container['view_order_consignor_list_draft'];
    }

    /**
     * Sets view_order_consignor_list_draft
     *
     * @param bool|null $view_order_consignor_list_draft просмотр заказчиком черновиков заказов
     *
     * @return self
     */
    public function setViewOrderConsignorListDraft($view_order_consignor_list_draft)
    {
        if (is_null($view_order_consignor_list_draft)) {
            throw new \InvalidArgumentException('non-nullable view_order_consignor_list_draft cannot be null');
        }
        $this->container['view_order_consignor_list_draft'] = $view_order_consignor_list_draft;

        return $this;
    }

    /**
     * Gets view_order_consignor_list_moderation
     *
     * @return bool|null
     */
    public function getViewOrderConsignorListModeration()
    {
        return $this->container['view_order_consignor_list_moderation'];
    }

    /**
     * Sets view_order_consignor_list_moderation
     *
     * @param bool|null $view_order_consignor_list_moderation просмотр заказчиком заказов на модерации
     *
     * @return self
     */
    public function setViewOrderConsignorListModeration($view_order_consignor_list_moderation)
    {
        if (is_null($view_order_consignor_list_moderation)) {
            throw new \InvalidArgumentException('non-nullable view_order_consignor_list_moderation cannot be null');
        }
        $this->container['view_order_consignor_list_moderation'] = $view_order_consignor_list_moderation;

        return $this;
    }

    /**
     * Gets view_order_consignor_list_offer
     *
     * @return bool|null
     */
    public function getViewOrderConsignorListOffer()
    {
        return $this->container['view_order_consignor_list_offer'];
    }

    /**
     * Sets view_order_consignor_list_offer
     *
     * @param bool|null $view_order_consignor_list_offer просмотр заказчиком завершенных запросов цен
     *
     * @return self
     */
    public function setViewOrderConsignorListOffer($view_order_consignor_list_offer)
    {
        if (is_null($view_order_consignor_list_offer)) {
            throw new \InvalidArgumentException('non-nullable view_order_consignor_list_offer cannot be null');
        }
        $this->container['view_order_consignor_list_offer'] = $view_order_consignor_list_offer;

        return $this;
    }

    /**
     * Gets view_order_consignor_list_working
     *
     * @return bool|null
     */
    public function getViewOrderConsignorListWorking()
    {
        return $this->container['view_order_consignor_list_working'];
    }

    /**
     * Sets view_order_consignor_list_working
     *
     * @param bool|null $view_order_consignor_list_working просмотр заказчиком заказов в работе
     *
     * @return self
     */
    public function setViewOrderConsignorListWorking($view_order_consignor_list_working)
    {
        if (is_null($view_order_consignor_list_working)) {
            throw new \InvalidArgumentException('non-nullable view_order_consignor_list_working cannot be null');
        }
        $this->container['view_order_consignor_list_working'] = $view_order_consignor_list_working;

        return $this;
    }

    /**
     * Gets view_order_consignor_list_completed
     *
     * @return bool|null
     */
    public function getViewOrderConsignorListCompleted()
    {
        return $this->container['view_order_consignor_list_completed'];
    }

    /**
     * Sets view_order_consignor_list_completed
     *
     * @param bool|null $view_order_consignor_list_completed просмотр заказчиком заказов на оценку
     *
     * @return self
     */
    public function setViewOrderConsignorListCompleted($view_order_consignor_list_completed)
    {
        if (is_null($view_order_consignor_list_completed)) {
            throw new \InvalidArgumentException('non-nullable view_order_consignor_list_completed cannot be null');
        }
        $this->container['view_order_consignor_list_completed'] = $view_order_consignor_list_completed;

        return $this;
    }

    /**
     * Gets view_order_consignor_list_archived
     *
     * @return bool|null
     */
    public function getViewOrderConsignorListArchived()
    {
        return $this->container['view_order_consignor_list_archived'];
    }

    /**
     * Sets view_order_consignor_list_archived
     *
     * @param bool|null $view_order_consignor_list_archived просмотр заказчиком заказов в архиве
     *
     * @return self
     */
    public function setViewOrderConsignorListArchived($view_order_consignor_list_archived)
    {
        if (is_null($view_order_consignor_list_archived)) {
            throw new \InvalidArgumentException('non-nullable view_order_consignor_list_archived cannot be null');
        }
        $this->container['view_order_consignor_list_archived'] = $view_order_consignor_list_archived;

        return $this;
    }

    /**
     * Gets view_order_expeditor_list_archived
     *
     * @return bool|null
     */
    public function getViewOrderExpeditorListArchived()
    {
        return $this->container['view_order_expeditor_list_archived'];
    }

    /**
     * Sets view_order_expeditor_list_archived
     *
     * @param bool|null $view_order_expeditor_list_archived просмотр экспедитором заказов в архиве
     *
     * @return self
     */
    public function setViewOrderExpeditorListArchived($view_order_expeditor_list_archived)
    {
        if (is_null($view_order_expeditor_list_archived)) {
            throw new \InvalidArgumentException('non-nullable view_order_expeditor_list_archived cannot be null');
        }
        $this->container['view_order_expeditor_list_archived'] = $view_order_expeditor_list_archived;

        return $this;
    }

    /**
     * Gets view_order_general_partner_list_bidding
     *
     * @return bool|null
     */
    public function getViewOrderGeneralPartnerListBidding()
    {
        return $this->container['view_order_general_partner_list_bidding'];
    }

    /**
     * Sets view_order_general_partner_list_bidding
     *
     * @param bool|null $view_order_general_partner_list_bidding просмотр ГП заказов в торгах
     *
     * @return self
     */
    public function setViewOrderGeneralPartnerListBidding($view_order_general_partner_list_bidding)
    {
        if (is_null($view_order_general_partner_list_bidding)) {
            throw new \InvalidArgumentException('non-nullable view_order_general_partner_list_bidding cannot be null');
        }
        $this->container['view_order_general_partner_list_bidding'] = $view_order_general_partner_list_bidding;

        return $this;
    }

    /**
     * Gets view_order_general_partner_list_correction_request
     *
     * @return bool|null
     */
    public function getViewOrderGeneralPartnerListCorrectionRequest()
    {
        return $this->container['view_order_general_partner_list_correction_request'];
    }

    /**
     * Sets view_order_general_partner_list_correction_request
     *
     * @param bool|null $view_order_general_partner_list_correction_request просмотр ГП заказов требующих согласования изменений
     *
     * @return self
     */
    public function setViewOrderGeneralPartnerListCorrectionRequest($view_order_general_partner_list_correction_request)
    {
        if (is_null($view_order_general_partner_list_correction_request)) {
            throw new \InvalidArgumentException('non-nullable view_order_general_partner_list_correction_request cannot be null');
        }
        $this->container['view_order_general_partner_list_correction_request'] = $view_order_general_partner_list_correction_request;

        return $this;
    }

    /**
     * Gets view_order_general_partner_list_moderate
     *
     * @return bool|null
     */
    public function getViewOrderGeneralPartnerListModerate()
    {
        return $this->container['view_order_general_partner_list_moderate'];
    }

    /**
     * Sets view_order_general_partner_list_moderate
     *
     * @param bool|null $view_order_general_partner_list_moderate просмотр ГП заказов на модерации
     *
     * @return self
     */
    public function setViewOrderGeneralPartnerListModerate($view_order_general_partner_list_moderate)
    {
        if (is_null($view_order_general_partner_list_moderate)) {
            throw new \InvalidArgumentException('non-nullable view_order_general_partner_list_moderate cannot be null');
        }
        $this->container['view_order_general_partner_list_moderate'] = $view_order_general_partner_list_moderate;

        return $this;
    }

    /**
     * Gets view_order_general_partner_list_working
     *
     * @return bool|null
     */
    public function getViewOrderGeneralPartnerListWorking()
    {
        return $this->container['view_order_general_partner_list_working'];
    }

    /**
     * Sets view_order_general_partner_list_working
     *
     * @param bool|null $view_order_general_partner_list_working просмотр ГП заказов в работе
     *
     * @return self
     */
    public function setViewOrderGeneralPartnerListWorking($view_order_general_partner_list_working)
    {
        if (is_null($view_order_general_partner_list_working)) {
            throw new \InvalidArgumentException('non-nullable view_order_general_partner_list_working cannot be null');
        }
        $this->container['view_order_general_partner_list_working'] = $view_order_general_partner_list_working;

        return $this;
    }

    /**
     * Gets view_order_general_partner_list_archived
     *
     * @return bool|null
     */
    public function getViewOrderGeneralPartnerListArchived()
    {
        return $this->container['view_order_general_partner_list_archived'];
    }

    /**
     * Sets view_order_general_partner_list_archived
     *
     * @param bool|null $view_order_general_partner_list_archived просмотр ГП заказов в архиве
     *
     * @return self
     */
    public function setViewOrderGeneralPartnerListArchived($view_order_general_partner_list_archived)
    {
        if (is_null($view_order_general_partner_list_archived)) {
            throw new \InvalidArgumentException('non-nullable view_order_general_partner_list_archived cannot be null');
        }
        $this->container['view_order_general_partner_list_archived'] = $view_order_general_partner_list_archived;

        return $this;
    }

    /**
     * Gets view_order_showcase
     *
     * @return bool|null
     */
    public function getViewOrderShowcase()
    {
        return $this->container['view_order_showcase'];
    }

    /**
     * Sets view_order_showcase
     *
     * @param bool|null $view_order_showcase просмотр витрины заказов
     *
     * @return self
     */
    public function setViewOrderShowcase($view_order_showcase)
    {
        if (is_null($view_order_showcase)) {
            throw new \InvalidArgumentException('non-nullable view_order_showcase cannot be null');
        }
        $this->container['view_order_showcase'] = $view_order_showcase;

        return $this;
    }

    /**
     * Gets view_order_create_button
     *
     * @return bool|null
     */
    public function getViewOrderCreateButton()
    {
        return $this->container['view_order_create_button'];
    }

    /**
     * Sets view_order_create_button
     *
     * @param bool|null $view_order_create_button Показывать кнопку создания заказа
     *
     * @return self
     */
    public function setViewOrderCreateButton($view_order_create_button)
    {
        if (is_null($view_order_create_button)) {
            throw new \InvalidArgumentException('non-nullable view_order_create_button cannot be null');
        }
        $this->container['view_order_create_button'] = $view_order_create_button;

        return $this;
    }

    /**
     * Gets create_order_draft_ftl
     *
     * @return bool|null
     */
    public function getCreateOrderDraftFtl()
    {
        return $this->container['create_order_draft_ftl'];
    }

    /**
     * Sets create_order_draft_ftl
     *
     * @param bool|null $create_order_draft_ftl создание черновика FTL заказа
     *
     * @return self
     */
    public function setCreateOrderDraftFtl($create_order_draft_ftl)
    {
        if (is_null($create_order_draft_ftl)) {
            throw new \InvalidArgumentException('non-nullable create_order_draft_ftl cannot be null');
        }
        $this->container['create_order_draft_ftl'] = $create_order_draft_ftl;

        return $this;
    }

    /**
     * Gets create_order_draft
     *
     * @return bool|null
     */
    public function getCreateOrderDraft()
    {
        return $this->container['create_order_draft'];
    }

    /**
     * Sets create_order_draft
     *
     * @param bool|null $create_order_draft создание черновика
     *
     * @return self
     */
    public function setCreateOrderDraft($create_order_draft)
    {
        if (is_null($create_order_draft)) {
            throw new \InvalidArgumentException('non-nullable create_order_draft cannot be null');
        }
        $this->container['create_order_draft'] = $create_order_draft;

        return $this;
    }

    /**
     * Gets create_order_draft_direct
     *
     * @return bool|null
     */
    public function getCreateOrderDraftDirect()
    {
        return $this->container['create_order_draft_direct'];
    }

    /**
     * Sets create_order_draft_direct
     *
     * @param bool|null $create_order_draft_direct создание заказа с типом Прямая передача
     *
     * @return self
     */
    public function setCreateOrderDraftDirect($create_order_draft_direct)
    {
        if (is_null($create_order_draft_direct)) {
            throw new \InvalidArgumentException('non-nullable create_order_draft_direct cannot be null');
        }
        $this->container['create_order_draft_direct'] = $create_order_draft_direct;

        return $this;
    }

    /**
     * Gets create_order_draft_project
     *
     * @return bool|null
     */
    public function getCreateOrderDraftProject()
    {
        return $this->container['create_order_draft_project'];
    }

    /**
     * Sets create_order_draft_project
     *
     * @param bool|null $create_order_draft_project создание заказа большого объема
     *
     * @return self
     */
    public function setCreateOrderDraftProject($create_order_draft_project)
    {
        if (is_null($create_order_draft_project)) {
            throw new \InvalidArgumentException('non-nullable create_order_draft_project cannot be null');
        }
        $this->container['create_order_draft_project'] = $create_order_draft_project;

        return $this;
    }

    /**
     * Gets create_order_draft_ftl_gp
     *
     * @return bool|null
     */
    public function getCreateOrderDraftFtlGp()
    {
        return $this->container['create_order_draft_ftl_gp'];
    }

    /**
     * Sets create_order_draft_ftl_gp
     *
     * @param bool|null $create_order_draft_ftl_gp создание заказа по Единому договору
     *
     * @return self
     */
    public function setCreateOrderDraftFtlGp($create_order_draft_ftl_gp)
    {
        if (is_null($create_order_draft_ftl_gp)) {
            throw new \InvalidArgumentException('non-nullable create_order_draft_ftl_gp cannot be null');
        }
        $this->container['create_order_draft_ftl_gp'] = $create_order_draft_ftl_gp;

        return $this;
    }

    /**
     * Gets create_order_draft_offer
     *
     * @return bool|null
     */
    public function getCreateOrderDraftOffer()
    {
        return $this->container['create_order_draft_offer'];
    }

    /**
     * Sets create_order_draft_offer
     *
     * @param bool|null $create_order_draft_offer создание запроса цены
     *
     * @return self
     */
    public function setCreateOrderDraftOffer($create_order_draft_offer)
    {
        if (is_null($create_order_draft_offer)) {
            throw new \InvalidArgumentException('non-nullable create_order_draft_offer cannot be null');
        }
        $this->container['create_order_draft_offer'] = $create_order_draft_offer;

        return $this;
    }

    /**
     * Gets view_expeditor_proposals
     *
     * @return bool|null
     */
    public function getViewExpeditorProposals()
    {
        return $this->container['view_expeditor_proposals'];
    }

    /**
     * Sets view_expeditor_proposals
     *
     * @param bool|null $view_expeditor_proposals просмотр раздела заказов экспедитора
     *
     * @return self
     */
    public function setViewExpeditorProposals($view_expeditor_proposals)
    {
        if (is_null($view_expeditor_proposals)) {
            throw new \InvalidArgumentException('non-nullable view_expeditor_proposals cannot be null');
        }
        $this->container['view_expeditor_proposals'] = $view_expeditor_proposals;

        return $this;
    }

    /**
     * Gets view_expeditor_proposal_proxy_sign_list
     *
     * @return bool|null
     */
    public function getViewExpeditorProposalProxySignList()
    {
        return $this->container['view_expeditor_proposal_proxy_sign_list'];
    }

    /**
     * Sets view_expeditor_proposal_proxy_sign_list
     *
     * @param bool|null $view_expeditor_proposal_proxy_sign_list просмотр списка доверенностей на подпись для экспедитора
     *
     * @return self
     */
    public function setViewExpeditorProposalProxySignList($view_expeditor_proposal_proxy_sign_list)
    {
        if (is_null($view_expeditor_proposal_proxy_sign_list)) {
            throw new \InvalidArgumentException('non-nullable view_expeditor_proposal_proxy_sign_list cannot be null');
        }
        $this->container['view_expeditor_proposal_proxy_sign_list'] = $view_expeditor_proposal_proxy_sign_list;

        return $this;
    }

    /**
     * Gets view_expeditor_proposal_working_list
     *
     * @return bool|null
     */
    public function getViewExpeditorProposalWorkingList()
    {
        return $this->container['view_expeditor_proposal_working_list'];
    }

    /**
     * Sets view_expeditor_proposal_working_list
     *
     * @param bool|null $view_expeditor_proposal_working_list просмотр списка рабочих заявок экспедитора
     *
     * @return self
     */
    public function setViewExpeditorProposalWorkingList($view_expeditor_proposal_working_list)
    {
        if (is_null($view_expeditor_proposal_working_list)) {
            throw new \InvalidArgumentException('non-nullable view_expeditor_proposal_working_list cannot be null');
        }
        $this->container['view_expeditor_proposal_working_list'] = $view_expeditor_proposal_working_list;

        return $this;
    }

    /**
     * Gets view_expeditor_proposal_archive_list
     *
     * @return bool|null
     */
    public function getViewExpeditorProposalArchiveList()
    {
        return $this->container['view_expeditor_proposal_archive_list'];
    }

    /**
     * Sets view_expeditor_proposal_archive_list
     *
     * @param bool|null $view_expeditor_proposal_archive_list просмотр списка рабочих заявок в архиве экспедитора
     *
     * @return self
     */
    public function setViewExpeditorProposalArchiveList($view_expeditor_proposal_archive_list)
    {
        if (is_null($view_expeditor_proposal_archive_list)) {
            throw new \InvalidArgumentException('non-nullable view_expeditor_proposal_archive_list cannot be null');
        }
        $this->container['view_expeditor_proposal_archive_list'] = $view_expeditor_proposal_archive_list;

        return $this;
    }

    /**
     * Gets view_expeditor_proposal_correction_list
     *
     * @return bool|null
     */
    public function getViewExpeditorProposalCorrectionList()
    {
        return $this->container['view_expeditor_proposal_correction_list'];
    }

    /**
     * Sets view_expeditor_proposal_correction_list
     *
     * @param bool|null $view_expeditor_proposal_correction_list отображение списка запросы на изменение
     *
     * @return self
     */
    public function setViewExpeditorProposalCorrectionList($view_expeditor_proposal_correction_list)
    {
        if (is_null($view_expeditor_proposal_correction_list)) {
            throw new \InvalidArgumentException('non-nullable view_expeditor_proposal_correction_list cannot be null');
        }
        $this->container['view_expeditor_proposal_correction_list'] = $view_expeditor_proposal_correction_list;

        return $this;
    }

    /**
     * Gets create_order_expeditor_proposal
     *
     * @return bool|null
     */
    public function getCreateOrderExpeditorProposal()
    {
        return $this->container['create_order_expeditor_proposal'];
    }

    /**
     * Sets create_order_expeditor_proposal
     *
     * @param bool|null $create_order_expeditor_proposal создание заявки для экспедитора (экспресс с ценой каргомарта)
     *
     * @return self
     */
    public function setCreateOrderExpeditorProposal($create_order_expeditor_proposal)
    {
        if (is_null($create_order_expeditor_proposal)) {
            throw new \InvalidArgumentException('non-nullable create_order_expeditor_proposal cannot be null');
        }
        $this->container['create_order_expeditor_proposal'] = $create_order_expeditor_proposal;

        return $this;
    }

    /**
     * Gets create_order_expeditor_proposal_fixed_price_express
     *
     * @return bool|null
     */
    public function getCreateOrderExpeditorProposalFixedPriceExpress()
    {
        return $this->container['create_order_expeditor_proposal_fixed_price_express'];
    }

    /**
     * Sets create_order_expeditor_proposal_fixed_price_express
     *
     * @param bool|null $create_order_expeditor_proposal_fixed_price_express создание заявки для экспедитора (экспресс с фиксированной ценой)
     *
     * @return self
     */
    public function setCreateOrderExpeditorProposalFixedPriceExpress($create_order_expeditor_proposal_fixed_price_express)
    {
        if (is_null($create_order_expeditor_proposal_fixed_price_express)) {
            throw new \InvalidArgumentException('non-nullable create_order_expeditor_proposal_fixed_price_express cannot be null');
        }
        $this->container['create_order_expeditor_proposal_fixed_price_express'] = $create_order_expeditor_proposal_fixed_price_express;

        return $this;
    }

    /**
     * Gets create_order_expeditor_proposal_fixed_price_auction
     *
     * @return bool|null
     */
    public function getCreateOrderExpeditorProposalFixedPriceAuction()
    {
        return $this->container['create_order_expeditor_proposal_fixed_price_auction'];
    }

    /**
     * Sets create_order_expeditor_proposal_fixed_price_auction
     *
     * @param bool|null $create_order_expeditor_proposal_fixed_price_auction создание заявки для экспедитора (аукцион)
     *
     * @return self
     */
    public function setCreateOrderExpeditorProposalFixedPriceAuction($create_order_expeditor_proposal_fixed_price_auction)
    {
        if (is_null($create_order_expeditor_proposal_fixed_price_auction)) {
            throw new \InvalidArgumentException('non-nullable create_order_expeditor_proposal_fixed_price_auction cannot be null');
        }
        $this->container['create_order_expeditor_proposal_fixed_price_auction'] = $create_order_expeditor_proposal_fixed_price_auction;

        return $this;
    }

    /**
     * Gets import_orders
     *
     * @return bool|null
     */
    public function getImportOrders()
    {
        return $this->container['import_orders'];
    }

    /**
     * Sets import_orders
     *
     * @param bool|null $import_orders создание группы заказов из excel
     *
     * @return self
     */
    public function setImportOrders($import_orders)
    {
        if (is_null($import_orders)) {
            throw new \InvalidArgumentException('non-nullable import_orders cannot be null');
        }
        $this->container['import_orders'] = $import_orders;

        return $this;
    }

    /**
     * Gets export_orders
     *
     * @return bool|null
     */
    public function getExportOrders()
    {
        return $this->container['export_orders'];
    }

    /**
     * Sets export_orders
     *
     * @param bool|null $export_orders экспорт заказов в excel
     *
     * @return self
     */
    public function setExportOrders($export_orders)
    {
        if (is_null($export_orders)) {
            throw new \InvalidArgumentException('non-nullable export_orders cannot be null');
        }
        $this->container['export_orders'] = $export_orders;

        return $this;
    }

    /**
     * Gets export_order_offers
     *
     * @return bool|null
     */
    public function getExportOrderOffers()
    {
        return $this->container['export_order_offers'];
    }

    /**
     * Sets export_order_offers
     *
     * @param bool|null $export_order_offers экспорт запросов цены в excel
     *
     * @return self
     */
    public function setExportOrderOffers($export_order_offers)
    {
        if (is_null($export_order_offers)) {
            throw new \InvalidArgumentException('non-nullable export_order_offers cannot be null');
        }
        $this->container['export_order_offers'] = $export_order_offers;

        return $this;
    }

    /**
     * Gets view_order_broker
     *
     * @return bool|null
     */
    public function getViewOrderBroker()
    {
        return $this->container['view_order_broker'];
    }

    /**
     * Sets view_order_broker
     *
     * @param bool|null $view_order_broker просмотр брокеров по заказам
     *
     * @return self
     */
    public function setViewOrderBroker($view_order_broker)
    {
        if (is_null($view_order_broker)) {
            throw new \InvalidArgumentException('non-nullable view_order_broker cannot be null');
        }
        $this->container['view_order_broker'] = $view_order_broker;

        return $this;
    }

    /**
     * Gets view_tenders
     *
     * @return bool|null
     */
    public function getViewTenders()
    {
        return $this->container['view_tenders'];
    }

    /**
     * Sets view_tenders
     *
     * @param bool|null $view_tenders просмотр раздела тендеров
     *
     * @return self
     */
    public function setViewTenders($view_tenders)
    {
        if (is_null($view_tenders)) {
            throw new \InvalidArgumentException('non-nullable view_tenders cannot be null');
        }
        $this->container['view_tenders'] = $view_tenders;

        return $this;
    }

    /**
     * Gets view_tender_carrier_price_request_lot_list
     *
     * @return bool|null
     */
    public function getViewTenderCarrierPriceRequestLotList()
    {
        return $this->container['view_tender_carrier_price_request_lot_list'];
    }

    /**
     * Sets view_tender_carrier_price_request_lot_list
     *
     * @param bool|null $view_tender_carrier_price_request_lot_list просмотр перевозчиком списка приема заявок на лоты тендера
     *
     * @return self
     */
    public function setViewTenderCarrierPriceRequestLotList($view_tender_carrier_price_request_lot_list)
    {
        if (is_null($view_tender_carrier_price_request_lot_list)) {
            throw new \InvalidArgumentException('non-nullable view_tender_carrier_price_request_lot_list cannot be null');
        }
        $this->container['view_tender_carrier_price_request_lot_list'] = $view_tender_carrier_price_request_lot_list;

        return $this;
    }

    /**
     * Gets view_tender_carrier_completed_price_request_lot_list
     *
     * @return bool|null
     */
    public function getViewTenderCarrierCompletedPriceRequestLotList()
    {
        return $this->container['view_tender_carrier_completed_price_request_lot_list'];
    }

    /**
     * Sets view_tender_carrier_completed_price_request_lot_list
     *
     * @param bool|null $view_tender_carrier_completed_price_request_lot_list просмотр перевозчиком лотов завершенного тендера
     *
     * @return self
     */
    public function setViewTenderCarrierCompletedPriceRequestLotList($view_tender_carrier_completed_price_request_lot_list)
    {
        if (is_null($view_tender_carrier_completed_price_request_lot_list)) {
            throw new \InvalidArgumentException('non-nullable view_tender_carrier_completed_price_request_lot_list cannot be null');
        }
        $this->container['view_tender_carrier_completed_price_request_lot_list'] = $view_tender_carrier_completed_price_request_lot_list;

        return $this;
    }

    /**
     * Gets view_tender_consignor_draft_list
     *
     * @return bool|null
     */
    public function getViewTenderConsignorDraftList()
    {
        return $this->container['view_tender_consignor_draft_list'];
    }

    /**
     * Sets view_tender_consignor_draft_list
     *
     * @param bool|null $view_tender_consignor_draft_list просмотр отправителем списка черновиков тендера
     *
     * @return self
     */
    public function setViewTenderConsignorDraftList($view_tender_consignor_draft_list)
    {
        if (is_null($view_tender_consignor_draft_list)) {
            throw new \InvalidArgumentException('non-nullable view_tender_consignor_draft_list cannot be null');
        }
        $this->container['view_tender_consignor_draft_list'] = $view_tender_consignor_draft_list;

        return $this;
    }

    /**
     * Gets view_tender_consignor_price_request_list
     *
     * @return bool|null
     */
    public function getViewTenderConsignorPriceRequestList()
    {
        return $this->container['view_tender_consignor_price_request_list'];
    }

    /**
     * Sets view_tender_consignor_price_request_list
     *
     * @param bool|null $view_tender_consignor_price_request_list просмотр отправителем списка тендеров в статусе прием заявок
     *
     * @return self
     */
    public function setViewTenderConsignorPriceRequestList($view_tender_consignor_price_request_list)
    {
        if (is_null($view_tender_consignor_price_request_list)) {
            throw new \InvalidArgumentException('non-nullable view_tender_consignor_price_request_list cannot be null');
        }
        $this->container['view_tender_consignor_price_request_list'] = $view_tender_consignor_price_request_list;

        return $this;
    }

    /**
     * Gets view_tender_consignor_completed_list
     *
     * @return bool|null
     */
    public function getViewTenderConsignorCompletedList()
    {
        return $this->container['view_tender_consignor_completed_list'];
    }

    /**
     * Sets view_tender_consignor_completed_list
     *
     * @param bool|null $view_tender_consignor_completed_list просмотр отправителем списка завершенных тендеров
     *
     * @return self
     */
    public function setViewTenderConsignorCompletedList($view_tender_consignor_completed_list)
    {
        if (is_null($view_tender_consignor_completed_list)) {
            throw new \InvalidArgumentException('non-nullable view_tender_consignor_completed_list cannot be null');
        }
        $this->container['view_tender_consignor_completed_list'] = $view_tender_consignor_completed_list;

        return $this;
    }

    /**
     * Gets create_tender_draft
     *
     * @return bool|null
     */
    public function getCreateTenderDraft()
    {
        return $this->container['create_tender_draft'];
    }

    /**
     * Sets create_tender_draft
     *
     * @param bool|null $create_tender_draft создание черновика тендера
     *
     * @return self
     */
    public function setCreateTenderDraft($create_tender_draft)
    {
        if (is_null($create_tender_draft)) {
            throw new \InvalidArgumentException('non-nullable create_tender_draft cannot be null');
        }
        $this->container['create_tender_draft'] = $create_tender_draft;

        return $this;
    }

    /**
     * Gets view_admin
     *
     * @return bool|null
     */
    public function getViewAdmin()
    {
        return $this->container['view_admin'];
    }

    /**
     * Sets view_admin
     *
     * @param bool|null $view_admin просмотр раздела Управление
     *
     * @return self
     */
    public function setViewAdmin($view_admin)
    {
        if (is_null($view_admin)) {
            throw new \InvalidArgumentException('non-nullable view_admin cannot be null');
        }
        $this->container['view_admin'] = $view_admin;

        return $this;
    }

    /**
     * Gets view_booking_showcase
     *
     * @return bool|null
     */
    public function getViewBookingShowcase()
    {
        return $this->container['view_booking_showcase'];
    }

    /**
     * Sets view_booking_showcase
     *
     * @param bool|null $view_booking_showcase отображать витрину бронирования для отправителей
     *
     * @return self
     */
    public function setViewBookingShowcase($view_booking_showcase)
    {
        if (is_null($view_booking_showcase)) {
            throw new \InvalidArgumentException('non-nullable view_booking_showcase cannot be null');
        }
        $this->container['view_booking_showcase'] = $view_booking_showcase;

        return $this;
    }

    /**
     * Gets view_landing_express
     *
     * @return bool|null
     */
    public function getViewLandingExpress()
    {
        return $this->container['view_landing_express'];
    }

    /**
     * Sets view_landing_express
     *
     * @param bool|null $view_landing_express отображение раздела Экcпресс-перевозки
     *
     * @return self
     */
    public function setViewLandingExpress($view_landing_express)
    {
        if (is_null($view_landing_express)) {
            throw new \InvalidArgumentException('non-nullable view_landing_express cannot be null');
        }
        $this->container['view_landing_express'] = $view_landing_express;

        return $this;
    }

    /**
     * Gets view_landing_for_carrier
     *
     * @return bool|null
     */
    public function getViewLandingForCarrier()
    {
        return $this->container['view_landing_for_carrier'];
    }

    /**
     * Sets view_landing_for_carrier
     *
     * @param bool|null $view_landing_for_carrier отображение раздела Для перевозчика
     *
     * @return self
     */
    public function setViewLandingForCarrier($view_landing_for_carrier)
    {
        if (is_null($view_landing_for_carrier)) {
            throw new \InvalidArgumentException('non-nullable view_landing_for_carrier cannot be null');
        }
        $this->container['view_landing_for_carrier'] = $view_landing_for_carrier;

        return $this;
    }

    /**
     * Gets view_landing_for_consignor
     *
     * @return bool|null
     */
    public function getViewLandingForConsignor()
    {
        return $this->container['view_landing_for_consignor'];
    }

    /**
     * Sets view_landing_for_consignor
     *
     * @param bool|null $view_landing_for_consignor отображение раздела Для грузовладельца
     *
     * @return self
     */
    public function setViewLandingForConsignor($view_landing_for_consignor)
    {
        if (is_null($view_landing_for_consignor)) {
            throw new \InvalidArgumentException('non-nullable view_landing_for_consignor cannot be null');
        }
        $this->container['view_landing_for_consignor'] = $view_landing_for_consignor;

        return $this;
    }

    /**
     * Gets create_price_local
     *
     * @return bool|null
     */
    public function getCreatePriceLocal()
    {
        return $this->container['create_price_local'];
    }

    /**
     * Sets create_price_local
     *
     * @param bool|null $create_price_local Возможность создания нового элемента в справочнике цен
     *
     * @return self
     */
    public function setCreatePriceLocal($create_price_local)
    {
        if (is_null($create_price_local)) {
            throw new \InvalidArgumentException('non-nullable create_price_local cannot be null');
        }
        $this->container['create_price_local'] = $create_price_local;

        return $this;
    }

    /**
     * Gets view_price_local_list
     *
     * @return bool|null
     */
    public function getViewPriceLocalList()
    {
        return $this->container['view_price_local_list'];
    }

    /**
     * Sets view_price_local_list
     *
     * @param bool|null $view_price_local_list Отображение списка справочника цен для экспедитора
     *
     * @return self
     */
    public function setViewPriceLocalList($view_price_local_list)
    {
        if (is_null($view_price_local_list)) {
            throw new \InvalidArgumentException('non-nullable view_price_local_list cannot be null');
        }
        $this->container['view_price_local_list'] = $view_price_local_list;

        return $this;
    }

    /**
     * Gets create_price_local_pool
     *
     * @return bool|null
     */
    public function getCreatePriceLocalPool()
    {
        return $this->container['create_price_local_pool'];
    }

    /**
     * Sets create_price_local_pool
     *
     * @param bool|null $create_price_local_pool Возможность создания пула перевозок
     *
     * @return self
     */
    public function setCreatePriceLocalPool($create_price_local_pool)
    {
        if (is_null($create_price_local_pool)) {
            throw new \InvalidArgumentException('non-nullable create_price_local_pool cannot be null');
        }
        $this->container['create_price_local_pool'] = $create_price_local_pool;

        return $this;
    }

    /**
     * Gets view_price_local_pool_list
     *
     * @return bool|null
     */
    public function getViewPriceLocalPoolList()
    {
        return $this->container['view_price_local_pool_list'];
    }

    /**
     * Sets view_price_local_pool_list
     *
     * @param bool|null $view_price_local_pool_list Отображение раздела Пулы направлений
     *
     * @return self
     */
    public function setViewPriceLocalPoolList($view_price_local_pool_list)
    {
        if (is_null($view_price_local_pool_list)) {
            throw new \InvalidArgumentException('non-nullable view_price_local_pool_list cannot be null');
        }
        $this->container['view_price_local_pool_list'] = $view_price_local_pool_list;

        return $this;
    }

    /**
     * Gets view_storage_point_emails
     *
     * @return bool|null
     */
    public function getViewStoragePointEmails()
    {
        return $this->container['view_storage_point_emails'];
    }

    /**
     * Sets view_storage_point_emails
     *
     * @param bool|null $view_storage_point_emails Просматривать список email для StoragePoint
     *
     * @return self
     */
    public function setViewStoragePointEmails($view_storage_point_emails)
    {
        if (is_null($view_storage_point_emails)) {
            throw new \InvalidArgumentException('non-nullable view_storage_point_emails cannot be null');
        }
        $this->container['view_storage_point_emails'] = $view_storage_point_emails;

        return $this;
    }

    /**
     * Gets update_storage_point_emails
     *
     * @return bool|null
     */
    public function getUpdateStoragePointEmails()
    {
        return $this->container['update_storage_point_emails'];
    }

    /**
     * Sets update_storage_point_emails
     *
     * @param bool|null $update_storage_point_emails Редактировать список email для StoragePoint
     *
     * @return self
     */
    public function setUpdateStoragePointEmails($update_storage_point_emails)
    {
        if (is_null($update_storage_point_emails)) {
            throw new \InvalidArgumentException('non-nullable update_storage_point_emails cannot be null');
        }
        $this->container['update_storage_point_emails'] = $update_storage_point_emails;

        return $this;
    }

    /**
     * Gets update_storage_point_edm_param
     *
     * @return bool|null
     */
    public function getUpdateStoragePointEdmParam()
    {
        return $this->container['update_storage_point_edm_param'];
    }

    /**
     * Sets update_storage_point_edm_param
     *
     * @param bool|null $update_storage_point_edm_param Редактировать параметр isEdm для StoragePoint
     *
     * @return self
     */
    public function setUpdateStoragePointEdmParam($update_storage_point_edm_param)
    {
        if (is_null($update_storage_point_edm_param)) {
            throw new \InvalidArgumentException('non-nullable update_storage_point_edm_param cannot be null');
        }
        $this->container['update_storage_point_edm_param'] = $update_storage_point_edm_param;

        return $this;
    }

    /**
     * Gets view_diadoc_box_id_list
     *
     * @return bool|null
     */
    public function getViewDiadocBoxIdList()
    {
        return $this->container['view_diadoc_box_id_list'];
    }

    /**
     * Sets view_diadoc_box_id_list
     *
     * @param bool|null $view_diadoc_box_id_list Просмотр списка ящиков diadocBoxId
     *
     * @return self
     */
    public function setViewDiadocBoxIdList($view_diadoc_box_id_list)
    {
        if (is_null($view_diadoc_box_id_list)) {
            throw new \InvalidArgumentException('non-nullable view_diadoc_box_id_list cannot be null');
        }
        $this->container['view_diadoc_box_id_list'] = $view_diadoc_box_id_list;

        return $this;
    }

    /**
     * Gets view_contract_list
     *
     * @return bool|null
     */
    public function getViewContractList()
    {
        return $this->container['view_contract_list'];
    }

    /**
     * Sets view_contract_list
     *
     * @param bool|null $view_contract_list Возможность просматривать список договоров с Экспедитором
     *
     * @return self
     */
    public function setViewContractList($view_contract_list)
    {
        if (is_null($view_contract_list)) {
            throw new \InvalidArgumentException('non-nullable view_contract_list cannot be null');
        }
        $this->container['view_contract_list'] = $view_contract_list;

        return $this;
    }

    /**
     * Gets view_contract_conclusion
     *
     * @return bool|null
     */
    public function getViewContractConclusion()
    {
        return $this->container['view_contract_conclusion'];
    }

    /**
     * Sets view_contract_conclusion
     *
     * @param bool|null $view_contract_conclusion Возможность увидеть текущий процесс заключения договора с Экспедитором
     *
     * @return self
     */
    public function setViewContractConclusion($view_contract_conclusion)
    {
        if (is_null($view_contract_conclusion)) {
            throw new \InvalidArgumentException('non-nullable view_contract_conclusion cannot be null');
        }
        $this->container['view_contract_conclusion'] = $view_contract_conclusion;

        return $this;
    }

    /**
     * Gets view_main_search
     *
     * @return bool|null
     */
    public function getViewMainSearch()
    {
        return $this->container['view_main_search'];
    }

    /**
     * Sets view_main_search
     *
     * @param bool|null $view_main_search Доступ к глобальному поиску
     *
     * @return self
     */
    public function setViewMainSearch($view_main_search)
    {
        if (is_null($view_main_search)) {
            throw new \InvalidArgumentException('non-nullable view_main_search cannot be null');
        }
        $this->container['view_main_search'] = $view_main_search;

        return $this;
    }

    /**
     * Gets order_multi_currency_param
     *
     * @return bool|null
     */
    public function getOrderMultiCurrencyParam()
    {
        return $this->container['order_multi_currency_param'];
    }

    /**
     * Sets order_multi_currency_param
     *
     * @param bool|null $order_multi_currency_param Редактировать параметр isMultiCurrency заказа
     *
     * @return self
     */
    public function setOrderMultiCurrencyParam($order_multi_currency_param)
    {
        if (is_null($order_multi_currency_param)) {
            throw new \InvalidArgumentException('non-nullable order_multi_currency_param cannot be null');
        }
        $this->container['order_multi_currency_param'] = $order_multi_currency_param;

        return $this;
    }

    /**
     * Gets view_claim_list
     *
     * @return bool|null
     */
    public function getViewClaimList()
    {
        return $this->container['view_claim_list'];
    }

    /**
     * Sets view_claim_list
     *
     * @param bool|null $view_claim_list Доступ к разделу списка требований
     *
     * @return self
     */
    public function setViewClaimList($view_claim_list)
    {
        if (is_null($view_claim_list)) {
            throw new \InvalidArgumentException('non-nullable view_claim_list cannot be null');
        }
        $this->container['view_claim_list'] = $view_claim_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


