<?php
/**
 * ExpeditorContractUpdatesState
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * ExpeditorContractUpdatesState Class Doc Comment
 *
 * @category Class
 * @description Объект состояния обновления договора
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ExpeditorContractUpdatesState implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExpeditorContractUpdatesState';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => '\MagDv\Cargomart\Dto\ExpeditorContractUpdatesStatus',
        'contract' => '\MagDv\Cargomart\Dto\ExpeditorContractUpdatesContract',
        'status_updated_at' => 'mixed',
        'additional_agreement' => '\MagDv\Cargomart\Dto\ExpeditorContractUpdatesAdditionalAgreement',
        'commercial_conditions' => '\MagDv\Cargomart\Dto\CommercialCondition[]',
        'selected_commercial_conditions' => '\MagDv\Cargomart\Dto\CommercialConditionType[]',
        'signer' => '\MagDv\Cargomart\Dto\ExpeditorContractUpdatesSigner',
        'proxy' => '\MagDv\Cargomart\Dto\ExpeditorContractUpdatesProxy',
        'refuse_comment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'contract' => null,
        'status_updated_at' => null,
        'additional_agreement' => null,
        'commercial_conditions' => null,
        'selected_commercial_conditions' => null,
        'signer' => null,
        'proxy' => null,
        'refuse_comment' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'status' => false,
        'contract' => false,
        'status_updated_at' => true,
        'additional_agreement' => false,
        'commercial_conditions' => false,
        'selected_commercial_conditions' => false,
        'signer' => false,
        'proxy' => false,
        'refuse_comment' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'contract' => 'contract',
        'status_updated_at' => 'statusUpdatedAt',
        'additional_agreement' => 'additionalAgreement',
        'commercial_conditions' => 'commercialConditions',
        'selected_commercial_conditions' => 'selectedCommercialConditions',
        'signer' => 'signer',
        'proxy' => 'proxy',
        'refuse_comment' => 'refuseComment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'contract' => 'setContract',
        'status_updated_at' => 'setStatusUpdatedAt',
        'additional_agreement' => 'setAdditionalAgreement',
        'commercial_conditions' => 'setCommercialConditions',
        'selected_commercial_conditions' => 'setSelectedCommercialConditions',
        'signer' => 'setSigner',
        'proxy' => 'setProxy',
        'refuse_comment' => 'setRefuseComment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'contract' => 'getContract',
        'status_updated_at' => 'getStatusUpdatedAt',
        'additional_agreement' => 'getAdditionalAgreement',
        'commercial_conditions' => 'getCommercialConditions',
        'selected_commercial_conditions' => 'getSelectedCommercialConditions',
        'signer' => 'getSigner',
        'proxy' => 'getProxy',
        'refuse_comment' => 'getRefuseComment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('contract', $data ?? [], null);
        $this->setIfExists('status_updated_at', $data ?? [], null);
        $this->setIfExists('additional_agreement', $data ?? [], null);
        $this->setIfExists('commercial_conditions', $data ?? [], null);
        $this->setIfExists('selected_commercial_conditions', $data ?? [], null);
        $this->setIfExists('signer', $data ?? [], null);
        $this->setIfExists('proxy', $data ?? [], null);
        $this->setIfExists('refuse_comment', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return \MagDv\Cargomart\Dto\ExpeditorContractUpdatesStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \MagDv\Cargomart\Dto\ExpeditorContractUpdatesStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets contract
     *
     * @return \MagDv\Cargomart\Dto\ExpeditorContractUpdatesContract|null
     */
    public function getContract()
    {
        return $this->container['contract'];
    }

    /**
     * Sets contract
     *
     * @param \MagDv\Cargomart\Dto\ExpeditorContractUpdatesContract|null $contract contract
     *
     * @return self
     */
    public function setContract($contract)
    {
        if (is_null($contract)) {
            throw new \InvalidArgumentException('non-nullable contract cannot be null');
        }
        $this->container['contract'] = $contract;

        return $this;
    }

    /**
     * Gets status_updated_at
     *
     * @return mixed|null
     */
    public function getStatusUpdatedAt()
    {
        return $this->container['status_updated_at'];
    }

    /**
     * Sets status_updated_at
     *
     * @param mixed|null $status_updated_at status_updated_at
     *
     * @return self
     */
    public function setStatusUpdatedAt($status_updated_at)
    {
        if (is_null($status_updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'status_updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status_updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status_updated_at'] = $status_updated_at;

        return $this;
    }

    /**
     * Gets additional_agreement
     *
     * @return \MagDv\Cargomart\Dto\ExpeditorContractUpdatesAdditionalAgreement|null
     */
    public function getAdditionalAgreement()
    {
        return $this->container['additional_agreement'];
    }

    /**
     * Sets additional_agreement
     *
     * @param \MagDv\Cargomart\Dto\ExpeditorContractUpdatesAdditionalAgreement|null $additional_agreement additional_agreement
     *
     * @return self
     */
    public function setAdditionalAgreement($additional_agreement)
    {
        if (is_null($additional_agreement)) {
            throw new \InvalidArgumentException('non-nullable additional_agreement cannot be null');
        }
        $this->container['additional_agreement'] = $additional_agreement;

        return $this;
    }

    /**
     * Gets commercial_conditions
     *
     * @return \MagDv\Cargomart\Dto\CommercialCondition[]|null
     */
    public function getCommercialConditions()
    {
        return $this->container['commercial_conditions'];
    }

    /**
     * Sets commercial_conditions
     *
     * @param \MagDv\Cargomart\Dto\CommercialCondition[]|null $commercial_conditions Коммерческие условия
     *
     * @return self
     */
    public function setCommercialConditions($commercial_conditions)
    {
        if (is_null($commercial_conditions)) {
            throw new \InvalidArgumentException('non-nullable commercial_conditions cannot be null');
        }
        $this->container['commercial_conditions'] = $commercial_conditions;

        return $this;
    }

    /**
     * Gets selected_commercial_conditions
     *
     * @return \MagDv\Cargomart\Dto\CommercialConditionType[]|null
     */
    public function getSelectedCommercialConditions()
    {
        return $this->container['selected_commercial_conditions'];
    }

    /**
     * Sets selected_commercial_conditions
     *
     * @param \MagDv\Cargomart\Dto\CommercialConditionType[]|null $selected_commercial_conditions selected_commercial_conditions
     *
     * @return self
     */
    public function setSelectedCommercialConditions($selected_commercial_conditions)
    {
        if (is_null($selected_commercial_conditions)) {
            throw new \InvalidArgumentException('non-nullable selected_commercial_conditions cannot be null');
        }
        $this->container['selected_commercial_conditions'] = $selected_commercial_conditions;

        return $this;
    }

    /**
     * Gets signer
     *
     * @return \MagDv\Cargomart\Dto\ExpeditorContractUpdatesSigner|null
     */
    public function getSigner()
    {
        return $this->container['signer'];
    }

    /**
     * Sets signer
     *
     * @param \MagDv\Cargomart\Dto\ExpeditorContractUpdatesSigner|null $signer signer
     *
     * @return self
     */
    public function setSigner($signer)
    {
        if (is_null($signer)) {
            throw new \InvalidArgumentException('non-nullable signer cannot be null');
        }
        $this->container['signer'] = $signer;

        return $this;
    }

    /**
     * Gets proxy
     *
     * @return \MagDv\Cargomart\Dto\ExpeditorContractUpdatesProxy|null
     */
    public function getProxy()
    {
        return $this->container['proxy'];
    }

    /**
     * Sets proxy
     *
     * @param \MagDv\Cargomart\Dto\ExpeditorContractUpdatesProxy|null $proxy proxy
     *
     * @return self
     */
    public function setProxy($proxy)
    {
        if (is_null($proxy)) {
            throw new \InvalidArgumentException('non-nullable proxy cannot be null');
        }
        $this->container['proxy'] = $proxy;

        return $this;
    }

    /**
     * Gets refuse_comment
     *
     * @return string|null
     */
    public function getRefuseComment()
    {
        return $this->container['refuse_comment'];
    }

    /**
     * Sets refuse_comment
     *
     * @param string|null $refuse_comment Комментарий отказа подписания доп. соглашения со стороны Каргомарта
     *
     * @return self
     */
    public function setRefuseComment($refuse_comment)
    {
        if (is_null($refuse_comment)) {
            throw new \InvalidArgumentException('non-nullable refuse_comment cannot be null');
        }
        $this->container['refuse_comment'] = $refuse_comment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


