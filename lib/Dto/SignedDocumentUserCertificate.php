<?php
/**
 * SignedDocumentUserCertificate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * SignedDocumentUserCertificate Class Doc Comment
 *
 * @category Class
 * @description Объект сертификата ПЭП пользователя-подписанта
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SignedDocumentUserCertificate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SignedDocumentUserCertificate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'number' => 'int',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'activate_date' => '\DateTime',
        'branch_id' => 'string',
        'client_name' => 'string',
        'client_inn' => 'string',
        'client_ogrn' => 'string',
        'client_address' => 'string',
        'receiver_last_name' => 'string',
        'receiver_first_name' => 'string',
        'receiver_second_name' => 'string',
        'user_id' => 'int',
        'phone' => 'string',
        'contract' => '\MagDv\Cargomart\Dto\CertificateContract'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'number' => null,
        'start_date' => 'date',
        'end_date' => 'date',
        'activate_date' => 'date-time',
        'branch_id' => null,
        'client_name' => null,
        'client_inn' => null,
        'client_ogrn' => null,
        'client_address' => null,
        'receiver_last_name' => null,
        'receiver_first_name' => null,
        'receiver_second_name' => null,
        'user_id' => null,
        'phone' => null,
        'contract' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'number' => false,
        'start_date' => false,
        'end_date' => false,
        'activate_date' => false,
        'branch_id' => false,
        'client_name' => false,
        'client_inn' => false,
        'client_ogrn' => false,
        'client_address' => false,
        'receiver_last_name' => false,
        'receiver_first_name' => false,
        'receiver_second_name' => false,
        'user_id' => false,
        'phone' => false,
        'contract' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'number' => 'number',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'activate_date' => 'activateDate',
        'branch_id' => 'branchId',
        'client_name' => 'clientName',
        'client_inn' => 'clientInn',
        'client_ogrn' => 'clientOgrn',
        'client_address' => 'clientAddress',
        'receiver_last_name' => 'receiverLastName',
        'receiver_first_name' => 'receiverFirstName',
        'receiver_second_name' => 'receiverSecondName',
        'user_id' => 'userId',
        'phone' => 'phone',
        'contract' => 'contract'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'number' => 'setNumber',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'activate_date' => 'setActivateDate',
        'branch_id' => 'setBranchId',
        'client_name' => 'setClientName',
        'client_inn' => 'setClientInn',
        'client_ogrn' => 'setClientOgrn',
        'client_address' => 'setClientAddress',
        'receiver_last_name' => 'setReceiverLastName',
        'receiver_first_name' => 'setReceiverFirstName',
        'receiver_second_name' => 'setReceiverSecondName',
        'user_id' => 'setUserId',
        'phone' => 'setPhone',
        'contract' => 'setContract'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'number' => 'getNumber',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'activate_date' => 'getActivateDate',
        'branch_id' => 'getBranchId',
        'client_name' => 'getClientName',
        'client_inn' => 'getClientInn',
        'client_ogrn' => 'getClientOgrn',
        'client_address' => 'getClientAddress',
        'receiver_last_name' => 'getReceiverLastName',
        'receiver_first_name' => 'getReceiverFirstName',
        'receiver_second_name' => 'getReceiverSecondName',
        'user_id' => 'getUserId',
        'phone' => 'getPhone',
        'contract' => 'getContract'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('activate_date', $data ?? [], null);
        $this->setIfExists('branch_id', $data ?? [], null);
        $this->setIfExists('client_name', $data ?? [], null);
        $this->setIfExists('client_inn', $data ?? [], null);
        $this->setIfExists('client_ogrn', $data ?? [], null);
        $this->setIfExists('client_address', $data ?? [], null);
        $this->setIfExists('receiver_last_name', $data ?? [], null);
        $this->setIfExists('receiver_first_name', $data ?? [], null);
        $this->setIfExists('receiver_second_name', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('contract', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalidProperties[] = "'end_date' can't be null";
        }
        if ($this->container['client_name'] === null) {
            $invalidProperties[] = "'client_name' can't be null";
        }
        if ($this->container['client_inn'] === null) {
            $invalidProperties[] = "'client_inn' can't be null";
        }
        if ($this->container['receiver_last_name'] === null) {
            $invalidProperties[] = "'receiver_last_name' can't be null";
        }
        if ($this->container['receiver_first_name'] === null) {
            $invalidProperties[] = "'receiver_first_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Идентификатор сертификата
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int|null $number Номер сертификата
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Дата начала срока действия
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date Дата окончания срока действия
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets activate_date
     *
     * @return \DateTime|null
     */
    public function getActivateDate()
    {
        return $this->container['activate_date'];
    }

    /**
     * Sets activate_date
     *
     * @param \DateTime|null $activate_date Дата подтверждения получения сертификата ПЭП владельцем
     *
     * @return self
     */
    public function setActivateDate($activate_date)
    {
        if (is_null($activate_date)) {
            throw new \InvalidArgumentException('non-nullable activate_date cannot be null');
        }
        $this->container['activate_date'] = $activate_date;

        return $this;
    }

    /**
     * Gets branch_id
     *
     * @return string|null
     */
    public function getBranchId()
    {
        return $this->container['branch_id'];
    }

    /**
     * Sets branch_id
     *
     * @param string|null $branch_id Идентификатор компании-дочки на которую сертификат выпущен
     *
     * @return self
     */
    public function setBranchId($branch_id)
    {
        if (is_null($branch_id)) {
            throw new \InvalidArgumentException('non-nullable branch_id cannot be null');
        }
        $this->container['branch_id'] = $branch_id;

        return $this;
    }

    /**
     * Gets client_name
     *
     * @return string
     */
    public function getClientName()
    {
        return $this->container['client_name'];
    }

    /**
     * Sets client_name
     *
     * @param string $client_name Название компании
     *
     * @return self
     */
    public function setClientName($client_name)
    {
        if (is_null($client_name)) {
            throw new \InvalidArgumentException('non-nullable client_name cannot be null');
        }
        $this->container['client_name'] = $client_name;

        return $this;
    }

    /**
     * Gets client_inn
     *
     * @return string
     */
    public function getClientInn()
    {
        return $this->container['client_inn'];
    }

    /**
     * Sets client_inn
     *
     * @param string $client_inn ИНН компании
     *
     * @return self
     */
    public function setClientInn($client_inn)
    {
        if (is_null($client_inn)) {
            throw new \InvalidArgumentException('non-nullable client_inn cannot be null');
        }
        $this->container['client_inn'] = $client_inn;

        return $this;
    }

    /**
     * Gets client_ogrn
     *
     * @return string|null
     */
    public function getClientOgrn()
    {
        return $this->container['client_ogrn'];
    }

    /**
     * Sets client_ogrn
     *
     * @param string|null $client_ogrn ОГРН компании
     *
     * @return self
     */
    public function setClientOgrn($client_ogrn)
    {
        if (is_null($client_ogrn)) {
            throw new \InvalidArgumentException('non-nullable client_ogrn cannot be null');
        }
        $this->container['client_ogrn'] = $client_ogrn;

        return $this;
    }

    /**
     * Gets client_address
     *
     * @return string|null
     */
    public function getClientAddress()
    {
        return $this->container['client_address'];
    }

    /**
     * Sets client_address
     *
     * @param string|null $client_address Адрес компании
     *
     * @return self
     */
    public function setClientAddress($client_address)
    {
        if (is_null($client_address)) {
            throw new \InvalidArgumentException('non-nullable client_address cannot be null');
        }
        $this->container['client_address'] = $client_address;

        return $this;
    }

    /**
     * Gets receiver_last_name
     *
     * @return string
     */
    public function getReceiverLastName()
    {
        return $this->container['receiver_last_name'];
    }

    /**
     * Sets receiver_last_name
     *
     * @param string $receiver_last_name Фамилия подписанта
     *
     * @return self
     */
    public function setReceiverLastName($receiver_last_name)
    {
        if (is_null($receiver_last_name)) {
            throw new \InvalidArgumentException('non-nullable receiver_last_name cannot be null');
        }
        $this->container['receiver_last_name'] = $receiver_last_name;

        return $this;
    }

    /**
     * Gets receiver_first_name
     *
     * @return string
     */
    public function getReceiverFirstName()
    {
        return $this->container['receiver_first_name'];
    }

    /**
     * Sets receiver_first_name
     *
     * @param string $receiver_first_name Имя подписанта
     *
     * @return self
     */
    public function setReceiverFirstName($receiver_first_name)
    {
        if (is_null($receiver_first_name)) {
            throw new \InvalidArgumentException('non-nullable receiver_first_name cannot be null');
        }
        $this->container['receiver_first_name'] = $receiver_first_name;

        return $this;
    }

    /**
     * Gets receiver_second_name
     *
     * @return string|null
     */
    public function getReceiverSecondName()
    {
        return $this->container['receiver_second_name'];
    }

    /**
     * Sets receiver_second_name
     *
     * @param string|null $receiver_second_name Отчество подписанта
     *
     * @return self
     */
    public function setReceiverSecondName($receiver_second_name)
    {
        if (is_null($receiver_second_name)) {
            throw new \InvalidArgumentException('non-nullable receiver_second_name cannot be null');
        }
        $this->container['receiver_second_name'] = $receiver_second_name;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id Идентификатор пользователя - владельца сертификата
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Телефон владельца сертификата для получения одноразовых ключей
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets contract
     *
     * @return \MagDv\Cargomart\Dto\CertificateContract|null
     */
    public function getContract()
    {
        return $this->container['contract'];
    }

    /**
     * Sets contract
     *
     * @param \MagDv\Cargomart\Dto\CertificateContract|null $contract Данные договора
     *
     * @return self
     */
    public function setContract($contract)
    {
        if (is_null($contract)) {
            throw new \InvalidArgumentException('non-nullable contract cannot be null');
        }
        $this->container['contract'] = $contract;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


