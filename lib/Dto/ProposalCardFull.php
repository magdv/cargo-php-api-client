<?php
/**
 * ProposalCardFull
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * ProposalCardFull Class Doc Comment
 *
 * @category Class
 * @description Полная информация по заказу Экспедитора
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProposalCardFull implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProposalCardFull';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'has_expeditor_sign' => 'bool',
        'truck_search_time_end' => '\DateTime',
        'winner_date' => '\DateTime',
        'serial_id' => 'int',
        'customer_id' => 'string',
        'curators' => 'int[]',
        'expeditor_id' => 'string',
        'price' => '\MagDv\Cargomart\Dto\PriceValue',
        'carrier_price' => '\MagDv\Cargomart\Dto\PriceValue',
        'winner_price' => '\MagDv\Cargomart\Dto\PriceValue',
        'status' => '\MagDv\Cargomart\Dto\ProposalStatusEnum',
        'search_range' => '\MagDv\Cargomart\Dto\DateTimeRange',
        'period_range' => '\MagDv\Cargomart\Dto\DateRange',
        'cargo' => '\MagDv\Cargomart\Dto\ProposalCargo',
        'carrier' => '\MagDv\Cargomart\Dto\ProposalCarrier',
        'route' => '\MagDv\Cargomart\Dto\ProposalPoint[]',
        'expeditor_contract' => '\MagDv\Cargomart\Dto\ExpeditorContract',
        'patch' => '\MagDv\Cargomart\Dto\OrderPatchLastItem',
        'last_patch' => '\MagDv\Cargomart\Dto\OrderPatchLastItem',
        'truck_driver_patch' => '\MagDv\Cargomart\Dto\OrderPatchLastItem',
        'carrier_downtime_claim' => '\MagDv\Cargomart\Dto\OrderDowntimeClaim',
        'expeditor_downtime_claim' => '\MagDv\Cargomart\Dto\OrderDowntimeClaim',
        'external_id' => 'string',
        'external_id_label' => 'string',
        'customer_branch_id' => 'int',
        'distance' => 'int',
        'details' => '\MagDv\Cargomart\Dto\OrderDetails[]',
        'refuses' => '\MagDv\Cargomart\Dto\ProposalRefuse[]',
        'tag' => 'string[]',
        'view_count' => 'float',
        'pin_count' => 'float',
        'additional_consignor_price' => '\MagDv\Cargomart\Dto\PriceValue',
        'additional_carrier_price' => '\MagDv\Cargomart\Dto\PriceValue',
        'access' => '\MagDv\Cargomart\Dto\ProposalAccess',
        'proxy' => '\MagDv\Cargomart\Dto\ProposalProxy',
        'price_strategy_type' => '\MagDv\Cargomart\Dto\OrderPriceStrategyType',
        'bidding_type' => '\MagDv\Cargomart\Dto\OrderBiddingType',
        'bidding' => '\MagDv\Cargomart\Dto\OrderDraftExpeditorBidding',
        'bid_count' => 'int',
        'carrier_asks_count' => 'int',
        'has_carrier_sign' => 'bool',
        'payment_invoice_status' => '\MagDv\Cargomart\Dto\PaymentInvoiceStatus[]',
        'roadmap_events_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'has_expeditor_sign' => null,
        'truck_search_time_end' => 'date-time',
        'winner_date' => 'date-time',
        'serial_id' => null,
        'customer_id' => null,
        'curators' => null,
        'expeditor_id' => null,
        'price' => null,
        'carrier_price' => null,
        'winner_price' => null,
        'status' => null,
        'search_range' => null,
        'period_range' => null,
        'cargo' => null,
        'carrier' => null,
        'route' => null,
        'expeditor_contract' => null,
        'patch' => null,
        'last_patch' => null,
        'truck_driver_patch' => null,
        'carrier_downtime_claim' => null,
        'expeditor_downtime_claim' => null,
        'external_id' => null,
        'external_id_label' => null,
        'customer_branch_id' => null,
        'distance' => null,
        'details' => null,
        'refuses' => null,
        'tag' => null,
        'view_count' => null,
        'pin_count' => null,
        'additional_consignor_price' => null,
        'additional_carrier_price' => null,
        'access' => null,
        'proxy' => null,
        'price_strategy_type' => null,
        'bidding_type' => null,
        'bidding' => null,
        'bid_count' => null,
        'carrier_asks_count' => null,
        'has_carrier_sign' => null,
        'payment_invoice_status' => null,
        'roadmap_events_count' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'has_expeditor_sign' => false,
        'truck_search_time_end' => false,
        'winner_date' => false,
        'serial_id' => false,
        'customer_id' => false,
        'curators' => false,
        'expeditor_id' => false,
        'price' => false,
        'carrier_price' => false,
        'winner_price' => false,
        'status' => false,
        'search_range' => false,
        'period_range' => false,
        'cargo' => false,
        'carrier' => false,
        'route' => false,
        'expeditor_contract' => false,
        'patch' => false,
        'last_patch' => false,
        'truck_driver_patch' => false,
        'carrier_downtime_claim' => false,
        'expeditor_downtime_claim' => false,
        'external_id' => false,
        'external_id_label' => false,
        'customer_branch_id' => false,
        'distance' => false,
        'details' => false,
        'refuses' => false,
        'tag' => false,
        'view_count' => false,
        'pin_count' => false,
        'additional_consignor_price' => false,
        'additional_carrier_price' => false,
        'access' => false,
        'proxy' => false,
        'price_strategy_type' => false,
        'bidding_type' => false,
        'bidding' => false,
        'bid_count' => false,
        'carrier_asks_count' => false,
        'has_carrier_sign' => false,
        'payment_invoice_status' => false,
        'roadmap_events_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'has_expeditor_sign' => 'hasExpeditorSign',
        'truck_search_time_end' => 'truckSearchTimeEnd',
        'winner_date' => 'winnerDate',
        'serial_id' => 'serialId',
        'customer_id' => 'customerId',
        'curators' => 'curators',
        'expeditor_id' => 'expeditorId',
        'price' => 'price',
        'carrier_price' => 'carrierPrice',
        'winner_price' => 'winnerPrice',
        'status' => 'status',
        'search_range' => 'searchRange',
        'period_range' => 'periodRange',
        'cargo' => 'cargo',
        'carrier' => 'carrier',
        'route' => 'route',
        'expeditor_contract' => 'expeditorContract',
        'patch' => 'patch',
        'last_patch' => 'lastPatch',
        'truck_driver_patch' => 'truckDriverPatch',
        'carrier_downtime_claim' => 'carrierDowntimeClaim',
        'expeditor_downtime_claim' => 'expeditorDowntimeClaim',
        'external_id' => 'externalId',
        'external_id_label' => 'externalIdLabel',
        'customer_branch_id' => 'customerBranchId',
        'distance' => 'distance',
        'details' => 'details',
        'refuses' => 'refuses',
        'tag' => 'tag',
        'view_count' => 'viewCount',
        'pin_count' => 'pinCount',
        'additional_consignor_price' => 'additionalConsignorPrice',
        'additional_carrier_price' => 'additionalCarrierPrice',
        'access' => 'access',
        'proxy' => 'proxy',
        'price_strategy_type' => 'priceStrategyType',
        'bidding_type' => 'biddingType',
        'bidding' => 'bidding',
        'bid_count' => 'bidCount',
        'carrier_asks_count' => 'carrierAsksCount',
        'has_carrier_sign' => 'hasCarrierSign',
        'payment_invoice_status' => 'paymentInvoiceStatus',
        'roadmap_events_count' => 'roadmapEventsCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'has_expeditor_sign' => 'setHasExpeditorSign',
        'truck_search_time_end' => 'setTruckSearchTimeEnd',
        'winner_date' => 'setWinnerDate',
        'serial_id' => 'setSerialId',
        'customer_id' => 'setCustomerId',
        'curators' => 'setCurators',
        'expeditor_id' => 'setExpeditorId',
        'price' => 'setPrice',
        'carrier_price' => 'setCarrierPrice',
        'winner_price' => 'setWinnerPrice',
        'status' => 'setStatus',
        'search_range' => 'setSearchRange',
        'period_range' => 'setPeriodRange',
        'cargo' => 'setCargo',
        'carrier' => 'setCarrier',
        'route' => 'setRoute',
        'expeditor_contract' => 'setExpeditorContract',
        'patch' => 'setPatch',
        'last_patch' => 'setLastPatch',
        'truck_driver_patch' => 'setTruckDriverPatch',
        'carrier_downtime_claim' => 'setCarrierDowntimeClaim',
        'expeditor_downtime_claim' => 'setExpeditorDowntimeClaim',
        'external_id' => 'setExternalId',
        'external_id_label' => 'setExternalIdLabel',
        'customer_branch_id' => 'setCustomerBranchId',
        'distance' => 'setDistance',
        'details' => 'setDetails',
        'refuses' => 'setRefuses',
        'tag' => 'setTag',
        'view_count' => 'setViewCount',
        'pin_count' => 'setPinCount',
        'additional_consignor_price' => 'setAdditionalConsignorPrice',
        'additional_carrier_price' => 'setAdditionalCarrierPrice',
        'access' => 'setAccess',
        'proxy' => 'setProxy',
        'price_strategy_type' => 'setPriceStrategyType',
        'bidding_type' => 'setBiddingType',
        'bidding' => 'setBidding',
        'bid_count' => 'setBidCount',
        'carrier_asks_count' => 'setCarrierAsksCount',
        'has_carrier_sign' => 'setHasCarrierSign',
        'payment_invoice_status' => 'setPaymentInvoiceStatus',
        'roadmap_events_count' => 'setRoadmapEventsCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'has_expeditor_sign' => 'getHasExpeditorSign',
        'truck_search_time_end' => 'getTruckSearchTimeEnd',
        'winner_date' => 'getWinnerDate',
        'serial_id' => 'getSerialId',
        'customer_id' => 'getCustomerId',
        'curators' => 'getCurators',
        'expeditor_id' => 'getExpeditorId',
        'price' => 'getPrice',
        'carrier_price' => 'getCarrierPrice',
        'winner_price' => 'getWinnerPrice',
        'status' => 'getStatus',
        'search_range' => 'getSearchRange',
        'period_range' => 'getPeriodRange',
        'cargo' => 'getCargo',
        'carrier' => 'getCarrier',
        'route' => 'getRoute',
        'expeditor_contract' => 'getExpeditorContract',
        'patch' => 'getPatch',
        'last_patch' => 'getLastPatch',
        'truck_driver_patch' => 'getTruckDriverPatch',
        'carrier_downtime_claim' => 'getCarrierDowntimeClaim',
        'expeditor_downtime_claim' => 'getExpeditorDowntimeClaim',
        'external_id' => 'getExternalId',
        'external_id_label' => 'getExternalIdLabel',
        'customer_branch_id' => 'getCustomerBranchId',
        'distance' => 'getDistance',
        'details' => 'getDetails',
        'refuses' => 'getRefuses',
        'tag' => 'getTag',
        'view_count' => 'getViewCount',
        'pin_count' => 'getPinCount',
        'additional_consignor_price' => 'getAdditionalConsignorPrice',
        'additional_carrier_price' => 'getAdditionalCarrierPrice',
        'access' => 'getAccess',
        'proxy' => 'getProxy',
        'price_strategy_type' => 'getPriceStrategyType',
        'bidding_type' => 'getBiddingType',
        'bidding' => 'getBidding',
        'bid_count' => 'getBidCount',
        'carrier_asks_count' => 'getCarrierAsksCount',
        'has_carrier_sign' => 'getHasCarrierSign',
        'payment_invoice_status' => 'getPaymentInvoiceStatus',
        'roadmap_events_count' => 'getRoadmapEventsCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('has_expeditor_sign', $data ?? [], false);
        $this->setIfExists('truck_search_time_end', $data ?? [], null);
        $this->setIfExists('winner_date', $data ?? [], null);
        $this->setIfExists('serial_id', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('curators', $data ?? [], null);
        $this->setIfExists('expeditor_id', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('carrier_price', $data ?? [], null);
        $this->setIfExists('winner_price', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('search_range', $data ?? [], null);
        $this->setIfExists('period_range', $data ?? [], null);
        $this->setIfExists('cargo', $data ?? [], null);
        $this->setIfExists('carrier', $data ?? [], null);
        $this->setIfExists('route', $data ?? [], null);
        $this->setIfExists('expeditor_contract', $data ?? [], null);
        $this->setIfExists('patch', $data ?? [], null);
        $this->setIfExists('last_patch', $data ?? [], null);
        $this->setIfExists('truck_driver_patch', $data ?? [], null);
        $this->setIfExists('carrier_downtime_claim', $data ?? [], null);
        $this->setIfExists('expeditor_downtime_claim', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('external_id_label', $data ?? [], null);
        $this->setIfExists('customer_branch_id', $data ?? [], null);
        $this->setIfExists('distance', $data ?? [], null);
        $this->setIfExists('details', $data ?? [], null);
        $this->setIfExists('refuses', $data ?? [], null);
        $this->setIfExists('tag', $data ?? [], null);
        $this->setIfExists('view_count', $data ?? [], null);
        $this->setIfExists('pin_count', $data ?? [], null);
        $this->setIfExists('additional_consignor_price', $data ?? [], null);
        $this->setIfExists('additional_carrier_price', $data ?? [], null);
        $this->setIfExists('access', $data ?? [], null);
        $this->setIfExists('proxy', $data ?? [], null);
        $this->setIfExists('price_strategy_type', $data ?? [], null);
        $this->setIfExists('bidding_type', $data ?? [], null);
        $this->setIfExists('bidding', $data ?? [], null);
        $this->setIfExists('bid_count', $data ?? [], null);
        $this->setIfExists('carrier_asks_count', $data ?? [], null);
        $this->setIfExists('has_carrier_sign', $data ?? [], false);
        $this->setIfExists('payment_invoice_status', $data ?? [], null);
        $this->setIfExists('roadmap_events_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['serial_id'] === null) {
            $invalidProperties[] = "'serial_id' can't be null";
        }
        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['curators'] === null) {
            $invalidProperties[] = "'curators' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['search_range'] === null) {
            $invalidProperties[] = "'search_range' can't be null";
        }
        if ($this->container['cargo'] === null) {
            $invalidProperties[] = "'cargo' can't be null";
        }
        if ($this->container['route'] === null) {
            $invalidProperties[] = "'route' can't be null";
        }
        if ($this->container['access'] === null) {
            $invalidProperties[] = "'access' can't be null";
        }
        if (!is_null($this->container['carrier_asks_count']) && ($this->container['carrier_asks_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'carrier_asks_count', must be bigger than or equal to 0.";
        }

        if ($this->container['roadmap_events_count'] === null) {
            $invalidProperties[] = "'roadmap_events_count' can't be null";
        }
        if (($this->container['roadmap_events_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'roadmap_events_count', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Идентификатор
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets has_expeditor_sign
     *
     * @return bool|null
     * @deprecated
     */
    public function getHasExpeditorSign()
    {
        return $this->container['has_expeditor_sign'];
    }

    /**
     * Sets has_expeditor_sign
     *
     * @param bool|null $has_expeditor_sign Доверенность подписана экспедитором
     *
     * @return self
     * @deprecated
     */
    public function setHasExpeditorSign($has_expeditor_sign)
    {
        if (is_null($has_expeditor_sign)) {
            throw new \InvalidArgumentException('non-nullable has_expeditor_sign cannot be null');
        }
        $this->container['has_expeditor_sign'] = $has_expeditor_sign;

        return $this;
    }

    /**
     * Gets truck_search_time_end
     *
     * @return \DateTime|null
     */
    public function getTruckSearchTimeEnd()
    {
        return $this->container['truck_search_time_end'];
    }

    /**
     * Sets truck_search_time_end
     *
     * @param \DateTime|null $truck_search_time_end Крайняя дата назначения машины
     *
     * @return self
     */
    public function setTruckSearchTimeEnd($truck_search_time_end)
    {
        if (is_null($truck_search_time_end)) {
            throw new \InvalidArgumentException('non-nullable truck_search_time_end cannot be null');
        }
        $this->container['truck_search_time_end'] = $truck_search_time_end;

        return $this;
    }

    /**
     * Gets winner_date
     *
     * @return \DateTime|null
     */
    public function getWinnerDate()
    {
        return $this->container['winner_date'];
    }

    /**
     * Sets winner_date
     *
     * @param \DateTime|null $winner_date Дата и время когда был определен победитель
     *
     * @return self
     */
    public function setWinnerDate($winner_date)
    {
        if (is_null($winner_date)) {
            throw new \InvalidArgumentException('non-nullable winner_date cannot be null');
        }
        $this->container['winner_date'] = $winner_date;

        return $this;
    }

    /**
     * Gets serial_id
     *
     * @return int
     */
    public function getSerialId()
    {
        return $this->container['serial_id'];
    }

    /**
     * Sets serial_id
     *
     * @param int $serial_id Порядковый номер
     *
     * @return self
     */
    public function setSerialId($serial_id)
    {
        if (is_null($serial_id)) {
            throw new \InvalidArgumentException('non-nullable serial_id cannot be null');
        }
        $this->container['serial_id'] = $serial_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id Id клиента
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets curators
     *
     * @return int[]
     */
    public function getCurators()
    {
        return $this->container['curators'];
    }

    /**
     * Sets curators
     *
     * @param int[] $curators Список идентифкаторов контактных лиц
     *
     * @return self
     */
    public function setCurators($curators)
    {
        if (is_null($curators)) {
            throw new \InvalidArgumentException('non-nullable curators cannot be null');
        }
        $this->container['curators'] = $curators;

        return $this;
    }

    /**
     * Gets expeditor_id
     *
     * @return string|null
     */
    public function getExpeditorId()
    {
        return $this->container['expeditor_id'];
    }

    /**
     * Sets expeditor_id
     *
     * @param string|null $expeditor_id Идентификатор экспедитора
     *
     * @return self
     */
    public function setExpeditorId($expeditor_id)
    {
        if (is_null($expeditor_id)) {
            throw new \InvalidArgumentException('non-nullable expeditor_id cannot be null');
        }
        $this->container['expeditor_id'] = $expeditor_id;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \MagDv\Cargomart\Dto\PriceValue|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \MagDv\Cargomart\Dto\PriceValue|null $price Цена
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets carrier_price
     *
     * @return \MagDv\Cargomart\Dto\PriceValue|null
     */
    public function getCarrierPrice()
    {
        return $this->container['carrier_price'];
    }

    /**
     * Sets carrier_price
     *
     * @param \MagDv\Cargomart\Dto\PriceValue|null $carrier_price Цена
     *
     * @return self
     */
    public function setCarrierPrice($carrier_price)
    {
        if (is_null($carrier_price)) {
            throw new \InvalidArgumentException('non-nullable carrier_price cannot be null');
        }
        $this->container['carrier_price'] = $carrier_price;

        return $this;
    }

    /**
     * Gets winner_price
     *
     * @return \MagDv\Cargomart\Dto\PriceValue|null
     */
    public function getWinnerPrice()
    {
        return $this->container['winner_price'];
    }

    /**
     * Sets winner_price
     *
     * @param \MagDv\Cargomart\Dto\PriceValue|null $winner_price Цена перевозчика-победителя
     *
     * @return self
     */
    public function setWinnerPrice($winner_price)
    {
        if (is_null($winner_price)) {
            throw new \InvalidArgumentException('non-nullable winner_price cannot be null');
        }
        $this->container['winner_price'] = $winner_price;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \MagDv\Cargomart\Dto\ProposalStatusEnum
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \MagDv\Cargomart\Dto\ProposalStatusEnum $status Статус
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets search_range
     *
     * @return \MagDv\Cargomart\Dto\DateTimeRange
     */
    public function getSearchRange()
    {
        return $this->container['search_range'];
    }

    /**
     * Sets search_range
     *
     * @param \MagDv\Cargomart\Dto\DateTimeRange $search_range Диапазон дат сбора заявок
     *
     * @return self
     */
    public function setSearchRange($search_range)
    {
        if (is_null($search_range)) {
            throw new \InvalidArgumentException('non-nullable search_range cannot be null');
        }
        $this->container['search_range'] = $search_range;

        return $this;
    }

    /**
     * Gets period_range
     *
     * @return \MagDv\Cargomart\Dto\DateRange|null
     */
    public function getPeriodRange()
    {
        return $this->container['period_range'];
    }

    /**
     * Sets period_range
     *
     * @param \MagDv\Cargomart\Dto\DateRange|null $period_range Диапазон дат исполнения грузоперевозки
     *
     * @return self
     */
    public function setPeriodRange($period_range)
    {
        if (is_null($period_range)) {
            throw new \InvalidArgumentException('non-nullable period_range cannot be null');
        }
        $this->container['period_range'] = $period_range;

        return $this;
    }

    /**
     * Gets cargo
     *
     * @return \MagDv\Cargomart\Dto\ProposalCargo
     */
    public function getCargo()
    {
        return $this->container['cargo'];
    }

    /**
     * Sets cargo
     *
     * @param \MagDv\Cargomart\Dto\ProposalCargo $cargo Груз
     *
     * @return self
     */
    public function setCargo($cargo)
    {
        if (is_null($cargo)) {
            throw new \InvalidArgumentException('non-nullable cargo cannot be null');
        }
        $this->container['cargo'] = $cargo;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return \MagDv\Cargomart\Dto\ProposalCarrier|null
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param \MagDv\Cargomart\Dto\ProposalCarrier|null $carrier Перевозчик
     *
     * @return self
     */
    public function setCarrier($carrier)
    {
        if (is_null($carrier)) {
            throw new \InvalidArgumentException('non-nullable carrier cannot be null');
        }
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets route
     *
     * @return \MagDv\Cargomart\Dto\ProposalPoint[]
     */
    public function getRoute()
    {
        return $this->container['route'];
    }

    /**
     * Sets route
     *
     * @param \MagDv\Cargomart\Dto\ProposalPoint[] $route route
     *
     * @return self
     */
    public function setRoute($route)
    {
        if (is_null($route)) {
            throw new \InvalidArgumentException('non-nullable route cannot be null');
        }
        $this->container['route'] = $route;

        return $this;
    }

    /**
     * Gets expeditor_contract
     *
     * @return \MagDv\Cargomart\Dto\ExpeditorContract|null
     */
    public function getExpeditorContract()
    {
        return $this->container['expeditor_contract'];
    }

    /**
     * Sets expeditor_contract
     *
     * @param \MagDv\Cargomart\Dto\ExpeditorContract|null $expeditor_contract Данные договора
     *
     * @return self
     */
    public function setExpeditorContract($expeditor_contract)
    {
        if (is_null($expeditor_contract)) {
            throw new \InvalidArgumentException('non-nullable expeditor_contract cannot be null');
        }
        $this->container['expeditor_contract'] = $expeditor_contract;

        return $this;
    }

    /**
     * Gets patch
     *
     * @return \MagDv\Cargomart\Dto\OrderPatchLastItem|null
     */
    public function getPatch()
    {
        return $this->container['patch'];
    }

    /**
     * Sets patch
     *
     * @param \MagDv\Cargomart\Dto\OrderPatchLastItem|null $patch Запрос на изменение заказа
     *
     * @return self
     */
    public function setPatch($patch)
    {
        if (is_null($patch)) {
            throw new \InvalidArgumentException('non-nullable patch cannot be null');
        }
        $this->container['patch'] = $patch;

        return $this;
    }

    /**
     * Gets last_patch
     *
     * @return \MagDv\Cargomart\Dto\OrderPatchLastItem|null
     * @deprecated
     */
    public function getLastPatch()
    {
        return $this->container['last_patch'];
    }

    /**
     * Sets last_patch
     *
     * @param \MagDv\Cargomart\Dto\OrderPatchLastItem|null $last_patch @deprecated Запрос на изменение заказа от экспедитора (использовать patch)
     *
     * @return self
     * @deprecated
     */
    public function setLastPatch($last_patch)
    {
        if (is_null($last_patch)) {
            throw new \InvalidArgumentException('non-nullable last_patch cannot be null');
        }
        $this->container['last_patch'] = $last_patch;

        return $this;
    }

    /**
     * Gets truck_driver_patch
     *
     * @return \MagDv\Cargomart\Dto\OrderPatchLastItem|null
     * @deprecated
     */
    public function getTruckDriverPatch()
    {
        return $this->container['truck_driver_patch'];
    }

    /**
     * Sets truck_driver_patch
     *
     * @param \MagDv\Cargomart\Dto\OrderPatchLastItem|null $truck_driver_patch @deprecated Запрос на изменение машины и водителя в заказе (использовать patch)
     *
     * @return self
     * @deprecated
     */
    public function setTruckDriverPatch($truck_driver_patch)
    {
        if (is_null($truck_driver_patch)) {
            throw new \InvalidArgumentException('non-nullable truck_driver_patch cannot be null');
        }
        $this->container['truck_driver_patch'] = $truck_driver_patch;

        return $this;
    }

    /**
     * Gets carrier_downtime_claim
     *
     * @return \MagDv\Cargomart\Dto\OrderDowntimeClaim|null
     */
    public function getCarrierDowntimeClaim()
    {
        return $this->container['carrier_downtime_claim'];
    }

    /**
     * Sets carrier_downtime_claim
     *
     * @param \MagDv\Cargomart\Dto\OrderDowntimeClaim|null $carrier_downtime_claim Претензия о простое перевозчика Экспедитору
     *
     * @return self
     */
    public function setCarrierDowntimeClaim($carrier_downtime_claim)
    {
        if (is_null($carrier_downtime_claim)) {
            throw new \InvalidArgumentException('non-nullable carrier_downtime_claim cannot be null');
        }
        $this->container['carrier_downtime_claim'] = $carrier_downtime_claim;

        return $this;
    }

    /**
     * Gets expeditor_downtime_claim
     *
     * @return \MagDv\Cargomart\Dto\OrderDowntimeClaim|null
     */
    public function getExpeditorDowntimeClaim()
    {
        return $this->container['expeditor_downtime_claim'];
    }

    /**
     * Sets expeditor_downtime_claim
     *
     * @param \MagDv\Cargomart\Dto\OrderDowntimeClaim|null $expeditor_downtime_claim Претензия о простое Экспедитора Заказчику
     *
     * @return self
     */
    public function setExpeditorDowntimeClaim($expeditor_downtime_claim)
    {
        if (is_null($expeditor_downtime_claim)) {
            throw new \InvalidArgumentException('non-nullable expeditor_downtime_claim cannot be null');
        }
        $this->container['expeditor_downtime_claim'] = $expeditor_downtime_claim;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id Внешний идентификатор
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets external_id_label
     *
     * @return string|null
     */
    public function getExternalIdLabel()
    {
        return $this->container['external_id_label'];
    }

    /**
     * Sets external_id_label
     *
     * @param string|null $external_id_label Наименование внешнего идентификатора заказа
     *
     * @return self
     */
    public function setExternalIdLabel($external_id_label)
    {
        if (is_null($external_id_label)) {
            throw new \InvalidArgumentException('non-nullable external_id_label cannot be null');
        }
        $this->container['external_id_label'] = $external_id_label;

        return $this;
    }

    /**
     * Gets customer_branch_id
     *
     * @return int|null
     */
    public function getCustomerBranchId()
    {
        return $this->container['customer_branch_id'];
    }

    /**
     * Sets customer_branch_id
     *
     * @param int|null $customer_branch_id Идентификатор дочерней компании отправителя
     *
     * @return self
     */
    public function setCustomerBranchId($customer_branch_id)
    {
        if (is_null($customer_branch_id)) {
            throw new \InvalidArgumentException('non-nullable customer_branch_id cannot be null');
        }
        $this->container['customer_branch_id'] = $customer_branch_id;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return int|null
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param int|null $distance Общее расстояние по заказу (м)
     *
     * @return self
     */
    public function setDistance($distance)
    {
        if (is_null($distance)) {
            throw new \InvalidArgumentException('non-nullable distance cannot be null');
        }
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \MagDv\Cargomart\Dto\OrderDetails[]|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \MagDv\Cargomart\Dto\OrderDetails[]|null $details Список деталей/комментариев/описаний заказа
     *
     * @return self
     */
    public function setDetails($details)
    {
        if (is_null($details)) {
            throw new \InvalidArgumentException('non-nullable details cannot be null');
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets refuses
     *
     * @return \MagDv\Cargomart\Dto\ProposalRefuse[]|null
     */
    public function getRefuses()
    {
        return $this->container['refuses'];
    }

    /**
     * Sets refuses
     *
     * @param \MagDv\Cargomart\Dto\ProposalRefuse[]|null $refuses Отказы от заказа Экспедитора
     *
     * @return self
     */
    public function setRefuses($refuses)
    {
        if (is_null($refuses)) {
            throw new \InvalidArgumentException('non-nullable refuses cannot be null');
        }
        $this->container['refuses'] = $refuses;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string[]|null
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string[]|null $tag Тэги заказа
     *
     * @return self
     */
    public function setTag($tag)
    {
        if (is_null($tag)) {
            throw new \InvalidArgumentException('non-nullable tag cannot be null');
        }
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets view_count
     *
     * @return float|null
     */
    public function getViewCount()
    {
        return $this->container['view_count'];
    }

    /**
     * Sets view_count
     *
     * @param float|null $view_count Количество просмотров
     *
     * @return self
     */
    public function setViewCount($view_count)
    {
        if (is_null($view_count)) {
            throw new \InvalidArgumentException('non-nullable view_count cannot be null');
        }
        $this->container['view_count'] = $view_count;

        return $this;
    }

    /**
     * Gets pin_count
     *
     * @return float|null
     */
    public function getPinCount()
    {
        return $this->container['pin_count'];
    }

    /**
     * Sets pin_count
     *
     * @param float|null $pin_count Количество сохранений
     *
     * @return self
     */
    public function setPinCount($pin_count)
    {
        if (is_null($pin_count)) {
            throw new \InvalidArgumentException('non-nullable pin_count cannot be null');
        }
        $this->container['pin_count'] = $pin_count;

        return $this;
    }

    /**
     * Gets additional_consignor_price
     *
     * @return \MagDv\Cargomart\Dto\PriceValue|null
     */
    public function getAdditionalConsignorPrice()
    {
        return $this->container['additional_consignor_price'];
    }

    /**
     * Sets additional_consignor_price
     *
     * @param \MagDv\Cargomart\Dto\PriceValue|null $additional_consignor_price Дополнительная надбавка для цены отправителя
     *
     * @return self
     */
    public function setAdditionalConsignorPrice($additional_consignor_price)
    {
        if (is_null($additional_consignor_price)) {
            throw new \InvalidArgumentException('non-nullable additional_consignor_price cannot be null');
        }
        $this->container['additional_consignor_price'] = $additional_consignor_price;

        return $this;
    }

    /**
     * Gets additional_carrier_price
     *
     * @return \MagDv\Cargomart\Dto\PriceValue|null
     */
    public function getAdditionalCarrierPrice()
    {
        return $this->container['additional_carrier_price'];
    }

    /**
     * Sets additional_carrier_price
     *
     * @param \MagDv\Cargomart\Dto\PriceValue|null $additional_carrier_price Дополнительная надбавка для цены перевозчика
     *
     * @return self
     */
    public function setAdditionalCarrierPrice($additional_carrier_price)
    {
        if (is_null($additional_carrier_price)) {
            throw new \InvalidArgumentException('non-nullable additional_carrier_price cannot be null');
        }
        $this->container['additional_carrier_price'] = $additional_carrier_price;

        return $this;
    }

    /**
     * Gets access
     *
     * @return \MagDv\Cargomart\Dto\ProposalAccess
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param \MagDv\Cargomart\Dto\ProposalAccess $access Описание доступных действий по объекту.
     *
     * @return self
     */
    public function setAccess($access)
    {
        if (is_null($access)) {
            throw new \InvalidArgumentException('non-nullable access cannot be null');
        }
        $this->container['access'] = $access;

        return $this;
    }

    /**
     * Gets proxy
     *
     * @return \MagDv\Cargomart\Dto\ProposalProxy|null
     */
    public function getProxy()
    {
        return $this->container['proxy'];
    }

    /**
     * Sets proxy
     *
     * @param \MagDv\Cargomart\Dto\ProposalProxy|null $proxy proxy
     *
     * @return self
     */
    public function setProxy($proxy)
    {
        if (is_null($proxy)) {
            throw new \InvalidArgumentException('non-nullable proxy cannot be null');
        }
        $this->container['proxy'] = $proxy;

        return $this;
    }

    /**
     * Gets price_strategy_type
     *
     * @return \MagDv\Cargomart\Dto\OrderPriceStrategyType|null
     */
    public function getPriceStrategyType()
    {
        return $this->container['price_strategy_type'];
    }

    /**
     * Sets price_strategy_type
     *
     * @param \MagDv\Cargomart\Dto\OrderPriceStrategyType|null $price_strategy_type price_strategy_type
     *
     * @return self
     */
    public function setPriceStrategyType($price_strategy_type)
    {
        if (is_null($price_strategy_type)) {
            throw new \InvalidArgumentException('non-nullable price_strategy_type cannot be null');
        }
        $this->container['price_strategy_type'] = $price_strategy_type;

        return $this;
    }

    /**
     * Gets bidding_type
     *
     * @return \MagDv\Cargomart\Dto\OrderBiddingType|null
     */
    public function getBiddingType()
    {
        return $this->container['bidding_type'];
    }

    /**
     * Sets bidding_type
     *
     * @param \MagDv\Cargomart\Dto\OrderBiddingType|null $bidding_type bidding_type
     *
     * @return self
     */
    public function setBiddingType($bidding_type)
    {
        if (is_null($bidding_type)) {
            throw new \InvalidArgumentException('non-nullable bidding_type cannot be null');
        }
        $this->container['bidding_type'] = $bidding_type;

        return $this;
    }

    /**
     * Gets bidding
     *
     * @return \MagDv\Cargomart\Dto\OrderDraftExpeditorBidding|null
     */
    public function getBidding()
    {
        return $this->container['bidding'];
    }

    /**
     * Sets bidding
     *
     * @param \MagDv\Cargomart\Dto\OrderDraftExpeditorBidding|null $bidding Настройки торгов
     *
     * @return self
     */
    public function setBidding($bidding)
    {
        if (is_null($bidding)) {
            throw new \InvalidArgumentException('non-nullable bidding cannot be null');
        }
        $this->container['bidding'] = $bidding;

        return $this;
    }

    /**
     * Gets bid_count
     *
     * @return int|null
     */
    public function getBidCount()
    {
        return $this->container['bid_count'];
    }

    /**
     * Sets bid_count
     *
     * @param int|null $bid_count Количество ставок на заказ
     *
     * @return self
     */
    public function setBidCount($bid_count)
    {
        if (is_null($bid_count)) {
            throw new \InvalidArgumentException('non-nullable bid_count cannot be null');
        }
        $this->container['bid_count'] = $bid_count;

        return $this;
    }

    /**
     * Gets carrier_asks_count
     *
     * @return int|null
     */
    public function getCarrierAsksCount()
    {
        return $this->container['carrier_asks_count'];
    }

    /**
     * Sets carrier_asks_count
     *
     * @param int|null $carrier_asks_count Количество оставленных ставок перевозчиков по заявке
     *
     * @return self
     */
    public function setCarrierAsksCount($carrier_asks_count)
    {
        if (is_null($carrier_asks_count)) {
            throw new \InvalidArgumentException('non-nullable carrier_asks_count cannot be null');
        }

        if (($carrier_asks_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $carrier_asks_count when calling ProposalCardFull., must be bigger than or equal to 0.');
        }

        $this->container['carrier_asks_count'] = $carrier_asks_count;

        return $this;
    }

    /**
     * Gets has_carrier_sign
     *
     * @return bool|null
     */
    public function getHasCarrierSign()
    {
        return $this->container['has_carrier_sign'];
    }

    /**
     * Sets has_carrier_sign
     *
     * @param bool|null $has_carrier_sign Подписана заявка перевозчиком-победителем
     *
     * @return self
     */
    public function setHasCarrierSign($has_carrier_sign)
    {
        if (is_null($has_carrier_sign)) {
            throw new \InvalidArgumentException('non-nullable has_carrier_sign cannot be null');
        }
        $this->container['has_carrier_sign'] = $has_carrier_sign;

        return $this;
    }

    /**
     * Gets payment_invoice_status
     *
     * @return \MagDv\Cargomart\Dto\PaymentInvoiceStatus[]|null
     */
    public function getPaymentInvoiceStatus()
    {
        return $this->container['payment_invoice_status'];
    }

    /**
     * Sets payment_invoice_status
     *
     * @param \MagDv\Cargomart\Dto\PaymentInvoiceStatus[]|null $payment_invoice_status payment_invoice_status
     *
     * @return self
     */
    public function setPaymentInvoiceStatus($payment_invoice_status)
    {
        if (is_null($payment_invoice_status)) {
            throw new \InvalidArgumentException('non-nullable payment_invoice_status cannot be null');
        }
        $this->container['payment_invoice_status'] = $payment_invoice_status;

        return $this;
    }

    /**
     * Gets roadmap_events_count
     *
     * @return int
     */
    public function getRoadmapEventsCount()
    {
        return $this->container['roadmap_events_count'];
    }

    /**
     * Sets roadmap_events_count
     *
     * @param int $roadmap_events_count Количество событий требующих действия
     *
     * @return self
     */
    public function setRoadmapEventsCount($roadmap_events_count)
    {
        if (is_null($roadmap_events_count)) {
            throw new \InvalidArgumentException('non-nullable roadmap_events_count cannot be null');
        }

        if (($roadmap_events_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $roadmap_events_count when calling ProposalCardFull., must be bigger than or equal to 0.');
        }

        $this->container['roadmap_events_count'] = $roadmap_events_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


