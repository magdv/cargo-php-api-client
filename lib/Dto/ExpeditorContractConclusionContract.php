<?php
/**
 * ExpeditorContractConclusionContract
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MagDv\Cargomart\Dto;

use \ArrayAccess;
use \MagDv\Cargomart\ObjectSerializer;

/**
 * ExpeditorContractConclusionContract Class Doc Comment
 *
 * @category Class
 * @description Объект документа договора
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ExpeditorContractConclusionContract implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'expeditor-contract-conclusion-contract';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'number' => 'string',
        'generate_start_date' => '\DateTime',
        'contract_pdf_url' => 'string',
        'contract_html_url' => 'string',
        'issue_certificate_url' => 'string',
        'issue_certificate_file_id' => 'string',
        'contract_file_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'number' => null,
        'generate_start_date' => 'date',
        'contract_pdf_url' => null,
        'contract_html_url' => null,
        'issue_certificate_url' => null,
        'issue_certificate_file_id' => null,
        'contract_file_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'number' => false,
        'generate_start_date' => false,
        'contract_pdf_url' => false,
        'contract_html_url' => false,
        'issue_certificate_url' => false,
        'issue_certificate_file_id' => false,
        'contract_file_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'number',
        'generate_start_date' => 'generateStartDate',
        'contract_pdf_url' => 'contractPdfUrl',
        'contract_html_url' => 'contractHtmlUrl',
        'issue_certificate_url' => 'issueCertificateUrl',
        'issue_certificate_file_id' => 'issueCertificateFileId',
        'contract_file_id' => 'contractFileId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'generate_start_date' => 'setGenerateStartDate',
        'contract_pdf_url' => 'setContractPdfUrl',
        'contract_html_url' => 'setContractHtmlUrl',
        'issue_certificate_url' => 'setIssueCertificateUrl',
        'issue_certificate_file_id' => 'setIssueCertificateFileId',
        'contract_file_id' => 'setContractFileId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'generate_start_date' => 'getGenerateStartDate',
        'contract_pdf_url' => 'getContractPdfUrl',
        'contract_html_url' => 'getContractHtmlUrl',
        'issue_certificate_url' => 'getIssueCertificateUrl',
        'issue_certificate_file_id' => 'getIssueCertificateFileId',
        'contract_file_id' => 'getContractFileId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('generate_start_date', $data ?? [], null);
        $this->setIfExists('contract_pdf_url', $data ?? [], null);
        $this->setIfExists('contract_html_url', $data ?? [], null);
        $this->setIfExists('issue_certificate_url', $data ?? [], null);
        $this->setIfExists('issue_certificate_file_id', $data ?? [], null);
        $this->setIfExists('contract_file_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['generate_start_date'] === null) {
            $invalidProperties[] = "'generate_start_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number Номер договора.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets generate_start_date
     *
     * @return \DateTime
     */
    public function getGenerateStartDate()
    {
        return $this->container['generate_start_date'];
    }

    /**
     * Sets generate_start_date
     *
     * @param \DateTime $generate_start_date Дата и время начала генерации документа
     *
     * @return self
     */
    public function setGenerateStartDate($generate_start_date)
    {
        if (is_null($generate_start_date)) {
            throw new \InvalidArgumentException('non-nullable generate_start_date cannot be null');
        }
        $this->container['generate_start_date'] = $generate_start_date;

        return $this;
    }

    /**
     * Gets contract_pdf_url
     *
     * @return string|null
     */
    public function getContractPdfUrl()
    {
        return $this->container['contract_pdf_url'];
    }

    /**
     * Sets contract_pdf_url
     *
     * @param string|null $contract_pdf_url Ссылка на сгенерированный документ
     *
     * @return self
     */
    public function setContractPdfUrl($contract_pdf_url)
    {
        if (is_null($contract_pdf_url)) {
            throw new \InvalidArgumentException('non-nullable contract_pdf_url cannot be null');
        }
        $this->container['contract_pdf_url'] = $contract_pdf_url;

        return $this;
    }

    /**
     * Gets contract_html_url
     *
     * @return string|null
     */
    public function getContractHtmlUrl()
    {
        return $this->container['contract_html_url'];
    }

    /**
     * Sets contract_html_url
     *
     * @param string|null $contract_html_url Ссылка на сгенерированный документ
     *
     * @return self
     */
    public function setContractHtmlUrl($contract_html_url)
    {
        if (is_null($contract_html_url)) {
            throw new \InvalidArgumentException('non-nullable contract_html_url cannot be null');
        }
        $this->container['contract_html_url'] = $contract_html_url;

        return $this;
    }

    /**
     * Gets issue_certificate_url
     *
     * @return string|null
     */
    public function getIssueCertificateUrl()
    {
        return $this->container['issue_certificate_url'];
    }

    /**
     * Sets issue_certificate_url
     *
     * @param string|null $issue_certificate_url Ссылка на сертификат ключей ПЭП
     *
     * @return self
     */
    public function setIssueCertificateUrl($issue_certificate_url)
    {
        if (is_null($issue_certificate_url)) {
            throw new \InvalidArgumentException('non-nullable issue_certificate_url cannot be null');
        }
        $this->container['issue_certificate_url'] = $issue_certificate_url;

        return $this;
    }

    /**
     * Gets issue_certificate_file_id
     *
     * @return string|null
     */
    public function getIssueCertificateFileId()
    {
        return $this->container['issue_certificate_file_id'];
    }

    /**
     * Sets issue_certificate_file_id
     *
     * @param string|null $issue_certificate_file_id ID файла сертификата ключей ПЭП
     *
     * @return self
     */
    public function setIssueCertificateFileId($issue_certificate_file_id)
    {
        if (is_null($issue_certificate_file_id)) {
            throw new \InvalidArgumentException('non-nullable issue_certificate_file_id cannot be null');
        }
        $this->container['issue_certificate_file_id'] = $issue_certificate_file_id;

        return $this;
    }

    /**
     * Gets contract_file_id
     *
     * @return string|null
     */
    public function getContractFileId()
    {
        return $this->container['contract_file_id'];
    }

    /**
     * Sets contract_file_id
     *
     * @param string|null $contract_file_id ID файла договора
     *
     * @return self
     */
    public function setContractFileId($contract_file_id)
    {
        if (is_null($contract_file_id)) {
            throw new \InvalidArgumentException('non-nullable contract_file_id cannot be null');
        }
        $this->container['contract_file_id'] = $contract_file_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


