<?php
/**
 * CompanyApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace MagDv\Cargomart\Test\Api;

use \MagDv\Cargomart\Configuration;
use \MagDv\Cargomart\ApiException;
use \MagDv\Cargomart\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * CompanyApiTest Class Doc Comment
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CompanyApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for apiV2CompanyBranchAcGet
     *
     * Поиск дочерних компаний для автокомплита.
     *
     */
    public function testApiV2CompanyBranchAcGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyBranchHighlightedGet
     *
     * Метод возвращает список рекламируемых филиалов компаний..
     *
     */
    public function testApiV2CompanyBranchHighlightedGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyGet
     *
     * Метод возвращает все компании с учетом фильтров.
     *
     */
    public function testApiV2CompanyGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashBranchGet
     *
     * Получение списка дочерних компаний..
     *
     */
    public function testApiV2CompanyHashBranchGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashCarParkGet
     *
     * автопарк перевозчика..
     *
     */
    public function testApiV2CompanyHashCarParkGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashCarParkPatch
     *
     * автопарк перевозчика..
     *
     */
    public function testApiV2CompanyHashCarParkPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashCarriageDirectionGet
     *
     * Направления перевозок отправителя..
     *
     */
    public function testApiV2CompanyHashCarriageDirectionGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashCarriageDirectionPatch
     *
     * Направления перевозок отправителя..
     *
     */
    public function testApiV2CompanyHashCarriageDirectionPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashCarriageRegionGet
     *
     * Области перевозок..
     *
     */
    public function testApiV2CompanyHashCarriageRegionGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashCarriageRegionPatch
     *
     * Области перевозок..
     *
     */
    public function testApiV2CompanyHashCarriageRegionPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashCommunicationContactsGet
     *
     * Получение контактов для связи..
     *
     */
    public function testApiV2CompanyHashCommunicationContactsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashCommunicationContactsPut
     *
     * Метод редактирует контакты для связи..
     *
     */
    public function testApiV2CompanyHashCommunicationContactsPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashDisabledDelete
     *
     * Метод удаляет компанию из чёрного списка..
     *
     */
    public function testApiV2CompanyHashDisabledDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashDisabledPost
     *
     * Метод добавления компании в чёрный список..
     *
     */
    public function testApiV2CompanyHashDisabledPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashDocumentGet
     *
     * Метод возвращает список документов, загруженный компанией..
     *
     */
    public function testApiV2CompanyHashDocumentGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashGet
     *
     * Метод возвращает реквизиты организации по хэшу..
     *
     */
    public function testApiV2CompanyHashGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashKonturReportGet
     *
     * Получение ссылки на отчет контура по компании..
     *
     */
    public function testApiV2CompanyHashKonturReportGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashLogoDelete
     *
     * Метод удаляет логотип организации..
     *
     */
    public function testApiV2CompanyHashLogoDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashLogoGet
     *
     * Получения логотипа оранизации..
     *
     */
    public function testApiV2CompanyHashLogoGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashLogoPost
     *
     * Метод сохраняет логотип организации..
     *
     */
    public function testApiV2CompanyHashLogoPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashPartnerConditionsGet
     *
     * Получение условий партнёрства..
     *
     */
    public function testApiV2CompanyHashPartnerConditionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashPartnerConditionsPatch
     *
     * Метод редактирует условия партнёрства..
     *
     */
    public function testApiV2CompanyHashPartnerConditionsPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashPartnerInvitePut
     *
     * Метод добавляет компанию в партнёры.
     *
     */
    public function testApiV2CompanyHashPartnerInvitePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashPartnerMessageGet
     *
     * Получение последнего партнёрского сообщения от компании..
     *
     */
    public function testApiV2CompanyHashPartnerMessageGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashPatch
     *
     * Метод редактирует данные компании..
     *
     */
    public function testApiV2CompanyHashPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashPut
     *
     * Метод сохраняет реквизиты своей организации..
     *
     */
    public function testApiV2CompanyHashPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashRequirementGet
     *
     * Требования отправителя к перевозкам..
     *
     */
    public function testApiV2CompanyHashRequirementGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashRequirementPatch
     *
     * Требования отправителя к перевозкам..
     *
     */
    public function testApiV2CompanyHashRequirementPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashReviewGet
     *
     * Отзывы на компанию..
     *
     */
    public function testApiV2CompanyHashReviewGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashReviewPost
     *
     * Отзыв на компанию..
     *
     */
    public function testApiV2CompanyHashReviewPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashSettingsGet
     *
     * Получение настроек компании..
     *
     */
    public function testApiV2CompanyHashSettingsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyHashSettingsPatch
     *
     * Сохранение настроек компании..
     *
     */
    public function testApiV2CompanyHashSettingsPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanyLocalityGet
     *
     * регионы доступные для перевозок..
     *
     */
    public function testApiV2CompanyLocalityGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanySelfBranchGet
     *
     * Получение списка дочерних компаний..
     *
     */
    public function testApiV2CompanySelfBranchGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanySelfCarParkGet
     *
     * Мой автопарк..
     *
     */
    public function testApiV2CompanySelfCarParkGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanySelfCarParkPatch
     *
     * автопарк перевозчика..
     *
     */
    public function testApiV2CompanySelfCarParkPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanySelfCarriageDirectionGet
     *
     * Направления своих перевозок..
     *
     */
    public function testApiV2CompanySelfCarriageDirectionGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanySelfCarriageDirectionPatch
     *
     * Направления перевозок отправителя..
     *
     */
    public function testApiV2CompanySelfCarriageDirectionPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanySelfCarriageRegionGet
     *
     * Области своих перевозок..
     *
     */
    public function testApiV2CompanySelfCarriageRegionGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanySelfCarriageRegionPatch
     *
     * Области перевозок..
     *
     */
    public function testApiV2CompanySelfCarriageRegionPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanySelfCommunicationContactsGet
     *
     * Получение контактов для связи..
     *
     */
    public function testApiV2CompanySelfCommunicationContactsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanySelfCommunicationContactsPut
     *
     * Метод редактирует контакты для связи..
     *
     */
    public function testApiV2CompanySelfCommunicationContactsPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanySelfGet
     *
     * Метод возвращает реквизиты моей организации..
     *
     */
    public function testApiV2CompanySelfGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanySelfPartnerConditionsGet
     *
     * Получение условий партнёрства..
     *
     */
    public function testApiV2CompanySelfPartnerConditionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanySelfPartnerConditionsPatch
     *
     * Метод редактирует условия партнёрства..
     *
     */
    public function testApiV2CompanySelfPartnerConditionsPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanySelfPatch
     *
     * Метод редактирует данные моей компании..
     *
     */
    public function testApiV2CompanySelfPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanySelfPut
     *
     * Метод сохраняет реквизиты своей организации..
     *
     */
    public function testApiV2CompanySelfPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanySelfRequirementGet
     *
     * Мои требования к перевозкам..
     *
     */
    public function testApiV2CompanySelfRequirementGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanySelfRequirementPatch
     *
     * Требования отправителя к перевозкам..
     *
     */
    public function testApiV2CompanySelfRequirementPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanySelfSettingsGet
     *
     * Получение настроек своей компании..
     *
     */
    public function testApiV2CompanySelfSettingsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2CompanySelfSettingsPatch
     *
     * Сохранение настроек компании..
     *
     */
    public function testApiV2CompanySelfSettingsPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
