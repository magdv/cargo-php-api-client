<?php
/**
 * UserApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace MagDv\Cargomart\Test\Api;

use Http\Discovery\Psr18ClientDiscovery;
use MagDv\Cargomart\CargoApi\AuthApi;
use MagDv\Cargomart\CargoApi\UserApi;
use \MagDv\Cargomart\Configuration;
use \MagDv\Cargomart\ApiException;
use MagDv\Cargomart\Dto\LoginPasswordRequest;
use MagDv\Cargomart\Dto\UserLoginRequest;
use \MagDv\Cargomart\ObjectSerializer;
use PHPUnit\Framework\TestCase;


/**
 * UserApiTest Class Doc Comment
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
        $params = parse_ini_file(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . '.env');

        foreach ($params as $name => $value) {
            putenv($name . '=' . $value);
        }
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for apiV2UserCountActiveGet
     *
     * Количество активных пользователей.
     *
     */
    public function testApiV2UserCountActiveGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserLoginPost
     *
     * Авторизация пользователя и выдача токена..
     *
     */
    public function testApiV2UserLoginPost()
    {
        $url = getenv('CARGO_URL');
        $login = getenv('LOGIN');
        $password = getenv('PASSWORD');
        $httpClient = Psr18ClientDiscovery::find();
        $config = new Configuration();
        $config->setHost($url);

        $apiInstance = new UserApi(
            $httpClient,
            $config
        );
        $login_password_request = new UserLoginRequest();
        $login_password_request->setLogin($login);
        $login_password_request->setPassword($password);
        $result = $apiInstance->apiV2UserLoginPost($login_password_request);
        $tokenData = $result->getData()['token'];
        $token = $tokenData->token;
        self::assertNotNull($token);
    }

    /**
     * Test case for apiV2UserLogoutPost
     *
     * Завершение сеанса работы..
     *
     */
    public function testApiV2UserLogoutPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserRecoveryIdConfirmPost
     *
     * Подтверждение восстановления/ввод проверочного кода..
     *
     */
    public function testApiV2UserRecoveryIdConfirmPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserRecoveryIdGet
     *
     * Получение процесса восстановления пароля..
     *
     */
    public function testApiV2UserRecoveryIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserRecoveryIdResendCodePost
     *
     * Повторная отправка проверочного кода..
     *
     */
    public function testApiV2UserRecoveryIdResendCodePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserRecoveryPost
     *
     * Запрос на восстановление пароля..
     *
     */
    public function testApiV2UserRecoveryPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserSelfCertificateGet
     *
     * Получить список сертификатов текущего пользователя.
     *
     */
    public function testApiV2UserSelfCertificateGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserSelfContactEmailConfirmPost
     *
     * Подтерждение контактного email..
     *
     */
    public function testApiV2UserSelfContactEmailConfirmPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserSelfContactEmailDelete
     *
     * Удаление контактного email..
     *
     */
    public function testApiV2UserSelfContactEmailDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserSelfContactEmailPost
     *
     * Создание контактного email..
     *
     */
    public function testApiV2UserSelfContactEmailPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserSelfContactEmailResendPost
     *
     * Запрос на повторную отправку кода..
     *
     */
    public function testApiV2UserSelfContactEmailResendPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserSelfDelete
     *
     * Удаление пользователя самим собой..
     *
     */
    public function testApiV2UserSelfDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserSelfDsPhoneVerificationCodePost
     *
     * deprecated! Выслать код для подтверждения.
     *
     */
    public function testApiV2UserSelfDsPhoneVerificationCodePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserSelfEmailChangeDelete
     *
     * Отмена запроса на изменение почты..
     *
     */
    public function testApiV2UserSelfEmailChangeDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserSelfEmailChangePost
     *
     * Посылает email на подтверждение почты..
     *
     */
    public function testApiV2UserSelfEmailChangePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserSelfEmailCodeConfirmPost
     *
     * Подтверждение телефона по коду из email..
     *
     */
    public function testApiV2UserSelfEmailCodeConfirmPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserSelfEmailCodeSendPost
     *
     * Посылает повторные email с кодом подтверждения..
     *
     */
    public function testApiV2UserSelfEmailCodeSendPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserSelfGet
     *
     * Возвращает реквизиты своей организации..
     *
     */
    public function testApiV2UserSelfGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserSelfPasswordChangePut
     *
     * Меняет пароль пользователю..
     *
     */
    public function testApiV2UserSelfPasswordChangePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserSelfPhoneChangeDelete
     *
     * Отменяет запроса на изменение телефона..
     *
     */
    public function testApiV2UserSelfPhoneChangeDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserSelfPhoneChangePost
     *
     * Запрос на изменение телефона..
     *
     */
    public function testApiV2UserSelfPhoneChangePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserSelfPut
     *
     * Сохраняет данные пользователя..
     *
     */
    public function testApiV2UserSelfPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserSelfSmsCodeConfirmPost
     *
     * Подтверждение телефона по коду из смс..
     *
     */
    public function testApiV2UserSelfSmsCodeConfirmPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserSelfSmsCodeSendPost
     *
     * Посылает повторную смс..
     *
     */
    public function testApiV2UserSelfSmsCodeSendPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserSelfTokenPost
     *
     * Создание одноразового токена.
     *
     */
    public function testApiV2UserSelfTokenPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UserSelfUsedeskTokenPut
     *
     * Обновляет токен с useDesk..
     *
     */
    public function testApiV2UserSelfUsedeskTokenPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
