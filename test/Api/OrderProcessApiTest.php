<?php
/**
 * OrderProcessApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cargomart API v2
 *
 * REST-Full API для логистической биржи cargomart.ru
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@cargomart.ru
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace MagDv\Cargomart\Test\Api;

use \MagDv\Cargomart\Configuration;
use \MagDv\Cargomart\ApiException;
use \MagDv\Cargomart\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * OrderProcessApiTest Class Doc Comment
 *
 * @category Class
 * @package  MagDv\Cargomart
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderProcessApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for apiV2OrderOrderIdCarrierContactPatch
     *
     * Отправить список кураторов перевозчика для добавления..
     *
     */
    public function testApiV2OrderOrderIdCarrierContactPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdCarrierRefusePost
     *
     * Оформить отказ перевозчика..
     *
     */
    public function testApiV2OrderOrderIdCarrierRefusePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdConsignorContactPut
     *
     * Заменить список кураторов заказчика..
     *
     */
    public function testApiV2OrderOrderIdConsignorContactPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdConsignorDocumentPost
     *
     * Загрузить документы отправителя..
     *
     */
    public function testApiV2OrderOrderIdConsignorDocumentPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdConsignorRefusePost
     *
     * Оформить отказ отправителя..
     *
     */
    public function testApiV2OrderOrderIdConsignorRefusePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdDocumentPost
     *
     * Загрузить документы перевозчика..
     *
     */
    public function testApiV2OrderOrderIdDocumentPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdExpeditorAssignmentGet
     *
     * Скачать поручение экспедитору..
     *
     */
    public function testApiV2OrderOrderIdExpeditorAssignmentGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdFinishPost
     *
     * Ручное завершение заказа.
     *
     */
    public function testApiV2OrderOrderIdFinishPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdGeneralPartnerDocumentPost
     *
     * Генеральный партнер прикрепляет документы..
     *
     */
    public function testApiV2OrderOrderIdGeneralPartnerDocumentPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdGeneralPartnerProposalTemplateGet
     *
     * Генеральный партнер. Скачать заяку на заказ для ГП..
     *
     */
    public function testApiV2OrderOrderIdGeneralPartnerProposalTemplateGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdGeneralPartnerProxyTemplateGet
     *
     * Генеральный партнер. Скачать доверенность на заказ для ГП..
     *
     */
    public function testApiV2OrderOrderIdGeneralPartnerProxyTemplateGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdGeneralPartnerTemplateApprovePost
     *
     * Генеральный партнер создает документы из шаблонов..
     *
     */
    public function testApiV2OrderOrderIdGeneralPartnerTemplateApprovePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdInvoiceGpCarrierGet
     *
     * Получение данных о платежах генерального партнера для перевозчика.
     *
     */
    public function testApiV2OrderOrderIdInvoiceGpCarrierGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdInvoiceGpCarrierPut
     *
     * Добавление данных о платежах генерального партнера для перевозчика.
     *
     */
    public function testApiV2OrderOrderIdInvoiceGpCarrierPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdMonitoringPost
     *
     * Добавить ссылку на отслеживание..
     *
     */
    public function testApiV2OrderOrderIdMonitoringPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdProposalGet
     *
     * Скачать заявку на заказ..
     *
     */
    public function testApiV2OrderOrderIdProposalGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdProxyConsignorAdditionalInfoGet
     *
     * Получить добавочные данные, или проверить их наличие..
     *
     */
    public function testApiV2OrderOrderIdProxyConsignorAdditionalInfoGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdProxyConsignorAdditionalInfoPost
     *
     * Заполнить или изменить добавочные данные в будущую довереность на самовывоз c\\без факсимиле..
     *
     */
    public function testApiV2OrderOrderIdProxyConsignorAdditionalInfoPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoGet
     *
     * Получить добавочные данные, или проверить их наличие..
     *
     */
    public function testApiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoPatch
     *
     * Заполнить или изменить добавочные данные в будущую довереность на самовывоз c\\без факсимиле..
     *
     */
    public function testApiV2OrderOrderIdProxyConsignorCarrierAdditionalInfoPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdProxyConsignorCarrierGet
     *
     * Скачать доверенность на заказ для заказчика..
     *
     */
    public function testApiV2OrderOrderIdProxyConsignorCarrierGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdProxyConsignorCarrierSendPost
     *
     * Отправить ссылку доверенности на самовывоз по email..
     *
     */
    public function testApiV2OrderOrderIdProxyConsignorCarrierSendPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdProxyConsignorCarrierWithFacsimileGet
     *
     * Скачать доверенность на заказ для заказчика с факсимиле..
     *
     */
    public function testApiV2OrderOrderIdProxyConsignorCarrierWithFacsimileGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdProxyConsignorEmailGet
     *
     * Получить список email для точки погрузки, для плеча..
     *
     */
    public function testApiV2OrderOrderIdProxyConsignorEmailGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdProxyConsignorEmailPost
     *
     * Отправка доверенности на список email.
     *
     */
    public function testApiV2OrderOrderIdProxyConsignorEmailPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdProxyPost
     *
     * Загрузить доверенность..
     *
     */
    public function testApiV2OrderOrderIdProxyPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdProxyTemplateGet
     *
     * Скачать шаблон доверенности..
     *
     */
    public function testApiV2OrderOrderIdProxyTemplateGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdRefreshDriverPatch
     *
     * Обновить данные водителя в заказе.
     *
     */
    public function testApiV2OrderOrderIdRefreshDriverPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdRefreshTruckPatch
     *
     * Обновить данные транспортного средства в заказе.
     *
     */
    public function testApiV2OrderOrderIdRefreshTruckPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdRefuseAppealPost
     *
     * Жалоба на отказ..
     *
     */
    public function testApiV2OrderOrderIdRefuseAppealPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdRefuseCancelPost
     *
     * Отменить отказ от заказа..
     *
     */
    public function testApiV2OrderOrderIdRefuseCancelPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdRefusePost
     *
     * Оформить отказ заказа Экспедитора..
     *
     */
    public function testApiV2OrderOrderIdRefusePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdRepeatPost
     *
     * Переразместить заказ..
     *
     */
    public function testApiV2OrderOrderIdRepeatPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdReusePost
     *
     * Переразместить экспедиторский заказ..
     *
     */
    public function testApiV2OrderOrderIdReusePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2OrderOrderIdTruckDriverPatch
     *
     * Прикрепить к заказу водителя и машину..
     *
     */
    public function testApiV2OrderOrderIdTruckDriverPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
